# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:4
msgid "Compiling with .NET"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:9
msgid "Requirements"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:11
msgid "`.NET SDK 6.0+ <https://dotnet.microsoft.com/download>`_"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:13
msgid "You can use ``dotnet --info`` to check which .NET SDK versions are installed."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:16
msgid "Enable the .NET module"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:18
msgid "C# support for Godot has historically used the `Mono <https://www.mono-project.com/>`_ runtime instead of the `.NET Runtime <https://github.com/dotnet/runtime>`_ and internally many things are still named ``mono`` instead of ``dotnet`` or otherwise referred to as ``mono``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:24
msgid "By default, the .NET module is disabled when building. To enable it, add the option ``module_mono_enabled=yes`` to the SCons command line, while otherwise following the instructions for building the desired Godot binaries."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:29
msgid "Generate the glue"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:31
msgid "Parts of the sources of the managed libraries are generated from the ClassDB. These source files must be generated before building the managed libraries. They can be generated by any .NET-enabled Godot editor binary by running it with the parameters ``--headless --generate-mono-glue`` followed by the path to an output directory. This path must be ``modules/mono/glue`` in the Godot directory::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:40
msgid "This command will tell Godot to generate the C# bindings for the Godot API at ``modules/mono/glue/GodotSharp/GodotSharp/Generated``, and the C# bindings for the editor tools at ``modules/mono/glue/GodotSharp/GodotSharpEditor/Generated``. Once these files are generated, you can build Godot's managed libraries for all the desired targets without having to repeat this process."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:46
msgid "``<godot_binary>`` refers to the editor binary you compiled with the .NET module enabled. Its exact name will differ based on your system and configuration, but should be of the form ``bin/godot.<platform>.editor.<arch>.mono``, e.g. ``bin/godot.linuxbsd.editor.x86_64.mono`` or ``bin/godot.windows.editor.x86_32.mono.exe``. Be especially aware of the **.mono** suffix! If you've previously compiled Godot without .NET support, you might have similarly named binaries without this suffix. These binaries can't be used to generate the .NET glue."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:55
msgid "The glue sources must be regenerated every time the ClassDB-registered API changes. That is, for example, when a new method is registered to the scripting API or one of the parameters of such a method changes. Godot will print an error at startup if there is an API mismatch between ClassDB and the glue sources."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:62
msgid "Building the managed libraries"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:64
msgid "Once you have generated the .NET glue, you can build the managed libraries with the ``build_assemblies.py`` script::"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:69
msgid "If everything went well, the ``GodotSharp`` directory, containing the managed libraries, should have been created in the ``bin`` directory."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:72
msgid "By default, all development builds share a version number, which can cause some issues with caching of the NuGet packages. To solve this issue either use ``GODOT_VERSION_STATUS`` to give every build a unique version or delete ``GodotNuGetFallbackFolder`` after every build to clear the package cache."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:78
msgid "Unlike \"classical\" Godot builds, when building with the .NET module enabled (and depending on the target platform), a data directory may be created both for the editor and for exported projects. This directory is important for proper functioning and must be distributed together with Godot. More details about this directory in :ref:`Data directory<compiling_with_dotnet_data_directory>`."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:86
msgid "Build Platform"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:88
msgid "Provide the ``--godot-platform=<platform>`` argument to control for which platform specific the libraries are built. Omit this argument to build for the current system."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:92
msgid "This currently only controls the inclusion of the support for Visual Studio as an external editor, the libraries are otherwise identical."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:96
msgid "NuGet packages"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:98
msgid "The API assemblies, source generators, and custom MSBuild project SDK are distributed as NuGet packages. This is all transparent to the user, but it can make things complicated during development."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:102
msgid "In order to use Godot with a development version of those packages, a local NuGet source must be created where MSBuild can find them."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:105
msgid "First, pick a location for the local NuGet source. If you don't have a preference, create an empty directory at one of these recommended locations:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:108
msgid "On Windows, ``C:\\Users\\<username>\\MyLocalNugetSource``"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:109
msgid "On Linux, \\*BSD, etc., ``~/MyLocalNugetSource``"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:111
msgid "This path is referred to later as ``<my_local_source>``."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:113
msgid "After picking a directory, run this .NET CLI command to configure NuGet to use your local source:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:120
msgid "When you run the ``build_assemblies.py`` script, pass ``<my_local_source>`` to the ``--push-nupkgs-local`` option:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:127
msgid "This option ensures the packages will be added to the specified local NuGet source and that conflicting versions of the package are removed from the NuGet cache. It's recommended to always use this option when building the C# solutions during development to avoid mistakes."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:133
msgid "Double Precision Support (REAL_T_IS_DOUBLE)"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:135
msgid "When building Godot with double precision support, i.e. the ``precision=double`` argument for scons, the managed libraries must be adjusted to match by passing the ``--precision=double`` argument:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:144
msgid "Examples"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:147
msgid "Example (Windows)"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:164
msgid "Example (Linux, \\*BSD)"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:182
msgid "Data directory"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:184
msgid "The data directory is a dependency for Godot binaries built with the .NET module enabled. It contains important files for the correct functioning of Godot. It must be distributed together with the Godot executable."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:189
msgid "Editor"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:191
msgid "The name of the data directory for the Godot editor will always be ``GodotSharp``. This directory contains an ``Api`` subdirectory with the Godot API assemblies and a ``Tools`` subdirectory with the tools required by the editor, like the ``GodotTools`` assemblies and its dependencies."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:196
msgid "On macOS, if the Godot editor is distributed as a bundle, the ``GodotSharp`` directory may be placed in the ``<bundle_name>.app/Contents/Resources/`` directory inside the bundle."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:201
msgid "Export templates"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:203
msgid "The data directory for exported projects is generated by the editor during the export. It is named ``data_<APPNAME>_<ARCH>``, where ``<APPNAME>`` is the application name as specified in the project setting ``application/config/name`` and ``<ARCH>`` is the current architecture of the export."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:208
msgid "In the case of multi-architecture exports multiple such data directories will be generated."
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:212
msgid "Command-line options"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:214
msgid "The following is the list of command-line options available when building with the .NET module:"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:217
msgid "**module_mono_enabled**\\ =yes | **no**"
msgstr ""

#: ../../docs/contributing/development/compiling/compiling_with_dotnet.rst:219
msgid "Build Godot with the .NET module enabled."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
