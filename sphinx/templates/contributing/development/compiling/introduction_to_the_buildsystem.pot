# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:4
msgid "Introduction to the buildsystem"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:9
msgid "Godot is a primarily C++ project and it :ref:`uses the SCons build system. <doc_faq_why_scons>` We love SCons for how maintainable and easy to set up it makes our buildsystem. And thanks to that compiling Godot from source can be as simple as running::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:15
msgid "This produces an *export template* for your current platform, operating system, and architecture. An export template is a build of the engine that is used for running exported projects. To build the *editor* instead you can run the following command::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:21
msgid "If you plan to debug or develop the engine, then you might want to add another option to the command::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:26
msgid "Following sections in the article will explain these and other universal options in more detail. But before you can compile Godot, you need to install a few prerequisites. Please refer to the platform documentation to learn more:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:30
msgid ":ref:`doc_compiling_for_android`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:31
msgid ":ref:`doc_compiling_for_ios`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:32
msgid ":ref:`doc_compiling_for_linuxbsd`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:33
msgid ":ref:`doc_compiling_for_macos`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:34
msgid ":ref:`doc_compiling_for_web`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:35
msgid ":ref:`doc_compiling_for_windows`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:37
msgid "These articles cover in great detail both how to setup your environment to compile Godot on a specific platform, and how to compile for that platform. Please feel free to go back and forth between them and this article to reference platform-specific and universal configuration options."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:42
msgid "Using multi-threading"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:44
msgid "The build process may take a while, depending on how powerful your system is. By default, Godot's SCons setup is configured to use all CPU threads but one (to keep the system responsive during compilation). If you want to adjust how many CPU threads SCons will use, use the ``-j <threads>`` parameter to specify how many threads will be used for the build."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:49
msgid "Example for using 4 threads::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:54
msgid "Platform selection"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:56
msgid "Godot's build system will begin by detecting the platforms it can build for. If not detected, the platform will simply not appear on the list of available platforms. The build requirements for each platform are described in the rest of this tutorial section."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:61
msgid "SCons is invoked by just calling ``scons``. If no platform is specified, SCons will detect the target platform automatically based on the host platform. It will then start building for the target platform right away."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:65
msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:79
msgid "To build for a platform (for example, ``linuxbsd``), run with the ``platform=`` (or ``p=`` to make it short) argument:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:89
msgid "Resulting binary"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:91
msgid "The resulting binaries will be placed in the ``bin/`` subdirectory, generally with this naming convention::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:96
msgid "For the previous build attempt, the result would look like this::"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:101
msgid "This means that the binary is for Linux *or* \\*BSD (*not* both), is not optimized, has the whole editor compiled in, and is meant for 64 bits."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:104
msgid "A Windows binary with the same configuration will look like this:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:111
msgid "Copy that binary to any location you like, as it contains the Project Manager, editor and all means to execute the game. However, it lacks the data to export it to the different platforms. For that the export templates are needed (which can be either downloaded from `godotengine.org <https://godotengine.org/>`__, or you can build them yourself)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:117
msgid "Aside from that, there are a few standard options that can be set in all build targets, and which will be explained below."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:123
msgid "Target"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:125
msgid "Target controls if the editor is contained and debug flags are used. All builds are optimized. Each mode means:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:128
msgid "``target=editor``: Build with editor, optimized, with debugging code (defines: ``TOOLS_ENABLED``, ``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:129
msgid "``target=template_debug``: Build with C++ debugging symbols (defines: ``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:130
msgid "``target=template_release``: Build without symbols (defines: ``-O3``/``/O2``)"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:132
msgid "The editor is enabled by default in all PC targets (Linux, Windows, macOS), disabled for everything else. Disabling the editor produces a binary that can run projects but does not include the editor or the Project Manager."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:141
msgid "Development and production aliases"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:143
msgid "When creating builds for development (running debugging/:ref:`profiling <doc_using_cpp_profilers>` tools), you often have different goals compared to production builds (making binaries as fast and small as possible)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:147
msgid "Godot provides two aliases for this purpose:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:149
msgid "``dev_mode=yes`` is an alias for ``verbose=yes warnings=extra werror=yes tests=yes``. This enables warnings-as-errors behavior (similar to Godot's continuous integration setup) and also builds :ref:`unit tests <doc_unit_testing>` so you can run them locally."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:153
msgid "``production=yes`` is an alias for ``use_static_cpp=yes debug_symbols=no lto=auto``. Statically linking libstdc++ allows for better binary portability when compiling for Linux. This alias also enables link-time optimization when compiling for Linux, Web and Windows with MinGW, but keeps LTO disabled when compiling for macOS, iOS or Windows with MSVC. This is because LTO on those platforms is very slow to link or has issues with the generated code."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:160
msgid "You can manually override options from those aliases by specifying them on the same command line with different values. For example, you can use ``scons production=yes debug_symbols=yes`` to create production-optimized binaries with debugging symbols included."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:166
msgid "Dev build"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:170
msgid "``dev_build`` should **not** be confused with ``dev_mode``, which is an alias for several development-related options (see above)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:173
msgid "When doing engine development the ``dev_build`` option can be used together with ``target`` to enable dev-specific code. ``dev_build`` defines ``DEV_ENABLED``, disables optimization (``-O0``/``/0d``), enables generating debug symbols, and does not define ``NDEBUG`` (so ``assert()`` works in thirdparty libraries)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:182
msgid "This flag appends the ``.dev`` suffix (for development) to the generated binary name."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:187
msgid "There are additional SCons options to enable *sanitizers*, which are tools you can enable at compile-time to better debug certain engine issues. See :ref:`doc_using_sanitizers` for more information."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:192
msgid "Debugging symbols"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:194
msgid "By default, ``debug_symbols=no`` is used, which means **no** debugging symbols are included in compiled binaries. Use ``debug_symbols=yes`` to include debug symbols within compiled binaries, which allows debuggers and profilers to work correctly. Debugging symbols are also required for Godot's crash stacktraces to display with references to source code files and lines."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:200
msgid "The downside is that debugging symbols are large files (significantly larger than the binaries themselves). As a result, official binaries currently do not include debugging symbols. This means you need to compile Godot yourself to have access to debugging symbols."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:205
msgid "When using ``debug_symbols=yes``, you can also use ``separate_debug_symbols=yes`` to put debug information in a separate file with a ``.debug`` suffix. This allows distributing both files independently. Note that on Windows, when compiling with MSVC, debugging information is *always* written to a separate ``.pdb`` file regardless of ``separate_debug_symbols``."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:213
msgid "Use the ``strip <path/to/binary>`` command to remove debugging symbols from a binary you've already compiled."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:217
msgid "Optimization level"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:219
msgid "Several compiler optimization levels can be chosen from:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:221
msgid "``optimize=speed_trace`` *(default when targeting non-Web platforms)*: Favors execution speed at the cost of larger binary size. Optimizations may sometimes negatively impact debugger usage (stack traces may be less accurate. If this occurs to you, use ``optimize=debug`` instead."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:225
msgid "``optimize=speed``: Favors even more execution speed, at the cost of even larger binary size compared to ``optimize=speed_trace``. Even less friendly to debugging compared to ``optimize=debug``, as this uses the most aggressive optimizations available."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:229
msgid "``optimize=size`` *(default when targeting the Web platform)*: Favors small binaries at the cost of slower execution speed."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:231
msgid "``optimize=debug``: Only enables optimizations that do not impact debugging in any way. This results in faster binaries than ``optimize=none``, but slower binaries than ``optimize=speed_trace``."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:234
msgid "``optimize=none``: Do not perform any optimization. This provides the fastest build times, but the slowest execution times."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:236
msgid "``optimize=custom`` *(advanced users only)*: Do not pass optimization arguments to the C/C++ compilers. You will have to pass arguments manually using the ``CFLAGS``, ``CCFLAGS`` and ``CXXFLAGS`` SCons options."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:241
msgid "Architecture"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:243
msgid "The ``arch`` option is meant to control the CPU or OS version intended to run the binaries. It is focused mostly on desktop platforms and ignored everywhere else."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:247
msgid "Supported values for the ``arch`` option are **auto**, **x86_32**, **x86_64**, **arm32**, **arm64**, **rv64**, **ppc32**, **ppc64** and **wasm32**."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:254
msgid "This flag appends the value of ``arch`` to resulting binaries when relevant.  The default value ``arch=auto`` detects the architecture that matches the host platform."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:261
msgid "Custom modules"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:263
msgid "It's possible to compile modules residing outside of Godot's directory tree, along with the built-in modules."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:266
msgid "A ``custom_modules`` build option can be passed to the command line before compiling. The option represents a comma-separated list of directory paths containing a collection of independent C++ modules that can be seen as C++ packages, just like the built-in ``modules/`` directory."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:271
msgid "For instance, it's possible to provide both relative, absolute, and user directory paths containing such modules:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:280
msgid "If there's any custom module with the exact directory name as a built-in module, the engine will only compile the custom one. This logic can be used to override built-in module implementations."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:286
msgid ":ref:`doc_custom_modules_in_cpp`"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:289
msgid "Cleaning generated files"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:291
msgid "Sometimes, you may encounter an error due to generated files being present. You can remove them by using ``scons --clean <options>``, where ``<options>`` is the list of build options you've used to build Godot previously."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:295
msgid "Alternatively, you can use ``git clean -fixd`` which will clean build artifacts for all platforms and configurations. Beware, as this will remove all untracked and ignored files in the repository. Don't run this command if you have uncommitted work!"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:301
msgid "Other build options"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:303
msgid "There are several other build options that you can use to configure the way Godot should be built (compiler, debug options, etc.) as well as the features to include/disable."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:307
msgid "Check the output of ``scons --help`` for details about each option for the version you are willing to compile."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:313
msgid "Overriding the build options"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:316
msgid "Using a file"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:318
msgid "The default ``custom.py`` file can be created at the root of the Godot Engine source to initialize any SCons build options passed via the command line:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:330
msgid "You can also disable some of the builtin modules before compiling, saving some time it takes to build the engine. See :ref:`doc_optimizing_for_size` page for more details."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:335
msgid "You can use the online `Godot build options generator <https://godot-build-options-generator.github.io/>`__ to generate a ``custom.py`` file containing SCons options. You can then save this file and place it at the root of your Godot source directory."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:340
msgid "Another custom file can be specified explicitly with the ``profile`` command line option, both overriding the default build configuration:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:347
msgid "Build options set from the file can be overridden by the command line options."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:350
msgid "It's also possible to override the options conditionally:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:365
msgid "Using the SCONSFLAGS"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:367
msgid "``SCONSFLAGS`` is an environment variable which is used by the SCons to set the options automatically without having to supply them via the command line."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:370
msgid "For instance, you may want to force a number of CPU threads with the aforementioned ``-j`` option for all future builds:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:387
msgid "SCU (single compilation unit) build"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:389
msgid "Regular builds tend to be bottlenecked by including large numbers of headers in each compilation translation unit. Primarily to speed up development (rather than for production builds), Godot offers a \"single compilation unit\" build (aka \"Unity / Jumbo\" build)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:394
msgid "For the folders accelerated by this option, multiple ``.cpp`` files are compiled in each translation unit, so headers can be shared between multiple files, which can dramatically decrease build times."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:398
msgid "To make a SCU build, use the ``scu_build=yes`` SCons option."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:400
msgid "When developing a Pull Request using SCU builds, be sure to make a regular build prior to submitting the PR. This is because SCU builds by nature include headers from earlier ``.cpp`` files in the translation unit, therefore won't catch all the includes you will need in a regular build. The CI will catch these errors but it will usually be faster to catch them on a local build on your machine."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:408
msgid "Export templates"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:410
msgid "Official export templates are downloaded from the Godot Engine site: `godotengine.org <https://godotengine.org/>`__. However, you might want to build them yourself (in case you want newer ones, you are using custom modules, or simply don't trust your own shadow)."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:415
msgid "If you download the official export templates package and unzip it, you will notice that most files are optimized binaries or packages for each platform:"
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:438
msgid "To create those yourself, follow the instructions detailed for each platform in this same tutorial section. Each platform explains how to create its own template."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:442
msgid "The ``version.txt`` file should contain the corresponding Godot version identifier. This file is used to install export templates in a version-specific directory to avoid conflicts. For instance, if you are building export templates for Godot 3.1.1, ``version.txt`` should contain ``3.1.1.stable`` on the first line (and nothing else). This version identifier is based on the ``major``, ``minor``, ``patch`` (if present) and ``status`` lines of the `version.py file in the Godot Git repository <https://github.com/godotengine/godot/blob/master/version.py>`__."
msgstr ""

#: ../../docs/contributing/development/compiling/introduction_to_the_buildsystem.rst:450
msgid "If you are developing for multiple platforms, macOS is definitely the most convenient host platform for cross-compilation, since you can cross-compile for every target. Linux and Windows come in second place, but Linux has the advantage of being the easier platform to set this up."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
