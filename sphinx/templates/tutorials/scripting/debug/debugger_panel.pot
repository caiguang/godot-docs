# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:4
msgid "Debugger panel"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:6
msgid "Many of Godot's debugging tools, including the debugger, can be found in the debugger panel at the bottom of the screen. Click on **Debugger** to open it."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:11
msgid "The debugger panel is split into several tabs, each focusing on a specific task."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:14
msgid "Debugger"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:16
msgid "The Debugger tab opens automatically when the GDScript compiler reaches a breakpoint in your code."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:19
msgid "It gives you a `stack trace <https://en.wikipedia.org/wiki/Stack_trace>`__, information about the state of the object, and buttons to control the program's execution. When the debugger breaks on a breakpoint, a green triangle arrow is visible in the script editor's gutter. This arrow indicates the line of code the debugger broke on."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:27
msgid "You can create a breakpoint by clicking the gutter in the left of the script editor (on the left of the line numbers). When hovering this gutter, you will see a transparent red dot appearing, which turns into an opaque red dot after the breakpoint is placed by clicking. Click the red dot again to remove the breakpoint. Breakpoints created this way persist across editor restarts, even if the script wasn't saved when exiting the editor."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:34
msgid "You can also use the ``breakpoint`` keyword in GDScript to create a breakpoint that is stored in the script itself. Unlike breakpoints created by clicking in the gutter, this keyword-based breakpoint is persistent across different machines when using version control."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:39
msgid "You can use the buttons in the top-right corner to:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:41
msgid "Skip all breakpoints. That way, you can save breakpoints for future debugging sessions."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:43
msgid "Copy the current error message."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:44
msgid "**Step Into** the code. This button takes you to the next line of code, and if it's a function, it steps line-by-line through the function."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:46
msgid "**Step Over** the code. This button goes to the next line of code, but it doesn't step line-by-line through functions."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:48
msgid "**Break**. This button pauses the game's execution."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:49
msgid "**Continue**. This button resumes the game after a breakpoint or pause."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:52
msgid "Errors"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:54
msgid "This is where error and warning messages are printed while running the game."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:56
msgid "You can disable specific warnings in **Project Settings > Debug > GDScript**."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:59
msgid "Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:61
msgid "The profiler is used to see what code is running while your project is in use, and how that effects performance."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:66
msgid "A detailed explanation of how to use the profiler can be found in the dedicated :ref:`doc_the_profiler` page."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:70
msgid "Visual Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:72
msgid "The Visual Profiler can be used to monitor what is taking the most time when rendering a frame on the CPU and GPU respectively. This allows tracking sources of potential CPU and GPU bottlenecks caused by rendering."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:78
msgid "The Visual Profiler only measures CPU time taken for rendering tasks, such as performing draw calls. The Visual Profiler does **not** include CPU time taken for other tasks such as scripting and physics. Use the standard Profiler tab to track non-rendering-related CPU tasks."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:83
msgid "To use the visual profiler, run the project, switch to the **Visual Profiler** tab within the Debugger bottom panel, then click **Start**:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:89
msgid "Visual Profiler tab after clicking Start, waiting for a few seconds, then clicking Stop"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:89
msgid "Visual Profiler tab after clicking **Start**, waiting for a few seconds, then clicking **Stop**"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:91
msgid "You will see categories and results appearing as the profiler is running. Graph lines also appear, with the left side being a CPU framegraph and the right side being a GPU framegraph."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:95
msgid "Click **Stop** to finish profiling, which will keep the results visible but frozen in place. Results remain visible after stopping the running project, but not after exiting the editor."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:99
msgid "Click on result categories on the left to highlight them in the CPU and GPU graphs on the right. You can also click on the graph to move the cursor to a specific frame number and highlight the selected data type in the result categories on the left."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:104
msgid "You can switch the result display between a time value (in milliseconds per frame) or a percentage of the target frametime (which is currently hardcoded to 16.67 milliseconds, or 60 FPS)."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:108
msgid "If framerate spikes occur during profiling, this can cause the graph to be poorly scaled. Disable **Fit to Frame** so that the graph will zoom onto the 60 FPS+ portion."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:114
msgid "Remember that Visual Profiler results can vary **heavily** based on viewport resolution, which is determined by the window size if using the ``disabled`` or ``canvas_items`` :ref:`stretch modes <doc_multiple_resolutions>`."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:119
msgid "When comparing results across different runs, make sure to use the same viewport size for all runs."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:122
msgid "Visual Profiler is supported when using any rendering method (Forward+, Mobile or Compatibility), but the reported categories will vary depending on the current rendering method as well as the enabled graphics features. For example, when using Forward+, a simple 2D scene with shadow-casting lights will result in the following categories appearing:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:131
#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:131
msgid "Example results from a 2D scene in the Visual Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:133
msgid "To give another example with Forward+, a 3D scene with shadow-casting lights and various effects enabled will result in the following categories enabled:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:139
#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:139
msgid "Example results from a 3D scene in the Visual Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:141
msgid "Notice how in the 3D example, several of the categories have **(Parallel)** appended to their name. This hints that multiple tasks are being performed in parallel on the GPU. This generally means that disabling only one of the features involved won't improve performance as much as anticipated, as the other task still needs to be performed sequentially."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:148
msgid "Network Profiler"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:150
msgid "The Network Profiler contains a list of all the nodes that communicate over the multiplayer API and, for each one, some counters on the amount of incoming and outgoing network interactions. It also features a bandwidth meter that displays the total bandwidth usage at any given moment."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:157
msgid "The bandwidth meter does **not** take the :ref:`doc_high_level_multiplayer` API's own compression system into account. This means that changing the compression algorithm used will not change the metrics reported by the bandwidth meter."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:163
msgid "Monitors"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:165
msgid "The monitors are graphs of several aspects of the game while its running such as FPS, memory usage, how many nodes are in a scene and more. All monitors keep track of stats automatically, so even if one monitor isn't open while the game is running, you can open it later and see how the values changed."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:172
msgid "In addition to the default performance monitors, you can also create :ref:`custom performance monitors <doc_custom_performance_monitors>` to track arbitrary values in your project."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:177
msgid "Video RAM"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:179
msgid "The **Video RAM** tab shows the video RAM usage of the game while it is running. It provides a list of every resource using video RAM by resource path, the type of resource it is, what format it is in, and how much Video RAM that resource is using. There is also a total video RAM usage number at the top right of the panel."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:187
msgid "Misc"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:189
msgid "The **Misc** tab contains tools to identify the control nodes you are clicking at runtime:"
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:192
msgid "**Clicked Control** tells you where the clicked node is in the scene tree."
msgstr ""

#: ../../docs/tutorials/scripting/debug/debugger_panel.rst:193
msgid "**Clicked Control Type** tells you the type of the node you clicked is."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
