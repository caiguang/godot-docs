# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:4
msgid "C# basics"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:9
msgid "This page provides a brief introduction to C#, both what it is and how to use it in Godot. Afterwards, you may want to look at :ref:`how to use specific features <doc_c_sharp_features>`, read about the :ref:`differences between the C# and the GDScript API <doc_c_sharp_differences>`, and (re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:16
msgid "C# is a high-level programming language developed by Microsoft. In Godot, it is implemented with .NET 6.0."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:21
msgid "Projects written in C# using Godot 4 currently cannot be exported to the web platform. To use C# on the web platform, consider Godot 3 instead. Android and iOS platform support is available as of Godot 4.2, but is experimental and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:28
msgid "This is **not** a full-scale tutorial on the C# language as a whole. If you aren't already familiar with its syntax or features, see the `Microsoft C# guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a suitable introduction elsewhere."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:36
msgid "Prerequisites"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:38
msgid "Godot bundles the parts of .NET needed to run already compiled games. However, Godot does not bundle the tools required to build and compile games, such as MSBuild and the C# compiler. These are included in the .NET SDK, and need to be installed separately."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:43
msgid "In summary, you must have installed the .NET SDK **and** the .NET-enabled version of Godot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:46
msgid "Download and install the latest stable version of the SDK from the `.NET download page <https://dotnet.microsoft.com/download>`__."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:51
msgid "Be sure to install the 64-bit version of the SDK(s) if you are using the 64-bit version of Godot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:54
msgid "If you are building Godot from source, make sure to follow the steps to enable .NET support in your build as outlined in the :ref:`doc_compiling_with_dotnet` page."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:59
msgid "Configuring an external editor"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:61
msgid "C# support in Godot's built-in script editor is minimal. Consider using an external IDE or editor, such as  `Visual Studio Code <https://code.visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, debugging, and other useful features for C#. To select an external editor in Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. Under **Dotnet**, click on **Editor**, and select your external editor of choice. Godot currently supports the following external editors:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:70
msgid "Visual Studio 2022"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:71
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:94
msgid "Visual Studio Code"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:72
msgid "MonoDevelop"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:73
msgid "Visual Studio for Mac"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:74
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:79
msgid "JetBrains Rider"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:76
msgid "See the following sections for how to configure an external editor:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:81
msgid "After reading the \"Prerequisites\" section, you can download and install `JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:84
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:99
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:132
msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:86
msgid "Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:88
msgid "In Rider:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:90
msgid "Set **MSBuild version** to **.NET Core**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:91
msgid "Install the **Godot support** plugin."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:96
msgid "After reading the \"Prerequisites\" section, you can download and install `Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS Code)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:101
msgid "Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio Code**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:103
msgid "In Visual Studio Code:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:105
msgid "Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp>`__ extension."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:109
msgid "If you are using Linux you need to install the `Mono SDK <https://www.mono-project.com/download/stable/#download-lin>`__ for the C# tools plugin to work."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:112
msgid "To configure a project for debugging, you need a ``tasks.json`` and ``launch.json`` file in the ``.vscode`` folder with the necessary configuration. An example configuration can be found `here <https://github.com/godotengine/godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch.json`` file, make sure the ``program`` parameter in the relevant configuration points to your Godot executable, either by changing it to the path of the executable or by defining a ``GODOT4`` environment variable that points to the executable. Now, when you start the debugger in Visual Studio Code, your Godot project will run."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:120
msgid "Visual Studio (Windows only)"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:122
msgid "Download and install the latest version of `Visual Studio <https://visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the required SDKs if you have the correct workloads selected, so you don't need to manually install the things listed in the \"Prerequisites\" section."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:128
msgid "While installing Visual Studio, select this workload:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:130
msgid ".NET desktop development"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:134
msgid "Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:136
msgid "If you see an error like \"Unable to find package Godot.NET.Sdk\", your NuGet configuration may be incorrect and need to be fixed."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:139
msgid "A simple way to fix the NuGet configuration file is to regenerate it. In a file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the ``NuGet.Config`` file. When you build your Godot project again, the file will be automatically created with default values."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:145
msgid "Creating a C# script"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:147
msgid "After you successfully set up C# for Godot, you should see the following option when selecting **Attach Script** in the context menu of a node in your scene:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:152
msgid "Note that while some specifics change, most concepts work the same when using C# for scripting. If you're new to Godot, you may want to follow the tutorials on :ref:`doc_scripting` at this point. While some documentation pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:159
msgid "Project setup and workflow"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:161
msgid "When you create the first C# script, Godot initializes the C# project files for your Godot project. This includes generating a C# solution (``.sln``) and a project file (``.csproj``), as well as some utility files and folders (``.godot/mono``). All of these but ``.godot/mono`` are important and should be committed to your version control system. Everything under ``.godot`` can be safely added to the ignore list of your VCS. When troubleshooting, it can sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:172
msgid "Example"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:174
msgid "Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:200
msgid "As you can see, functions normally in global scope in GDScript like Godot's ``print`` function are available in the ``GD`` static class which is part of the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:`@GlobalScope <class_@globalscope>`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:208
msgid "Keep in mind that the class you wish to attach to your node should have the same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:211
msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:214
msgid "General differences between C# and GDScript"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:216
msgid "The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. Where possible, fields and getters/setters have been converted to properties. In general, the C# Godot API strives to be as idiomatic as is reasonably possible."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:220
msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:224
msgid "You need to (re)build the project assemblies whenever you want to see new exported variables or signals in the editor. This build can be manually triggered by clicking the **Build** button in the top right corner of the editor."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:231
msgid "You will also need to rebuild the project assemblies to apply changes in \"tool\" scripts."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:235
msgid "Current gotchas and known issues"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:237
msgid "As C# support is quite new in Godot, there are some growing pains and things that need to be ironed out. Below is a list of the most important issues you should be aware of when diving into C# in Godot, but if in doubt, also take a look over the official `issue tracker for .NET issues <https://github.com/godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:243
msgid "Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:244
msgid "State is currently not saved and restored when hot-reloading, with the exception of exported variables."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:246
msgid "Attached C# scripts should refer to a class that has a class name that matches the file name."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:248
msgid "There are some methods such as ``Get()``/``Set()``, ``Call()``/``CallDeferred()`` and signal connection method ``Connect()`` that rely on Godot's ``snake_case`` API naming conventions. So when using e.g. ``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API is expecting the original ``snake_case`` version ``add_child``. However, you can use any custom properties or methods without this limitation. Prefer using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and ``SignalName`` to avoid extra ``StringName`` allocations and worrying about snake_case naming."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:258
msgid "As of Godot 4.0, exporting .NET projects is supported for desktop platforms (Linux, Windows and macOS). Other platforms will gain support in future 4.x releases."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:263
msgid "Common pitfalls"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:265
msgid "You might encounter the following error when trying to modify some values in Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:281
msgid "This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are copied on assignment, meaning that when you retrieve such an object from a property or an indexer, you get a copy of it, not the object itself. Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:286
msgid "The workaround is simple: retrieve the entire struct, modify the value you want to modify, and reassign the property."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:295
msgid "Since C# 10, it is also possible to use `with expressions <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:302
msgid "You can read more about this error on the `C# language reference <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs1612>`_."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:305
msgid "Performance of C# in Godot"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:307
msgid "According to some preliminary `benchmarks <https://github.com/cart/godot3-bunnymark>`_, the performance of C# in Godot — while generally in the same order of magnitude — is roughly **~4×** that of GDScript in some naive cases. C++ is still a little faster; the specifics are going to vary according to your use case. GDScript is likely fast enough for most general scripting workloads."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:313
msgid "Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require native (interop) calls as they talk to Godot's C++ core. Consider assigning values of such properties into a local variable if you need to modify or read them multiple times at a single code location:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:349
msgid "Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API requires marshalling which is comparatively pricey."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:352
msgid "The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` incur both the native interop and marshalling costs as the ``string`` has to be marshalled and passed to the respective native constructor."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:356
msgid "Using NuGet packages in Godot"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:358
msgid "`NuGet <https://www.nuget.org/>`_ packages can be installed and used with Godot, as with any C# project. Many IDEs are able to add packages directly. They can also be added manually by adding the package reference in the ``.csproj`` file located in the project root:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:372
msgid "As of Godot 3.2.3, Godot automatically downloads and sets up newly added NuGet packages the next time it builds the project."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:376
msgid "Profiling your C# code"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:378
msgid "The following tools may be used for performance and memory profiling of your managed code:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:380
msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:381
msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:382
msgid "Visual Studio."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_basics.rst:384
msgid "Profiling managed and unmanaged code at once is possible with both JetBrains tools and Visual Studio, but limited to Windows."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
