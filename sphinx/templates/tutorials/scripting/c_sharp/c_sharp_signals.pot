# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:4
msgid "C# signals"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:6
msgid "For a detailed explanation of signals in general, see the :ref:`doc_signals` section in the step by step tutorial."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:9
msgid "While it is still possible to use signals through the ``Connect``/``Disconnect`` API, C# gives us a more idiomatic way to implement the :ref:`observer pattern<doc_key_concepts_signals>`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:13
msgid "Signals as C# events"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:15
msgid "To provide more type-safety, Godot signals are also all available through `events <https://learn.microsoft.com/en-us/dotnet/csharp/events-overview>`_. You can handle these events, as any other event, with the ``+=`` and ``-=`` operators."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:23
msgid "In addition, you can always access signal names associated with a node type through its nested ``SignalName`` class. This is useful when, for example, you want to await on a signal (see :ref:`doc_c_sharp_differences_await`)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:32
msgid "While all engine signals connected as events are automatically disconnected when nodes are freed, custom signals aren't. Meaning that: you will need to manually disconnect (using ``-=``) all the custom signals you connected as C# events (using ``+=``)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:37
msgid "Custom signals as C# events"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:39
msgid "To declare a custom event in your C# script, use the ``[Signal]`` attribute on a public delegate type. Note that the name of this delegate needs to end with ``EventHandler``."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:50
msgid "Once this is done, Godot will create the appropriate events automatically behind the scenes. You can then use said events as you'd do for any other Godot signal. Note that events are named using your delegate's name minus the final ``EventHandler`` part."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:69
msgid "If you want to connect to these signals in the editor, you will need to (re)build the project to see them appear."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:72
msgid "You can click the **Build** button in the upper-right corner of the editor to do so."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:75
msgid "Signal emission"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:77
msgid "To emit signals, use the ``EmitSignal`` method. Note that, as for signals defined by the engine, your custom signal names are listed under the nested ``SignalName`` class."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:88
msgid "In contrast with other C# events, you cannot use ``Invoke`` to raise events tied to Godot signals."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:90
msgid "Signals support arguments of any :ref:`Variant-compatible <doc_c_sharp_variant>` type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:92
msgid "Consequently, any ``Node`` or ``RefCounted`` will be compatible automatically, but custom data objects will need to inherit from ``GodotObject`` or one of its subclasses."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:106
msgid "Bound values"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:108
msgid "Sometimes you'll want to bind values to a signal when the connection is established, rather than (or in addition to) when the signal is emitted. To do so, you can use an anonymous function like in the following example."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:112
msgid "Here, the :ref:`Button.Pressed <class_BaseButton_signal_pressed>` signal do not take any argument. But we want to use the same ``ModifyValue`` for both the \"plus\" and \"minus\" buttons. So we bind the modifier value at the time we're connecting the signals."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:135
msgid "Signal creation at runtime"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_signals.rst:137
msgid "Finally, you can create custom signals directly while your game is running. Use the ``AddUserSignal`` method for that. Be aware that it should be executed before any use of said signals (either connecting to them or emitting them). Also, note that signals created this way won't be visible through the ``SignalName`` nested class."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
