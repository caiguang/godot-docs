# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:4
msgid "C# exported properties"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:6
msgid "In Godot, class members can be exported. This means their value gets saved along with the resource (such as the :ref:`scene <class_PackedScene>`) they're attached to. They will also be available for editing in the property editor. Exporting is done by using the ``[Export]`` attribute."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:21
msgid "In that example the value ``5`` will be saved, and after building the current project it will be visible in the property editor."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:24
msgid "One of the fundamental benefits of exporting member variables is to have them visible and editable in the editor. This way, artists and game designers can modify values that later influence how the program runs. For this, a special export syntax is provided."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:29
msgid "Exporting can only be done with :ref:`Variant-compatible <doc_c_sharp_variant>` types."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:33
msgid "Exporting properties can also be done in GDScript, for information on that see :ref:`doc_gdscript_exports`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:37
msgid "Basic use"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:39
msgid "Exporting can work with fields and properties."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:49
msgid "Exported members can specify a default value; otherwise, the `default value of the type <https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/default-values>`_ is used instead."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:74
msgid "Resources and nodes can be exported."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:85
msgid "Grouping exports"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:87
msgid "It is possible to group your exported properties inside the Inspector with the ``[ExportGroup]`` attribute. Every exported property after this attribute will be added to the group. Start a new group or use ``[ExportGroup(\"\")]`` to break out."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:97
msgid "The second argument of the attribute can be used to only group properties with the specified prefix."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:99
msgid "Groups cannot be nested, use ``[ExportSubgroup]`` to create subgroups within a group."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:109
msgid "You can also change the name of your main category, or create additional categories in the property list with the ``[ExportCategory]`` attribute."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:126
msgid "The list of properties is organized based on the class inheritance, and new categories break that expectation. Use them carefully, especially when creating projects for public use."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:130
msgid "Strings as paths"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:132
msgid "Property hints can be used to export strings as paths"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:134
msgid "String as a path to a file."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:141
msgid "String as a path to a directory."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:148
msgid "String as a path to a file, custom filter provided as hint."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:155
msgid "Using paths in the global filesystem is also possible, but only in scripts in tool mode."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:158
msgid "String as a path to a PNG file in the global filesystem."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:165
msgid "String as a path to a directory in the global filesystem."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:172
msgid "The multiline annotation tells the editor to show a large input field for editing over multiple lines."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:181
msgid "Limiting editor input ranges"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:183
msgid "Using the range property hint allows you to limit what can be input as a value using the editor."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:186
msgid "Allow integer values from 0 to 20."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:193
msgid "Allow integer values from -10 to 20."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:200
msgid "Allow floats from -10 to 20 and snap the value to multiples of 0.2."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:207
msgid "If you add the hints \"or_greater\" and/or \"or_less\" you can go above or below the limits when adjusting the value by typing it instead of using the slider."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:217
msgid "Floats with easing hint"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:219
msgid "Display a visual representation of the 'ease()' function when editing."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:228
msgid "Colors"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:230
msgid "Regular color given as red-green-blue-alpha value."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:237
msgid "Color given as red-green-blue value (alpha will always be 1)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:245
msgid "Nodes"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:247
msgid "Since Godot 4.0, nodes can be directly exported without having to use NodePaths."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:254
msgid "Custom node classes can also be used, see :ref:`doc_c_sharp_global_classes`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:256
msgid "Exporting NodePaths like in Godot 3.x is still possible, in case you need it:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:269
msgid "Resources"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:276
msgid "In the Inspector, you can then drag and drop a resource file from the FileSystem dock into the variable slot."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:279
msgid "Opening the inspector dropdown may result in an extremely long list of possible classes to create, however. Therefore, if you specify a type derived from Resource such as:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:288
msgid "The drop-down menu will be limited to AnimationNode and all its inherited classes. Custom resource classes can also be used, see :ref:`doc_c_sharp_global_classes`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:292
msgid "It must be noted that even if the script is not being run while in the editor, the exported properties are still editable. This can be used in conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:297
msgid "Exporting bit flags"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:299
msgid "Members whose type is an enum with the ``[Flags]`` attribute can be exported and their values are limited to the members of the enum type. The editor will create a widget in the Inspector, allowing to select none, one, or multiple of the enum members. The value will be stored as an integer."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:322
msgid "Integers used as bit flags can store multiple ``true``/``false`` (boolean) values in one property. By using the ``Flags`` property hint, they can be set from the editor."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:332
msgid "You must provide a string description for each flag. In this example, ``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and ``Wind`` corresponds to value 8. Usually, constants should be defined accordingly (e.g. ``private const int ElementWind = 8`` and so on)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:337
#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:399
msgid "You can add explicit values using a colon:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:344
msgid "Only power of 2 values are valid as bit flags options. The lowest allowed value is 1, as 0 means that nothing is selected. You can also add options that are a combination of other flags:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:353
msgid "Export annotations are also provided for the physics and render layers defined in the project settings."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:366
msgid "Using bit flags requires some understanding of bitwise operations. If in doubt, use boolean variables instead."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:370
msgid "Exporting enums"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:372
msgid "Members whose type is an enum can be exported and their values are limited to the members of the enum type. The editor will create a widget in the Inspector, enumerating the following as \"Thing 1\", \"Thing 2\", \"Another Thing\". The value will be stored as an integer."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:388
msgid "Integer and string members can also be limited to a specific list of values using the ``[Export]`` annotation with the ``PropertyHint.Enum`` hint. The editor will create a widget in the Inspector, enumerating the following as Warrior, Magician, Thief. The value will be stored as an integer, corresponding to the index of the selected option (i.e. ``0``, ``1``, or ``2``)."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:406
msgid "If the type is ``string``, the value will be stored as a string."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:413
msgid "If you want to set an initial value, you must specify it explicitly:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:421
msgid "Exporting collections"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:423
msgid "As explained in the :ref:`C# Variant <doc_c_sharp_variant>` documentation, only certain C# arrays and the collection types defined in the ``Godot.Collections`` namespace are Variant-compatible, therefore, only those types can be exported."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:428
msgid "Exporting Godot arrays"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:435
msgid "Using the generic ``Godot.Collections.Array<T>`` allows to specify the type of the array elements which will be used as a hint for the editor. The Inspector will restrict the elements to the specified type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:444
msgid "The default value of Godot arrays is null, a different default can be specified:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:456
msgid "Arrays with specified types which inherit from resource can be set by drag-and-dropping multiple files from the FileSystem dock."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:468
msgid "Exporting Godot dictionaries"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:475
msgid "Using the generic ``Godot.Collections.Dictionary<TKey, TValue>`` allows to specify the type of the key and value elements of the dictionary."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:480
msgid "Typed dictionaries are currently unsupported in the Godot editor, so the Inspector will not restrict the types that can be assigned, potentially resulting in runtime exceptions."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:489
msgid "The default value of Godot dictionaries is null, a different default can be specified:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:502
msgid "Exporting C# arrays"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:504
msgid "C# arrays can exported as long as the element type is a :ref:`Variant-compatible <doc_c_sharp_variant>` type."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:514
msgid "The default value of C# arrays is null, a different default can be specified:"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:526
msgid "Setting exported variables from a tool script"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:528
msgid "When changing an exported variable's value from a script in :ref:`doc_gdscript_tool_mode`, the value in the inspector won't be updated automatically. To update it, call :ref:`NotifyPropertyListChanged() <class_Object_method_notify_property_list_changed>` after setting the exported variable's value."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:535
msgid "Advanced exports"
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:537
msgid "Not every type of export can be provided on the level of the language itself to avoid unnecessary design complexity. The following describes some more or less common exporting features which can be implemented with a low-level API."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:541
msgid "Before reading further, you should get familiar with the way properties are handled and how they can be customized with :ref:`_Set() <class_Object_private_method__set>`, :ref:`_Get() <class_Object_private_method__get>`, and :ref:`_GetPropertyList() <class_Object_private_method__get_property_list>` methods as described in :ref:`doc_accessing_data_or_logic_from_object`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:548
msgid "For binding properties using the above methods in C++, see :ref:`doc_binding_properties_using_set_get_property_list`."
msgstr ""

#: ../../docs/tutorials/scripting/c_sharp/c_sharp_exports.rst:551
msgid "The script must operate in the ``tool`` mode so the above methods can work from within the editor."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
