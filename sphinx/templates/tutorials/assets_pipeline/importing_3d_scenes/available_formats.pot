# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:4
msgid "Available 3D formats"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:6
msgid "When dealing with 3D assets, Godot has a flexible and configurable importer."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:8
msgid "Godot works with *scenes*. This means that the entire scene being worked on in your favorite 3D modeling software will be transferred as close as possible."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:11
msgid "Godot supports the following 3D *scene file formats*:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:13
msgid "glTF 2.0 **(recommended)**. Godot has support for both text (``.gltf``) and binary (``.glb``) formats."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:15
msgid "``.blend`` (Blender). This works by calling Blender to export to glTF in a transparent manner (requires Blender to be installed)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:17
msgid "DAE (COLLADA), an older format that is supported."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:18
msgid "OBJ (Wavefront) format + their MTL material files. This is also supported, but pretty limited given the format's limitations (no support for pivots, skeletons, animations, UV2, PBR materials, ...)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:21
msgid "FBX, supported via `FBX2glTF <https://github.com/godotengine/FBX2glTF>`__ integration. This requires installing an external program that links against the proprietary FBX SDK, so we recommend using other formats listed above (if suitable for your workflow)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:25
msgid "Copy the scene file together with the textures and mesh data (if separate) to the project repository, then Godot will do a full import when focusing the editor window."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:30
msgid "Exporting glTF 2.0 files from Blender (recommended)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:32
msgid "There are 3 ways to export glTF files from Blender:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:34
msgid "As a glTF binary file (``.glb``)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:35
msgid "As a glTF text-based file with embedded binary data (``.gltf`` file)"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:36
msgid "As a glTF text-based file with separate binary data and textures (``.gltf`` file + ``.bin`` file + textures)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:39
msgid "glTF binary files (``.glb``) are the smallest of the three options. They include the mesh and textures set up in Blender. When brought into Godot the textures are part of the object's material file."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:43
msgid "glTF embedded files (``.gltf``) function the same way as binary files. They don't provide extra functionality in Godot, and shouldn't be used since they have a larger file size."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:47
msgid "There are two reasons to use glTF with the textures separate. One is to have the scene description in a text based format and the binary data in a separate binary file. This can be useful for version control if you want to review changes in a text-based format. The second is you need the texture files separate from the material file. If you don't need either of those, glTF binary files are fine."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:54
msgid "The glTF import process first loads the glTF file's data into an in-memory GLTFState class. This data is then used to generate a Godot scene. When importing files at runtime, this scene can be directly added to the tree. The export process is the reverse of this, a Godot scene is converted to a GLTFState class, then the glTF file is generated from that."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:None
msgid "Diagram explaining the runtime import and export process for glTF files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:64
msgid "When importing glTF files in the editor, there are two more steps. After generating the Godot scene, the ResourceImporterScene class is used to apply additional import settings, including settings you set through the Import dock and the Advanced Import Settings dialog. This is then saved as a Godot scene file, which is what gets used when you run/export your game."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:None
msgid "Diagram explaining the editor import process for glTF files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:76
msgid "If your model contains blend shapes (also known as \"shape keys\" and \"morph targets\"), your glTF export setting **Export Deformation Bones Only** needs to be configured to **Enabled** under the Animation export configurations."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:80
msgid "Exporting non-deforming bones anyway will lead to incorrect shading."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:84
msgid "Blender versions older than 3.2 do not export emissive textures with the glTF file. If your model uses one and you're using an older version of Blender, it must be brought in separately."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:88
msgid "By default, Blender has backface culling disabled on materials and will export materials to match how they render in Blender. This means that materials in Godot will have their cull mode set to **Disabled**. This can decrease performance since backfaces will be rendered, even when they are being culled by other faces. To resolve this, enable **Backface Culling** in Blender's Materials tab, then export the scene to glTF again."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:96
msgid "Importing ``.blend`` files directly within Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:100
msgid "This functionality requires Blender 3.0 or later. For best results, we recommend using Blender 3.5 or later, as it includes many fixes to the glTF exporter."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:104
msgid "It is **strongly** recommended to use an official Blender release downloaded from blender.org, as opposed to a Linux distribution package or Flatpak. This avoids any issues related to packaging, such as different library versions that can cause incompatibilities or sandboxing restrictions."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:109
msgid "From Godot 4.0 onwards, the editor can directly import ``.blend`` files by calling `Blender <https://www.blender.org/>`__'s glTF export functionality in a transparent manner."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:113
msgid "This allows you to iterate on your 3D scenes faster, as you can save the scene in Blender, alt-tab back to Godot then see your changes immediately. When working with version control, this is also more efficient as you no longer need to commit a copy of the exported glTF file to version control."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:118
msgid "To use ``.blend`` import, you must install Blender before opening the Godot editor (if opening a project that already contains ``.blend`` files). If you keep Blender installed at its default location, Godot should be able to detect its path automatically. If this isn't the case, configure the path to the directory containing the Blender executable in the Editor Settings (**Filesystem > Import > Blender > Blender 3 Path**)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:125
msgid "If you keep ``.blend`` files within your project folder but don't want them to be imported by Godot, disable **Filesystem > Import > Blender > Enabled** in the advanced Project Settings."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:129
msgid "The ``.blend`` import process converts to glTF first, so it still uses Godot's glTF import code. Therefore, the ``.blend`` import process is the same as the glTF import process, but with an extra step at the beginning."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:None
msgid "Diagram explaining the import process for Blender files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:139
msgid "When working in a team, keep in mind using ``.blend`` files in your project will require *all* team members to have Blender installed. While Blender is a free download, this may add friction when working on the project. ``.blend`` import is also not available on the Android and web editors, as these platforms can't call external programs."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:145
msgid "If this is problematic, consider using glTF scenes exported from Blender instead."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:149
msgid "Exporting DAE files from Blender"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:151
msgid "Blender has built-in COLLADA support, but it does not work properly for the needs of game engines and shouldn't be used as-is. However, scenes exported with the built-in Collada support may still work for simple scenes without animation."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:155
msgid "For complex scenes or scenes that contain animations, Godot provides a `Blender plugin <https://github.com/godotengine/collada-exporter>`_ that will correctly export COLLADA scenes for use in Godot."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:160
msgid "Importing OBJ files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:162
msgid "OBJ is one of the simplest 3D formats out there, so Godot should be able to import most OBJ files successfully. However, OBJ is also a very limited format: it doesn't support skinning, animation, UV2 or PBR materials."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:166
msgid "There are 2 ways to use OBJ meshes in Godot:"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:168
msgid "Load them directly in a MeshInstance3D node, or any other property that expects as mesh (such as GPUParticles3D). This is the default mode."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:170
msgid "Change their import mode to **OBJ as Scene** in the Import dock then restart the editor. This allows you to use the same import options as glTF or Collada scenes, such as unwrapping UV2 on import (for :ref:`doc_using_lightmap_gi`)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:176
msgid "Blender 3.4 and later can export RGB vertex colors in OBJ files (this is a nonstandard extension of the OBJ format). Godot is able to import those vertex colors since Godot 4.0, but they will not be displayed on the material unless you enable **Vertex Color > Use As Albedo** on the material."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:181
msgid "Vertex colors from OBJ meshes keep their original color space once imported (sRGB/linear), but their brightness is clamped to 1.0 (they can't be overbright)."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:186
msgid "Importing FBX files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:188
msgid "When opening a project containing FBX scenes, you will see a dialog asking you to configure FBX import. Click the link in the dialog to download an FBX2glTF binary, then extract the ZIP archive, place the binary anywhere you wish, then specify its path in the dialog."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:193
msgid "If you keep ``.fbx`` files within your project folder but don't want them to be imported by Godot, disable **Filesystem > Import > FBX > Enabled** in the advanced Project Settings."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:197
msgid "The FBX import process converts to glTF first, so it still uses Godot's glTF import code. Therefore, the FBX import process is the same as the glTF import process, but with an extra step at the beginning."
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:None
msgid "Diagram explaining the import process for FBX files in Godot"
msgstr ""

#: ../../docs/tutorials/assets_pipeline/importing_3d_scenes/available_formats.rst:207
msgid "The full installation process for using FBX in Godot is described on the `FBX import page of the Godot website <https://godotengine.org/fbx-import>`__."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
