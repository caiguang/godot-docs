# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:4
msgid "Advanced post-processing"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:9
msgid "This tutorial describes an advanced method for post-processing in Godot. In particular, it will explain how to write a post-processing shader that uses the depth buffer. You should already be familiar with post-processing generally and, in particular, with the methods outlined in the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:14
msgid "In the previous post-processing tutorial, we rendered the scene to a :ref:`Viewport <class_Viewport>` and then rendered the Viewport in a :ref:`SubViewportContainer <class_SubViewportContainer>` to the main scene. One limitation of this method is that we could not access the depth buffer because the depth buffer is only available in shaders and Viewports do not maintain depth information."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:21
msgid "Full screen quad"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:23
msgid "In the :ref:`custom post-processing tutorial <doc_custom_postprocessing>`, we covered how to use a Viewport to make custom post-processing effects. There are two main drawbacks of using a Viewport:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:27
msgid "The depth buffer cannot be accessed"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:28
msgid "The effect of the post-processing shader is not visible in the editor"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:30
msgid "To get around the limitation on using the depth buffer, use a :ref:`MeshInstance3D <class_MeshInstance3D>` with a :ref:`QuadMesh <class_QuadMesh>` primitive. This allows us to use a shader and to access the depth texture of the scene. Next, use a vertex shader to make the quad cover the screen at all times so that the post-processing effect will be applied at all times, including in the editor."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:36
msgid "First, create a new MeshInstance3D and set its mesh to a QuadMesh. This creates a quad centered at position ``(0, 0, 0)`` with a width and height of ``1``. Set the width and height to ``2`` and enable **Flip Faces**. Right now, the quad occupies a position in world space at the origin. However, we want it to move with the camera so that it always covers the entire screen. To do this, we will bypass the coordinate transforms that translate the vertex positions through the difference coordinate spaces and treat the vertices as if they were already in clip space."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:45
msgid "The vertex shader expects coordinates to be output in clip space, which are coordinates ranging from ``-1`` at the left and bottom of the screen to ``1`` at the top and right of the screen. This is why the QuadMesh needs to have height and width of ``2``. Godot handles the transform from model to view space to clip space behind the scenes, so we need to nullify the effects of Godot's transformations. We do this by setting the ``POSITION`` built-in to our desired position. ``POSITION`` bypasses the built-in transformations and sets the vertex position directly."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:61
msgid "Even with this vertex shader, the quad keeps disappearing. This is due to frustum culling, which is done on the CPU. Frustum culling uses the camera matrix and the AABBs of Meshes to determine if the Mesh will be visible *before* passing it to the GPU. The CPU has no knowledge of what we are doing with the vertices, so it assumes the coordinates specified refer to world positions, not clip space positions, which results in Godot culling the quad when we turn away from the center of the scene. In order to keep the quad from being culled, there are a few options:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:69
msgid "Add the QuadMesh as a child to the camera, so the camera is always pointed at it"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:70
msgid "Set the Geometry property ``extra_cull_margin`` as large as possible in the QuadMesh"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:72
msgid "The second option ensures that the quad is visible in the editor, while the first option guarantees that it will still be visible even if the camera moves outside the cull margin. You can also use both options."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:77
msgid "Depth texture"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:79
msgid "To read from the depth texture, we first need to create a texture uniform set to the depth buffer by using ``hint_depth_texture``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:86
msgid "Once defined, the depth texture can be read with the ``texture()`` function."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:92
msgid "Similar to accessing the screen texture, accessing the depth texture is only possible when reading from the current viewport. The depth texture cannot be accessed from another viewport to which you have rendered."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:96
msgid "The values returned by ``depth_texture`` are between ``0.0`` and ``1.0`` and are nonlinear. When displaying depth directly from the ``depth_texture``, everything will look almost white unless it is very close. This is because the depth buffer stores objects closer to the camera using more bits than those further, so most of the detail in depth buffer is found close to the camera. In order to make the depth value align with world or model coordinates, we need to linearize the value. When we apply the projection matrix to the vertex position, the z value is made nonlinear, so to linearize it, we multiply it by the inverse of the projection matrix, which in Godot, is accessible with the variable ``INV_PROJECTION_MATRIX``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:106
msgid "Firstly, take the screen space coordinates and transform them into normalized device coordinates (NDC). NDC run ``-1.0`` to ``1.0`` in ``x`` and ``y`` directions and from ``0.0`` to ``1.0`` in the ``z`` direction when using the Vulkan backend. Reconstruct the NDC using ``SCREEN_UV`` for the ``x`` and ``y`` axis, and the depth value for ``z``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:114
msgid "This tutorial assumes the use of the Vulkan renderer, which uses NDCs with a Z-range of ``[0.0, 1.0]``. In contrast, OpenGL uses NDCs with a Z-range of ``[-1.0, 1.0]``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:124
msgid "Convert NDC to view space by multiplying the NDC by ``INV_PROJECTION_MATRIX``. Recall that view space gives positions relative to the camera, so the ``z`` value will give us the distance to the point."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:137
msgid "Because the camera is facing the negative ``z`` direction, the position will have a negative ``z`` value. In order to get a usable depth value, we have to negate ``view.z``."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:140
msgid "The world position can be constructed from the depth buffer using the following code. Note that the ``INV_VIEW_MATRIX`` is needed to transform the position from view space into world space, so it needs to be passed to the fragment shader with a varying."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:159
msgid "An optimization"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:161
msgid "You can benefit from using a single large triangle rather than using a full screen quad. The reason for this is explained `here <https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes>`_. However, the benefit is quite small and only beneficial when running especially complex fragment shaders."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:166
msgid "Set the Mesh in the MeshInstance3D to an :ref:`ArrayMesh <class_ArrayMesh>`. An ArrayMesh is a tool that allows you to easily construct a Mesh from Arrays for vertices, normals, colors, etc."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:170
msgid "Now, attach a script to the MeshInstance3D and use the following code:"
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:192
msgid "The triangle is specified in normalized device coordinates. Recall, NDC run from ``-1.0`` to ``1.0`` in both the ``x`` and ``y`` directions. This makes the screen ``2`` units wide and ``2`` units tall. In order to cover the entire screen with a single triangle, use a triangle that is ``4`` units wide and ``4`` units tall, double its height and width."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:199
msgid "Assign the same vertex shader from above and everything should look exactly the same."
msgstr ""

#: ../../docs/tutorials/shaders/advanced_postprocessing.rst:201
msgid "The one drawback to using an ArrayMesh over using a QuadMesh is that the ArrayMesh is not visible in the editor because the triangle is not constructed until the scene is run. To get around that, construct a single triangle Mesh in a modeling program and use that in the MeshInstance3D instead."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
