# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/i18n/internationalizing_games.rst:4
msgid "Internationalizing games"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:9
msgid "Sería excelente que el mundo hablara solo un idioma (It would be great if the world spoke only one language). Unfortunately for us developers, that is not the case. While indie or niche games usually do not need localization, games targeting a more massive market often require localization. Godot offers many tools to make this process more straightforward, so this tutorial is more like a collection of tips and tricks."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:17
msgid "Localization is usually done by specific studios hired for the job. Despite the huge amount of software and file formats available for this, the most common way to do localization to this day is still with spreadsheets. The process of creating the spreadsheets and importing them is already covered in the :ref:`doc_importing_translations` tutorial. If you haven't read the Importing translations page before, we recommend you give it a read before reading this page."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:25
msgid "We will be using the official demo as an example; you can `download it from the Asset Library <https://godotengine.org/asset-library/asset/134>`_."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:29
msgid "Configuring the imported translation"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:31
msgid "Translations can get updated and re-imported when they change, but they still have to be added to the project. This is done in **Project → Project Settings → Localization**:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:37
msgid "The above dialog is used to add or remove translations project-wide."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:40
msgid "Localizing resources"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:42
msgid "It is also possible to instruct Godot to use alternate versions of assets (resources) depending on the current language. This can be used for localized images such as in-game billboards or localized voices."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:46
msgid "The **Remaps** tab can be used for this:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:50
msgid "Select the resource to be remapped then add some alternatives for each locale."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:54
msgid "The resource remapping system isn't supported for DynamicFonts. To use different fonts depending on the language's script, use the DynamicFont fallback system instead, which lets you define as many fallback fonts as you want."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:59
msgid "The upside of the DynamicFont fallback system is that it works regardless of the current language, making it ideal for things like multiplayer chat where the text language may not match the client's language."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:64
msgid "Converting keys to text"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:66
msgid "Some controls, such as :ref:`Button <class_Button>` and :ref:`Label <class_Label>`, will automatically fetch a translation if their text matches a translation key. For example, if a label's text is \"MAIN_SCREEN_GREETING1\" and that key exists in the current translation, then the text will automatically be translated."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:71
msgid "This automatic translation behavior may be undesirable in certain cases. For instance, when using a Label to display a player's name, you most likely don't want the player's name to be translated if it matches a translation key. To disable automatic translation on a specific node, disable **Localization > Auto Translate** in the inspector."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:77
msgid "In code, the :ref:`Object.tr() <class_Object_method_tr>` function can be used. This will just look up the text in the translations and convert it if found:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:87
msgid "If no text is displayed after changing the language, try to use a different font. The default project font only supports a subset of the Latin-1 character set, which cannot be used to display languages like Russian or Chinese."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:91
msgid "A good resource for multilingual fonts is `Noto Fonts <https://www.google.com/get/noto/>`__. Make sure to download the correct variation if you're using a less common language."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:95
msgid "Once you've downloaded the font, load the TTF file into a DynamicFont resource and use it as a custom font of your Control node. For better reusability, associate a new a Theme resource to your root Control node and define the DynamicFont as the Default Font in the theme."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:101
msgid "Placeholders"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:103
msgid "To feature placeholders in your translated strings, use :ref:`doc_gdscript_printf` or the equivalent feature in C#. This lets translators move the location of the placeholder in the string freely, which allows translations to sound more natural. Named placeholders with the ``String.format()`` function should be used whenever possible, as they also allow translators to choose the *order* in which placeholders appear:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:121
msgid "Translation contexts"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:123
msgid "If you're using plain English as source strings (rather than message codes ``LIKE_THIS``), you may run into ambiguities when you have to translate the same English string to different strings in certain target languages. You can optionally specify a *translation context* to resolve this ambiguity and allow target languages to use different strings, even though the source string is identical:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:139
msgid "Pluralization"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:141
msgid "Most languages require different strings depending on whether an object is in singular or plural form. However, hardcoding the \"is plural\" condition depending on whether there is more than 1 object is not valid in all languages."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:145
msgid "Some languages have more than two plural forms, and the rules on the number of objects required for each plural form vary. Godot offers support for *pluralization* so that the target locales can handle this automatically."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:149
msgid "Pluralization is meant to be used with positive (or zero) integer numbers only. Negative and floating-point values usually represent physical entities for which singular and plural don't clearly apply."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:158
msgid "This can be combined with a context if needed:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:167
msgid "Providing pluralized translations is only supported with :ref:`doc_localization_using_gettext`, not CSV."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:171
msgid "Making controls resizable"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:173
msgid "The same text in different languages can vary greatly in length. For this, make sure to read the tutorial on :ref:`doc_size_and_anchors`, as dynamically adjusting control sizes may help. :ref:`Container <class_Container>` can be useful, as well as the text wrapping options available in :ref:`Label <class_Label>`."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:179
msgid "To check whether your UI can accommodate translations with longer strings than the original, you can enable *pseudolocalization* in the advanced Project Settings. This will replace all your localizable strings with longer versions of themselves, while also replacing some characters in the original strings with accented versions (while still being readable). Placeholders are kept as-is, so that they keep working when pseudolocalization is enabled."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:186
msgid "For example, the string ``Hello world, this is %s!`` becomes ``[Ĥéłłô ŵôŕłd́, ŧh̀íš íš %s!]`` when pseudolocalization is enabled."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:189
msgid "While looking strange at first, pseudolocalization has several benefits:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:191
msgid "It lets you spot non-localizable strings quickly, so you can go over them and make them localizable (if it makes sense to do so)."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:193
msgid "It lets you check UI elements that can't fit long strings. Many languages will feature much longer translations than the source text, so it's important to ensure your UI can accommodate longer-than-usual strings."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:196
msgid "It lets you check whether your font contains all the characters required to support various languages. However, since the goal of pseudolocalization is to keep the original strings readable, it's not an effective test for checking whether a font can support :abbr:`CJK (Chinese, Japanese, Korean)` or right-to-left languages."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:202
msgid "The project settings allow you to tune pseudolocalization behavior, so that you can disable parts of it if desired."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:206
msgid "TranslationServer"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:208
msgid "Godot has a server handling low-level translation management called the :ref:`TranslationServer <class_TranslationServer>`. Translations can be added or removed during run-time; the current language can also be changed at run-time."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:216
msgid "Bidirectional text and UI Mirroring"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:218
msgid "Arabic and Hebrew are written from right to left (except for the numbers and Latin words mixed in), and the user interface for these languages should be mirrored as well. In some languages the shape of a glyph changes depending on the surrounding characters."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:222
msgid "Support for bidirectional writing systems and UI mirroring is transparent, you don't usually need to change anything or have any knowledge of the specific writing system."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:225
msgid "For RTL languages, Godot will automatically do the following changes to the UI:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:227
msgid "Mirrors left/right anchors and margins."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:228
msgid "Swaps left and right text alignment."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:229
msgid "Mirrors horizontal order of the child controls in the containers, and items in Tree/ItemList controls."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:230
msgid "Uses mirrored order of the internal control elements (e.g. OptionButton dropdown button, checkbox alignment, List column order, Tree item icons and connecting line alignment, e.t.c.), in some cases mirrored controls use separate theme styles."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:231
msgid "Coordinate system is not mirrored, and non-UI nodes (sprites, e.t.c) are not affected."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:233
msgid "It is possible to override text and control layout direction by using the following control properties:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:235
msgid "``text_direction``, sets the base text direction. When set to \"auto\", direction depends on the first strong directional character in the text according to the Unicode Bidirectional Algorithm,"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:236
msgid "``language``, overrides current project locale."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:237
msgid "``structured_text_bidi_override`` property and ``_structured_text_parser`` callback, enables special handling for structured text."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:238
msgid "``layout_direction``, overrides control mirroring."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:244
msgid "You can see how right-to-left typesetting works in action using the `BiDI and Font Features demo project <https://github.com/godotengine/godot-demo-projects/tree/master/gui/bidi_and_font_features>`__."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:248
msgid "Adding break iterator data to exported project"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:250
msgid "Some languages are written without spaces, and word and line breaking requires more than rules over character sequences. Godot includes ICU rule and dictionary based, break iterator data, but this data is not included into exported projects by default. To include it go to **Project → Project Settings → Localization → Text Server Data** and click **Install support data...**. Break iterator data is about 4 MB large."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:257
msgid "Structured text BiDi override"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:259
msgid "Unicode BiDi algorithm is designed to work with natural text and it's incapable of handling text with the higher level order, like file names, URIs, email addresses, regular expressions or source code."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:265
msgid "For example, the path for this shown directory structure will be displayed incorrectly (top \"LineEdit\" control). \"File\" type structured text override splits text into segments, then BiDi algorithm is applied to each of them individually to correctly display directory names in any language and preserve correct order of the folders (bottom \"LineEdit\" control)."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:270
msgid "Custom callbacks provide a way to override BiDi for the other types of structured text."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:273
msgid "Localizing numbers"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:275
msgid "Controls specifically designed for number input or output (e.g. ProgressBar, SpinBox) will use localized numbering system automatically, for the other control :ref:`TextServer.format_number(string, language) <class_TextServer_method_format_number>` can be used to convert Western Arabic numbers (0..9) to the localized numbering system and :ref:`TextServer.parse_number(string, language) <class_TextServer_method_parse_number>` to convert it back."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:283
msgid "Localizing icons and images"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:285
msgid "Icons with left and right pointing arrows which may need to be reversed for Arabic and Hebrew locales, in case they indicate movement or direction (e.g. back/forward buttons). Otherwise, they can remain the same."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:290
msgid "Testing translations"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:292
msgid "You may want to test a project's translation before releasing it. Godot provides two ways to do this."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:295
msgid "First, in the Project Settings, under **Internationalization > Locale** (with advanced settings enabled), there is a **Test** property. Set this property to the locale code of the language you want to test. Godot will run the project with that locale when the project is run (either from the editor or when exported)."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:302
msgid "Keep in mind that since this is a project setting, it will show up in version control when it is set to a non-empty value. Therefore, it should be set back to an empty value before committing changes to version control."
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:306
msgid "Translations can also be tested when :ref:`running Godot from the command line <doc_command_line_tutorial>`. For example, to test a game in French, the following argument can be supplied:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:315
msgid "Translating the project name"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:317
msgid "The project name becomes the app name when exporting to different operating systems and platforms. To specify the project name in more than one language, create a new setting ``application/name`` in the **Project Settings** and append the locale identifier to it. For instance, for Spanish, this would be ``application/name_es``:"
msgstr ""

#: ../../docs/tutorials/i18n/internationalizing_games.rst:325
msgid "If you are unsure about the language code to use, refer to the :ref:`list of locale codes <doc_locales>`."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
