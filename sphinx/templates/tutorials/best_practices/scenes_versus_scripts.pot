# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:4
msgid "When to use scenes versus scripts"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:6
msgid "We've already covered how scenes and scripts are different. Scripts define an engine class extension with imperative code, scenes with declarative code."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:10
msgid "Each system's capabilities are different as a result. Scenes can define how an extended class initializes, but not what its behavior actually is. Scenes are often used in conjunction with a script, the scene declaring a composition of nodes, and the script adding behaviour with imperative code."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:16
msgid "Anonymous types"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:18
msgid "It *is* possible to completely define a scenes' contents using a script alone. This is, in essence, what the Godot Editor does, only in the C++ constructor of its objects."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:22
msgid "But, choosing which one to use can be a dilemma. Creating script instances is identical to creating in-engine classes whereas handling scenes requires a change in API:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:62
msgid "Also, scripts will operate a little slower than scenes due to the speed differences between engine and script code. The larger and more complex the node, the more reason there is to build it as a scene."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:67
msgid "Named types"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:69
msgid "Scripts can be registered as a new type within the editor itself. This displays it as a new type in the node or resource creation dialog with an optional icon. This way, the user's ability to use the script is much more streamlined. Rather than having to..."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:74
msgid "Know the base type of the script they would like to use."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:76
msgid "Create an instance of that base type."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:78
msgid "Add the script to the node."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:80
msgid "With a registered script, the scripted type instead becomes a creation option like the other nodes and resources in the system. The creation dialog even has a search bar to look up the type by name."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:85
msgid "There are two systems for registering types:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:87
msgid ":ref:`Custom Types <doc_making_plugins>`"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:89
msgid "Editor-only. Typenames are not accessible at runtime."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:91
msgid "Does not support inherited custom types."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:93
msgid "An initializer tool. Creates the node with the script. Nothing more."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:95
msgid "Editor has no type-awareness of the script or its relationship to other engine types or scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:98
#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:116
msgid "Allows users to define an icon."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:100
msgid "Works for all scripting languages because it deals with Script resources in abstract."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:102
msgid "Set up using :ref:`EditorPlugin.add_custom_type <class_EditorPlugin_method_add_custom_type>`."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:104
msgid ":ref:`Script Classes <doc_gdscript_basics_class_name>`"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:106
msgid "Editor and runtime accessible."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:108
msgid "Displays inheritance relationships in full."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:110
msgid "Creates the node with the script, but can also change types or extend the type from the editor."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:113
msgid "Editor is aware of inheritance relationships between scripts, script classes, and engine C++ classes."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:118
msgid "Engine developers must add support for languages manually (both name exposure and runtime accessibility)."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:121
msgid "Godot 3.1+ only."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:123
msgid "The Editor scans project folders and registers any exposed names for all scripting languages. Each scripting language must implement its own support for exposing this information."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:127
msgid "Both methodologies add names to the creation dialog, but script classes, in particular, also allow for users to access the typename without loading the script resource. Creating instances and accessing constants or static methods is viable from anywhere."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:132
msgid "With features like these, one may wish their type to be a script without a scene due to the ease of use it grants users. Those developing plugins or creating in-house tools for designers to use will find an easier time of things this way."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:137
msgid "On the downside, it also means having to use largely imperative programming."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:140
msgid "Performance of Script vs PackedScene"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:142
msgid "One last aspect to consider when choosing scenes and scripts is execution speed."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:144
msgid "As the size of objects increases, the scripts' necessary size to create and initialize them grows much larger. Creating node hierarchies demonstrates this. Each Node's logic could be several hundred lines of code in length."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:148
msgid "The code example below creates a new ``Node``, changes its name, assigns a script to it, sets its future parent as its owner so it gets saved to disk along with it, and finally adds it as a child of the ``Main`` node:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:187
msgid "Script code like this is much slower than engine-side C++ code. Each instruction makes a call to the scripting API which leads to many \"lookups\" on the back-end to find the logic to execute."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:191
msgid "Scenes help to avoid this performance issue. :ref:`PackedScene <class_PackedScene>`, the base type that scenes inherit from, defines resources that use serialized data to create objects. The engine can process scenes in batches on the back-end and provide much better performance than scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:197
msgid "Conclusion"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:199
msgid "In the end, the best approach is to consider the following:"
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:201
msgid "If one wishes to create a basic tool that is going to be re-used in several different projects and which people of all skill levels will likely use (including those who don't label themselves as \"programmers\"), then chances are that it should probably be a script, likely one with a custom name/icon."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:206
msgid "If one wishes to create a concept that is particular to their game, then it should always be a scene. Scenes are easier to track/edit and provide more security than scripts."
msgstr ""

#: ../../docs/tutorials/best_practices/scenes_versus_scripts.rst:210
msgid "If one would like to give a name to a scene, then they can still sort of do this by declaring a script class and giving it a scene as a constant. The script becomes, in effect, a namespace:"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
