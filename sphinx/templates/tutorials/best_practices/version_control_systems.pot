# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/best_practices/version_control_systems.rst:4
msgid "Version control systems"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:9
msgid "Godot aims to be VCS-friendly and generate mostly readable and mergeable files."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:12
msgid "Version control plugins"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:14
msgid "Godot also supports the use of version control systems in the editor itself. However, version control in the editor requires a plugin for the specific VCS you're using."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:18
msgid "As of July 2023, there is only a Git plugin available, but the community may create additional VCS plugins."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:22
msgid "Official Git plugin"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:24
msgid "Using Git from inside the editor is supported with an official plugin. You can find the latest releases on `GitHub <https://github.com/godotengine/godot-git-plugin/releases>`__."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:28
msgid "Documentation on how to use the Git plugin can be found on its `wiki <https://github.com/godotengine/godot-git-plugin/wiki>`__."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:32
msgid "Files to exclude from VCS"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:36
msgid "This lists files and folders that should be ignored from version control in Godot 4.1 and later."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:39
msgid "The list of files of folders that should be ignored from version control in Godot 3.x and Godot 4.0 is **entirely** different. This is important, as Godot 3.x and 4.0 may store sensitive credentials in ``export_presets.cfg`` (unlike Godot 4.1 and later)."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:44
msgid "If you are using Godot 3, check the ``3.5`` version of this documentation page instead."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:47
msgid "There are some files and folders Godot automatically creates when opening a project in the editor for the first time. To avoid bloating your version control repository with generated data, you should add them to your VCS ignore:"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:51
msgid "``.godot/``: This folder stores various project cache data."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:52
msgid "``*.translation``: These files are binary imported :ref:`translations <doc_internationalizing_games>` generated from CSV files."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:55
msgid "You can make the Godot project manager generate version control metadata for you automatically when creating a project. When choosing the **Git** option, this creates ``.gitignore`` and ``.gitattributes`` files in the project root:"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:63
msgid "Creating version control metadata in the project manager's New Project dialog"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:63
msgid "Creating version control metadata in the project manager's **New Project** dialog"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:65
msgid "In existing projects, select the **Project** menu at the top of the editor, then choose **Version Control > Generate Version Control Metadata**. This creates the same files as if the operation was performed in the project manager."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:70
msgid "Working with Git on Windows"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:72
msgid "Most Git for Windows clients are configured with the ``core.autocrlf`` set to ``true``. This can lead to files unnecessarily being marked as modified by Git due to their line endings being converted from LF to CRLF automatically."
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:76
msgid "It is better to set this option as:"
msgstr ""

#: ../../docs/tutorials/best_practices/version_control_systems.rst:82
msgid "Creating version control metadata using the project manager or editor will automatically enforce LF line endings using the ``.gitattributes`` file. In this case, you don't need to change your Git configuration."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
