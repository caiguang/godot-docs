# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:6
msgid "3D gizmo plugins"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:9
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:11
msgid "3D gizmo plugins are used by the editor and custom plugins to define the gizmos attached to any kind of Node3D node."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:14
msgid "This tutorial shows the two main approaches to defining your own custom gizmos. The first option works well for simple gizmos and creates less clutter in your plugin structure, and the second one will let you store some per-gizmo data."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:18
msgid "This tutorial assumes you already know how to make generic plugins. If in doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:22
msgid "The EditorNode3DGizmoPlugin"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:24
msgid "Regardless of the approach we choose, we will need to create a new :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. This will allow us to set a name for the new gizmo type and define other behaviors such as whether the gizmo can be hidden or not."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:29
msgid "This would be a basic setup:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:61
msgid "For simple gizmos, inheriting :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` is enough. If you want to store some per-gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with the second approach."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:67
msgid "Simple approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:69
msgid "The first step is to, in our custom gizmo plugin, override the :ref:`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` method so that it returns ``true`` when the node parameter is of our target type."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:83
msgid "Then we can override methods like :ref:`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` or all the handle related ones."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:117
msgid "Note that we created a material in the `_init` method, and retrieved it in the `_redraw` method using :ref:`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. This method retrieves one of the material's variants depending on the state of the gizmo (selected and/or editable)."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:122
msgid "So the final plugin would look somewhat like this:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:163
msgid "Note that we just added some handles in the `_redraw` method, but we still need to implement the rest of handle-related callbacks in :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` to get properly working handles."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:168
msgid "Alternative approach"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:170
msgid "In some cases we want to provide our own implementation of :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, maybe because we want to have some state stored in each gizmo or because we are porting an old gizmo plugin and we don't want to go through the rewriting process."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:174
msgid "In these cases all we need to do is, in our new gizmo plugin, override :ref:`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, so it returns our custom gizmo implementation for the Node3D nodes we want to target."
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:199
msgid "This way all the gizmo logic and drawing methods can be implemented in a new class extending :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, like so:"
msgstr ""

#: ../../docs/tutorials/plugins/editor/3d_gizmos.rst:237
msgid "Note that we just added some handles in the `_redraw` method, but we still need to implement the rest of handle-related callbacks in :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` to get properly working handles."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
