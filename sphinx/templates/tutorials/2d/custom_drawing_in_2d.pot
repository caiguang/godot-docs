# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:4
msgid "Custom drawing in 2D"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:9
msgid "Godot has nodes to draw sprites, polygons, particles, text, and many other common game development needs. However, if you need something specific not covered with the standard nodes you can make any 2D node (for example, :ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`-based) draw on screen using custom commands."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:15
msgid "Custom drawing in a 2D node is *really* useful. Here are some use cases:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:17
msgid "Drawing shapes or logic that existing nodes can't do, such as an image with trails or a special animated polygon."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:19
msgid "Drawing a large number of simple objects, such as a grid or a board for a 2d game. Custom drawing avoids the overhead of using a large number of nodes, possibly lowering memory usage and improving performance."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:22
msgid "Making a custom UI control. There are plenty of controls available, but when you have unusual needs, you will likely need a custom control."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:27
msgid "Drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:29
msgid "Add a script to any :ref:`CanvasItem <class_CanvasItem>` derived node, like :ref:`Control <class_Control>` or :ref:`Node2D <class_Node2D>`. Then override the :ref:`_draw()<class_CanvasItem_private_method__draw>` function."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:54
msgid "Draw commands are described in the :ref:`CanvasItem <class_CanvasItem>` class reference. There are plenty of them and we will see some of them in the examples below."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:59
msgid "Updating"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:61
msgid "The :ref:`_draw <class_CanvasItem_private_method__draw>` function is only called once, and then the draw commands are cached and remembered, so further calls are unnecessary."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:65
msgid "If re-drawing is required because a variable or something else changed, call :ref:`CanvasItem.queue_redraw <class_CanvasItem_method_queue_redraw>` in that same node and a new ``_draw()`` call will happen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:69
msgid "Here is a little more complex example, where we have a texture variable that can be modified at any time, and using a :ref:`setter<doc_gdscript_basics_setters_getters>`, it forces a redraw of the texture when modified:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:116
msgid "To see it in action, you can set the texture to be the Godot icon on the editor by dragging and dropping the default ``icon.svg`` from the ``FileSystem`` tab to the Texture property on the ``Inspector`` tab. When changing the ``Texture`` property value while the previous script is running, the texture will also change automatically."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:122
msgid "In some cases, we may need to redraw every frame. For this, call :ref:`queue_redraw <class_CanvasItem_method_queue_redraw>` from the :ref:`_process <class_Node_private_method__process>` method, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:155
msgid "Coordinates and line width alignment"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:157
msgid "The drawing API uses the CanvasItem's coordinate system, not necessarily pixel coordinates. This means ``_draw()`` uses the coordinate space created after applying the CanvasItem's transform. Additionally, you can apply a custom transform on top of it by using :ref:`draw_set_transform<class_CanvasItem_method_draw_set_transform>` or :ref:`draw_set_transform_matrix<class_CanvasItem_method_draw_set_transform_matrix>`."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:164
msgid "When using :ref:`draw_line <class_CanvasItem_method_draw_line>`, you should consider the width of the line. When using a width that is an odd size, the position of the start and end points should be shifted by ``0.5`` to keep the line centered, as shown below."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:188
msgid "The same applies to the :ref:`draw_rect <class_CanvasItem_method_draw_rect>` method with ``filled = false``."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:213
msgid "Antialiased drawing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:215
msgid "Godot offers method parameters in :ref:`draw_line<class_CanvasItem_method_draw_line>` to enable antialiasing, but not all custom drawing methods offer this ``antialiased`` parameter."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:219
msgid "For custom drawing methods that don't provide an ``antialiased`` parameter, you can enable 2D MSAA instead, which affects rendering in the entire viewport. This provides high-quality antialiasing, but a higher performance cost and only on specific elements. See :ref:`doc_2d_antialiasing` for more information."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:224
msgid "Here is a comparison of a line of minimal width (``width=-1``) drawn with ``antialiased=false``, ``antialiased=true``, and ``antialiased=false`` with 2D MSAA 2x, 4x, and 8x enabled."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:231
msgid "Tools"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:233
msgid "Drawing your own nodes might also be desired while running them in the editor. This can be used as a preview or visualization of some feature or behavior."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:237
msgid "To do this, you can use the :ref:`tool annotation<doc_gdscript_tool_mode>` on both GDScript and C#. See :ref:`the example below<doc_draw_show_drawing_while_editing_example>` and :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:245
msgid "Example 1: drawing a custom shape"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:247
msgid "We will now use the custom drawing functionality of the Godot Engine to draw something that Godot doesn't provide functions for. We will recreate the Godot logo but with code- only using drawing functions."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:251
msgid "You will have to code a function to perform this and draw it yourself."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:255
msgid "The following instructions use a fixed set of coordinates that could be too small for high resolution screens (larger than 1080p). If that is your case, and the drawing is too small consider increasing your window scale in ``Menu > Project > Project settings > display/window/stretch/scale`` to adjust the project to a higher resolution (a 2 or 4 scale tends to work well)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:262
msgid "Drawing a custom polygon shape"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:264
msgid "While there is a dedicated node to draw custom polygons ( :ref:`Polygon2D <class_Polygon2D>`), we will use in this case exclusively lower level drawing functions to combine them on the same node and be able to create more complex shapes later on."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:269
msgid "First, we will define a set of points -or X and Y coordinates- that will form the base of our shape:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:313
msgid "This format, while compact, is not the one that Godot understands to draw a polygon. In a different scenario we could have to load these coordinates from a file or calculate the positions while the application is running, so some transformation may be needed."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:318
msgid "To transform these coordinates into the right format, we will create a new method ``float_array_to_Vector2Array()``. Then we will override the ``_ready()`` function, which Godot will call only once -at the start of the execution- to load those coordinates into a variable:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:359
msgid "To finally draw our first shape, we will use the method :ref:`draw_polygon <class_CanvasItem_method_draw_polygon>` and pass the points (as an array of Vector2 coordinates) and its color, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:383
msgid "When running it you should see something like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:387
msgid "Note the lower part of the logo looks segmented- this is because a low amount of points were used to define that part. To simulate a smooth curve, we could add more points to our array, or maybe use a mathematical function to interpolate a curve and create a smooth shape from code (see :ref:`example 2<doc_draw_custom_example_2>`)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:393
msgid "Polygons will always **connect its last defined point to its first one** in order to have a closed shape."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:397
msgid "Drawing connected lines"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:399
msgid "Drawing a sequence of connected lines that don't close down to form a polygon is very similar to the previous method. We will use a connected set of lines to draw Godot's logo mouth."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:403
msgid "First, we will define the list of coordinates that form the mouth shape, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:427
msgid "We will load these coordinates into a variable and define an additional variable with the configurable line thickness:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:451
msgid "And finally we will use the method :ref:`draw_polyline <class_CanvasItem_method_draw_polyline>` to actually draw the line, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:483
msgid "You should get the following output:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:487
msgid "Unlike ``draw_polygon()``, polylines can only have a single unique color for all its points (the second argument). This method has 2 additional arguments: the width of the line (which is as small as possible by default) and enabling or disabling the anti-aliasing (it is disabled by default)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:492
msgid "The order of the ``_draw`` calls is important- like with the Node positions on the tree hierarchy, the different shapes will be drawn from top to bottom, resulting in the latest shapes hiding earlier ones if they overlap. In this case we want the mouth drawn over the head, so we put it afterwards."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:497
msgid "Notice how we can define colors in different ways, either with a hexadecimal code or a predefined color name. Check the class :ref:`Color <class_Color>` for other constants and ways to define Colors."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:502
msgid "Drawing circles"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:504
msgid "To create the eyes, we are going to add 4 additional calls to draw the eye shapes, in different sizes, colors and positions."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:507
msgid "To draw a circle, you position it based on its center using the :ref:`draw_circle <class_CanvasItem_method_draw_circle>` method. The first parameter is a :ref:`Vector2<class_Vector2>` with the coordinates of its center, the second is its radius, and the third is its color:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:548
msgid "When executing it, you should have something like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:553
msgid "For partial, unfilled arcs (portions of a circle shape between certain arbitrary angles), you can use the method :ref:`draw_arc <class_CanvasItem_method_draw_arc>`."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:558
msgid "Drawing lines"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:560
msgid "To draw the final shape (the nose) we will use a line to approximate it."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:562
msgid ":ref:`draw_line <class_CanvasItem_method_draw_line>` can be used to draw a single segment by providing its start and end coordinates as arguments, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:604
msgid "You should now be able to see the following shape on screen:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:608
msgid "Note that if multiple unconnected lines are going to be drawn at the same time, you may get additional performance by drawing all of them in a single call, using the :ref:`draw_multiline <class_CanvasItem_method_draw_multiline>` method."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:613
msgid "Drawing text"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:615
msgid "While using the :ref:`Label <class_Label>` Node is the most common way to add text to your application, the low level `_draw` function includes functionality to add text to your custom Node drawing. We will use it to add the name \"GODOT\" under the robot head."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:620
msgid "We will use the :ref:`draw_string <class_CanvasItem_method_draw_string>` method to do it, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:669
msgid "Here we first load into the defaultFont variable the configured default theme font (a custom one can be set instead) and then we pass the following parameters: font, position, text, horizontal alignment, width, and font size."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:673
msgid "You should see the following on your screen:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:677
msgid "Additional parameters as well as other methods related to text and characters can be found on the :ref:`CanvasItem <class_CanvasItem>` class reference."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:683
msgid "Show the drawing while editing"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:685
msgid "While the code so far is able to draw the logo on a running window, it will not show up on the ``2D view`` on the editor. In certain cases you would also like to show your custom Node2D or control on the editor, to position and scale it appropriately, like most other nodes do."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:690
msgid "To show the logo directly on the editor (without running it), you can use the :ref:`@tool<doc_gdscript_tool_mode>` annotation to request the custom drawing of the node to also appear while editing, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:707
msgid "You will need to save your scene, rebuild your project (for C# only) and reload the current scene manually at the menu option ``Scene > Reload Saved Scene`` to refresh the current node in the ``2D`` view the first time you add or remove the ``@tool`` annotation."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:713
msgid "Animation"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:715
msgid "If we wanted to make the custom shape change at runtime, we could modify the methods called or its arguments at execution time, or apply a transform."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:718
msgid "For example, if we want the custom shape we just designed to rotate, we could add the following variable and code to the ``_ready`` and ``_process`` methods:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:751
msgid "The problem with the above code is that because we have created the points approximately on a rectangle starting from the upper left corner, the ``(0, 0)`` coordinate and extending to the right and down, we see that the rotation is done using the top left corner as pivot. A position transform change on the node won't help us here, as the rotation transform is applied first."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:757
msgid "While we could rewrite all of the points' coordinates to be centered around ``(0, 0)``, including negative coordinates, that would be a lot of work."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:760
msgid "One possible way to work around this is to use the lower level :ref:`draw_set_transform<class_CanvasItem_method_draw_set_transform>` method to fix this issue, translating all points in the CanvasItem's own space, and then moving it back to its original place with a regular node transform, either in the editor or in code, like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:794
msgid "This is the result, rotating around a pivot now on ``(60, 60)``:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:798
msgid "If what we wanted to animate was a property inside the ``_draw()`` call, we must remember to call ``queue_redraw()`` to force a refresh, as otherwise it would not be updated on screen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:801
msgid "For example, this is how we can make the robot appear to open and close its mouth, by changing the width of its mouth line follow a sinusoidal (:ref:`sin<class_@globalscope_method_sin>`) curve:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:841
msgid "It will look somewhat like this when run:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:845
msgid "Please note that ``_mouth_width`` is a user defined property like any other and it or any other used as a drawing argument can be animated using more standard and high level methods such as a :ref:`Tween<class_Tween>` or an :ref:`AnimationPlayer<class_AnimationPlayer>` Node. The only difference is that a ``queue_redraw()`` call is needed to apply those changes so they get shown on screen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:855
msgid "Example 2: drawing a dynamic line"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:857
msgid "The previous example was useful to learn how to draw and modify nodes with custom shapes and animations. This could have some advantages, such as using exact coordinates and vectors for drawing, rather than bitmaps -which means they will scale well when transformed on screen. In some cases, similar results could be achieved composing higher level functionality with nodes such as :ref:`sprites<class_Sprite2D>` or :ref:`AnimatedSprites<class_AnimatedSprite2D>` loading SVG resources (which are also images defined with vectors) and the :ref:`AnimationPlayer<class_AnimationPlayer>` node."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:867
msgid "In other cases that will not be possible because we will not know what the resulting graphical representation will be before running the code. Here we will see how to draw a dynamic line whose coordinates are not known beforehand, and are affected by the user's input."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:873
msgid "Drawing a straight line between 2 points"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:875
msgid "Let's assume we want to draw a straight line between 2 points, the first one will be fixed on the upper left corner ``(0, 0)`` and the second will be defined by the cursor position on screen."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:879
msgid "We could draw a dynamic line between those 2 points like this:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:930
msgid "In this example we obtain the position of the mouse in the default viewport every frame with the method :ref:`get_mouse_position <class_Viewport_method_get_mouse_position>`. If the position has changed since the last draw request (a small optimization to avoid redrawing on every frame)- we will schedule a redraw. Our ``_draw()`` method only has one line: requesting the drawing of a green line of width 10 pixels between the top left corner and that obtained position."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:938
msgid "The width, color, and position of the starting point can be configured with with the corresponding properties."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:941
msgid "It should look like this when run:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:946
msgid "Drawing an arc between 2 points"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:948
msgid "The above example works, but we may want to join those 2 points with a different shape or function, other than a straight line."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:951
msgid "Let's try now creating an arc (a portion of a circumference) between both points."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:954
msgid "Exporting the line starting point, segments, width, color, and antialiasing will allow us to modify those properties very easily directly from the editor inspector panel:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:996
msgid "To draw the arc, we can use the method :ref:`draw_arc<class_CanvasItem_method_draw_arc>`. There are many arcs that pass through 2 points, so we will chose for this example the semicircle that has its center in the middle point between the 2 initial points."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:1002
msgid "Calculating this arc will be more complex than in the case of the line:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:1041
msgid "The center of the semicircle will be the middle point between both points. The radius will be half the distance between both points. The start and end angles will be the angles of the vector from point1 to point2 and vice-versa. Note we had to normalize the ``end_angle`` in positive values because if ``end_angle`` is less than ``start_angle``, the arc will be drawn counter-clockwise, which we don't want in this case (the arc would be upside-down)."
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:1050
msgid "The result should be something like this, with the arc going down and between the points:"
msgstr ""

#: ../../docs/tutorials/2d/custom_drawing_in_2d.rst:1055
msgid "Feel free to play with the parameters in the inspector to obtain different results: change the color, the width, the antialiasing, and increase the number of segments to increase the curve smoothness, at the cost of extra performance."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
