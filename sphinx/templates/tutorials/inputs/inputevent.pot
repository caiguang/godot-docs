# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/inputs/inputevent.rst:4
msgid "Using InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:7
msgid "What is it?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:9
msgid "Managing input is usually complex, no matter the OS or platform. To ease this a little, a special built-in type is provided, :ref:`InputEvent <class_InputEvent>`. This datatype can be configured to contain several types of input events. Input events travel through the engine and can be received in multiple locations, depending on the purpose."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:15
msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:34
msgid "However, it is cleaner and more flexible to use the provided :ref:`InputMap <class_InputMap>` feature, which allows you to define input actions and assign them different keys. This way, you can define multiple keys for the same action (e.g. the keyboard escape key and the start button on a gamepad). You can then more easily change this mapping in the project settings without updating your code, and even build a key mapping feature on top of it to allow your game to change the key mapping at runtime!"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:40
msgid "You can set up your InputMap under **Project > Project Settings > Input Map** and then use those actions like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:60
msgid "How does it work?"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:62
msgid "Every input event is originated from the user/player (though it's possible to generate an InputEvent and feed them back to the engine, which is useful for gestures). The DisplayServer for each platform will read events from the operating system, then feed them to the root :ref:`Window <class_Window>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:67
msgid "The window's :ref:`Viewport <class_Viewport>` does quite a lot of stuff with the received input, in order:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:72
msgid "If the Viewport is embedding Windows, the Viewport tries to interpret the event in its capability as a Window-Manager (e.g. for resizing or moving Windows)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:74
msgid "Next if an embedded Window is focused, the event is sent to that Window and processed in the Windows Viewport and afterwards treated as handled. If no embedded Window is focused, the event is sent to the nodes of the current viewport in the following order."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:77
msgid "First of all, the standard :ref:`Node._input() <class_Node_private_method__input>` function will be called in any node that overrides it (and hasn't disabled input processing with :ref:`Node.set_process_input() <class_Node_method_set_process_input>`). If any function consumes the event, it can call :ref:`Viewport.set_input_as_handled() <class_Viewport_method_set_input_as_handled>`, and the event will not spread any more. This ensures that you can filter all events of interest, even before the GUI. For gameplay input, :ref:`Node._unhandled_input() <class_Node_private_method__unhandled_input>` is generally a better fit, because it allows the GUI to intercept the events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:82
msgid "Second, it will try to feed the input to the GUI, and see if any control can receive it. If so, the :ref:`Control <class_Control>` will be called via the virtual function :ref:`Control._gui_input() <class_Control_private_method__gui_input>` and the signal \"gui_input\" will be emitted (this function is re-implementable by script by inheriting from it). If the control wants to \"consume\" the event, it will call :ref:`Control.accept_event() <class_Control_method_accept_event>` and the event will not spread any more. Use the :ref:`Control.mouse_filter <class_Control_property_mouse_filter>` property to control whether a :ref:`Control <class_Control>` is notified of mouse events via :ref:`Control._gui_input() <class_Control_private_method__gui_input>` callback, and whether these events are propagated further."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:92
msgid "If so far no one consumed the event, the :ref:`Node._shortcut_input() <class_Node_private_method__shortcut_input>` callback will be called if overridden (and not disabled with :ref:`Node.set_process_shortcut_input() <class_Node_method_set_process_shortcut_input>`). This happens only for :ref:`InputEventKey <class_InputEventKey>`, :ref:`InputEventShortcut <class_InputEventShortcut>` and :ref:`InputEventJoypadButton <class_InputEventJoypadButton>`. If any function consumes the event, it can call :ref:`Viewport.set_input_as_handled() <class_Viewport_method_set_input_as_handled>`, and the event will not spread any more. The shortcut input callback is ideal for treating events that are intended as shortcuts."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:99
msgid "If so far no one consumed the event, the :ref:`Node._unhandled_key_input() <class_Node_private_method__unhandled_key_input>` callback will be called if overridden (and not disabled with :ref:`Node.set_process_unhandled_key_input() <class_Node_method_set_process_unhandled_key_input>`). This happens only if the event is a :ref:`InputEventKey <class_InputEventKey>`. If any function consumes the event, it can call :ref:`Viewport.set_input_as_handled() <class_Viewport_method_set_input_as_handled>`, and the event will not spread any more. The unhandled key input callback is ideal for key events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:105
msgid "If so far no one consumed the event, the :ref:`Node._unhandled_input() <class_Node_private_method__unhandled_input>` callback will be called if overridden (and not disabled with :ref:`Node.set_process_unhandled_input() <class_Node_method_set_process_unhandled_input>`). If any function consumes the event, it can call :ref:`Viewport.set_input_as_handled() <class_Viewport_method_set_input_as_handled>`, and the event will not spread any more. The unhandled input callback is ideal for full-screen gameplay events, so they are not received when a GUI is active."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:110
msgid "If no one wanted the event so far, and :ref:`Object Picking <class_viewport_property_physics_object_picking>` is turned on, the event is used for object picking. For the root viewport, this can also be enabled in :ref:`Project Settings <class_ProjectSettings_property_physics/common/enable_object_picking>`. In the case of a 3D scene if a :ref:`Camera3D <class_Camera3D>` is assigned to the Viewport, a ray to the physics world (in the ray direction from the click) will be cast. If this ray hits an object, it will call the :ref:`CollisionObject3D._input_event() <class_CollisionObject3D_private_method__input_event>` function in the relevant physics object. In the case of a 2D scene, conceptually the same happens with :ref:`CollisionObject2D._input_event() <class_CollisionObject2D_private_method__input_event>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:119
msgid "When sending events to its child and descendant nodes, the viewport will do so, as depicted in the following graphic, in a reverse depth-first order, starting with the node at the bottom of the scene tree, and ending at the root node. Excluded from this process are Windows and SubViewports."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:126
msgid "This order doesn't apply to :ref:`Control._gui_input() <class_Control_private_method__gui_input>`, which uses a different method based on event location or focused Control."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:129
msgid "Since Viewports don't send events to other :ref:`SubViewports <class_SubViewport>`, one of the following methods has to be used:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:132
msgid "Use a :ref:`SubViewportContainer <class_SubViewportContainer>`, which automatically sends events to its child :ref:`SubViewports <class_SubViewport>` after :ref:`Node._input() <class_Node_private_method__input>` or :ref:`Control._gui_input() <class_Control_private_method__gui_input>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:135
msgid "Implement event propagation based on the individual requirements."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:137
msgid "GUI events also travel up the scene tree but, since these events target specific Controls, only direct ancestors of the targeted Control node receive the event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:140
msgid "In accordance with Godot's node-based design, this enables specialized child nodes to handle and consume particular events, while their ancestors, and ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:146
msgid "Anatomy of an InputEvent"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:148
msgid ":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does not represent anything and only contains some basic information, such as event ID (which is increased for each event), device index, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:152
msgid "There are several specialized types of InputEvent, described in the table below:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:155
msgid "Event"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:155
msgid "Description"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:157
msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:157
msgid "Empty Input Event."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:159
msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:159
msgid "Contains a keycode and Unicode value, as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:162
msgid "Contains click information, such as button, modifiers, etc."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:165
msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:165
msgid "Contains motion information, such as relative and absolute positions and speed."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:169
msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:169
msgid "Contains Joystick/Joypad analog axis information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:172
msgid "Contains Joystick/Joypad button information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:175
msgid "Contains multi-touch press/release information. (only available on mobile devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:179
msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:179
msgid "Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:182
msgid ":ref:`InputEventMagnifyGesture <class_InputEventMagnifyGesture>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:182
msgid "Contains a position, a factor as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:185
msgid ":ref:`InputEventPanGesture <class_InputEventPanGesture>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:185
msgid "Contains a position, a delta as well as modifiers."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:188
msgid ":ref:`InputEventMIDI <class_InputEventMIDI>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:188
msgid "Contains MIDI-related information."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:190
msgid ":ref:`InputEventShortcut <class_InputEventShortcut>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:190
msgid "Contains a shortcut."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:192
msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:192
msgid "Contains a generic action. These events are often generated by the programmer as feedback. (more on this below)"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:198
msgid "Actions"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:200
msgid "Actions are a grouping of zero or more InputEvents into a commonly understood title (for example, the default \"ui_left\" action grouping both joypad-left input and a keyboard's left arrow key). They are not required to represent an InputEvent but are useful because they abstract various inputs when programming the game logic."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:205
msgid "This allows for:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:207
msgid "The same code to work on different devices with different inputs (e.g., keyboard on PC, Joypad on console)."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:209
msgid "Input to be reconfigured at run-time."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:210
msgid "Actions to be triggered programmatically at run-time."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:212
msgid "Actions can be created from the Project Settings menu in the **Input Map** tab and assigned input events."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:215
msgid "Any event has the methods :ref:`InputEvent.is_action() <class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() <class_InputEvent_method_is_pressed>` and :ref:`InputEvent <class_InputEvent>`."
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:218
msgid "Alternatively, it may be desired to supply the game back with an action from the game code (a good example of this is detecting gestures). The Input singleton has a method for this: :ref:`Input.parse_input_event() <class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:243
msgid "InputMap"
msgstr ""

#: ../../docs/tutorials/inputs/inputevent.rst:245
msgid "Customizing and re-mapping input from code is often desired. If your whole workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton is ideal for reassigning or creating different actions at run-time. This singleton is not saved (must be modified manually) and its state is run from the project settings (project.godot). So any dynamic system of this type needs to store settings in the way the programmer best sees fit."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
