# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/physics/using_character_body_2d.rst:4
msgid "Using CharacterBody2D/3D"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:9
msgid "Godot offers several collision objects to provide both collision detection and response. Trying to decide which one to use for your project can be confusing. You can avoid problems and simplify development if you understand how each of them works and what their pros and cons are. In this tutorial, we'll look at the :ref:`CharacterBody2D <class_CharacterBody2D>` node and show some examples of how to use it."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:16
msgid "While this document uses ``CharacterBody2D`` in its examples, the same concepts apply in 3D as well."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:20
msgid "What is a character body?"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:22
msgid "``CharacterBody2D`` is for implementing bodies that are controlled via code. Character bodies detect collisions with other bodies when moving, but are not affected by engine physics properties, like gravity or friction. While this means that you have to write some code to create their behavior, it also means you have more precise control over how they move and react."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:28
msgid "This document assumes you're familiar with Godot's various physics bodies. Please read :ref:`doc_physics_introduction` first, for an overview of the physics options."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:32
msgid "A `CharacterBody2D` can be affected by gravity and other forces, but you must calculate the movement in code. The physics engine will not move a `CharacterBody2D`."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:37
msgid "Movement and collision"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:39
msgid "When moving a ``CharacterBody2D``, you should not set its ``position`` property directly. Instead, you use the ``move_and_collide()`` or ``move_and_slide()`` methods. These methods move the body along a given vector and detect collisions."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:43
msgid "You should handle physics body movement in the ``_physics_process()`` callback."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:45
msgid "The two movement methods serve different purposes, and later in this tutorial, you'll see examples of how they work."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:49
msgid "move_and_collide"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:51
msgid "This method takes one required parameter: a :ref:`Vector2 <class_Vector2>` indicating the body's relative movement. Typically, this is your velocity vector multiplied by the frame timestep (``delta``). If the engine detects a collision anywhere along this vector, the body will immediately stop moving. If this happens, the method will return a :ref:`KinematicCollision2D <class_KinematicCollision2D>` object."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:57
msgid "``KinematicCollision2D`` is an object containing data about the collision and the colliding object. Using this data, you can calculate your collision response."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:61
msgid "``move_and_collide`` is most useful when you just want to move the body and detect collision, but don't need any automatic collision response. For example, if you need a bullet that ricochets off a wall, you can directly change the angle of the velocity when you detect a collision. See below for an example."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:67
msgid "move_and_slide"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:69
msgid "The ``move_and_slide()`` method is intended to simplify the collision response in the common case where you want one body to slide along the other. It is especially useful in platformers or top-down games, for example."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:73
msgid "When calling ``move_and_slide()``, the function uses a number of node properties to calculate its slide behavior. These properties can be found in the Inspector, or set in code."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:77
msgid "``velocity`` - *default value:* ``Vector2( 0, 0 )``"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:79
msgid "This property represents the body's velocity vector in pixels per second. ``move_and_slide()`` will modify this value automatically when colliding."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:82
msgid "``motion_mode`` - *default value:* ``MOTION_MODE_GROUNDED``"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:84
msgid "This property is typically used to distinguish between side-scrolling and top-down movement. When using the default value, you can use the ``is_on_floor()``, ``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of surface the body is in contact with, and the body will interact with slopes. When using ``MOTION_MODE_FLOATING``, all collisions will be considered \"walls\"."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:90
msgid "``up_direction`` - *default value:* ``Vector2( 0, -1 )``"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:92
msgid "This property allows you to define what surfaces the engine should consider being the floor. Its value lets you use the ``is_on_floor()``, ``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of surface the body is in contact with. The default value means that the top side of horizontal surfaces will be considered \"ground\"."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:98
msgid "``floor_stop_on_slope`` - *default value:* ``true``"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:100
msgid "This parameter prevents a body from sliding down slopes when standing still."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:102
msgid "``wall_min_slide_angle`` - *default value:* ``0.261799`` (in radians, equivalent to ``15`` degrees)"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:104
msgid "This is the minimum angle where the body is allowed to slide when it hits a slope."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:107
msgid "``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent to ``45`` degrees)"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:109
msgid "This parameter is the maximum angle before a surface is no longer considered a \"floor.\""
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:111
msgid "There are many other properties that can be used to modify the body's behavior under specific circumstances. See the :ref:`CharacterBody2D <class_CharacterBody2D>` docs for full details."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:116
msgid "Detecting collisions"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:118
msgid "When using ``move_and_collide()`` the function returns a ``KinematicCollision2D`` directly, and you can use this in your code."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:121
msgid "When using ``move_and_slide()`` it's possible to have multiple collisions occur, as the slide response is calculated. To process these collisions, use ``get_slide_collision_count()`` and ``get_slide_collision()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:156
msgid "`get_slide_collision_count()` only counts times the body has collided and changed direction."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:158
msgid "See :ref:`KinematicCollision2D <class_KinematicCollision2D>` for details on what collision data is returned."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:162
msgid "Which movement method to use?"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:164
msgid "A common question from new Godot users is: \"How do you decide which movement function to use?\" Often, the response is to use ``move_and_slide()`` because it seems simpler, but this is not necessarily the case. One way to think of it is that ``move_and_slide()`` is a special case, and ``move_and_collide()`` is more general. For example, the following two code snippets result in the same collision response:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:196
msgid "Anything you do with ``move_and_slide()`` can also be done with ``move_and_collide()``, but it might take a little more code. However, as we'll see in the examples below, there are cases where ``move_and_slide()`` doesn't provide the response you want."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:200
msgid "In the example above, ``move_and_slide()`` automatically alters the ``velocity`` variable. This is because when the character collides with the environment, the function recalculates the speed internally to reflect the slowdown."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:205
msgid "For example, if your character fell on the floor, you don't want it to accumulate vertical speed due to the effect of gravity. Instead, you want its vertical speed to reset to zero."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:209
msgid "``move_and_slide()`` may also recalculate the kinematic body's velocity several times in a loop as, to produce a smooth motion, it moves the character and collides up to five times by default. At the end of the process, the character's new velocity is available for use on the next frame."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:215
msgid "Examples"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:217
msgid "To see these examples in action, download the sample project: `character_body_2d_starter.zip <https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/character_body_2d_starter.zip>`_"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:221
msgid "Movement and walls"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:223
msgid "If you've downloaded the sample project, this example is in \"basic_movement.tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:225
msgid "For this example, add a ``CharacterBody2D`` with two children: a ``Sprite2D`` and a ``CollisionShape2D``. Use the Godot \"icon.svg\" as the Sprite2D's texture (drag it from the Filesystem dock to the *Texture* property of the ``Sprite2D``). In the ``CollisionShape2D``'s *Shape* property, select \"New RectangleShape2D\" and size the rectangle to fit over the sprite image."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:231
msgid "See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:233
msgid "Attach a script to the CharacterBody2D and add the following code:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:272
msgid "Run this scene and you'll see that ``move_and_collide()`` works as expected, moving the body along the velocity vector. Now let's see what happens when you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with a rectangular collision shape. For visibility, you can use a Sprite2D, a Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:278
msgid "Run the scene again and try moving into the obstacle. You'll see that the ``CharacterBody2D`` can't penetrate the obstacle. However, try moving into the obstacle at an angle and you'll find that the obstacle acts like glue - it feels like the body gets stuck."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:282
msgid "This happens because there is no *collision response*. ``move_and_collide()`` stops the body's movement when a collision occurs. We need to code whatever response we want from the collision."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:286
msgid "Try changing the function to ``move_and_slide()`` and running again."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:288
msgid "``move_and_slide()`` provides a default collision response of sliding the body along the collision object. This is useful for a great many game types, and may be all you need to get the behavior you want."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:293
msgid "Bouncing/reflecting"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:295
msgid "What if you don't want a sliding collision response? For this example (\"bounce_and_collide.tscn\" in the sample project), we have a character shooting bullets and we want the bullets to bounce off the walls."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:299
msgid "This example uses three scenes. The main scene contains the Player and Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:302
msgid "The Player is controlled by the ``w`` and ``s`` keys for forward and back. Aiming uses the mouse pointer. Here is the code for the Player, using ``move_and_slide()``:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:376
msgid "And the code for the Bullet:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:437
msgid "The action happens in ``_physics_process()``. After using ``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` object is returned (otherwise, the return is ``null``)."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:441
msgid "If there is a returned collision, we use the ``normal`` of the collision to reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:444
msgid "If the colliding object (``collider``) has a ``hit`` method, we also call it. In the example project, we've added a flashing color effect to the Wall to demonstrate this."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:451
msgid "Platformer movement"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:453
msgid "Let's try one more popular example: the 2D platformer. ``move_and_slide()`` is ideal for quickly getting a functional character controller up and running. If you've downloaded the sample project, you can find this in \"platformer.tscn\"."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:457
msgid "For this example, we'll assume you have a level made of one or more ``StaticBody2D`` objects. They can be any shape and size. In the sample project, we're using :ref:`Polygon2D <class_Polygon2D>` to create the platform shapes."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:461
msgid "Here's the code for the player body:"
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:524
msgid "In this code we're using ``move_and_slide()`` as described above - to move the body along its velocity vector, sliding along any collision surfaces such as the ground or a platform. We're also using ``is_on_floor()`` to check if a jump should be allowed. Without this, you'd be able to \"jump\" in midair; great if you're making Flappy Bird, but not for a platformer game."
msgstr ""

#: ../../docs/tutorials/physics/using_character_body_2d.rst:530
msgid "There is a lot more that goes into a complete platformer character: acceleration, double-jumps, coyote-time, and many more. The code above is just a starting point. You can use it as a base to expand into whatever movement behavior you need for your own projects."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
