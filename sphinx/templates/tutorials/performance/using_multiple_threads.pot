# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/performance/using_multiple_threads.rst:4
msgid "Using multiple threads"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:7
msgid "Threads"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:9
msgid "Threads allow simultaneous execution of code. It allows off-loading work from the main thread."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:12
msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:14
msgid "If using other languages (C#, C++), it may be easier to use the threading classes they support."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:19
msgid "Before using a built-in class in a thread, read :ref:`doc_thread_safe_apis` first to check whether it can be safely used in a thread."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:23
msgid "Creating a Thread"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:25
msgid "To create a thread, use the following code:"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:50
msgid "Your function will, then, run in a separate thread until it returns. Even if the function has returned already, the thread must collect it, so call :ref:`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:57
msgid "Creating threads at run-time is slow on Windows and should be avoided to prevent stuttering. Semaphores, explained later on this page, should be used instead."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:62
msgid "Mutexes"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:64
msgid "Accessing objects or data from multiple threads is not always supported (if you do it, it will cause unexpected behaviors or crashes). Read the :ref:`doc_thread_safe_apis` documentation to understand which engine APIs support multiple thread access."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:69
msgid "When processing your own data or calling your own functions, as a rule, try to avoid accessing the same data directly from different threads. You may run into synchronization problems, as the data is not always updated between CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when accessing a piece of data from different threads."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:75
msgid "When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures that all other threads will be blocked (put on suspended state) if they try to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex.unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to proceed with the lock (but only one at a time)."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:81
msgid "Here is an example of using a Mutex:"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:116
msgid "Semaphores"
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:118
msgid "Sometimes you want your thread to work *\"on demand\"*. In other words, tell it when to work and let it suspend when it isn't doing anything. For this, :ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore.wait()<class_Semaphore_method_wait>` is used in the thread to suspend it until some data arrives."
msgstr ""

#: ../../docs/tutorials/performance/using_multiple_threads.rst:124
msgid "The main thread, instead, uses :ref:`Semaphore.post()<class_Semaphore_method_post>` to signal that data is ready to be processed:"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
