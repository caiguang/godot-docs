# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:4
msgid "High-level multiplayer"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:7
msgid "High-level vs low-level API"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:9
msgid "The following explains the differences of high- and low-level networking in Godot as well as some fundamentals. If you want to jump in head-first and add networking to your first nodes, skip to `Initializing the network`_ below. But make sure to read the rest later on!"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:11
msgid "Godot always supported standard low-level networking via :abbr:`UDP (User Datagram Protocol)`, :abbr:`TCP (Transmission Control Protocol)` and some higher-level protocols such as :abbr:`HTTP (Hypertext Transfer Protocol)` and :abbr:`SSL (Secure Sockets Layer)`. These protocols are flexible and can be used for almost anything. However, using them to synchronize game state manually can be a large amount of work. Sometimes that work can't be avoided or is worth it, for example when working with a custom server implementation on the backend. But in most cases, it's worthwhile to consider Godot's high-level networking API, which sacrifices some of the fine-grained control of low-level networking for greater ease of use."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:14
msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:16
msgid "TCP ensures packets will always arrive reliably and in order, but latency is generally higher due to error correction. It's also quite a complex protocol because it understands what a \"connection\" is, and optimizes for goals that often don't suit applications like multiplayer games. Packets are buffered to be sent in larger batches, trading less per-packet overhead for higher latency. This can be useful for things like HTTP, but generally not for games. Some of this can be configured and disabled (e.g. by disabling \"Nagle's algorithm\" for the TCP connection)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:18
msgid "UDP is a simpler protocol, which only sends packets (and has no concept of a \"connection\"). No error correction makes it pretty quick (low latency), but packets may be lost along the way or received in the wrong order. Added to that, the MTU (maximum packet size) for UDP is generally low (only a few hundred bytes), so transmitting larger packets means splitting them, reorganizing them and retrying if a part fails."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:23
msgid "In general, TCP can be thought of as reliable, ordered, and slow; UDP as unreliable, unordered and fast. Because of the large difference in performance, it often makes sense to re-build the parts of TCP wanted for games (optional reliability and packet order), while avoiding the unwanted parts (congestion/traffic control features, Nagle's algorithm, etc). Due to this, most game engines come with such an implementation, and Godot is no exception."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:26
msgid "In summary, you can use the low-level networking API for maximum control and implement everything on top of bare network protocols or use the high-level API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy lifting behind the scenes in a generally optimized way."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:28
msgid "Most of Godot's supported platforms offer all or most of the mentioned high- and low-level networking features. As networking is always largely hardware and operating system dependent, however, some features may change or not be available on some target platforms. Most notably, the HTML5 platform currently offers WebSockets and WebRTC support but lacks some of the higher-level features, as well as raw access to low-level protocols like TCP and UDP."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:34
msgid "More about TCP/IP, UDP, and networking: https://gafferongames.com/post/udp_vs_tcp/"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:37
msgid "Gaffer On Games has a lot of useful articles about networking in Games (`here <https://gafferongames.com/categories/game-networking/>`__), including the comprehensive `introduction to networking models in games <https://gafferongames.com/post/what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:41
msgid "If you want to use your low-level networking library of choice instead of Godot's built-in networking, see here for an example: https://github.com/PerduGames/gdnet3"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:45
msgid "Adding networking to your game comes with some responsibility. It can make your application vulnerable if done wrong and may lead to cheats or exploits. It may even allow an attacker to compromise the machines your application runs on and use your servers to send spam, attack others or steal your users' data if they play your game."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:50
msgid "This is always the case when networking is involved and has nothing to do with Godot. You can of course experiment, but when you release a networked application, always take care of any possible security concerns."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:55
msgid "Mid-level abstraction"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:57
msgid "Before going into how we would like to synchronize a game across the network, it can be helpful to understand how the base network API for synchronization works."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:59
msgid "Godot uses a mid-level object :ref:`MultiplayerPeer <class_MultiplayerPeer>`. This object is not meant to be created directly, but is designed so that several C++ implementations can provide it."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:62
msgid "This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it inherits all the useful methods for serializing, sending and receiving data. On top of that, it adds methods to set a peer, transfer mode, etc. It also includes signals that will let you know when peers connect or disconnect."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:64
msgid "This class interface can abstract most types of network layers, topologies and libraries. By default, Godot provides an implementation based on ENet (:ref:`ENetMultiplayerPeer <class_ENetMultiplayerPeer>`), one based on WebRTC (:ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`), and one based on WebSocket (:ref:`WebSocketPeer <class_WebSocketPeer>`), but this could be used to implement mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/console-specific networking APIs."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:70
msgid "For most common cases, using this object directly is discouraged, as Godot provides even higher level networking facilities. This object is still made available in case a game has specific needs for a lower-level API."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:74
msgid "Hosting considerations"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:76
msgid "When hosting a server, clients on your :abbr:`LAN (Local Area Network)` can connect using the internal IP address which is usually of the form ``192.168.*.*``. This internal IP address is **not** reachable by non-LAN/Internet clients."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:81
msgid "On Windows, you can find your internal IP address by opening a command prompt and entering ``ipconfig``. On macOS, open a Terminal and enter ``ifconfig``. On Linux, open a terminal and enter ``ip addr``."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:85
msgid "If you're hosting a server on your own machine and want non-LAN clients to connect to it, you'll probably have to *forward* the server port on your router. This is required to make your server reachable from the Internet since most residential connections use a `NAT <https://en.wikipedia.org/wiki/Network_address_translation>`__. Godot's high-level multiplayer API only uses UDP, so you must forward the port in UDP, not just TCP."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:93
msgid "After forwarding an UDP port and making sure your server uses that port, you can use `this website <https://icanhazip.com/>`__ to find your public IP address. Then give this public IP address to any Internet clients that wish to connect to your server."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:98
msgid "Godot's high-level multiplayer API uses a modified version of ENet which allows for full IPv6 support."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:102
msgid "Initializing the network"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:104
msgid "High level networking in Godot is managed by the :ref:`SceneTree <class_SceneTree>`."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:106
msgid "Each node has a ``multiplayer`` property, which is a reference to the ``MultiplayerAPI`` instance configured for it by the scene tree. Initially, every node is configured with the same default ``MultiplayerAPI`` object."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:109
msgid "It is possible to create a new ``MultiplayerAPI`` object and assign it to a ``NodePath`` in the the scene tree, which will override ``multiplayer`` for the node at that path and all of its descendants. This allows sibling nodes to be configured with different peers, which makes it possible to run a server and a client simultaneously in one instance of Godot."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:120
msgid "To initialize networking, a ``MultiplayerPeer`` object must be created, initialized as a server or client, and passed to the ``MultiplayerAPI``."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:135
msgid "To terminate networking:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:143
msgid "When exporting to Android, make sure to enable the ``INTERNET`` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:149
msgid "Managing connections"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:151
msgid "Every peer is assigned a unique ID. The server's ID is always 1, and clients are assigned a random positive integer."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:153
msgid "Responding to connections or disconnections is possible by connecting to ``MultiplayerAPI``'s signals:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:155
msgid "``peer_connected(id: int)`` This signal is emitted with the newly connected peer's ID on each other peer, and on the new peer multiple times, once with each other peer's ID."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:156
msgid "``peer_disconnected(id: int)`` This signal is emitted on every remaining peer when one disconnects."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:158
msgid "The rest are only emitted on clients:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:160
msgid "``connected_to_server()``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:161
msgid "``connection_failed()``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:162
msgid "``server_disconnected()``"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:164
msgid "To get the unique ID of the associated peer:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:170
msgid "To check whether the peer is server or client:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:177
msgid "Remote procedure calls"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:179
msgid "Remote procedure calls, or RPCs, are functions that can be called on other peers. To create one, use the ``@rpc`` annotation before a function definition. To call an RPC, use ``Callable``'s method ``rpc()`` to call in every peer, or ``rpc_id()`` to call in a specific peer."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:193
msgid "RPCs will not serialize objects or callables."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:195
msgid "For a remote call to be successful, the sending and receiving node need to have the same ``NodePath``, which means they must have the same name. When using ``add_child()`` for nodes which are expected to use RPCs, set the argument ``force_readable_name`` to ``true``."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:201
msgid "If a function is annotated with ``@rpc`` on the client script (resp. server script), then this function must also be declared on the server script (resp. client script). Both RPCs must have the same signature which is evaluated with a checksum of **all RPCs**. All RPCs in a script are checked at once, and all RPCs must be declared on both the client scripts and the server scripts, **even functions that are currently not in use**."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:207
msgid "The signature of the RPC includes the ``@rpc()`` declaration, the function, return type, AND the nodepath. If an RPC resides in a script attached to ``/root/Main/Node1``, then it must reside in precisely the same path and node on both the client script and the server script. Function arguments (example: ``func sendstuff():`` and ``func sendstuff(arg1, arg2):`` **will pass** signature matching)."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:213
msgid "If these conditions are not met (if all RPCs do not pass signature matching), the script may print an error or cause unwanted behavior. The error message may be unrelated to the RPC function you are currently building and testing."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:217
msgid "See further explanation and troubleshooting on `this post <https://github.com/godotengine/godot/issues/57869#issuecomment-1034215138>`__."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:219
msgid "The annotation can take a number of arguments, which have default values. ``@rpc`` is equivalent to:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:225
msgid "The parameters and their functions are as follows:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:227
msgid "``mode``:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:229
msgid "``\"authority\"``: Only the multiplayer authority (the server) can call remotely."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:230
msgid "``\"any_peer\"``: Clients are allowed to call remotely. Useful for transferring user input."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:232
msgid "``sync``:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:234
msgid "``\"call_remote\"``: The function will not be called on the local peer."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:235
msgid "``\"call_local\"``: The function can be called on the local peer. Useful when the server is also a player."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:237
msgid "``transfer_mode``:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:239
msgid "``\"unreliable\"`` Packets are not acknowledged, can be lost, and can arrive at any order."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:240
msgid "``\"unreliable_ordered\"`` Packets are received in the order they were sent in. This is achieved by ignoring packets that arrive later if another that was sent after them has already been received. Can cause packet loss if used incorrectly."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:241
msgid "``\"reliable\"`` Resend attempts are sent until packets are acknowledged, and their order is preserved. Has a significant performance penalty."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:243
msgid "``transfer_channel`` is the channel index."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:245
msgid "The first 3 can be passed in any order, but ``transfer_channel`` must always be last."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:247
msgid "The function ``multiplayer.get_remote_sender_id()`` can be used to get the unique id of an rpc sender, when used within the function called by rpc."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:263
msgid "Channels"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:264
msgid "Modern networking protocols support channels, which are separate connections within the connection. This allows for multiple streams of packets that do not interfere with each other."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:267
msgid "For example, game chat related messages and some of the core gameplay messages should all be sent reliably, but a gameplay message should not wait for a chat message to be acknowledged. This can be achieved by using different channels."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:270
msgid "Channels are also useful when used with the unreliable ordered transfer mode. Sending packets of variable size with this transfer mode can cause packet loss, since packets which are slower to arrive are ignored. Separating them into multiple streams of homogeneous packets by using channels allows ordered transfer with little packet loss, and without the latency penalty caused by reliable mode."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:274
msgid "The default channel with index 0 is actually three different channels - one for each transfer mode."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:277
msgid "Example lobby implementation"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:279
msgid "This is an example lobby that can handle peers joining and leaving, notify UI scenes through signals, and start the game after all clients have loaded the game scene."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:394
msgid "The game scene's root node should be named Game. In the script attached to it:"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:413
msgid "Exporting for dedicated servers"
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:415
msgid "Once you've made a multiplayer game, you may want to export it to run it on a dedicated server with no GPU available. See :ref:`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

#: ../../docs/tutorials/networking/high_level_multiplayer.rst:421
msgid "The code samples on this page aren't designed to run on a dedicated server. You'll have to modify them so the server isn't considered to be a player. You'll also have to modify the game starting mechanism so that the first player who joins can start the game."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
