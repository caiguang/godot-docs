# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/xr/openxr_passthrough.rst:4
msgid "The OpenXR passthrough"
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:6
msgid "Passthrough is a technique where camera images are used to present the environment of the user as the background. This turns a VR headset into an AR headset, often referred to as Mixed Reality or MR."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:11
msgid "As passthrough is relatively new there isn't a singular way this is implemented across platforms. There may be additions in the future so this is a work in progress."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:15
msgid "Passthrough extension"
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:17
msgid "OpenXR has a vendor extension for passthrough submitted by Meta. Currently this extension is only supported on Quest and PICO but may be adopted by other headsets in the future."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:20
msgid ":ref:`XRInterface <class_xrinterface>` has entry points for passthrough so different interfaces can implement this feature. For :ref:`OpenXRInterface <class_openxrinterface>` the meta passthrough extension is implemented here."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:23
msgid "In code you can call ``is_passthrough_supported`` to check if this extension is available. If so you can simply enable passthrough by calling ``start_passthrough``. You can call ``stop_passthrough`` to disable passthrough."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:27
msgid "You do need to make sure the background is transparent. You need to enable the ``transparent_bg`` property on the viewport. Some background environment settings will still fill the background with an opaque color, you can use a ``custom color`` with a color that has alpha set to 0."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:32
msgid "The OpenXR runtime will display the camera image as the background."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:36
msgid "For privacy reasons **no access** is given to the camera image."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:40
msgid "After passthrough is enabled it is possible to change settings that will break passthrough. Be sure not to disable the ``transparent_bg`` setting or change the environment blend mode. This will result in the camera image no longer being visible but you still incur the overhead."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:44
msgid "Always use ``stop_passthrough`` if you wish to turn off passthrough."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:46
msgid "Finally, for using passthrough on the Quest you must set the following export property:"
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:51
msgid "Passthrough through AR"
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:53
msgid "Some of the headsets recently adding OpenXR support have taken a different approach. They simply mimic being an AR device. The Lynx R1 is such a device but others may be doing the same."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:56
msgid "The following thus applies to both passthrough devices that mimic AR, and actual AR devices."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:58
msgid "If ``is_passthrough_supported`` returns false the next step is to call ``get_supported_environment_blend_modes``. This will return a list of supported blend modes for submitting the main render image to OpenXR."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:61
msgid "We need to check if ``XR_ENV_BLEND_MODE_ALPHA_BLEND`` is present in this list. If so we can tell OpenXR to expect an image that can be alpha blended with a background. To do this, we simply call ``set_environment_blend_mode(xr_interface.XR_ENV_BLEND_MODE_ALPHA_BLEND)``."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:65
msgid "We must also set ``transparent_bg`` to true and adjust the environment to ensure we submit the right image."
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:68
msgid "Putting it together"
msgstr ""

#: ../../docs/tutorials/xr/openxr_passthrough.rst:70
msgid "Putting the above together we can use the following code as a base:"
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
