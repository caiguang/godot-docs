# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../docs/tutorials/3d/standard_material_3d.rst:4
msgid "Standard Material 3D and ORM Material 3D"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:7
msgid "Introduction"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:9
msgid "``StandardMaterial3D`` and ``ORMMaterial3D`` (Occlusion, Roughness, Metallic) are default 3D materials that aim to provide most of the features artists look for in a material, without the need for writing shader code. However, they can be converted to shader code if additional functionality is needed."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:14
msgid "This tutorial explains the parameters present in both materials."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:16
msgid "There are 4 ways to add these materials to an object. A material can be added in the *Material* property of the mesh. It can be added in the *Material* property of the node using the mesh (such as a MeshInstance3D node), the *Material Override* property of the node using the mesh, and the *Material Overlay*."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:23
msgid "If you add a material to the mesh itself, every time that mesh is used it will have that material. If you add a material to the node using the mesh, the material will only be used by that node, it will also override the material property of the mesh. If a material is added in the *Material Override* property of the node, it will only be used by that node. It will also override the regular material property of the node and the material property of the mesh."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:30
msgid "The *Material Overlay* property will render a material **over** the current one being used by the mesh. As an example, this can be used to put a transparent shield effect on a mesh."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:34
msgid "BaseMaterial 3D settings"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:36
msgid "StandardMaterial3D has many settings that determine the look of a material. All of these are under the BaseMaterial3D category"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:41
msgid "ORM materials are almost exactly the same with one difference. Instead of separate settings and textures for occlusion, roughness, and metallic, there is a single ORM texture. The different color channels of that texture are used for each parameter. Programs such as Substance Painter and Armor Paint will give you the option to export in this format, for these two programs it's with the export preset for unreal engine, which also uses ORM textures."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:48
msgid "Transparency"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:50
msgid "By default, materials in Godot are opaque. This is fast to render, but it means the material can't be seen through even if you use a transparent texture in the **Albedo > Texture** property (or set **Albedo > Color** to a transparent color)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:54
msgid "To be able to see through a material, the material needs to be made *transparent*. Godot offers several transparency modes:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:57
msgid "**Disabled:** Material is opaque. This is the fastest to render, with all rendering features supported."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:60
msgid "**Alpha:** Material is transparent. Semi-transparent areas are drawn with blending. This is slow to render, but it allows for partial transparency (also known as translucency). Materials using alpha blending also can't cast shadows, and are not visible in screen-space reflections."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:65
msgid "**Alpha** is a good fit for particle effects and VFX."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:67
msgid "**Alpha Scissor:** Material is transparent. Semi-transparent areas whose opacity is below **Alpha Scissor Threshold** are not drawn (above this opacity, these are drawn as opaque). This is faster to render than Alpha and doesn't exhibit transparency sorting issues. The downside is that this results in \"all or nothing\" transparency, with no intermediate values possible. Materials using alpha scissor can cast shadows."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:74
msgid "**Alpha Scissor** is ideal for foliage and fences, since these have hard edges and require correct sorting to look good."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:77
msgid "**Alpha Hash:** Material is transparent. Semi-transparent areas are drawn using dithering. This is also \"all or nothing\" transparency, but dithering helps represent partially opaque areas with limited precision depending on viewport resolution. Materials using alpha hash can cast shadows."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:82
msgid "**Alpha Hash** is suited for realistic-looking hair, although stylized hair may work better with alpha scissor."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:85
msgid "**Depth Pre-Pass:** This renders the object's fully opaque pixels via the opaque pipeline first, then renders the rest with alpha blending. This allows transparency sorting to be *mostly* correct (albeit not fully so, as partially transparent regions may still exhibit incorrect sorting). Materials using depth prepass can cast shadows."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:93
msgid "Godot will automatically force the material to be transparent with alpha blending if *any* of these conditions is met:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:96
msgid "Setting the transparency mode to **Alpha** (as described here)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:97
msgid "Setting a blend mode other than the default **Mix**"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:98
msgid "Enabling **Refraction**, **Proximity Fade**, or **Distance Fade**."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:100
msgid "Comparison between alpha blending (left) and alpha scissor (right) transparency:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:106
msgid "Alpha-blended transparency has several :ref:`limitations <doc_3d_rendering_limitations_transparency_sorting>`:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:109
msgid "Alpha-blended materials are significantly slower to render, especially if they overlap."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:111
msgid "Alpha-blended materials may exhibit sorting issues when transparent surfaces overlap each other. This means that surfaces may render in the incorrect order, with surfaces in the back appearing to be in front of those which are actually closer to the camera."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:115
msgid "Alpha-blended materials don't cast shadows, although they can receive shadows."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:116
msgid "Alpha-blended materials don't appear in any reflections (other than reflection probes)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:118
msgid "Screen-space reflections and sharp SDFGI reflections don't appear on alpha-blended materials. When SDFGI is enabled, rough reflections are used as a fallback regardless of material roughness."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:122
msgid "Before using the **Alpha** transparency mode, always consider whether another transparency mode is more suited for your needs."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:128
msgid "Alpha Antialiasing"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:132
msgid "This property is only visible when the transparency mode is **Alpha Scissor** or **Alpha Hash**."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:135
msgid "While alpha scissor and alpha hash materials are faster to render than alpha-blended materials, they exhibit hard edges between opaque and transparent regions. While it's possible to use post-processing-based :ref:`antialiasing techniques <doc_3d_antialiasing>` such as FXAA and TAA, this is not always desired as these techniques tend to make the final result look blurrier or exhibit ghosting artifacts."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:142
msgid "There are 3 alpha antialiasing modes available:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:144
msgid "**Disabled:** No alpha antialiasing. Edges of transparent materials will appear aliased unless a post-processing-based antialiasing solution is used."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:146
msgid "**Alpha Edge Blend:** Results in a smooth transition between opaque and transparent areas. Also known as \"alpha to coverage\"."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:148
msgid "**Alpha Edge Clip:** Results in a sharp, but still antialiased transition between opaque and transparent areas. Also known as \"alpha to coverage + alpha to one\"."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:152
msgid "When the alpha antialiasing mode is set to **Alpha Edge Blend** or **Alpha Edge Clip**, a new **Alpha Antialiasing Edge** property becomes visible below in the inspector. This property controls the threshold below which pixels should be made transparent. While you've already defined an alpha scissor threshold (when using **Alpha Scissor** only), this additional threshold is used to smoothly transition between opaque and transparent pixels. **Alpha Antialiasing Edge** must *always* be set to a value that is strictly below the alpha scissor threshold. The default of ``0.3`` is a sensible value with an alpha scissor of threshold of ``0.5``, but remember to adjust this alpha antialiasing edge when modifying the alpha scissor threshold."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:163
msgid "If you find the antialiasing effect not effective enough, try increasing **Alpha Antialiasing Edge** while making sure it's below **Alpha Scissor Threshold** (if the material uses alpha scissor). On the other hand, if you notice the texture's appearance visibly changing as the camera moves closer to the material, try decreasing **Alpha Antialiasing Edge**."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:171
msgid "For best results, MSAA 3D should be set to at least 2× in the Project Settings when using alpha antialiasing. This is because this feature relies on alpha to coverage, which is a feature provided by MSAA."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:175
msgid "Without MSAA, a fixed dithering pattern is applied on the material's edges, which isn't very effective at smoothing out edges (although it can still help a little)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:180
msgid "Blend Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:182
msgid "Controls the blend mode for the material. Keep in mind that any mode other than *Mix* forces the object to go through the transparent pipeline."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:185
msgid "**Mix:** Default blend mode, alpha controls how much the object is visible."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:186
msgid "**Add:** The final color of the object is added to the color of the screen, nice for flares or some fire-like effects."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:188
msgid "**Sub:** The final color of the object is subtracted from the color of the screen."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:190
msgid "**Mul:** The final color of the object is multiplied with the color of the screen."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:196
msgid "Cull Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:198
msgid "Determines which side of the object is not drawn when backfaces are rendered:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:200
msgid "**Back:** The back of the object is culled when not visible (default)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:201
msgid "**Front:** The front of the object is culled when not visible."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:202
msgid "**Disabled:** Used for objects that are double-sided (no culling is performed)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:206
msgid "By default, Blender has backface culling disabled on materials and will export materials to match how they render in Blender. This means that materials in Godot will have their cull mode set to **Disabled**. This can decrease performance since backfaces will be rendered, even when they are being culled by other faces. To resolve this, enable **Backface Culling** in Blender's Materials tab, then export the scene to glTF again."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:214
msgid "Depth Draw Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:216
msgid "Specifies when depth rendering must take place."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:218
msgid "**Opaque Only (default):** Depth is only drawn for opaque objects."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:219
msgid "**Always:** Depth draw is drawn for both opaque and transparent objects."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:220
msgid "**Never:** No depth draw takes place (do not confuse this with the No Depth Test option below)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:222
msgid "**Depth Pre-Pass:** For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn above. Use this option with transparent grass or tree foliage."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:229
msgid "No Depth Test"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:231
msgid "In order for close objects to appear over far away objects, depth testing is performed. Disabling it has the result of objects appearing over (or under) everything else."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:235
msgid "Disabling this makes the most sense for drawing indicators in world space, and works very well with the *Render Priority* property of Material (see the bottom of this page)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:242
msgid "Shading"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:245
msgid "Shading mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:247
msgid "Godot has a more or less uniform cost per pixel thanks to depth pre-pass. All lighting calculations are made by running the lighting shader on every pixel."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:250
msgid "As these calculations are costly, performance can be brought down considerably in some corner cases such as drawing several layers of transparency (which is common in particle systems). Switching to per-vertex lighting may help in these cases."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:255
msgid "Additionally, on low-end or mobile devices, switching to vertex lighting can considerably increase rendering performance."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:260
msgid "Keep in mind that when vertex lighting is enabled, only directional lighting can produce shadows (for performance reasons)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:263
msgid "However, in some cases you might want to show just the albedo (color) and ignore the rest. To do this you can set the shading mode to unshaded"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:269
msgid "Diffuse Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:271
msgid "Specifies the algorithm used by diffuse scattering of light when hitting the object. The default is *Burley*. Other modes are also available:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:274
msgid "**Burley:** Default mode, the original Disney Principled PBS diffuse algorithm."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:275
msgid "**Lambert:** Is not affected by roughness."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:276
msgid "**Lambert Wrap:** Extends Lambert to cover more than 90 degrees when roughness increases. Works great for hair and simulating cheap subsurface scattering. This implementation is energy conserving."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:279
msgid "**Oren Nayar:** This implementation aims to take microsurfacing into account (via roughness). Works well for clay-like materials and some types of cloth."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:281
msgid "**Toon:** Provides a hard cut for lighting, with smoothing affected by roughness. It is recommended you disable sky contribution from your environment's ambient light settings or disable ambient light in the StandardMaterial3D to achieve a better effect."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:289
msgid "Specular Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:291
msgid "Specifies how the specular blob will be rendered. The specular blob represents the shape of a light source reflected in the object."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:294
msgid "**SchlickGGX:** The most common blob used by PBR 3D engines nowadays."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:295
msgid "**Blinn:** Common in previous-generation engines. Not worth using nowadays, but left here for the sake of compatibility."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:297
msgid "**Phong:** Same as above."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:298
msgid "**Toon:** Creates a toon blob, which changes size depending on roughness."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:299
msgid "**Disabled:** Sometimes the blob gets in the way. Begone!"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:304
msgid "Disable Ambient Light"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:306
msgid "Makes the object not receive any kind of ambient lighting that would otherwise light it."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:310
msgid "Disable Fog"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:312
msgid "Makes the object unaffected by depth-based or volumetric fog. This is useful for particles or other additively blended materials that would otherwise show the shape of the mesh (even in places where it would be invisible without the fog)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:315
msgid "Vertex Color"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:317
msgid "This setting allows choosing what is done by default to vertex colors that come from your 3D modeling application. By default, they are ignored."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:323
msgid "Use as Albedo"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:325
msgid "Choosing this option means vertex color is used as albedo color."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:328
msgid "Is sRGB"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:330
msgid "Most 3D modeling software will likely export vertex colors as sRGB, so toggling this option on will help them look correct."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:334
msgid "Albedo"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:336
msgid "*Albedo* is the base color for the material, on which all the other settings operate. When set to *Unshaded*, this is the only color that is visible. In previous versions of Godot, this channel was named *Diffuse*. The change of name mainly happened because, in PBR (Physically Based Rendering), this color affects many more calculations than just the diffuse lighting path."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:342
msgid "Albedo color and texture can be used together as they are multiplied."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:344
msgid "*Alpha channel* in albedo color and texture is also used for the object transparency. If you use a color or texture with *alpha channel*, make sure to either enable transparency or *alpha scissoring* for it to work."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:349
msgid "Metallic"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:351
msgid "Godot uses a metallic model over competing models due to its simplicity. This parameter defines how reflective the material is. The more reflective, the less diffuse/ambient light affects the material and the more light is reflected. This model is called \"energy-conserving\"."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:356
msgid "The *Specular* parameter is a general amount for the reflectivity (unlike *Metallic*, this is not energy-conserving, so leave it at ``0.5`` and don't touch it unless you need to)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:360
msgid "The minimum internal reflectivity is ``0.04``, so it's impossible to make a material completely unreflective, just like in real life."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:366
msgid "Roughness"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:368
msgid "*Roughness* affects the way reflection happens. A value of ``0`` makes it a perfect mirror while a value of ``1`` completely blurs the reflection (simulating natural microsurfacing). Most common types of materials can be achieved with the right combination of *Metallic* and *Roughness*."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:376
msgid "Emission"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:378
msgid "*Emission* specifies how much light is emitted by the material (keep in mind this does not include light surrounding geometry unless :ref:`VoxelGI <doc_using_voxel_gi>` or :ref:`SDFGI <doc_using_sdfgi>` are used). This value is added to the resulting final image and is not affected by other lighting in the scene."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:386
msgid "Normal map"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:388
msgid "Normal mapping allows you to set a texture that represents finer shape detail. This does not modify geometry, only the incident angle for light. In Godot, only the red and green channels of normal maps are used for better compression and wider compatibility."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:397
msgid "Godot requires the normal map to use the X+, Y+ and Z+ coordinates, this is known as OpenGL style. If you've imported a material made to be used with another engine it may be DirectX style, in which case the normal map needs to be converted so its Y axis is flipped."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:402
msgid "More information about normal maps (including a coordinate order table for popular engines) can be found `here <http://wiki.polycount.com/wiki/Normal_Map_Technical_Details>`__."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:407
msgid "Rim"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:409
msgid "Some fabrics have small micro-fur that causes light to scatter around it. Godot emulates this with the *Rim* parameter. Unlike other rim lighting implementations, which just use the emission channel, this one actually takes light into account (no light means no rim). This makes the effect considerably more believable."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:416
msgid "Rim size depends on roughness, and there is a special parameter to specify how it must be colored. If *Tint* is ``0``, the color of the light is used for the rim. If *Tint* is ``1``, then the albedo of the material is used. Using intermediate values generally works best."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:422
msgid "Clearcoat"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:425
msgid "The *Clearcoat* parameter is used to add a secondary pass of transparent coat to the material. This is common in car paint and toys. In practice, it's a smaller specular blob added on top of the existing material."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:432
msgid "Anisotropy"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:435
msgid "This changes the shape of the specular blob and aligns it to tangent space. Anisotropy is commonly used with hair, or to make materials such as brushed aluminum more realistic. It works especially well when combined with flowmaps."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:442
msgid "Ambient Occlusion"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:444
msgid "It is possible to specify a baked ambient occlusion map. This map affects how much ambient light reaches each surface of the object (it does not affect direct light by default). While it is possible to use Screen-Space Ambient Occlusion (SSAO) to generate ambient occlusion, nothing beats the quality of a well-baked AO map. It is recommended to bake ambient occlusion whenever possible."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:453
msgid "Height"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:456
msgid "Setting a depth map on a material produces a ray-marched search to emulate the proper displacement of cavities along the view direction. This is not real added geometry, but an illusion of depth. It may not work for complex objects, but it produces a realistic depth effect for textures. For best results, *Depth* should be used together with normal mapping."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:465
msgid "Subsurface Scattering"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:468
msgid "This effect emulates light that penetrates an object's surface, is scattered, and then comes out. It is useful to create realistic skin, marble, colored liquids, etc."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:475
msgid "Back Lighting"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:477
#: ../../docs/tutorials/3d/standard_material_3d.rst:676
msgid "This controls how much light from the lit side (visible to light) is transferred to the dark side (opposite from the light). This works well for thin objects such as plant leaves, grass, human ears, etc."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:482
msgid "Refraction"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:484
msgid "When refraction is enabled, Godot attempts to fetch information from behind the object being rendered. This allows distorting the transparency in a way similar to refraction in real life."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:488
msgid "Remember to use a transparent albedo texture (or reduce the albedo color's alpha channel) to make refraction visible, as refraction relies on transparency to have a visible effect."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:492
msgid "A normal map can optionally be specified in the **Refraction Texture** property to allow distorting the refraction's direction on a per-pixel basis."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:499
msgid "Refraction is implemented as a screen-space effect and forces the material to be transparent. This makes the effect relatively fast, but this results in some limitations:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:503
msgid ":ref:`Transparency sorting <doc_3d_rendering_limitations_transparency_sorting>` issues may occur."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:505
msgid "The refractive material cannot refract onto itself, or onto other transparent materials. A refractive material behind another transparent material will be invisible."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:508
msgid "Off-screen objects cannot appear in the refraction. This is most noticeable with high refraction strength values."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:510
msgid "Opaque materials in front of the refractive material will appear to have \"refracted\" edges, even though they shouldn't."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:514
msgid "Detail"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:516
msgid "Godot allows using secondary albedo and normal maps to generate a detail texture, which can be blended in many ways. By combining this with secondary UV or triplanar modes, many interesting textures can be achieved."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:522
msgid "There are several settings that control how detail is used."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:524
msgid "Mask: The detail mask is a black and white image used to control where the blending takes place on a texture. White is for the detail textures, Black is for the regular material textures, different shades of gray are for partial blending of the material textures and detail textures."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:529
msgid "Blend Mode: These four modes control how the textures are blended together."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:531
msgid "Mix: Combines pixel values of both textures. At black, only show the material texture, at white, only show the detail texture. Values of gray create a smooth blend between the two."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:535
msgid "Add: Adds pixel values of one Texture with the other. Unlike mix mode both textures are completely mixed at white parts of a mask and not at gray parts. The original texture is mostly unchanged at black"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:539
msgid "Sub: Subtracts pixel values of one texture with the other. The second texture is completely subtracted at white parts of a mask with only a little subtraction in black parts, gray parts being different levels of subtraction based on the exact texture."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:544
msgid "Mul: Multiplies the RGB channel numbers for each pixel from the top texture with the values for the corresponding pixel from the bottom texture."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:547
msgid "Albedo: This is where you put an albedo texture you want to blend. If nothing is in this slot it will be interpreted as white by default."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:550
msgid "Normal: This is where you put a normal texture you want to blend. If nothing is in this slot it will be interpreted as a flat normal map. This can still be used even if the material does not have normal map enabled."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:555
msgid "UV1 and UV2"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:557
msgid "Godot supports two UV channels per material. Secondary UV is often useful for ambient occlusion or emission (baked light). UVs can be scaled and offset, which is useful when using repeating textures."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:564
msgid "Triplanar Mapping"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:566
msgid "Triplanar mapping is supported for both UV1 and UV2. This is an alternative way to obtain texture coordinates, sometimes called \"Autotexture\". Textures are sampled in X, Y and Z and blended by the normal. Triplanar mapping can be performed in either world space or object space."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:571
msgid "In the image below, you can see how all primitives share the same material with world triplanar, so the brick texture continues smoothly between them."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:577
msgid "World Triplanar"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:579
msgid "When using triplanar mapping, it is computed in object local space. This option makes it use world space instead."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:585
msgid "Sampling"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:588
msgid "Filter"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:590
msgid "The filtering method for the textures used by the material. See :ref:`this page<class_BaseMaterial3D_property_texture_filter>` for a full list of options and their description."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:594
msgid "Repeat"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:596
msgid "if the textures used by the material repeat, and how they repeat. See :ref:`this page<class_BaseMaterial3D_property_texture_repeat>` for a full list of options and their description."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:600
msgid "Shadows"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:603
msgid "Do Not Receive Shadows"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:605
msgid "Makes the object not receive any kind of shadow that would otherwise be cast onto it."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:609
msgid "Use Shadow to Opacity"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:611
msgid "Lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:615
msgid "Billboard"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:618
msgid "Billboard Mode"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:620
msgid "Enables billboard mode for drawing materials. This controls how the object faces the camera:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:623
msgid "**Disabled:** Billboard mode is disabled."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:624
msgid "**Enabled:** Billboard mode is enabled. The object's -Z axis will always face the camera's viewing plane."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:626
msgid "**Y-Billboard:** The object's X axis will always be aligned with the camera's viewing plane."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:627
msgid "**Particle Billboard:** Most suited for particle systems, because it allows specifying :ref:`flipbook animation <doc_process_material_properties_animation>`."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:632
msgid "The **Particles Anim** section is only visible when the billboard mode is **Particle Billboard**."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:635
msgid "Billboard Keep Scale"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:637
msgid "Enables scaling a mesh in billboard mode."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:640
msgid "Grow"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:642
msgid "Grows the object vertices in the direction pointed by their normals:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:646
msgid "This is commonly used to create cheap outlines. Add a second material pass, make it black and unshaded, reverse culling (Cull Front), and add some grow:"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:652
msgid "Transform"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:655
msgid "Fixed Size"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:657
msgid "This causes the object to be rendered at the same size no matter the distance. This is useful mostly for indicators (no depth test and high render priority) and some types of billboards."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:662
msgid "Use Point Size"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:664
msgid "This option is only effective when the geometry rendered is made of points (generally it's made of triangles when imported from 3D modeling software). If so, then those points can be resized (see below)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:669
msgid "Point Size"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:671
msgid "When drawing points, specify the point size in pixels."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:674
msgid "Transmission"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:683
msgid "Proximity and Distance Fade"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:685
msgid "Godot allows materials to fade by proximity to each other as well as depending on the distance from the viewer. Proximity fade is useful for effects such as soft particles or a mass of water with a smooth blending to the shores."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:691
msgid "Distance fade is useful for light shafts or indicators that are only present after a given distance."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:694
msgid "Keep in mind enabling proximity fade or distance fade with **Pixel Alpha** mode enables alpha blending. Alpha blending is more GPU-intensive and can cause transparency sorting issues. Alpha blending also disables many material features such as the ability to cast shadows. To hide a character when they get too close to the camera, consider using **Pixel Dither** or better, **Object Dither** (which is even faster than **Pixel Dither**)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:703
msgid "Material Settings"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:706
msgid "Render priority"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:708
msgid "The rendering order of objects can be changed, although this is mostly useful for transparent objects (or opaque objects that perform depth draw but no color draw, such as cracks on the floor)."
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:713
msgid "Next Pass"
msgstr ""

#: ../../docs/tutorials/3d/standard_material_3d.rst:715
msgid "Sets the material to be used for the next pass. This renders the object again with a different material."
msgstr ""

#: ../../docs/<rst_epilog>:0
msgid "Translation status"
msgstr ""
