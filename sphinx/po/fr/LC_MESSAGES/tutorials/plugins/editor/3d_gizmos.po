# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "3D gizmo plugins"
msgstr "Gadget spatial plugins"

msgid "Introduction"
msgstr "Introduction"

#, fuzzy
msgid ""
"3D gizmo plugins are used by the editor and custom plugins to define the "
"gizmos attached to any kind of Node3D node."
msgstr ""
"Les plugins de gizmo spatial sont utilisés par l'éditeur et les plugins "
"personnalisés pour définir les gizmos attachés à tout type de nœud spatial."

#, fuzzy
msgid ""
"This tutorial shows the two main approaches to defining your own custom "
"gizmos. The first option works well for simple gizmos and creates less "
"clutter in your plugin structure, and the second one will let you store some "
"per-gizmo data."
msgstr ""
"Ce tutoriel vous montrera les deux principales approches pour définir vos "
"propres gizmos personnalisés. La première option fonctionne bien pour les "
"gizmos simples et crée moins d'encombrement dans la structure de votre "
"plugin, tandis que la seconde vous permettra de stocker des données par "
"gizmo."

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"Ce tutoriel suppose que vous savez déjà comment créer des plugins "
"génériques. En cas de doute, reportez-vous à la page  :ref:"
"`doc_making_plugins`."

#, fuzzy
msgid "The EditorNode3DGizmoPlugin"
msgstr "L'EditorSpatialGizmoPlugin"

#, fuzzy
msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""
"Quelle que soit l'approche que nous choisissons, nous devrons créer un "
"nouveau :ref:`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>`. "
"Cela nous permettra de définir un nom pour le nouveau type de gizmo et de "
"définir d'autres comportements, par exemple si le gizmo peut être masqué ou "
"non."

msgid "This would be a basic setup:"
msgstr "Ce sera une configuration de base :"

#, fuzzy
msgid ""
"For simple gizmos, inheriting :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"Pour les gizmos simples, hériter simplement de :ref:"
"`EditorSpatialGizmoPlugin <class_EditorSpatialGizmoPlugin>` suffit. Si vous "
"souhaitez stocker des données par gizmo ou si vous portez un gizmo Godot 3.0 "
"vers 3.1+, vous devriez opter pour la deuxième approche."

msgid "Simple approach"
msgstr "Approche simple"

#, fuzzy
msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` "
"method so that it returns ``true`` when the node parameter is of our target "
"type."
msgstr ""
"La première étape consiste, dans notre plugin de gizmo personnalisé, à "
"remplacer la méthode :ref:"
"`has_gizmo()<class_EditorSpatialGizmoPlugin_method_has_gizmo>` afin qu'elle "
"renvoie ``true`` lorsque le paramètre spatial est de notre type cible."

#, fuzzy
msgid ""
"Then we can override methods like :ref:"
"`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` or all the "
"handle related ones."
msgstr ""
"Ensuite, nous pouvons remplacer des méthodes comme :ref:"
"`redraw()<class_EditorSpatialGizmoPlugin_method_redraw>` ou toutes les "
"poignées associées."

#, fuzzy
msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `_redraw` method using :ref:"
"`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""
"Notez que nous avons créé un matériau dans la méthode `_init`, et l'avons "
"récupéré dans la méthode `redraw` en utilisant :ref:"
"`get_material()<class_EditorSpatialGizmoPlugin_method_get_material>`. Cette "
"méthode récupère une des variantes du matériau en fonction de l'état du "
"gizmo (sélectionné et/ou modifiable)."

msgid "So the final plugin would look somewhat like this:"
msgstr "Le plugin final ressemblerait donc un peu à ceci :"

#, fuzzy
msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` to get properly "
"working handles."
msgstr ""
"Notez que nous venons d'ajouter quelques poignées dans la méthode de "
"rafraîchissement, mais nous devons toujours implémenter le reste des rappels "
"liés aux poignées dans :ref:`EditorSpatialGizmoPlugin "
"<class_EditorSpatialGizmoPlugin>` pour obtenir des poignées fonctionnant "
"correctement."

msgid "Alternative approach"
msgstr "Approche alternative"

#, fuzzy
msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>`, maybe because we want to have "
"some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""
"Dans certains cas, nous voulons fournir notre propre implémentation de :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, peut-être parce que nous "
"voulons avoir un état stocké dans chaque gizmo ou parce que nous portons un "
"ancien plugin de gizmo et nous ne voulons le réécrire."

#, fuzzy
msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, "
"so it returns our custom gizmo implementation for the Node3D nodes we want "
"to target."
msgstr ""
"Dans ces cas, tout ce que nous devons faire est, dans notre nouveau plugin "
"gizmo, remplacer :ref:"
"`create_gizmo()<class_EditorSpatialGizmoPlugin_method_create_gizmo>`, afin "
"qu'il renvoie notre implémentation de gizmo personnalisée pour les nœuds "
"spatiaux que nous voulons cibler."

#, fuzzy
msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, like so:"
msgstr ""
"De cette façon, toutes les méthodes de logique et de dessin du gizmo peuvent "
"être implémentées dans une nouvelle classe étendant :ref:"
"`EditorSpatialGizmo<class_EditorSpatialGizmo>`, comme ça :"

#, fuzzy
msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>` to get properly working handles."
msgstr ""
"Notez que nous venons d'ajouter quelques poignées dans la méthode redraw, "
"mais nous devons toujours implémenter le reste des rappels liés aux poignées "
"dans :ref:`EditorSpatialGizmo<class_EditorSpatialGizmo>` pour obtenir des "
"poignées fonctionnant correctement."

msgid "Translation status"
msgstr "État de la traduction"
