# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "Utilisation d'InputEvent"

msgid "What is it?"
msgstr "Qu'est-ce que c'est ?"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"La gestion des entrées est généralement complexe, quel que soit le système "
"d'exploitation ou la plate-forme. Pour faciliter un peu les choses, un type "
"spécial intégré est fourni, :ref:`InputEvent <class_InputEvent>`. Ce type de "
"données peut être configuré pour contenir plusieurs types d'événements "
"d'entrée. Les événements d'entrée voyagent à travers le moteur et peuvent "
"être reçus à plusieurs endroits, selon le but recherché."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Voici un exemple rapide, la fermeture de votre jeu si la touche quitter est "
"appuyée :"

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"Cependant, il est plus propre et plus flexible d'utiliser la fonction "
"fournie :ref:`InputMap <class_InputMap>`, qui vous permet de définir des "
"actions d'entrée et de leur assigner différentes touches. De cette façon, "
"vous pouvez définir plusieurs touches pour la même action (par exemple, la "
"touche d'Échaptr et le bouton start sur une manette de jeu). Vous pouvez "
"alors plus facilement changer cette cartographie dans les paramètres du "
"projet sans mettre à jour votre code, et même construire une fonction de "
"cartographie de touche par-dessus pour permettre à votre jeu de changer la "
"cartographie de touche pendant l'exécution !"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Vous pouvez configurer votre InputMap sous **Project > Project Settings > "
"Input Map** et utiliser ces actions comme ceci :"

msgid "How does it work?"
msgstr "Comment ça marche ?"

#, fuzzy
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The DisplayServer for each platform will read events from the "
"operating system, then feed them to the root :ref:`Window <class_Window>`."
msgstr ""
"Chaque événement d'entrée provient de l'utilisateur/joueur (bien qu'il soit "
"possible de générer un InputEvent et de le renvoyer au moteur, ce qui est "
"utile pour les gestes). L'objet OS pour chaque plate-forme lira les "
"événements du périphérique, puis les enverra à MainLoop. Comme :ref:"
"`SceneTree <class_SceneTree>` est l'implémentation par défaut de MainLoop, "
"les événements lui sont envoyés. Godot fournit une fonction pour obtenir "
"l'objet SceneTree courant : **get_tree()**."

#, fuzzy
msgid ""
"The window's :ref:`Viewport <class_Viewport>` does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
":ref:`Viewports <class_Viewport>` ont une variété de cas d'utilisation, y "
"compris :"

msgid ""
"If the Viewport is embedding Windows, the Viewport tries to interpret the "
"event in its capability as a Window-Manager (e.g. for resizing or moving "
"Windows)."
msgstr ""

msgid ""
"Next if an embedded Window is focused, the event is sent to that Window and "
"processed in the Windows Viewport and afterwards treated as handled. If no "
"embedded Window is focused, the event is sent to the nodes of the current "
"viewport in the following order."
msgstr ""

#, fuzzy
msgid ""
"First of all, the standard :ref:`Node._input() "
"<class_Node_private_method__input>` function will be called in any node that "
"overrides it (and hasn't disabled input processing with :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. This ensures that you can filter all events of interest, even "
"before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` is generally a better fit, "
"because it allows the GUI to intercept the events."
msgstr ""
"Tout d'abord, la fonction standard :ref:`Node._input() "
"<class_Node_method__input>` sera appelée dans tout nœud qui la surcharge (et "
"qui n'a pas désactivé le traitement des entrées avec :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). Si une fonction "
"consomme l'événement, elle peut appeler :ref:`SceneTree."
"set_input_as_handled() <class_SceneTree_method_set_input_as_handled>`, et "
"l'événement ne se répandra plus. Cela vous permet de filtrer tous les "
"événements d'intérêt, même avant l'interface graphique. Pour l'entrée du "
"gameplay, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` est généralement plus adapté, car il "
"permet à l'interface graphique d'intercepter les événements."

#, fuzzy
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>` and the signal \"gui_input\" will "
"be emitted (this function is re-implementable by script by inheriting from "
"it). If the control wants to \"consume\" the event, it will call :ref:"
"`Control.accept_event() <class_Control_method_accept_event>` and the event "
"will not spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_private_method__gui_input>` callback, and "
"whether these events are propagated further."
msgstr ""
"Deuxièmement, il va essayer d'alimenter l'entrée de l'interface graphique, "
"et voir si un contrôle peut la recevoir. Si c'est le cas, le :ref:`Control "
"<class_Control>` sera appelé via la fonction virtuelle :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` et le signal \"gui_input\" "
"sera émis (cette fonction est réimplémentable par script en héritant "
"d'elle). Si le contrôle veut \"consommer\" l'événement, il appellera :ref:"
"`Control.accept_event() <class_Control_method_accept_event>` et l'événement "
"ne sera plus diffusé. Utilisez la propriété :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` pour contrôler si un :ref:`Control "
"<class_Control>` est notifié des événements de souris via le callback :ref:"
"`Control._gui_input() <class_Control_method__gui_input>`, et si ces "
"événements sont propagés plus loin."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._shortcut_input() "
"<class_Node_private_method__shortcut_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_shortcut_input() "
"<class_Node_method_set_process_shortcut_input>`). This happens only for :ref:"
"`InputEventKey <class_InputEventKey>`, :ref:`InputEventShortcut "
"<class_InputEventShortcut>` and :ref:`InputEventJoypadButton "
"<class_InputEventJoypadButton>`. If any function consumes the event, it can "
"call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The shortcut input callback is ideal for treating events that are "
"intended as shortcuts."
msgstr ""
"Si jusqu'à présent personne n'a consommé l'événement, le rappel d'entrée non "
"géré sera appelé s'il est surchargé (et non désactivé avec :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si une fonction consomme "
"l'événement, elle peut appeler :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, et l'événement ne se "
"répandra plus. Le rappel d'entrée non géré est idéal pour les événements de "
"gameplay en plein écran, de sorte qu'ils ne sont pas reçus lorsqu'une "
"interface graphique est active."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_key_input() "
"<class_Node_private_method__unhandled_key_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node."
"set_process_unhandled_key_input() "
"<class_Node_method_set_process_unhandled_key_input>`). This happens only if "
"the event is a :ref:`InputEventKey <class_InputEventKey>`. If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled key input callback is ideal for key events."
msgstr ""
"Si jusqu'à présent personne n'a consommé l'événement, le rappel d'entrée non "
"géré sera appelé s'il est surchargé (et non désactivé avec :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si une fonction consomme "
"l'événement, elle peut appeler :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, et l'événement ne se "
"répandra plus. Le rappel d'entrée non géré est idéal pour les événements de "
"gameplay en plein écran, de sorte qu'ils ne sont pas reçus lorsqu'une "
"interface graphique est active."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled input callback is ideal for full-screen gameplay "
"events, so they are not received when a GUI is active."
msgstr ""
"Si jusqu'à présent personne n'a consommé l'événement, le rappel d'entrée non "
"géré sera appelé s'il est surchargé (et non désactivé avec :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si une fonction consomme "
"l'événement, elle peut appeler :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, et l'événement ne se "
"répandra plus. Le rappel d'entrée non géré est idéal pour les événements de "
"gameplay en plein écran, de sorte qu'ils ne sont pas reçus lorsqu'une "
"interface graphique est active."

#, fuzzy
msgid ""
"If no one wanted the event so far, and :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` is turned on, the event is "
"used for object picking. For the root viewport, this can also be enabled in :"
"ref:`Project Settings <class_ProjectSettings_property_physics/common/"
"enable_object_picking>`. In the case of a 3D scene if a :ref:`Camera3D "
"<class_Camera3D>` is assigned to the Viewport, a ray to the physics world "
"(in the ray direction from the click) will be cast. If this ray hits an "
"object, it will call the :ref:`CollisionObject3D._input_event() "
"<class_CollisionObject3D_private_method__input_event>` function in the "
"relevant physics object. In the case of a 2D scene, conceptually the same "
"happens with :ref:`CollisionObject2D._input_event() "
"<class_CollisionObject2D_private_method__input_event>`."
msgstr ""
"Si personne n'a voulu de l'événement jusqu'à présent, et qu'une :ref:`Camera "
"<class_Camera>` est assignée au Viewport avec :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` activé, un rayon vers le "
"monde physique (dans la direction du rayon à partir du clic) sera lancé. "
"(Pour le viewport racine, cela peut également être activé dans :ref:`Project "
"Settings <class_ProjectSettings_property_physics/common/"
"enable_object_picking>`) Si ce rayon touche un objet, il appellera la "
"fonction :ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` dans l'objet physique concerné "
"(les corps reçoivent ce rappel par défaut, mais pas les areas. Cela peut "
"être configuré via les propriétés d' :ref:`Area <class_Area>`)."

msgid ""
"When sending events to its child and descendant nodes, the viewport will do "
"so, as depicted in the following graphic, in a reverse depth-first order, "
"starting with the node at the bottom of the scene tree, and ending at the "
"root node. Excluded from this process are Windows and SubViewports."
msgstr ""
"Lors de l'envoi d'événements à ses nœuds enfants et descendants, la fenêtre "
"le fera, comme illustré dans le graphique suivant, dans un ordre inverse en "
"profondeur, en commençant par le nœud au bas de l'arborescence de la scène "
"et en se terminant au nœud racine. Sont exclus de ce processus Windows et "
"SubViewports."

#, fuzzy
msgid ""
"This order doesn't apply to :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`, which uses a different method "
"based on event location or focused Control."
msgstr ""
"Cette fonction est :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`. Il vous suffit de l'ignorer dans votre "
"control. Il n'est pas nécessaire de définir un traitement."

msgid ""
"Since Viewports don't send events to other :ref:`SubViewports "
"<class_SubViewport>`, one of the following methods has to be used:"
msgstr ""

msgid ""
"Use a :ref:`SubViewportContainer <class_SubViewportContainer>`, which "
"automatically sends events to its child :ref:`SubViewports "
"<class_SubViewport>` after :ref:`Node._input() "
"<class_Node_private_method__input>` or :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`."
msgstr ""

msgid "Implement event propagation based on the individual requirements."
msgstr ""

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"Les événements de l'interface graphique remontent également dans l'arbre des "
"scènes mais, comme ces événements ciblent des Controls spécifiques, seuls "
"les ancêtres directs du nœud de Control ciblé reçoivent l'événement."

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"Conformément au design de Godot basée sur les nœuds, cela permet à des nœuds "
"enfants spécialisés de gérer et de consommer des événements particuliers, "
"tandis que leurs ancêtres, et finalement la racine de la scène, peuvent "
"fournir un comportement plus généralisé si nécessaire."

msgid "Anatomy of an InputEvent"
msgstr "Anatomie d'un InputEvent"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` est juste un type intégré de base, il "
"ne représente rien et contient seulement quelques informations de base, "
"comme l'ID de l'événement (qui est incrémenté pour chaque événement), "
"l'index du périphérique, etc."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Il existe plusieurs types spécialisés d'InputEvent, décrits dans le tableau "
"ci-dessous :"

msgid "Event"
msgstr "Évènement"

msgid "Description"
msgstr "Description"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "Empty Input Event."
msgstr "Évènement d'entrée vide."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

#, fuzzy
msgid "Contains a keycode and Unicode value, as well as modifiers."
msgstr ""
"Contient un code d'analyse et une valeur Unicode, ainsi que des "
"modificateurs."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "Contains click information, such as button, modifiers, etc."
msgstr ""
"Contient des informations de clic, telles que bouton, modificateurs, etc."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

#, fuzzy
msgid ""
"Contains motion information, such as relative and absolute positions and "
"speed."
msgstr ""
"Contient l'information du mouvement, comme les positions relatives et "
"absolues ainsi que la vitesse."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "Contient l'information de l(axe analogique du Joystick/Joypad."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "Contains Joystick/Joypad button information."
msgstr "Contient des informations sur les boutons de la manette/du joystick."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Contient des informations de pression/relâchement multi-touche. (uniquement "
"disponible sur les appareils mobiles)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Contient des informations de glissement multi-touche. (uniquement disponible "
"sur les appareils mobiles)"

#, fuzzy
msgid ":ref:`InputEventMagnifyGesture <class_InputEventMagnifyGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a factor as well as modifiers."
msgstr ""
"Contient un code d'analyse et une valeur Unicode, ainsi que des "
"modificateurs."

#, fuzzy
msgid ":ref:`InputEventPanGesture <class_InputEventPanGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a delta as well as modifiers."
msgstr ""
"Contient un code d'analyse et une valeur Unicode, ainsi que des "
"modificateurs."

#, fuzzy
msgid ":ref:`InputEventMIDI <class_InputEventMIDI>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains MIDI-related information."
msgstr "Contient des informations sur les boutons de la manette/du joystick."

#, fuzzy
msgid ":ref:`InputEventShortcut <class_InputEventShortcut>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a shortcut."
msgstr "Conteneurs de disposition"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Contient une action générique. Ces événements sont souvent générés par le "
"programmeur en tant que retour d'information. (plus d'informations ci-"
"dessous)"

msgid "Actions"
msgstr "Actions"

msgid ""
"Actions are a grouping of zero or more InputEvents into a commonly "
"understood title (for example, the default \"ui_left\" action grouping both "
"joypad-left input and a keyboard's left arrow key). They are not required to "
"represent an InputEvent but are useful because they abstract various inputs "
"when programming the game logic."
msgstr ""

#, fuzzy
msgid "This allows for:"
msgstr "Cela permet plusieurs fonctionnalités :"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"Le même code pour travailler sur différents appareils avec différentes "
"entrées (par exemple, clavier sur PC, Joypad sur console)."

msgid "Input to be reconfigured at run-time."
msgstr "Entrée à reconfigurer au moment de l'exécution."

#, fuzzy
msgid "Actions to be triggered programmatically at run-time."
msgstr "Entrée à reconfigurer au moment de l'exécution."

#, fuzzy
msgid ""
"Actions can be created from the Project Settings menu in the **Input Map** "
"tab and assigned input events."
msgstr ""
"Les actions peuvent être créées à partir du menu Paramètres du projet dans "
"l'onglet Actions."

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Tout événement a les méthodes :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` et :ref:`InputEvent "
"<class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"Alternativement, il peut être souhaité de fournir au jeu un retour avec une "
"action à partir du code de jeu (un bon exemple de cela est la détection des "
"gestes). Le singleton Input a une méthode pour cela : :ref:`Input."
"parse_input_event() <class_input_method_parse_input_event>`. Vous "
"l'utiliseriez normalement comme ceci :"

msgid "InputMap"
msgstr "InputMap"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"Il est souvent souhaitable de personnaliser et de re-cartographier les "
"entrées à partir du code. Si tout votre workflow dépend d'actions, le "
"singleton :ref:`InputMap <class_InputMap>` est idéal pour réaffecter ou "
"créer différentes actions à l'exécution. Ce singleton n'est pas sauvegardé "
"(doit être modifié manuellement) et son état est lancé à partir des "
"paramètres du projet (project.godot). Ainsi, tout système dynamique de ce "
"type doit stocker les paramètres de la manière la plus appropriée pour le "
"programmeur."

msgid "Translation status"
msgstr "État de la traduction"
