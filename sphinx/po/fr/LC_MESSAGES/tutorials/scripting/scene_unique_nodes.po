# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Scene Unique Nodes"
msgstr "Scene Node"

msgid "Introduction"
msgstr "Introduction"

msgid ""
"Using ``get_node()`` to reference nodes from a script can sometimes be "
"fragile. If you move a button in a UI scene from one panel to another, the "
"button's node path changes, and if a script uses ``get_node()`` with a hard-"
"coded node path, the script will not be able to find the button anymore."
msgstr ""

msgid ""
"In situations like this, the node can be turned into a scene unique node to "
"avoid having to update the script every time the node's path is changed."
msgstr ""

#, fuzzy
msgid "Creation and usage"
msgstr "Création d'un thème"

msgid ""
"In the Scene tree dock, right-click on a node and select **Access as Unique "
"Name** in the context menu."
msgstr ""

msgid ""
"After selecting the option, the node will now have a percent symbol (**%**) "
"next to its name in the scene tree:"
msgstr ""

msgid ""
"You can now use the node in your script. For example, you can reference it "
"with a ``get_node()`` method call by typing the % symbol, followed by the "
"node's name:"
msgstr ""

#, fuzzy
msgid "Same-scene limitation"
msgstr "Limitations du langage de shader"

msgid ""
"A scene unique node can only be retrieved by a node inside the same scene. "
"To demonstrate this limitation, consider this example **Player** scene that "
"instances a **Sword** scene:"
msgstr ""

msgid ""
"Here are the results of ``get_node()`` calls inside the **Player** script:"
msgstr ""

msgid "``get_node(\"%Eyes\")`` returns the **Eyes** node."
msgstr ""

msgid "``get_node(\"%Hilt\")`` returns ``null``."
msgstr ""

msgid ""
"These are the results of ``get_node()`` calls inside the **Sword** script:"
msgstr ""

msgid "``get_node(\"%Eyes\")`` returns ``null``."
msgstr ""

msgid "``get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr ""

msgid ""
"If a script has access to a node in another scene, it can call "
"``get_node()`` on that node to get scene unique nodes from that node's "
"scene. This also works in a node path, which avoids multiple ``get_node()`` "
"calls. Here are two ways to get the **Hilt** node from the **Player** script "
"using scene unique nodes:"
msgstr ""

msgid ""
"``get_node(\"Hand/Sword\").get_node(\"%Hilt\")`` returns the **Hilt** node."
msgstr ""

msgid "``get_node(\"Hand/Sword/%Hilt\")`` also returns the **Hilt** node."
msgstr ""

msgid ""
"Scene unique names don't only work at the end of a node path. They can be "
"used in the middle to navigate from one node to another. For example, the "
"**Sword** node is marked as a scene unique node in the **Player** scene, so "
"this is possible:"
msgstr ""

msgid "``get_node(\"%Sword/%Hilt\")`` returns the **Hilt** node."
msgstr ""

#, fuzzy
msgid "Alternatives"
msgstr "Approche alternative"

msgid ""
"Scene unique nodes are a useful tool to navigate a scene. However, there are "
"some situations where other techniques may be better."
msgstr ""

msgid ""
"A :ref:`Group <doc_groups>` allows locating a node (or a group of many "
"nodes) from any other node, no matter what scene the two nodes are located "
"in."
msgstr ""

msgid ""
"A :ref:`Singleton (Autoload) <doc_singletons_autoload>` is an always loaded "
"node that can be accessed directly by any node regardless of the scene. "
"These are useful when some data or functionality is shared globally."
msgstr ""

msgid ""
":ref:`Node.find_child() <class_Node_method_find_child>` finds a node by name "
"without knowing its full path. This seems similar to a scene unique node, "
"but this method is able to find nodes in nested scenes, and doesn't require "
"marking the node in the scene editor in any way. However, this method is "
"slow. Scene unique nodes are cached by Godot and are fast to retrieve, but "
"each time the method is called, ``find_child()`` needs to check every "
"descendant (every child, grandchild, and so on)."
msgstr ""

msgid "Translation status"
msgstr "État de la traduction"
