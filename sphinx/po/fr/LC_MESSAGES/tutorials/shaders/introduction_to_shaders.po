# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to shaders"
msgstr "Introduction aux shaders"

msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""
"Cette page explique ce que sont les shaders et vous donnera un aperçu de "
"leur fonctionnement dans Godot. Pour une référence détaillée du langage de "
"shader du moteur, voir :ref:`doc_shading_language`."

msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""
"Les shaders sont un type particulier de programme qui fonctionne sur les "
"unités de traitement graphique (GPU). Ils étaient initialement utilisés pour "
"ombrer les scènes 3D mais peuvent aujourd'hui faire beaucoup plus. Vous "
"pouvez les utiliser pour contrôler la façon dont le moteur dessine la "
"géométrie et les pixels à l'écran, ce qui vous permet d'obtenir toutes "
"sortes d'effets."

msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""
"Les moteurs de rendu modernes comme Godot dessinent tout avec des shaders : "
"les cartes graphiques peuvent exécuter des milliers d'instructions en "
"parallèle, ce qui permet une vitesse de rendu incroyable."

msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""
"Cependant, en raison de leur nature parallèle, les shaders ne traitent pas "
"les informations comme le fait un programme classique. Le code du shader "
"s'exécute sur chaque sommet ou pixel de manière isolée. Vous ne pouvez pas "
"non plus stocker des données entre les images. Par conséquent, lorsque vous "
"travaillez avec des shaders, vous devez coder et penser différemment des "
"autres langages de programmation."

msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""
"Supposons que vous vouliez mettre à jour tous les pixels d'une texture à une "
"couleur donnée. En GDScript, votre code utiliserait des boucles ``for`` :"

msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""
"Votre code fait déjà partie d'une boucle dans un shader, donc le code "
"correspondant ressemblerait à ceci."

msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""
"La carte graphique appelle la fonction ``fragment()`` une fois ou plus pour "
"chaque pixel qu'elle doit dessiner. Nous y reviendrons plus loin."

msgid "Shaders in Godot"
msgstr "Shaders dans Godot"

msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""
"Godot fournit un langage de shader basé sur le populaire langage de shader "
"OpenGL (GLSL), mais simplifié. Le moteur gère une partie du travail "
"d'initialisation de bas niveau pour vous, ce qui facilite l'écriture de "
"shaders complexes."

msgid ""
"In Godot, shaders are made up of main functions called \"processor "
"functions\". Processor functions are the entry point for your shader into "
"the program. There are seven different processor functions."
msgstr ""
"Dans Godot, les shaders sont faits de fonctions principales appelées "
"\"fonctions de traitement\". Ces fonctions de traitement sont les points "
"d'entré de vos shaders dans le processus. Il y a sept fonctions de "
"traitement différentes."

msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables. Used in :ref:"
"`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial shaders "
"<doc_spatial_shader>`."
msgstr ""
"La fonction ``vertex()`` s'exécute sur tous les vertex du mesh et définit "
"leurs positions ainsi que d'autres attributs propres aux vertex. Utilisée "
"dans les types de shader :ref :`canvas_item <doc_canvas_item_shader>` et :"
"ref :`spatial <doc_spatial_shader>`."

msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices. Used in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :"
"ref:`spatial shaders <doc_spatial_shader>`."
msgstr ""
"La fonction ``fragment()`` s'exécute sur chaque pixel couvert par le mesh. "
"Elle utilise les valeurs de sorties de la fonction ``vertex()``, interpolées "
"entre les vertex. Utilsisée dans type de shader :ref :`canvas_item "
"<doc_canvas_item_shader>` et :ref :`spatial <doc_spatial_shader>`."

msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs. Used "
"in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial "
"shaders <doc_spatial_shader>`."
msgstr ""
"La fonction ``light()`` s'exécute sur chaque pixel et sur chaque lumière. "
"Elle prends des attributs de la fonction ``fragment()`` et de ses exécutions "
"précédentes. Utilisée dans les types de shaders :ref :`canvas_item "
"<doc_canvas_item_shader>` et :ref :`spatial <doc_spatial_shader>`."

msgid ""
"The ``start()`` function runs for every particle in a particle system once "
"when the particle is first spawned. Used in :ref:`particles shaders "
"<doc_particle_shader>`."
msgstr ""

msgid ""
"The ``process()`` function runs for every particle in a particle system for "
"each frame. Used in :ref:`particles shaders <doc_particle_shader>`."
msgstr ""

msgid ""
"The ``sky()`` function runs for every pixel in the radiance cubemap when the "
"radiance cubemap needs to be updated, and for every pixel on the current "
"screen. Used in :ref:`sky shaders <doc_sky_shader>`."
msgstr ""

msgid ""
"The ``fog()`` function runs for every froxel in the volumetric fog froxel "
"buffer that intersects with the :ref:`FogVolume <class_FogVolume>`. Used by :"
"ref:`fog shaders <doc_fog_shader>`."
msgstr ""

msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""
"La fonction ``light()`` ne sera pas exécutée si le mode de rendu "
"``vertex_lighting`` est activé, ou si **Rendering > Quality > Shading > "
"Force Vertex Shading** est activé dans les paramètres du projet. C'est "
"activée par défaut sur les plateformes mobiles."

msgid ""
"Godot also exposes an API for users to write totally custom GLSL shaders. "
"For more information see :ref:`doc_compute_shaders`."
msgstr ""

msgid "Shader types"
msgstr "Types de shader"

#, fuzzy
msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles, sky, fog), you must specify the type of shader you're writing. "
"Different types support different render modes, built-in variables, and "
"processing functions."
msgstr ""
"Au lieu de fournir une configuration générale pour tous les usages (2D, 3D, "
"particules), vous devez spécifier le type de shader que vous écrivez. "
"Différents types supportent différents modes de rendu, variables intégrées "
"et fonctions de traitement."

msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""
"Dans Godot, tous les shaders doivent spécifier leur type dans la première "
"ligne, comme ceci :"

msgid "Here are the available types:"
msgstr "Voici les types disponibles :"

msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>` pour le rendu 3D."

msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>` pour le rendu 2D."

msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ""
":ref:`particles <doc_particle_shader>` pour les systèmes de particules."

msgid ":ref:`sky <doc_sky_shader>` to render :ref:`Skies <class_Sky>`."
msgstr ""

msgid ""
":ref:`fog <doc_fog_shader>` to render :ref:`FogVolumes <class_FogVolume>`"
msgstr ""

msgid "Render modes"
msgstr "Mode de rendu"

msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""
"Les shaders ont des modes de rendu optionnels que vous pouvez spécifier sur "
"la deuxième ligne, après le type de shader, comme suit :"

msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""
"Les modes de rendu modifient la façon dont Godot applique le shader. Par "
"exemple, le mode ``unshaded`` fait ignorer au moteur la fonction intégrée de "
"processeur de lumière."

msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""
"Chaque type de shader possède différents modes de rendu. Consultez la "
"référence de chaque type de shader pour obtenir une liste complète des modes "
"de rendu."

msgid "Vertex processor"
msgstr "Processeur de sommet"

msgid ""
"The ``vertex()`` processing function is called once for every vertex in "
"``spatial`` and ``canvas_item`` shaders. For ``particles`` shaders, it is "
"called once for every particle."
msgstr ""
"La fonction de traitement ``vertex()`` est appelée une fois pour chaque "
"vertex dans les shaders ``spatial`` et ``canvas_item``. Pour les shaders "
"``particles``, elle est appelé une fois pour chaque particule."

msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""
"Chaque sommet de la géométrie de votre monde possède des propriétés telles "
"qu'une position et une couleur. Cette fonction modifie ces valeurs et les "
"transmet à la fonction fragment. Vous pouvez également l'utiliser pour "
"envoyer des données supplémentaires à la fonction fragment en utilisant des "
"varyings."

msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""
"Par défaut, Godot transforme vos informations de vertex pour vous, ce qui "
"est nécessaire pour projeter la géométrie sur l'écran. Vous pouvez utiliser "
"les modes de rendu pour transformer les données vous-même ; voir le :ref:"
"`Spatial shader doc <doc_spatial_shader>` pour un exemple."

msgid "Fragment processor"
msgstr "Processeur de fragments"

#, fuzzy
msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial``, ``canvas_item``, and "
"``sky`` shaders."
msgstr ""
"La fonction de traitement ``fragment()`` est utilisée pour définir les "
"paramètres des matériaux Godot pour chaque pixel. Ce code s'exécute sur "
"chaque pixel visible que l'objet ou la primitive dessine. Il est uniquement "
"disponible dans les shaders ``spatial`` et ``canvas_item``."

msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""
"L'utilisation standard de la fonction de fragment consiste à définir les "
"propriétés des matériaux qui seront utilisées pour calculer l'éclairage. Par "
"exemple, vous pouvez définir des valeurs pour ``ROUGHNESS``, ``RIM``, ou "
"``TRANSMISSION`` qui indiquent à la fonction de lumière comment les lumières "
"réagissent à ce fragment. Cela permet de contrôler un pipeline de shading "
"complexe sans que l'utilisateur n'ait à écrire beaucoup de code. Si vous "
"n'avez pas besoin de cette fonctionnalité intégrée, vous pouvez l'ignorer et "
"écrire votre propre fonction de traitement de la lumière et Godot "
"l'optimisera. Par exemple, si vous n'écrivez pas de valeur à ``RIM``, Godot "
"ne calculera pas l'éclairage rim. Lors de la compilation, Godot vérifie si "
"``RIM`` est utilisé ; si ce n'est pas le cas, il coupe tout le code "
"correspondant. Par conséquent, vous ne gaspillerez pas les calculs sur des "
"effets que vous n'utilisez pas."

msgid "Light processor"
msgstr "Processeur de lumière"

msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""
"Le traitement ``light()`` fonctionne également par pixel, et il s'exécute "
"une fois pour chaque lumière qui affecte l'objet. Il ne s'exécute pas si "
"aucune lumière n'affecte l'objet. Il existe sous la forme d'une fonction "
"appelée à l'intérieur du traitement ``fragment()`` et opère généralement sur "
"les propriétés du matériau configurées à l'intérieur de la fonction "
"``fragment()``."

msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"Le traitement ``light()`` fonctionne différemment en 2D et en 3D ; pour une "
"description du fonctionnement de chacun, consultez leur documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` et :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectivement."

msgid "Translation status"
msgstr "État de la traduction"
