# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Particle systems (3D)"
msgstr "Systèmes de particules (2D)"

msgid ""
"This section of the tutorial covers (3D) GPU-accelerated particle systems. "
"Most of the things discussed here apply to CPU particles as well."
msgstr ""

msgid "Introduction"
msgstr "Introduction"

msgid ""
"You can use particle systems to simulate complex physical effects like fire, "
"sparks, smoke, magical effects, and many more. They are very well suited for "
"creating dynamic and organic behavior and adding \"life\" to your scenes."
msgstr ""

#, fuzzy
msgid ""
"The idea is that a particle is emitted at a fixed interval and with a fixed "
"lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the others and creates the "
"organic look is the randomness that you can add to most of its parameters "
"and behaviors."
msgstr ""
"L'idée est qu'une \"particule\" soit émise à un intervalle fixe et avec une "
"durée de vie fixe. Au cours de sa vie, chaque particule aura le même "
"comportement de base. Ce qui rend chaque particule différente et donne un "
"aspect plus organique, c'est le \"caractère aléatoire\" associé à chaque "
"paramètre. En substance, créer un système de particules signifie définir les "
"paramètres de base de la physique, puis leur ajouter un caractère aléatoire."

msgid ""
"Every particle system you create in Godot consists of two main parts: "
"particles and emitters."
msgstr ""

msgid "Particles"
msgstr "Particules"

msgid ""
"A particle is the visible part of a particle system. It's what you see on "
"the screen when a particle system is active: The tiny specks of dust, the "
"flames of a fire, the glowing orbs of a magical effect. You can have "
"anywhere between a couple hundred and tens of thousands of particles in a "
"single system. You can randomize a particle's size, its speed and movement "
"direction, and change its color over the course of its lifetime. When you "
"think of a fire, you can think of all the little embers flying away from it "
"as individual particles."
msgstr ""

#, fuzzy
msgid "Emitters"
msgstr "Jitter"

msgid ""
"An emitter is what's creating the particles. Emitters are usually not "
"visible, but they can have a shape. That shape controls where and how "
"particles are spawned, for example whether they should fill a room like dust "
"or shoot away from a single point like a fountain. Going back to the fire "
"example, an emitter would be the heat at the center of the fire that creates "
"the embers and the flames."
msgstr ""

#, fuzzy
msgid "Node overview"
msgstr "Propriétés d’un nœud"

#, fuzzy
msgid "A list of nodes related to 3D particles"
msgstr "Une liste des nœuds dans le groupe."

msgid "All 3D particle nodes available in Godot"
msgstr ""

msgid ""
"There are two types of 3D particle systems in Godot: :ref:"
"`class_GPUParticles3D`, which are processed on the GPU, and :ref:"
"`class_CPUParticles3D`, which are processed on the CPU."
msgstr ""

msgid ""
"CPU particle systems are less flexible than their GPU counterpart, but they "
"work on a wider range of hardware and provide better support for older "
"devices and mobile phones. Because they are processed on the CPU, they are "
"not as performant as GPU particle systems and can't render as many "
"individual particles. In addition they currently do not have all the "
"available options GPU particles have for control."
msgstr ""

msgid ""
"GPU particle systems run on the GPU and can render hundreds of thousands of "
"particles on modern hardware. You can write custom particle shaders for "
"them, which makes them very flexible. You can also make them interact with "
"the environment by using attractor and collision nodes."
msgstr ""

msgid ""
"There are three particle attractor nodes: :ref:"
"`class_GPUParticlesAttractorBox3D`, :ref:"
"`class_GPUParticlesAttractorSphere3D`, and :ref:"
"`class_GPUParticlesAttractorVectorField3D`. An attractor node applies a "
"force to all particles in its reach and pulls them closer or pushes them "
"away based on the direction of that force."
msgstr ""

msgid ""
"There are several particle collision nodes. :ref:"
"`class_GPUParticlesCollisionBox3D` and :ref:"
"`class_GPUParticlesCollisionSphere3D` are the simple ones. You can use them "
"to create basic shapes like boxes, a floor, or a wall that particles collide "
"with. The other two nodes provide more complex collision behavior. The :ref:"
"`class_GPUParticlesCollisionSDF3D` is useful when you want indoor scenes to "
"collide with particles without having to create all the individual box and "
"sphere colliders by hand. If you want particles to collide with large "
"outdoor scenes, you would use the :ref:"
"`class_GPUParticlesCollisionHeightField3D` node. It creates a heightmap of "
"your world and the objects in it and uses that for large-scale particle "
"collisions."
msgstr ""

msgid "Basic usage"
msgstr "Utilisation de base"

#, fuzzy
msgid "Advanced topics"
msgstr "Exportations avancées"

msgid "Translation status"
msgstr "État de la traduction"
