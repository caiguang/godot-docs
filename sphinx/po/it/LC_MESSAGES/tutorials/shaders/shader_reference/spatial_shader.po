# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Spatial shaders"
msgstr ""

msgid ""
"Spatial shaders are used for shading 3D objects. They are the most complex "
"type of shader Godot offers. Spatial shaders are highly configurable with "
"different render modes and different rendering options (e.g. Subsurface "
"Scattering, Transmission, Ambient Occlusion, Rim lighting etc). Users can "
"optionally write vertex, fragment, and light processor functions to affect "
"how objects are drawn."
msgstr ""

#, fuzzy
msgid "Render modes"
msgstr "Modalità di rendering"

#, fuzzy
msgid "Render mode"
msgstr "Modalità di rendering"

msgid "Description"
msgstr "Descrizione"

msgid "**blend_mix**"
msgstr "**blend_mix**"

msgid "Mix blend mode (alpha is transparency), default."
msgstr ""

msgid "**blend_add**"
msgstr "**blend_add**"

msgid "Additive blend mode."
msgstr ""

msgid "**blend_sub**"
msgstr "**blend_sub**"

msgid "Subtractive blend mode."
msgstr ""

msgid "**blend_mul**"
msgstr "**blend_mul**"

msgid "Multiplicative blend mode."
msgstr ""

msgid "**depth_draw_opaque**"
msgstr "**depth_draw_opaque**"

msgid "Only draw depth for opaque geometry (not transparent)."
msgstr ""

msgid "**depth_draw_always**"
msgstr "**depth_draw_always**"

msgid "Always draw depth (opaque and transparent)."
msgstr ""

msgid "**depth_draw_never**"
msgstr "**depth_draw_never**"

msgid "Never draw depth."
msgstr ""

#, fuzzy
msgid "**depth_prepass_alpha**"
msgstr "**depth_draw_always**"

msgid "Do opaque depth pre-pass for transparent geometry."
msgstr ""

#, fuzzy
msgid "**depth_test_disabled**"
msgstr "**depth_test_disable**"

msgid "Disable depth testing."
msgstr ""

msgid "**sss_mode_skin**"
msgstr ""

#, fuzzy
msgid "Subsurface Scattering mode for skin."
msgstr "Subsurface Scattering"

msgid "**cull_back**"
msgstr "**cull_back**"

msgid "Cull back-faces (default)."
msgstr ""

msgid "**cull_front**"
msgstr "**cull_front**"

#, fuzzy
msgid "Cull front-faces."
msgstr "Elimina le facce frontali."

msgid "**cull_disabled**"
msgstr "**cull_disabled**"

msgid "Culling disabled (double sided)."
msgstr ""

msgid "**unshaded**"
msgstr "**unshaded**"

msgid "Result is just albedo. No lighting/shading happens in material."
msgstr ""

msgid "**wireframe**"
msgstr ""

msgid "Geometry draws using lines."
msgstr ""

msgid "**diffuse_burley**"
msgstr "**diffuse_burley**"

msgid "Burley (Disney PBS) for diffuse (default)."
msgstr ""

msgid "**diffuse_lambert**"
msgstr "**diffuse_lambert**"

msgid "Lambert shading for diffuse."
msgstr ""

msgid "**diffuse_lambert_wrap**"
msgstr "**diffuse_lambert_wrap**"

msgid "Lambert wrapping (roughness dependent) for diffuse."
msgstr ""

msgid "**diffuse_toon**"
msgstr "**diffuse_toon**"

msgid "Toon shading for diffuse."
msgstr ""

msgid "**specular_schlick_ggx**"
msgstr "**specular_schlick_ggx**"

msgid "Schlick-GGX for specular (default)."
msgstr ""

msgid "**specular_toon**"
msgstr "**specular_toon**"

msgid "Toon for specular."
msgstr ""

msgid "**specular_disabled**"
msgstr "**specular_disabled**"

#, fuzzy
msgid "Disable specular."
msgstr "Disattiva speculare."

msgid "**skip_vertex_transform**"
msgstr "**skip_vertex_transform**"

msgid "VERTEX/NORMAL/etc. need to be transformed manually in vertex function."
msgstr ""

msgid "**world_vertex_coords**"
msgstr "**world_vertex_coords**"

msgid "VERTEX/NORMAL/etc. are modified in world coordinates instead of local."
msgstr ""

msgid "**ensure_correct_normals**"
msgstr "**ensure_correct_normals**"

msgid "Use when non-uniform scale is applied to mesh."
msgstr ""

msgid "**shadows_disabled**"
msgstr "**shadows_disabled**"

msgid "Disable computing shadows in shader."
msgstr ""

msgid "**ambient_light_disabled**"
msgstr "**ambient_light_disabled**"

msgid "Disable contribution from ambient light and radiance map."
msgstr ""

msgid "**shadow_to_opacity**"
msgstr "**shadow_to_opacity**"

msgid ""
"Lighting modifies the alpha so shadowed areas are opaque and non-shadowed "
"areas are transparent. Useful for overlaying shadows onto a camera feed in "
"AR."
msgstr ""

msgid "**vertex_lighting**"
msgstr "**vertex_lighting**"

msgid "Use vertex-based lighting."
msgstr ""

#, fuzzy
msgid "**particle_trails**"
msgstr "**Particelle:**"

msgid "Enables the trails when used on particles geometry."
msgstr ""

msgid "**alpha_to_coverage**"
msgstr ""

#, fuzzy
msgid ""
"Alpha antialiasing mode, see `here <https://github.com/godotengine/godot/"
"pull/40364>`_ for more."
msgstr ""
"`core/set.h <https://github.com/godotengine/godot/blob/master/core/set.h>`__"

msgid "**alpha_to_coverage_and_one**"
msgstr ""

#, fuzzy
msgid "**fog_disabled**"
msgstr "**cull_disabled**"

msgid ""
"Disable receiving depth-based or volumetric fog. Useful for blend_add "
"materials like particles."
msgstr ""

#, fuzzy
msgid "Built-ins"
msgstr "Variabili integrate"

msgid ""
"Values marked as \"in\" are read-only. Values marked as \"out\" are for "
"optional writing and will not necessarily contain sensible values. Values "
"marked as \"inout\" provide a sensible default value, and can optionally be "
"written to. Samplers are not subjects of writing and they are not marked."
msgstr ""

#, fuzzy
msgid "Global built-ins"
msgstr "Costanti"

msgid "Global built-ins are available everywhere, including custom functions."
msgstr ""

msgid "Built-in"
msgstr "Integrato"

#, fuzzy
msgid "in float **TIME**"
msgstr "in float **TIME**"

msgid "Global time, in seconds."
msgstr ""

#, fuzzy
msgid "in float **PI**"
msgstr "in float **TIME**"

msgid ""
"A ``PI`` constant (``3.141592``). A ration of circle's circumference to its "
"diameter and amount of radians in half turn."
msgstr ""

#, fuzzy
msgid "in float **TAU**"
msgstr "in float **DELTA**"

msgid ""
"A ``TAU`` constant (``6.283185``). An equivalent of ``PI * 2`` and amount of "
"radians in full turn."
msgstr ""

#, fuzzy
msgid "in float **E**"
msgstr "in float **TIME**"

msgid ""
"A ``E`` constant (``2.718281``). Euler's number and a base of the natural "
"logarithm."
msgstr ""

msgid "Vertex built-ins"
msgstr ""

msgid ""
"Vertex data (``VERTEX``, ``NORMAL``, ``TANGENT``, ``BITANGENT``) are "
"presented in local model space. If not written to, these values will not be "
"modified and be passed through as they came."
msgstr ""

msgid ""
"They can optionally be presented in world space by using the "
"*world_vertex_coords* render mode."
msgstr ""

msgid ""
"Users can disable the built-in modelview transform (projection will still "
"happen later) and do it manually with the following code:"
msgstr ""

msgid ""
"Other built-ins, such as UV, UV2 and COLOR, are also passed through to the "
"fragment function if not modified."
msgstr ""

msgid ""
"Users can override the modelview and projection transforms using the "
"``POSITION`` built-in. When ``POSITION`` is used, the value from ``VERTEX`` "
"is ignored and projection does not happen. However, the value passed to the "
"fragment shader still comes from ``VERTEX``."
msgstr ""

msgid ""
"For instancing, the INSTANCE_CUSTOM variable contains the instance custom "
"data. When using particles, this information is usually:"
msgstr ""

msgid "**x**: Rotation angle in radians."
msgstr ""

#, fuzzy
msgid "**y**: Phase during lifetime (0 to 1)."
msgstr "**y**: Fase durante la vita (da 0 a 1)."

#, fuzzy
msgid "**z**: Animation frame."
msgstr "**z**: frame di animazione."

msgid ""
"This allows you to easily adjust the shader to a particle system using "
"default particles material. When writing a custom particle shader, this "
"value can be used as desired."
msgstr ""

#, fuzzy
msgid "in vec2 **VIEWPORT_SIZE**"
msgstr "in vec2 **VIEWPORT_SIZE**"

msgid "Size of viewport (in pixels)."
msgstr ""

#, fuzzy
msgid "in mat4 **VIEW_MATRIX**"
msgstr "inout mat4 **MODELVIEW_MATRIX**"

msgid "World space to view space transform."
msgstr ""

#, fuzzy
msgid "in mat4 **INV_VIEW_MATRIX**"
msgstr "in mat4 **INV_CAMERA_MATRIX**"

msgid "View space to world space transform."
msgstr ""

#, fuzzy
msgid "in mat4 **INV_PROJECTION_MATRIX**"
msgstr "in mat4 **INV_PROJECTION_MATRIX**"

msgid "Clip space to view space transform."
msgstr ""

#, fuzzy
msgid "in vec3 **NODE_POSITION_WORLD**"
msgstr "in vec2 **POINT_COORD**"

msgid "Node world space position."
msgstr ""

#, fuzzy
msgid "in vec3 **NODE_POSITION_VIEW**"
msgstr "in vec3 **VIEW**"

msgid "Node view space position."
msgstr ""

#, fuzzy
msgid "in vec3 **CAMERA_POSITION_WORLD**"
msgstr "in vec3 **ATTENUATION**"

msgid "Camera world space position."
msgstr ""

#, fuzzy
msgid "in vec3 **CAMERA_DIRECTION_WORLD**"
msgstr "in vec3 **ATTENUATION**"

msgid "Camera world space direction."
msgstr ""

#, fuzzy
msgid "in bool **OUTPUT_IS_SRGB**"
msgstr "in bool **OUTPUT_IS_SRGB**"

msgid ""
"``true`` when output is in sRGB color space (this is ``true`` in the "
"Compatibility renderer, ``false`` in Forward+ and Forward Mobile)."
msgstr ""

#, fuzzy
msgid "in int **INSTANCE_ID**"
msgstr "in int **INSTANCE_ID**"

msgid "Instance ID for instancing."
msgstr ""

#, fuzzy
msgid "in vec4 **INSTANCE_CUSTOM**"
msgstr "in vec4 **INSTANCE_CUSTOM**"

msgid "Instance custom data (for particles, mostly)."
msgstr ""

#, fuzzy
msgid "in int **VIEW_INDEX**"
msgstr "in int **INDEX**"

msgid ""
"The view that we are rendering. ``VIEW_MONO_LEFT`` (``0``) for Mono (not "
"multiview) or left eye, ``VIEW_RIGHT`` (``1``) for right eye."
msgstr ""

#, fuzzy
msgid "in int **VIEW_MONO_LEFT**"
msgstr "in int **INDEX**"

msgid "Constant for Mono or left eye, always ``0``."
msgstr ""

#, fuzzy
msgid "in int **VIEW_RIGHT**"
msgstr "in int **INDEX**"

msgid "Constant for right eye, always ``1``."
msgstr ""

#, fuzzy
msgid "in vec3 **EYE_OFFSET**"
msgstr "in vec3 **VERTEX**"

msgid ""
"Position offset for the eye being rendered. Only applicable for multiview "
"rendering."
msgstr ""

#, fuzzy
msgid "inout vec3 **VERTEX**"
msgstr "inout vec3 **VERTEX**"

msgid "Vertex in local coordinates."
msgstr ""

#, fuzzy
msgid "in int **VERTEX_ID**"
msgstr "in int **INSTANCE_ID**"

msgid "The index of the current vertex in the vertex buffer."
msgstr ""

#, fuzzy
msgid "inout vec3 **NORMAL**"
msgstr "inout vec3 **NORMAL**"

msgid "Normal in local coordinates."
msgstr ""

#, fuzzy
msgid "inout vec3 **TANGENT**"
msgstr "inout vec3 **TANGENT**"

msgid "Tangent in local coordinates."
msgstr ""

#, fuzzy
msgid "inout vec3 **BINORMAL**"
msgstr "inout vec3 **BINORMAL**"

msgid "Binormal in local coordinates."
msgstr ""

#, fuzzy
msgid "out vec4 **POSITION**"
msgstr "out vec4  **POSITION**"

msgid "If written to, overrides final vertex position."
msgstr ""

#, fuzzy
msgid "inout vec2 **UV**"
msgstr "inout vec2 **UV**"

msgid "UV main channel."
msgstr ""

#, fuzzy
msgid "inout vec2 **UV2**"
msgstr "inout vec2 **UV2**"

msgid "UV secondary channel."
msgstr ""

#, fuzzy
msgid "inout vec4 **COLOR**"
msgstr "inout vec4 **COLOR**"

msgid "Color from vertices."
msgstr ""

#, fuzzy
msgid "out float **ROUGHNESS**"
msgstr "out float **ROUGHNESS**"

msgid "Roughness for vertex lighting."
msgstr ""

#, fuzzy
msgid "inout float **POINT_SIZE**"
msgstr "inout float **POINT_SIZE**"

msgid "Point size for point rendering."
msgstr ""

#, fuzzy
msgid "inout mat4 **MODELVIEW_MATRIX**"
msgstr "inout mat4 **MODELVIEW_MATRIX**"

msgid "Model space to view space transform (use if possible)."
msgstr ""

#, fuzzy
msgid "inout mat3 **MODELVIEW_NORMAL_MATRIX**"
msgstr "inout mat4 **MODELVIEW_MATRIX**"

#, fuzzy
msgid "inout mat4 **MODEL_MATRIX**"
msgstr "inout mat4 **MODELVIEW_MATRIX**"

msgid "Model space to world space transform."
msgstr ""

#, fuzzy
msgid "inout mat3 **MODEL_NORMAL_MATRIX**"
msgstr "inout mat4 **MODELVIEW_MATRIX**"

#, fuzzy
msgid "inout mat4 **PROJECTION_MATRIX**"
msgstr "inout mat4 **PROJECTION_MATRIX**"

msgid "View space to clip space transform."
msgstr ""

#, fuzzy
msgid "inout uvec4 **BONE_INDICES**"
msgstr "inout vec4 **CUSTOM**"

#, fuzzy
msgid "inout vec4 **BONE_WEIGHTS**"
msgstr "inout vec4 **LIGHT**"

#, fuzzy
msgid "in vec4 **CUSTOM0**"
msgstr "inout vec4 **CUSTOM**"

#, fuzzy
msgid "in vec4 **CUSTOM1**"
msgstr "inout vec4 **CUSTOM**"

#, fuzzy
msgid "in vec4 **CUSTOM2**"
msgstr "inout vec4 **CUSTOM**"

#, fuzzy
msgid "in vec4 **CUSTOM3**"
msgstr "inout vec4 **CUSTOM**"

msgid ""
"``MODELVIEW_MATRIX`` combines both the ``MODEL_MATRIX`` and ``VIEW_MATRIX`` "
"and is better suited when floating point issues may arise. For example, if "
"the object is very far away from the world origin, you may run into floating "
"point issues when using the separated ``MODEL_MATRIX`` and ``VIEW_MATRIX``."
msgstr ""

msgid "Fragment built-ins"
msgstr ""

msgid ""
"The default use of a Godot fragment processor function is to set up the "
"material properties of your object and to let the built-in renderer handle "
"the final shading. However, you are not required to use all these "
"properties, and if you don't write to them, Godot will optimize away the "
"corresponding functionality."
msgstr ""

#, fuzzy
msgid "in vec4 **FRAGCOORD**"
msgstr "in vec4 **FRAGCOORD**"

msgid ""
"Coordinate of pixel center in screen space. ``xy`` specifies position in "
"window, ``z`` specifies fragment depth if ``DEPTH`` is not used. Origin is "
"lower-left."
msgstr ""

#, fuzzy
msgid "in bool **FRONT_FACING**"
msgstr "in bool **FRONT_FACING**"

msgid "``true`` if current face if front face."
msgstr ""

#, fuzzy
msgid "in vec3 **VIEW**"
msgstr "in vec3 **VIEW**"

msgid ""
"Normalized vector from fragment position to camera (in view space). This is "
"the same for both perspective and orthogonal cameras."
msgstr ""

#, fuzzy
msgid "in vec2 **UV**"
msgstr "in vec2 **UV**"

msgid "UV that comes from vertex function."
msgstr ""

#, fuzzy
msgid "in vec2 **UV2**"
msgstr "in vec2 **UV2**"

msgid "UV2 that comes from vertex function."
msgstr ""

#, fuzzy
msgid "in vec4 **COLOR**"
msgstr "in vec4 **COLOR**"

msgid "COLOR that comes from vertex function."
msgstr ""

#, fuzzy
msgid "in vec2 **POINT_COORD**"
msgstr "in vec2 **POINT_COORD**"

msgid "Point Coordinate for drawing points with POINT_SIZE."
msgstr ""

#, fuzzy
msgid "in mat4 **MODEL_MATRIX**"
msgstr "in mat4 **WORLD_MATRIX**"

#, fuzzy
msgid "in mat3 **MODEL_NORMAL_MATRIX**"
msgstr "in mat4 **CAMERA_MATRIX**"

#, fuzzy
msgid "in mat4 **PROJECTION_MATRIX**"
msgstr "in mat4 **PROJECTION_MATRIX**"

msgid "Node position, in world space."
msgstr ""

msgid "Node position, in view space."
msgstr ""

msgid "Camera position, in world space."
msgstr ""

msgid "Camera direction, in world space."
msgstr ""

#, fuzzy
msgid "in vec3 **VERTEX**"
msgstr "in vec3 **VERTEX**"

msgid "Vertex that comes from vertex function (default, in view space)."
msgstr ""

msgid "sampler2D **SCREEN_TEXTURE**"
msgstr "sampler2D **SCREEN_TEXTURE**"

msgid ""
"Removed in Godot 4. Use a ``sampler2D`` with ``hint_screen_texture`` instead."
msgstr ""

#, fuzzy
msgid "in vec2 **SCREEN_UV**"
msgstr "in vec2 **SCREEN_UV**"

msgid "Screen UV coordinate for current pixel."
msgstr ""

msgid "sampler2D **DEPTH_TEXTURE**"
msgstr "sampler2D **DEPTH_TEXTURE**"

msgid ""
"Removed in Godot 4. Use a ``sampler2D`` with ``hint_depth_texture`` instead."
msgstr ""

#, fuzzy
msgid "out float **DEPTH**"
msgstr "out float **DEPTH**"

msgid ""
"Custom depth value (0..1). If ``DEPTH`` is being written to in any shader "
"branch, then you are responsible for setting the ``DEPTH`` for **all** other "
"branches. Otherwise, the graphics API will leave them uninitialized."
msgstr ""

msgid "Normal that comes from vertex function (default, in view space)."
msgstr ""

msgid "Tangent that comes from vertex function."
msgstr ""

msgid "Binormal that comes from vertex function."
msgstr ""

#, fuzzy
msgid "out vec3 **NORMAL_MAP**"
msgstr "out vec3 **NORMALMAP**"

msgid "Set normal here if reading normal from a texture instead of NORMAL."
msgstr ""

#, fuzzy
msgid "out float **NORMAL_MAP_DEPTH**"
msgstr "out float **NORMALMAP_DEPTH**"

msgid "Depth from variable above. Defaults to 1.0."
msgstr ""

#, fuzzy
msgid "out vec3 **ALBEDO**"
msgstr "out vec3 **ALBEDO**"

msgid "Albedo (default white)."
msgstr ""

#, fuzzy
msgid "out float **ALPHA**"
msgstr "out float **ALPHA**"

msgid ""
"Alpha (0..1); if written to, the material will go to the transparent "
"pipeline."
msgstr ""

#, fuzzy
msgid "out float **ALPHA_SCISSOR_THRESHOLD**"
msgstr "out float **ALPHA_SCISSOR**"

msgid "If written to, values below a certain amount of alpha are discarded."
msgstr ""

#, fuzzy
msgid "out float **ALPHA_HASH_SCALE**"
msgstr "out float **ALPHA**"

#, fuzzy
msgid "out float **ALPHA_ANTIALIASING_EDGE**"
msgstr "out float **ALPHA_SCISSOR**"

#, fuzzy
msgid "out vec2 **ALPHA_TEXTURE_COORDINATE**"
msgstr "inout vec4 **LIGHT_COLOR**"

#, fuzzy
msgid "out float **METALLIC**"
msgstr "out float **METALLIC**"

#, fuzzy
msgid "Metallic (0..1)."
msgstr "Metallico (0..1)."

#, fuzzy
msgid "out float **SPECULAR**"
msgstr "out float **SPECULAR**"

msgid ""
"Specular. Defaults to 0.5, best not to modify unless you want to change IOR."
msgstr ""

#, fuzzy
msgid "Roughness (0..1)."
msgstr "Ruvidità (0..1)."

#, fuzzy
msgid "out float **RIM**"
msgstr "out float **RIM**"

msgid "Rim (0..1). If used, Godot calculates rim lighting."
msgstr ""

#, fuzzy
msgid "out float **RIM_TINT**"
msgstr "out float **RIM_TINT**"

msgid ""
"Rim Tint, goes from 0 (white) to 1 (albedo). If used, Godot calculates rim "
"lighting."
msgstr ""

#, fuzzy
msgid "out float **CLEARCOAT**"
msgstr "out float **CLEARCOAT**"

msgid "Small added specular blob. If used, Godot calculates Clearcoat."
msgstr ""

#, fuzzy
msgid "out float **CLEARCOAT_GLOSS**"
msgstr "out float **CLEARCOAT_GLOSS**"

msgid "Gloss of Clearcoat. If used, Godot calculates Clearcoat."
msgstr ""

#, fuzzy
msgid "out float **ANISOTROPY**"
msgstr "out float **ANISOTROPY**"

msgid "For distorting the specular blob according to tangent space."
msgstr ""

#, fuzzy
msgid "out vec2 **ANISOTROPY_FLOW**"
msgstr "out vec2 **ANISOTROPY_FLOW**"

msgid "Distortion direction, use with flowmaps."
msgstr ""

#, fuzzy
msgid "out float **SSS_STRENGTH**"
msgstr "out float **SSS_STRENGTH**"

msgid ""
"Strength of Subsurface Scattering. If used, Subsurface Scattering will be "
"applied to object."
msgstr ""

#, fuzzy
msgid "out vec4 **SSS_TRANSMITTANCE_COLOR**"
msgstr "out vec4 **SHADOW_COLOR**"

#, fuzzy
msgid "out float **SSS_TRANSMITTANCE_DEPTH**"
msgstr "out float **SSS_STRENGTH**"

#, fuzzy
msgid "out float **SSS_TRANSMITTANCE_BOOST**"
msgstr "out float **SSS_STRENGTH**"

#, fuzzy
msgid "inout vec3 **BACKLIGHT**"
msgstr "inout vec4 **LIGHT**"

#, fuzzy
msgid "out float **AO**"
msgstr "out float **AO**"

msgid "Strength of Ambient Occlusion. For use with pre-baked AO."
msgstr ""

#, fuzzy
msgid "out float **AO_LIGHT_AFFECT**"
msgstr "out float **AO_LIGHT_AFFECT**"

msgid "How much AO affects lights (0..1; default 0)."
msgstr ""

#, fuzzy
msgid "out vec3 **EMISSION**"
msgstr "out vec3 **EMISSION**"

msgid "Emission color (can go over 1,1,1 for HDR)."
msgstr ""

#, fuzzy
msgid "out vec4 **FOG**"
msgstr "inout vec4 **COLOR**"

msgid "If written to, blends final pixel color with FOG.rgb based on FOG.a."
msgstr ""

#, fuzzy
msgid "out vec4 **RADIANCE**"
msgstr "out vec4  **POSITION**"

msgid ""
"If written to, blends environment map radiance with RADIANCE.rgb based on "
"RADIANCE.a."
msgstr ""

#, fuzzy
msgid "out vec4 **IRRADIANCE**"
msgstr "out vec4  **POSITION**"

msgid ""
"If written to, blends environment map IRRADIANCE with IRRADIANCE.rgb based "
"on IRRADIANCE.a."
msgstr ""

msgid ""
"Shaders going through the transparent pipeline when ``ALPHA`` is written to "
"may exhibit transparency sorting issues. Read the :ref:`transparency sorting "
"section in the 3D rendering limitations page "
"<doc_3d_rendering_limitations_transparency_sorting>` for more information "
"and ways to avoid issues."
msgstr ""

msgid "Light built-ins"
msgstr ""

msgid ""
"Writing light processor functions is completely optional. You can skip the "
"light function by setting render_mode to ``unshaded``. If no light function "
"is written, Godot will use the material properties written to in the "
"fragment function to calculate the lighting for you (subject to the "
"render_mode)."
msgstr ""

msgid ""
"The light function is called for every light in every pixel. It is called "
"within a loop for each light type."
msgstr ""

msgid ""
"Below is an example of a custom light function using a Lambertian lighting "
"model:"
msgstr ""

msgid ""
"If you want the lights to add together, add the light contribution to "
"``DIFFUSE_LIGHT`` using ``+=``, rather than overwriting it."
msgstr ""

msgid ""
"The ``light()`` function won't be run if the ``vertex_lighting`` render mode "
"is enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** "
"is enabled in the Project Settings. (It's enabled by default on mobile "
"platforms.)"
msgstr ""

msgid "in vec3 **NORMAL**"
msgstr "in vec3 **NORMAL**"

msgid "Normal vector, in view space."
msgstr ""

msgid "View vector, in view space."
msgstr ""

msgid "in vec3 **LIGHT**"
msgstr "in vec3 **LIGHT**"

msgid "Light Vector, in view space."
msgstr ""

msgid "in vec3 **LIGHT_COLOR**"
msgstr "in vec3 **LIGHT_COLOR**"

msgid ""
"Color of light multiplied by ``energy * PI``. The ``PI`` multiplication is "
"present because physically-based lighting models include a division by "
"``PI``."
msgstr ""

#, fuzzy
msgid "in float **SPECULAR_AMOUNT**"
msgstr "out float **SPECULAR**"

msgid ""
"2.0 * ``light_specular`` property for ``OmniLight3D`` and ``SpotLight3D``. "
"1.0 for ``DirectionalLight3D``."
msgstr ""

#, fuzzy
msgid "in bool **LIGHT_IS_DIRECTIONAL**"
msgstr "in bool **AT_LIGHT_PASS**"

msgid "``true`` if this pass is a ``DirectionalLight3D``."
msgstr ""

#, fuzzy
msgid "in float **ATTENUATION**"
msgstr "in vec3 **ATTENUATION**"

msgid "Attenuation based on distance or shadow."
msgstr ""

msgid "in vec3 **ALBEDO**"
msgstr "in vec3 **ALBEDO**"

#, fuzzy
msgid "Base albedo."
msgstr "Albedo di base."

#, fuzzy
msgid "in vec3 **BACKLIGHT**"
msgstr "in vec3 **LIGHT**"

#, fuzzy
msgid "in float **METALLIC**"
msgstr "out float **METALLIC**"

#, fuzzy
msgid "Metallic."
msgstr "Metallico"

msgid "in float **ROUGHNESS**"
msgstr "in float **ROUGHNESS**"

msgid "Roughness."
msgstr "Rugosità."

msgid "out vec3 **DIFFUSE_LIGHT**"
msgstr "out vec3 **DIFFUSE_LIGHT**"

#, fuzzy
msgid "Diffuse light result."
msgstr "Risultato di luce diffusa."

msgid "out vec3 **SPECULAR_LIGHT**"
msgstr "out vec3 **SPECULAR_LIGHT**"

#, fuzzy
msgid "Specular light result."
msgstr "Risultato di luce speculare."

msgid ""
"Transparent materials also cannot cast shadows or appear in "
"``hint_screen_texture`` and ``hint_depth_texture`` uniforms. This in turn "
"prevents those materials from appearing in screen-space reflections or "
"refraction. :ref:`SDFGI <doc_using_sdfgi>` sharp reflections are not visible "
"on transparent materials (only rough reflections are visible on transparent "
"materials)."
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
