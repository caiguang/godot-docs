# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipizzazione statica in GDScript"

msgid "In this guide, you will learn:"
msgstr "In questa guida imparerai:"

#, fuzzy
msgid "how to use static typing in GDScript;"
msgstr "Tipizzazione statica in GDScript"

#, fuzzy
msgid "that static types can help you avoid bugs;"
msgstr "Che **la tipizzazione statica può aiutarti a evitare bug**"

msgid "that static typing improves your experience with the editor."
msgstr ""

#, fuzzy
msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Dove e come usi questa nuova funzione del linguaggio è completamente a tua "
"scelta: puoi usarla solo in qualche importante file GDScript, dappertutto o "
"puoi scrivere codice come hai sempre fatto!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"La tipizzazione statica può essere usata su variabili, costanti, funzioni, "
"parametri e tipi ritornati."

msgid "A brief look at static typing"
msgstr "Un breve sguardo alla tipizzazione statica"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"Con la tipizzazione di GDScript, Godot può rilevare ancora più errori mentre "
"scrivi codice! Fornisce a te e ai tuoi compagni di squadra maggiori "
"informazioni mentre lavorate poiché i tipi degli argomenti appaiono quando "
"chiamate un metodo."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Immagina di programmare un sistema di inventario. Progetti un nodo ``Item``, "
"poi un nodo ``Inventory``. Per aggiungere elementi all'inventario, le "
"persone che lavorano con il tuo codice devono sempre passare un oggetto di "
"tipo ``Item``al metodo ``Inventory.add``. Con la tipizzazione puoi imporre "
"questa regola così:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"La tipizzazione statica inoltre fornisce migliori opzioni di completamento "
"automatico. Di seguito puoi vedere la differenza tra le opzioni di "
"completamento tra la tipizzazione dinamica e quella statica per la classe "
"``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

#, fuzzy
msgid "Completion options for dynamic typed code."
msgstr "opzioni di completamento del codice per la tipizzazione dinamica"

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Questo è per via della tipizzazione dinamica. Godot non può sapere quale "
"nodo o tipo stai passando alla funzione. Al contrario se dichiari il tipo "
"esplicitamente, otterrai tutti i metodi pubblici e le variabili del nodo:"

#, fuzzy
msgid "Completion options for static typed code."
msgstr "opzioni di completamento del codice tipizzato"

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""

msgid "How to use static typing"
msgstr "Come usare la tipizzazione statica"

msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr "Godot proverà ad dedurre il tipo se scrivi due punti e ometti il tipo:"

msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr ""

msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""

#, fuzzy
msgid "What can be a type hint"
msgstr "Cosa può fare il motore?"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "Ecco un esempio completo di classe basato su queste linee guida:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

#, fuzzy
msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""

msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""

msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Definire il tipo restituito di una funzione con la freccia ->"

msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""

msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""

msgid "You can also use your own classes as return types::"
msgstr ""

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Esempio:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Definire il tipo restituito di una funzione con la freccia ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Conversione del tipo"

msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""

msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""

msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""

msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""

#, fuzzy
msgid "Safe lines"
msgstr "Linee sicure"

msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""

msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr ""

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""

msgid "Typed or dynamic: stick to one style"
msgstr "Tipizzazione statica o dinamica: attieniti ad un unico stile"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript tipizzato staticamente e GDScript tipizzato dinamicamente possono "
"coesistere nello stesso progetto. Tuttavia raccomando di attenersi ad un "
"unico stile per la consistenza della codebase, e per i tuoi colleghi. È più "
"semplice lavorare insieme se si seguono le stesse linee guida, e leggere e "
"capire il codice degli altri diventa più veloce."

msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""

#, fuzzy
msgid "And with static typing::"
msgstr "E con la tipizzazione statica:"

msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""

msgid "And the same callback, with type hints::"
msgstr ""

#, fuzzy
msgid "Warning system"
msgstr "Sistema di allarme"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"La documentazione sulle esportazioni è stata spostata in :ref:"
"`doc_gdscript_exports`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Un altro vantaggio significativo della tipizzazione di GDScript è il nuovo "
"**warning system**. Dalla versione 3.1, Godot emette warning mentre scrivi "
"il tuo codice: l'engine identifica sezioni del tuo codice che potrebbero "
"causare problemi in fase di esecuzione ma lascia a te decidere se mantenere "
"il codice così com'è. Dettagli più avanti."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

msgid "Cases where you can't specify types"
msgstr ""

msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""

msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""

msgid "Nested types are not currently supported::"
msgstr ""

msgid "Typed dictionaries are not currently supported::"
msgstr ""

msgid "Summary"
msgstr "Sommario"

msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
