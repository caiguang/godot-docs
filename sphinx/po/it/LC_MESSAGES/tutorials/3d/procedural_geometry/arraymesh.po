# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "Utilizzo di ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr ""

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to five "
"parameters. The first two are required, while the last three are optional."
msgstr ""

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""

msgid ""
"Common elements of ``arrays`` are listed below, together with the position "
"they must have within ``arrays``. See :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>` for a full list."
msgstr ""

msgid "Index"
msgstr "Indice"

msgid "Mesh.ArrayType Enum"
msgstr ""

#, fuzzy
msgid "Array type"
msgstr "Array"

msgid "0"
msgstr "0"

#, fuzzy
msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

#, fuzzy
msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` or :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>` o :ref:`PoolVector2Array "
"<class_PoolVector2Array>`"

msgid "1"
msgstr "1"

#, fuzzy
msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

#, fuzzy
msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr "25: :ref:`PoolVector3Array<class_poolvector3array>`"

msgid "2"
msgstr "2"

#, fuzzy
msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. The "
"first 3 floats determine the tangent, and the last float the binormal "
"direction as -1 or 1."
msgstr ""

msgid "3"
msgstr "3"

#, fuzzy
msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

#, fuzzy
msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr "26: :ref:`PoolColorArray<class_poolcolorarray>`"

msgid "4"
msgstr "4"

#, fuzzy
msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

#, fuzzy
msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` or :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>` o :ref:`PoolVector3Array "
"<class_PoolVector3Array>`"

msgid "5"
msgstr "5"

#, fuzzy
msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

#, fuzzy
msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""

msgid "11"
msgstr "11"

#, fuzzy
msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. Each "
"float lists the amount of weight the corresponding bone in ``ARRAY_BONES`` "
"has on a given vertex."
msgstr ""

msgid "12"
msgstr "12"

#, fuzzy
msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

#, fuzzy
msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr "21: :ref:`PoolIntArray<class_poolintarray>`"

msgid ""
"In most cases when creating a mesh, we define it by its vertex positions. So "
"usually, the array of vertices (at index 0) is required, while the index "
"array (at index 12) is optional and will only be used if included. It is "
"also possible to create a mesh with only the index array and no vertex "
"array, but that's beyond the scope of this tutorial. In fact, we won't use "
"the index array at all."
msgstr ""

msgid ""
"All the other arrays carry information about the vertices. They are optional "
"and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""

msgid ""
"For normal usage, the last three parameters in :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"are typically left empty."
msgstr ""

#, fuzzy
msgid "Setting up the ArrayMesh"
msgstr "Utilizzo di ArrayMesh"

msgid ""
"In the editor, create a :ref:`MeshInstance3D <class_meshinstance3d>` and add "
"an :ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"us to access the ArrayMesh from code without creating one."
msgstr ""

msgid "Next, add a script to the MeshInstance3D."
msgstr ""

msgid "Under ``_ready()``, create a new Array."
msgstr ""

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""

msgid "Next create the arrays for each data type you will use."
msgstr ""

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""

msgid "Put together, the full code looks like:"
msgstr ""

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""

#, fuzzy
msgid "Generating geometry"
msgstr "Generazione di geometria"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""

msgid "Saving"
msgstr "Salvare"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
