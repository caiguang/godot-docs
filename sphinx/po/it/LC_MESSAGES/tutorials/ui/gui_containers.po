# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: it\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using Containers"
msgstr "Contenitori"

msgid ""
":ref:`Anchors <doc_size_and_anchors>` are an efficient way to handle "
"different aspect ratios for basic multiple resolution handling in GUIs."
msgstr ""

msgid "For more complex user interfaces, they can become difficult to use."
msgstr ""

msgid ""
"This is often the case of games, such as RPGs, online chats, tycoons or "
"simulations. Another common case where more advanced layout features may be "
"required is in-game tools (or simply just tools)."
msgstr ""

msgid ""
"All these situations require a more capable OS-like user interface, with "
"advanced layout and formatting. For that, :ref:`Containers "
"<class_container>` are more useful."
msgstr ""

msgid "Container layout"
msgstr ""

msgid ""
"Containers provide a huge amount of layout power (as an example, the Godot "
"editor user interface is entirely done using them):"
msgstr ""

msgid ""
"When a :ref:`Container <class_Container>`-derived node is used, all "
"children :ref:`Control <class_Control>` nodes give up their own positioning "
"ability. This means the *Container* will control their positioning and any "
"attempt to manually alter these nodes will be either ignored or invalidated "
"the next time their parent is resized."
msgstr ""

msgid ""
"Likewise, when a *Container* derived node is resized, all its children will "
"be re-positioned according to it, with a behavior based on the type of "
"container used:"
msgstr ""

msgid "Example of *HBoxContainer* resizing children buttons."
msgstr ""

msgid ""
"The real strength of containers is that they can be nested (as nodes), "
"allowing the creation of very complex layouts that resize effortlessly."
msgstr ""

#, fuzzy
msgid "Sizing options"
msgstr "Plugin Android"

msgid ""
"When adding a node to a container, the way the container treats each child "
"depends mainly on their *container sizing options*. These options can be "
"found by inspecting the layout of any *Control* that is a child of a "
"*Container*."
msgstr ""

msgid ""
"Sizing options are independent for vertical and horizontal sizing and not "
"all containers make use of them (but most do):"
msgstr ""

msgid ""
"**Fill**: Ensures the control *fills* the designated area within the "
"container. No matter if a control *expands* or not (see below), it will only "
"*fill* the designated area when this is toggled on (it is by default)."
msgstr ""

msgid ""
"**Expand**: Attempts to use as much space as possible in the parent "
"container (in each axis). Controls that don't expand will be pushed away by "
"those that do. Between expanding controls, the amount of space they take "
"from each other is determined by the *Stretch Ratio* (see below). This "
"option is only available when the parent Container is of the right type, for "
"example the *HBoxContainer* has this option for horizontal sizing."
msgstr ""

msgid ""
"**Shrink Begin** When expanding, try to remain at the left or top of the "
"expanded area."
msgstr ""

msgid ""
"**Shrink Center** When expanding, try to remain at the center of the "
"expanded area."
msgstr ""

msgid ""
"**Shrink End** When expanding, try to remain at the right or bottom of the "
"expanded area."
msgstr ""

msgid ""
"**Stretch Ratio**: The ratio of how much expanded controls take up the "
"available space in relation to each other. A control with \"2\", will take "
"up twice as much available space as one with \"1\"."
msgstr ""

msgid ""
"Experimenting with these flags and different containers is recommended to "
"get a better grasp on how they work."
msgstr ""

msgid "Container types"
msgstr ""

msgid ""
"Godot provides several container types out of the box as they serve "
"different purposes:"
msgstr ""

msgid "Box Containers"
msgstr ""

msgid ""
"Arranges child controls vertically or horizontally (via :ref:`HBoxContainer "
"<class_HBoxContainer>` and :ref:`VBoxContainer <class_VBoxContainer>`). In "
"the opposite of the designated direction (as in, vertical for an horizontal "
"container), it just expands the children."
msgstr ""

msgid ""
"These containers make use of the *Ratio* property for children with the "
"*Expand* flag set."
msgstr ""

msgid "Grid Container"
msgstr ""

msgid ""
"Arranges child controls in a grid layout (via :ref:`GridContainer "
"<class_GridContainer>`, amount of columns must be specified). Uses both the "
"vertical and horizontal expand flags."
msgstr ""

msgid "Margin Container"
msgstr ""

msgid ""
"Child controls are expanded towards the bounds of this control (via :ref:"
"`MarginContainer <class_MarginContainer>`). Padding will be added on the "
"margins depending on the theme configuration."
msgstr ""

msgid ""
"Again, keep in mind that the margins are a *Theme* value, so they need to be "
"edited from the constants overrides section of each control:"
msgstr ""

msgid "Tab Container"
msgstr ""

msgid ""
"Allows you to place several child controls stacked on top of each other "
"(via :ref:`TabContainer <class_TabContainer>`), with only the *current* one "
"visible."
msgstr ""

msgid ""
"Changing the *current* one is done via tabs located at the top of the "
"container, via clicking:"
msgstr ""

msgid ""
"The titles are generated from the node names by default (although they can "
"be overridden via *TabContainer* API)."
msgstr ""

msgid ""
"Settings such as tab placement and *StyleBox* can be modified in the "
"*TabContainer* theme overrides."
msgstr ""

msgid "Split Container"
msgstr ""

msgid ""
"Accepts only one or two children controls, then places them side to side "
"with a divisor (via :ref:`HSplitContainer <class_HSplitContainer>` and :ref:"
"`VSplitContainer <class_VSplitContainer>`). Respects both horizontal and "
"vertical flags, as well as *Ratio*."
msgstr ""

msgid ""
"The divisor can be dragged around to change the size relation between both "
"children:"
msgstr ""

msgid "PanelContainer"
msgstr "PanelContainer"

msgid ""
"A container that draws a *StyleBox*, then expands children to cover its "
"whole area (via :ref:`PanelContainer <class_PanelContainer>`, respecting the "
"*StyleBox* margins). It respects both the horizontal and vertical sizing "
"options."
msgstr ""

msgid ""
"This container is useful as top-level, or just to add custom backgrounds to "
"sections of a layout."
msgstr ""

msgid "ScrollContainer"
msgstr "ScrollContainer"

msgid ""
"Accepts a single child node. If this node is bigger than the container, "
"scrollbars will be added to allow panning the node around (via :ref:"
"`ScrollContainer <class_ScrollContainer>`). Both vertical and horizontal "
"size options are respected, and the behavior can be turned on or off per "
"axis in the properties."
msgstr ""

msgid ""
"Mouse wheel and touch drag (when touch is available) are also valid ways to "
"pan the child control around."
msgstr ""

msgid ""
"As in the example above, one of the most common ways to use this container "
"is together with a *VBoxContainer* as child."
msgstr ""

#, fuzzy
msgid "AspectRatioContainer"
msgstr "SplitContainer"

msgid ""
"A container type that arranges its child controls in a way that preserves "
"their proportions automatically when the container is resized. (via :ref:"
"`AspectRatioContainer <class_AspectRatioContainer>`). It has multiple "
"stretch modes, providing options for adjusting the child controls' sizes "
"concerning the container: \"fill,\" \"width control height,\" \"height "
"control width,\" and \"cover.\""
msgstr ""

msgid ""
"useful when you have a container that needs to be dynamic and responsive to "
"different screen sizes, and you want the child elements to scale "
"proportionally without losing their intended shapes."
msgstr ""

#, fuzzy
msgid "FlowContainer"
msgstr "Contenitori"

msgid ""
"FlowContainer is a container that arranges its child controls either "
"horizontally or vertically, (via :ref:`HFlowContainer "
"<class_HFlowContainer>` and via :ref:`VFlowContainer "
"<class_VFlowContainer>`). and when the available space runs out, it wraps "
"the children to the next line or column, similar to how text wraps in a book."
msgstr ""

msgid ""
"useful for creating flexible layouts where the child controls adjust "
"automatically to the available space without overlapping."
msgstr ""

#, fuzzy
msgid "CenterContainer"
msgstr "PanelContainer"

msgid ""
"CenterContainer is a container that automatically keeps all of its child "
"controls centered within it at their minimum size. It ensures that the child "
"controls are always aligned to the center, making it easier to create "
"centered layouts without manual positioning. (via :ref:`CenterContainer "
"<class_CenterContainer>`)."
msgstr ""

#, fuzzy
msgid "SubViewportContainer"
msgstr "ViewportContainer"

msgid ""
"This is a special control that will only accept a single *Viewport* node as "
"child, and it will display it as if it was an image (via :ref:"
"`SubViewportContainer <class_SubViewportContainer>`)."
msgstr ""

#, fuzzy
msgid "Creating custom Containers"
msgstr "Creare contenitori personalizzati"

msgid ""
"It is possible to create a custom container using a script. Here is an "
"example of a container that fits children to its rect size:"
msgstr ""

msgid "Translation status"
msgstr "Stato della traduzione"
