# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Saving games"
msgstr "Salvando jogos (save)"

msgid "Introduction"
msgstr "Introdução"

msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""
"Salvar jogos pode ser complicado. Por exemplo, pode ser desejável armazenar "
"informação de vários objetos em vários níveis. Sistemas avançados de "
"salvamento de jogos devem permitir informações adicionais sobre um número "
"arbitrário de objetos. Isto permitirá que a função de salvamento seja "
"escalonada à medida que o jogo se torna mais complexo."

msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""
"Se você procura salvar a configuração de usuário, você pode utilizar a "
"classe :ref:`class_ConfigFile` para este propósito."

#, fuzzy
msgid ""
"You can see how saving and loading works in action using the `Saving and "
"Loading (Serialization) demo project <https://github.com/godotengine/godot-"
"demo-projects/blob/master/loading/serialization>`__."
msgstr ""
"Se você aprender melhor olhando para um exemplo, você pode encontrar o "
"projeto demonstrativo `aqui <https://github.com/godotengine/godot-demo-"
"projects/tree/master/mobile/android_iap>`__."

msgid "Identify persistent objects"
msgstr "Identificando objetos persistentes"

msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"Em primeiro lugar, devemos identificar quais objetos queremos manter entre "
"as sessões de jogo e quais informações queremos manter desses objetos. Para "
"este tutorial, usaremos grupos para marcar e manipular objetos para serem "
"salvos, mas outros métodos certamente são possíveis."

msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""
"Começaremos adicionando objetos que desejamos salvar ao grupo \"Persist\". "
"Podemos fazer isto através da GUI ou do script. Vamos adicionar os nós "
"relevantes usando a GUI:"

msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"Uma vez feito isto, quando precisarmos salvar o jogo, podemos obter todos os "
"objetos para salvá-los e, em seguida, dizer a todos para salvar com este "
"script:"

msgid "Serializing"
msgstr "Serializando"

#, fuzzy
msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper class :"
"ref:`JSON<class_json>` to convert between dictionary and string, Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""
"O próximo passo é serializar os dados. Isso torna muito mais fácil ler e "
"armazenar em disco. Nesse caso, estamos assumindo que cada membro do grupo "
"Persist é um nó instanciado e, portanto, tem um caminho. O GDScript tem "
"funções auxiliares para isso, como :ref:`to_json() "
"<class_@GDScript_method_to_json>` e :ref:`parse_json() "
"<class_@GDScript_method_parse_json>`, então usaremos um dicionário. Nosso nó "
"precisa conter uma função save que retorne esses dados. A função salvar "
"ficará assim:"

msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"Isso nos dá um dicionário com o estilo ``{ \"nome_da_variável\":"
"valor_da_variável }``, que será útil ao carregar."

msgid "Saving and reading data"
msgstr "Salvando e lendo dados"

#, fuzzy
msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use the class :ref:"
"`JSON<class_json>` to convert it into an easily stored string and store them "
"in a file. Doing it this way ensures that each line is its own object, so we "
"have an easy way to pull the data out of the file as well."
msgstr ""
"Conforme abordado no tutorial :ref:`doc_filesystem`, precisaremos abrir um "
"arquivo para que possamos escrever ou ler a partir dele. Agora que temos uma "
"maneira de chamar nossos grupos e obter seus dados relevantes, vamos usar :"
"ref:`to_json() <class_@GDScript_method_to_json>` para convertê-los em uma "
"string facilmente armazenada e armazená-los em um arquivo. Fazer isso dessa "
"maneira garante que cada linha seja seu próprio objeto, portanto, também "
"temos uma maneira fácil de extrair os dados do arquivo."

#, fuzzy
msgid ""
"Game saved! Now, to load, we'll read each line. Use the :ref:"
"`parse<class_JSON_method_parse>` method to read the JSON string back to a "
"dictionary, and then iterate over the dict to read our values. But we'll "
"need to first create the object and we can use the filename and parent "
"values to achieve that. Here is our load function:"
msgstr ""
"Jogo salvo! O carregamento também é bastante simples. Para isso, vamos ler "
"cada linha, usar parse_json() para lê-lo de volta para um dicionário e, em "
"seguida, iterar sobre o dicionário para ler nossos valores. Mas precisamos "
"primeiro criar o objeto e podemos usar o nome do arquivo e os valores pai "
"para conseguir isso. Aqui está a nossa função de carregamento:"

msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"Agora podemos salvar e carregar um número arbitrário de objetos dispostos em "
"quase qualquer lugar na árvore de cena! Cada objeto pode armazenar dados "
"diferentes dependendo do que precisa salvar."

msgid "Some notes"
msgstr "Algumas observações"

msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""
"Nós ignoramos a configuração do estado do jogo para carregamento. Cabe "
"fundamentalmente ao criador do projeto onde grande parte dessa lógica é "
"aplicada. Isso geralmente é complicado e precisará ser fortemente "
"personalizado com base nas necessidades do projeto individual."

msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""
"Além disso, nossa implementação assume que nenhum objeto Persist é filho de "
"outros objetos Persist. Caso contrário, seriam criados caminhos inválidos. "
"Para acomodar objetos Persist aninhados, considere salvar objetos em etapas. "
"Carregue os objetos pai primeiro para que estejam disponíveis para a "
"chamada :ref:`add_child() <class_node_method_add_child>` quando os objetos "
"filho forem carregados. Você também precisará de uma maneira de vincular "
"filhos aos pais, pois o :ref:`NodePath <class_nodepath>` provavelmente será "
"inválido."

#, fuzzy
msgid "JSON vs binary serialization"
msgstr "API de serialização binária"

msgid ""
"For simple game state, JSON may work and it generates human-readable files "
"that are easy to debug."
msgstr ""

msgid ""
"But JSON has many limitations. If you need to store more complex game state "
"or a lot of it, :ref:`binary serialization<doc_binary_serialization_api>` "
"may be a better approach."
msgstr ""

#, fuzzy
msgid "JSON limitations"
msgstr "Limitações"

msgid "Here are some important gotchas to know about when using JSON."
msgstr ""

msgid ""
"**Filesize:** JSON stores data in text format, which is much larger than "
"binary formats."
msgstr ""

msgid ""
"**Data types:** JSON only offers a limited set of data types. If you have "
"data types that JSON doesn't have, you will need to translate your data to "
"and from types that JSON can handle. For example, some important types that "
"JSON can't parse are: ``Vector2``, ``Vector3``, ``Color``, ``Rect2``, and "
"``Quaternion``."
msgstr ""

msgid ""
"**Custom logic needed for encoding/decoding:** If you have any custom "
"classes that you want to store with JSON, you will need to write your own "
"logic for encoding and decoding those classes."
msgstr ""

#, fuzzy
msgid "Binary serialization"
msgstr "API de serialização binária"

msgid ""
":ref:`Binary serialization<doc_binary_serialization_api>` is an alternative "
"approach for storing game state, and you can use it with the functions "
"``get_var`` and ``store_var`` of :ref:`class_FileAccess`."
msgstr ""

msgid "Binary serialization should produce smaller files than JSON."
msgstr ""

msgid "Binary serialization can handle most common data types."
msgstr ""

msgid ""
"Binary serialization requires less custom logic for encoding and decoding "
"custom classes."
msgstr ""

msgid ""
"Note that not all properties are included. Only properties that are "
"configured with the :ref:"
"`PROPERTY_USAGE_STORAGE<class_@GlobalScope_constant_PROPERTY_USAGE_STORAGE>` "
"flag set will be serialized. You can add a new usage flag to a property by "
"overriding the :ref:"
"`_get_property_list<class_Object_private_method__get_property_list>` method "
"in your class. You can also check how property usage is configured by "
"calling ``Object._get_property_list``. See :ref:"
"`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` for the possible "
"usage flags."
msgstr ""

msgid "Translation status"
msgstr "Progresso da Tradução"
