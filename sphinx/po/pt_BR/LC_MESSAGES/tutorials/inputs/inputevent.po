# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "Usando InputEvent"

msgid "What is it?"
msgstr "O que é isso?"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"O gerenciamento de entrada normalmente é complexo, não importa o SO ou a "
"plataforma. Para facilitar isto um pouco, um tipo especial embutido é "
"fornecido, :ref:`InputEvent <class_InputEvent>`. Este tipo de dado pode ser "
"configurado para conter vários tipos de eventos de entrada. Eventos de "
"entrada viajam pela engine e podem ser recebidos em vários locais, "
"dependendo da finalidade."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Eis um exemplo rápido, que fecha seu jogo se a tecla Escape for pressionada:"

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"No entanto, é mais limpo e flexível usar o recurso fornecido :ref:`InputMap "
"<class_InputMap>`, que o permite definir ações de entrada e atribuir-lhes "
"diferentes teclas. Desta forma você pode definir várias teclas para a mesma "
"ação (por exemplo, a tecla Esc do teclado e o botão Start em um controle). "
"Você então pode alterar mais facilmente este mapeamento nas configurações do "
"projeto sem atualizar seu código, e até fazer um recurso por cima para "
"permitir seu jogo alterar o mapeamento de teclas em tempo de execução!"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Você pode configurar seu InputMap em **Projeto > Configurações do Projeto > "
"Mapa de Entrada** e usar essas ações como esta:"

msgid "How does it work?"
msgstr "Como funciona?"

#, fuzzy
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The DisplayServer for each platform will read events from the "
"operating system, then feed them to the root :ref:`Window <class_Window>`."
msgstr ""
"Cada evento de entrada é originado do usuário/jogador (embora seja possível "
"gerar um InputEvent e enviá-lo de volta à engine, o que é útil para gestos). "
"O objeto OS para cada plataforma irá ler os eventos do dispositivo, então "
"enviá-los ao MainLoop. Como :ref:`SceneTree <class_SceneTree>`é a "
"implementação MainLoop padrão, os eventos são enviados para ela. O Godot "
"fornece uma função para obter o objeto SceneTree atual: **get_tree()**."

#, fuzzy
msgid ""
"The window's :ref:`Viewport <class_Viewport>` does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
":ref:`Viewports <class_Viewport>` tem uma variedade de casos de uso, "
"incluindo:"

msgid ""
"If the Viewport is embedding Windows, the Viewport tries to interpret the "
"event in its capability as a Window-Manager (e.g. for resizing or moving "
"Windows)."
msgstr ""

msgid ""
"Next if an embedded Window is focused, the event is sent to that Window and "
"processed in the Windows Viewport and afterwards treated as handled. If no "
"embedded Window is focused, the event is sent to the nodes of the current "
"viewport in the following order."
msgstr ""

#, fuzzy
msgid ""
"First of all, the standard :ref:`Node._input() "
"<class_Node_private_method__input>` function will be called in any node that "
"overrides it (and hasn't disabled input processing with :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. This ensures that you can filter all events of interest, even "
"before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` is generally a better fit, "
"because it allows the GUI to intercept the events."
msgstr ""
"Em primeiro lugar, a função padrão :ref:`Node._input() "
"<class_Node_method_input>` será chamada em qualquer nó que a substitui (e "
"não desativou o processamento de entrada com :ref:`Node.set_process_input() "
"<class_Node_method_set_process_input>`). Se alguma função consume o evento, "
"ela pode chamar :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, e o evento não irá mais se "
"espalhar. Isto garante que você possa filtrar todos os eventos de interesse, "
"até antes da GUI. Para entrada de gameplay, :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` geralmente é um ajuste melhor, porque "
"permite que a GUI intercepte os eventos."

#, fuzzy
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>` and the signal \"gui_input\" will "
"be emitted (this function is re-implementable by script by inheriting from "
"it). If the control wants to \"consume\" the event, it will call :ref:"
"`Control.accept_event() <class_Control_method_accept_event>` and the event "
"will not spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_private_method__gui_input>` callback, and "
"whether these events are propagated further."
msgstr ""
"Em segundo lugar, ele tentará alimentar a entrada à GUI, e ver se algum "
"controle pode recebê-la. Se assim for, o :ref:`Control <class_Control>` será "
"chamado através da função virtual :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` e o sinal \"gui_input\" será emitido "
"(esta função é reimplementável por script ao herdar dele). Se o controle "
"quer \"consumir\" o evento, ele irá chamar :ref:`Control.accept_event() "
"<class_Control_method_accept_event>` e o evento não irá mais se espalhar. "
"Use a propriedade :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` para controlar se um :ref:`Control "
"<class_Control>` é notificado de eventos de mouse através da chamada de "
"retorno :ref:`Control <class_Control>`, e se esses eventos são propagados "
"ainda mais."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._shortcut_input() "
"<class_Node_private_method__shortcut_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_shortcut_input() "
"<class_Node_method_set_process_shortcut_input>`). This happens only for :ref:"
"`InputEventKey <class_InputEventKey>`, :ref:`InputEventShortcut "
"<class_InputEventShortcut>` and :ref:`InputEventJoypadButton "
"<class_InputEventJoypadButton>`. If any function consumes the event, it can "
"call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The shortcut input callback is ideal for treating events that are "
"intended as shortcuts."
msgstr ""
"Se até agora ninguém consumiu o evento, a chamada de retorno de entrada não "
"tratada será chamada se substituída (e não desativada com :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Se alguma função consome "
"o evento, ela pode chamar :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, e o evento não vai mais se "
"espalhar. A chamada de retorno de entrada não tratada é ideal para eventos "
"de gameplay em tela-cheia, assim eles não são recebidos quando uma GUI está "
"ativa."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_key_input() "
"<class_Node_private_method__unhandled_key_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node."
"set_process_unhandled_key_input() "
"<class_Node_method_set_process_unhandled_key_input>`). This happens only if "
"the event is a :ref:`InputEventKey <class_InputEventKey>`. If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled key input callback is ideal for key events."
msgstr ""
"Se até agora ninguém consumiu o evento, a chamada de retorno de entrada não "
"tratada será chamada se substituída (e não desativada com :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Se alguma função consome "
"o evento, ela pode chamar :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, e o evento não vai mais se "
"espalhar. A chamada de retorno de entrada não tratada é ideal para eventos "
"de gameplay em tela-cheia, assim eles não são recebidos quando uma GUI está "
"ativa."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled input callback is ideal for full-screen gameplay "
"events, so they are not received when a GUI is active."
msgstr ""
"Se até agora ninguém consumiu o evento, a chamada de retorno de entrada não "
"tratada será chamada se substituída (e não desativada com :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Se alguma função consome "
"o evento, ela pode chamar :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, e o evento não vai mais se "
"espalhar. A chamada de retorno de entrada não tratada é ideal para eventos "
"de gameplay em tela-cheia, assim eles não são recebidos quando uma GUI está "
"ativa."

#, fuzzy
msgid ""
"If no one wanted the event so far, and :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` is turned on, the event is "
"used for object picking. For the root viewport, this can also be enabled in :"
"ref:`Project Settings <class_ProjectSettings_property_physics/common/"
"enable_object_picking>`. In the case of a 3D scene if a :ref:`Camera3D "
"<class_Camera3D>` is assigned to the Viewport, a ray to the physics world "
"(in the ray direction from the click) will be cast. If this ray hits an "
"object, it will call the :ref:`CollisionObject3D._input_event() "
"<class_CollisionObject3D_private_method__input_event>` function in the "
"relevant physics object. In the case of a 2D scene, conceptually the same "
"happens with :ref:`CollisionObject2D._input_event() "
"<class_CollisionObject2D_private_method__input_event>`."
msgstr ""
"Se ninguém queria o evento até agora, e uma :ref:`Camera <classe_Camera>` é "
"atribuída ao Viewport com :ref:`Object Picking "
"<classe_viewport_property_physics_object_picking>` ligado, um ray para o "
"mundo da física (na direção do ray a partir do clique) será lançado. (Para o "
"viewport raiz, isto também pode ser ativado em :ref:`Project Settings "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`) Se "
"este ray atingir um objeto, ele chamará o :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` function in the "
"relevant physics object (corpos recebem esta chamada de retorno por padrão, "
"mas áreas não recebem. Isto pode ser configurado através de :ref:`Área "
"<Área_classe_Área>` propriedades)."

#, fuzzy
msgid ""
"When sending events to its child and descendant nodes, the viewport will do "
"so, as depicted in the following graphic, in a reverse depth-first order, "
"starting with the node at the bottom of the scene tree, and ending at the "
"root node. Excluded from this process are Windows and SubViewports."
msgstr ""
"Ao enviar eventos para todos os nós ouvintes em uma cena, a viewport fará "
"isso em uma ordem inversa de profundidade: começando com o nó na parte "
"inferior da árvore da cena e terminando no nó raiz:"

msgid ""
"This order doesn't apply to :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`, which uses a different method "
"based on event location or focused Control."
msgstr ""

msgid ""
"Since Viewports don't send events to other :ref:`SubViewports "
"<class_SubViewport>`, one of the following methods has to be used:"
msgstr ""

msgid ""
"Use a :ref:`SubViewportContainer <class_SubViewportContainer>`, which "
"automatically sends events to its child :ref:`SubViewports "
"<class_SubViewport>` after :ref:`Node._input() "
"<class_Node_private_method__input>` or :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`."
msgstr ""

msgid "Implement event propagation based on the individual requirements."
msgstr ""

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"Os eventos da GUI também sobem a árvore de cena, mas, uma vez que esses "
"eventos visam Controls específicos, apenas os ancestrais diretos do nó de "
"Control de destino recebem o evento."

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"De acordo com o design baseado em nós do Godot, isto permite que nós filhos "
"especializados tratem e consumam eventos específicos, enquanto seus "
"ancestrais e, em última instância, a raíz da cena, podem fornecer um "
"comportamento mais generalizado, se necessário."

msgid "Anatomy of an InputEvent"
msgstr "Anatomia de um InputEvent"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` é apenas um tipo embutido base, não "
"representa nada e contém apenas algumas informações básicas, como o ID do "
"evento (que é aumentado para cada evento), índice do dispositivo, etc."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Existem vários tipos especializados de InputEvent, descritos na tabela "
"abaixo:"

msgid "Event"
msgstr "Evento"

msgid "Description"
msgstr "Descrição"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "Empty Input Event."
msgstr "Evento de Entrada vazio."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

#, fuzzy
msgid "Contains a keycode and Unicode value, as well as modifiers."
msgstr "Contém um scancode e valor Unicode, assim como modificadores."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "Contém informações de clique, como botão, modificadores, etc."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

#, fuzzy
msgid ""
"Contains motion information, such as relative and absolute positions and "
"speed."
msgstr ""
"Contém informações de movimento, como posições relativas e absolutas e "
"velocidade."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "Contém informações de eixo analógico do Joystick/Joypad."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "Contains Joystick/Joypad button information."
msgstr "Contém informações de botão do Joystick/Joypad."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Contém informações de pressionamento/liberação multitoque. (disponível "
"apenas em dispositivos móveis)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Contém informações de arrasto multitoque. (disponível apenas em dispositivos "
"móveis)"

#, fuzzy
msgid ":ref:`InputEventMagnifyGesture <class_InputEventMagnifyGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a factor as well as modifiers."
msgstr "Contém um scancode e valor Unicode, assim como modificadores."

#, fuzzy
msgid ":ref:`InputEventPanGesture <class_InputEventPanGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a delta as well as modifiers."
msgstr "Contém um scancode e valor Unicode, assim como modificadores."

#, fuzzy
msgid ":ref:`InputEventMIDI <class_InputEventMIDI>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains MIDI-related information."
msgstr "Contém informações de botão do Joystick/Joypad."

#, fuzzy
msgid ":ref:`InputEventShortcut <class_InputEventShortcut>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a shortcut."
msgstr "Layout do contêiner"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Contém uma ação genérica. Esses eventos são frequentemente gerados pelo "
"programador como feedback. (mais sobre isso abaixo)"

msgid "Actions"
msgstr "Ações"

msgid ""
"Actions are a grouping of zero or more InputEvents into a commonly "
"understood title (for example, the default \"ui_left\" action grouping both "
"joypad-left input and a keyboard's left arrow key). They are not required to "
"represent an InputEvent but are useful because they abstract various inputs "
"when programming the game logic."
msgstr ""

#, fuzzy
msgid "This allows for:"
msgstr "Isso permite vários recursos:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"O mesmo código para trabalhar em diferentes dispositivos com diferentes "
"entradas (por exemplo, teclado no PC, Joypad no console)."

msgid "Input to be reconfigured at run-time."
msgstr "Entrada a ser reconfigurada em tempo de execução."

#, fuzzy
msgid "Actions to be triggered programmatically at run-time."
msgstr "Entrada a ser reconfigurada em tempo de execução."

#, fuzzy
msgid ""
"Actions can be created from the Project Settings menu in the **Input Map** "
"tab and assigned input events."
msgstr ""
"Ações podem ser criadas a partir do menu Configurações do Projeto na aba "
"Ações."

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Qualquer evento tem os métodos :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` e :ref:`InputEvent <class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"Alternativamente, pode ser desejado fornecer ao jogo uma ação do código do "
"jogo (um bom exemplo disso é a detecção de gestos). O singleton Input tem um "
"método para isso: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. Você normalmente usaria assim:"

msgid "InputMap"
msgstr "InputMap"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"A personalização e o remapeamento da entrada do código são frequentemente "
"desejados. Se todo o seu fluxo de trabalho depende de ações, o singleton :"
"ref:`InputMap <class_InputMap>` é ideal para reatribuir ou criar ações "
"diferentes em tempo de execução. Este singleton não é salvo (deve ser "
"modificado manualmente) e seu estado é executado a partir das configurações "
"do projeto (project.godot). Portanto, qualquer sistema dinâmico desse tipo "
"precisa armazenar as configurações da maneira que o programador achar melhor."

msgid "Translation status"
msgstr "Progresso da Tradução"
