# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr ""

msgid ""
"The problem with :ref:`MeshInstance3D <class_MeshInstance3D>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""

msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`GPUParticles3D <class_GPUParticles3D>` node. Particles take advantage of "
"GPU acceleration by computing and setting the per-instance information in a :"
"ref:`Shader <class_Shader>`."
msgstr ""

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""

msgid "Set the ``shader_type`` to ``particles``."
msgstr ""

msgid "Then add the following two functions:"
msgstr "Em seguida, acrescente as duas funções a seguir:"

msgid ""
"These functions come from the default :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. They are used to generate a random number "
"from each particle's ``RANDOM_SEED``."
msgstr ""

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the shader of the mesh, and also in the particle shader the next "
"time it is run."
msgstr ""

#, fuzzy
msgid ""
"Next, setup your ``start()`` function. Particles shaders contain a "
"``start()`` function and a ``process()`` function."
msgstr ""
"Em seguida, configure sua função ``vertex``. Os shaders de partículas contêm "
"apenas uma função de vértice e nenhuma outra."

msgid ""
"The code in the ``start()`` function only runs when the particle system "
"starts. The code in the ``process()`` function will always run."
msgstr ""

msgid ""
"We need to generate 4 random numbers: 3 to create a random position and one "
"for the random offset of the swim cycle."
msgstr ""

msgid ""
"First, generate 4 seeds inside the ``start()`` function using the ``hash()`` "
"function provided above:"
msgstr ""

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr ""

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""

msgid "Remember, all this code so far goes inside the ``start()`` function."
msgstr ""

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr ""

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""

#, fuzzy
msgid ""
"Let's transform the fish by setting their ``VELOCITY`` in the ``start()`` "
"function."
msgstr "Vamos transformar o peixe definindo sua ``VELOCIDADE``."

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr ""
"Esta é a forma mais básica de definir ``VELOCIDADE`` cada partícula (ou "
"peixe) terá a mesma velocidade."

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr ""
"Apenas configurando ``VELOCITY`` você pode fazer o peixe nadar como quiser. "
"Por exemplo, tente o código abaixo."

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr "Isso dará a cada peixe uma velocidade única entre ``2`` e ``10``."

msgid ""
"You can also let each fish change its velocity over time if you set the "
"velocity in the ``process()`` function."
msgstr ""

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"Se você usou ``CUSTOM.y`` no último tutorial, também pode definir a "
"velocidade da animação de nadar com base na ``VELOCIDADE``. Basta usar "
"``CUSTOM.y``."

msgid "This code gives you the following behavior:"
msgstr "Este código fornece o seguinte comportamento:"

msgid ""
"Using a ParticleProcessMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""

msgid "Translation status"
msgstr "Progresso da Tradução"
