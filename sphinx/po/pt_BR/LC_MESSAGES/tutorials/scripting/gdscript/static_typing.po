# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipagem estática em GDScript"

msgid "In this guide, you will learn:"
msgstr "Neste guia, você aprenderá:"

#, fuzzy
msgid "how to use static typing in GDScript;"
msgstr "Tipagem estática em GDScript"

#, fuzzy
msgid "that static types can help you avoid bugs;"
msgstr "Que os **tipos estáticos podem ajudá-lo a evitar erros**"

msgid "that static typing improves your experience with the editor."
msgstr ""

#, fuzzy
msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"A decisão de onde e como você usa esse novo recurso de linguagem é "
"inteiramente sua: você pode usá-lo apenas em alguns arquivos GDScript "
"sensíveis, usá-lo em qualquer lugar ou escrever códigos como sempre fez!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Tipos estáticos podem ser usados em variáveis, constantes, funções, "
"parâmetros e tipos de retorno."

msgid "A brief look at static typing"
msgstr "Uma breve olhada na tipagem estática"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"Com GDScript tipado, Godot pode detectar ainda mais erros enquanto você "
"escreve o código! Ele fornece a você e a seus colegas de equipe mais "
"informações enquanto você trabalha, pois os tipos de argumentos aparecem "
"quando você chama um método."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Imagine que você esteja programando um sistema de inventário. Você codifica "
"um nó ``Item``, depois um ``Inventário``. Para adicionar itens ao "
"inventário, as pessoas que trabalham com seu código devem sempre passar um "
"``Item`` para o método ``Inventário.add``. Com tipos, você pode impor isso:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Tipos estáticos também oferecem opções melhores de conclusão de código. "
"Abaixo, você pode ver a diferença entre opções de conclusão tipadas dinâmica "
"e estática completa para uma classe chamada ``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

msgid "Completion options for dynamic typed code."
msgstr ""

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Isto é devido a código dinâmico. O Godot não pode saber qual nó ou tipo de "
"valor você está passando para a função. Se você escrever o tipo "
"explicitamente no entanto, você obterá todos os métodos e variáveis públicos "
"do nó:"

msgid "Completion options for static typed code."
msgstr ""

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"No geral, a programação tipada proporciona uma experiência mais estruturada. "
"Ajuda a evitar erros e melhora o aspecto de autodocumentação dos seus "
"scripts. Isso é especialmente útil quando você trabalha em equipe ou em um "
"projeto de longo prazo: estudos mostram que os desenvolvedores passam a "
"maior parte do tempo lendo o código de outras pessoas ou scripts que "
"escreveram no passado e esqueceram. Quanto mais claro e mais estruturado o "
"código, mais rápido será entender, mais rápido você poderá avançar."

msgid "How to use static typing"
msgstr "Como usar a tipagem estática"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Para definir o tipo de uma variável ou uma constante, escreva dois pontos "
"após o nome da variável, seguido por seu tipo. Por exemplo. ``var health: "
"int``. Isso força o tipo da variável a permanecer sempre o mesmo:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot tentará inferir tipos se você escrever dois pontos, mas omite o tipo:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr ""
"Não há diferença entre sombra de buffer e sombra de raio na exportação."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Você não precisa escrever inferências de tipo para constantes, já que o "
"Godot o define automaticamente a partir do valor atribuído. Mas você ainda "
"pode fazer isso para tornar a intenção do seu código mais clara."

#, fuzzy
msgid "What can be a type hint"
msgstr "O que a Engine é capaz de fazer?"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "Aqui está um exemplo completo de shader baseado nestas diretrizes:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

#, fuzzy
msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Embutido <doc_gdscript_builtin_types>`"

#, fuzzy
msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"Classes e nós centrais (``Objeto``, ``Nó``, ``Area2D``, ``Camera2D``, etc.)"

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Script Classes <doc_gdscript_basics_class_name>`"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Script Classes <doc_gdscript_basics_class_name>`"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Você pode usar qualquer classe, incluindo suas classes personalizadas, como "
"tipos. Existem duas maneiras de usá-los em scripts. O primeiro método é pré-"
"carregar o script que você deseja usar como um tipo em uma constante:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"O segundo método é usar a palavra-chave ``class_name`` quando você cria. "
"Para o exemplo acima, o seu Rifle.gd ficaria assim:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Se você usa ``class_name``, o Godot registra o tipo Rifle globalmente no "
"editor, e você pode usá-lo em qualquer lugar, sem ter que previamente "
"carregá-lo em uma constante:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Defina o tipo de retorno de uma função com a seta ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Para definir o tipo de retorno de uma função, coloque um traço e o símbolo "
"de menor que ``->`` depois de sua declaração, seguido pelo tipo de retorno:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"O tipo ``void`` significa que a função não retorna nada. Você pode usar "
"qualquer tipo, como com variáveis:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "Você também pode usar seus próprios nós como tipos de retorno:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Exemplo:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Defina o tipo de retorno de uma função com a seta ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Conversão de tipo"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"A conversão de tipos é um conceito-chave em linguagens tipados. Casting é a "
"conversão de um valor de um tipo para outro."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Imagine um Inimigo no seu jogo, que ``extends Area2D``. Você quer que ele "
"colida com o Jogador, um ``KinematicBody2D`` com um script chamado "
"``PlayerController`` atrelado a ele."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Você pode verificar se este ``PhysicsBody2D`` é o seu Jogador com a palavra-"
"chave ``as`` e usando os dois pontos ``:`` novamente para forçar a variável "
"a usar este tipo. Isso força a variável a se ater ao tipo "
"``PlayerController``:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Como nós estamos lidando com um tipo personalizado, se o ``body`` não "
"extende ``PlayerController``, a variável ``player``\\ vai ser definida como "
"``null``. Nós podemos usar isso para checar se o body é o player or não. Nós "
"também poderemos usar preenchimento automático completo no variável player "
"graças a essa conversão."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Se você tentar moldar com um tipo embutido e falhar, Godot lançará um erro."

msgid "Safe lines"
msgstr "Linhas seguras"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Você também pode usar casting para garantir linhas seguras. As linhas "
"seguras são uma nova ferramenta do Godot 3.1 para lhe dizer quando linhas de "
"código ambíguas são seguras para o tipo. Como você pode misturar e combinar "
"códigos tipados e dinâmicos, às vezes, Godot não tem informações suficientes "
"para saber se uma instrução disparará um erro ou não em tempo de execução."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Isso acontece quando você pega um nó filho. Vamos tomar um timer como "
"exemplo: com código dinâmico, você pode pegar o nó usando ``$Timer``. "
"GDScript suporta `duck-typing <https://stackoverflow.com/"
"a/4205163/8125343>`__, então mesmo que o seu timer seja do tipo ``Timer``, "
"ele também é um ``Node`` e um ``Object``, extendendo duas classes. Com "
"GDScript dinâmico, você não se importa com o tipo do nó desde que ele tenha "
"os métodos que você quer chamar."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Você pode usar casting para dizer ao Godot o tipo que você espera quando "
"você obtém um nó: ``($Timer as Timer)``, ``($Player as KinematicBody2D)`` "
"etc. O Godot irá verificar que o tipo funciona e, se funcionar, o número da "
"linha ficará verde à esquerda do editor de script."

msgid "Unsafe vs Safe Line"
msgstr "Linha insegura vs. segura"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Linha não segura (linha 7) vs Linhas Seguras (linha 6 e 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Você pode desativar linhas seguras ou alterar suas cores nas configurações "
"do editor."

msgid "Typed or dynamic: stick to one style"
msgstr "Tipada ou dinâmica: Adote um estilo"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript tipado e GDScript dinâmico podem coexistir em um mesmo projeto. Mas "
"é recomendado adotar um dos dois estilos para manter a consistência do seu "
"código base. Facilita para todos trabalharem juntos se vocês seguirem as "
"mesmas diretrizes, e acelera a leitura e o entendimento do código de outras "
"pessoas."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"Código tipado leva um pouco mais de escrita, mas você terá os benefícios "
"discutidos acima. Aqui está um exemplo do mesmo script vazio utilizando a "
"tipagem dinâmica:"

#, fuzzy
msgid "And with static typing::"
msgstr "E com a tipagem estática:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Como você pode ver, você também pode usar tipos com os métodos virtuais da "
"engine. Chamadas de retorno de sinal, como quaisquer métodos, também podem "
"usar tipos. Aqui um sinal ``body_entered`` com a tipagem dinâmica:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "E a mesma chamada de retorno, com as inferências de tipo:"

msgid "Warning system"
msgstr "Sistema de alertas"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"A documentação sobre o sistema de avisos do GDScript foi movida para :ref:"
"`doc_gdscript_warning_system`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Outra vantagem significativa do GDScript tipado é o novo **sistema de "
"alerta**. A partir da versão 3.1, Godot dá avisos sobre o seu código à "
"medida que você o escreve: o motor identifica seções de seu código que podem "
"levar a problemas em tempo de execução, mas permite que você decida se "
"deseja ou não deixar o código como está. Mais sobre isso em um momento."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Casos onde você não pode especificar tipos"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Para concluir essa introdução, vamos abordar alguns poucos casos onde você "
"não pode usar inferências de tipo. Todos os exemplos abaixo **irão acionar "
"erros**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"Você não pode especificar o tipo de membros individuais em um array. Isso "
"lhe dará um erro:"

#, fuzzy
msgid "Nested types are not currently supported::"
msgstr "**Navegadores móveis não são compatíveis no momento.**"

#, fuzzy
msgid "Typed dictionaries are not currently supported::"
msgstr "**Navegadores móveis não são compatíveis no momento.**"

msgid "Summary"
msgstr "Resumo"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"GDScript tipado é uma ferramenta poderosa. Disponível na versão 3.1 do "
"Godot, lhe ajudará a escrever um código mais estruturado, evitando erros "
"comuns, e a criar sistemas escaláveis. No futuro, a tipagem estática também "
"te trará um bom aumento de desempenho graças às futuras otimizações do "
"compilador."

msgid "Translation status"
msgstr "Progresso da Tradução"
