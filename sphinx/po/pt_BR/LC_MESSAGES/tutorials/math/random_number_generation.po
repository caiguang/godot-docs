# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Random number generation"
msgstr "Geração de números aleatórios"

msgid ""
"Many games rely on randomness to implement core game mechanics. This page "
"guides you through common types of randomness and how to implement them in "
"Godot."
msgstr ""

msgid ""
"After giving you a brief overview of useful functions that generate random "
"numbers, you will learn how to get random elements from arrays, "
"dictionaries, and how to use a noise generator in GDScript. Lastly, we'll "
"take a look at cryptographically secure random number generation and how it "
"differs from typical random number generation."
msgstr ""

msgid ""
"Computers cannot generate \"true\" random numbers. Instead, they rely on "
"`pseudorandom number generators <https://en.wikipedia.org/wiki/"
"Pseudorandom_number_generator>`__ (PRNGs)."
msgstr ""

msgid ""
"Godot internally uses the `PCG Family <https://www.pcg-random.org/>`__ of "
"pseudorandom number generators."
msgstr ""

msgid "Global scope versus RandomNumberGenerator class"
msgstr "Escopo global versus classe RandomNumberGenerator"

msgid ""
"Godot exposes two ways to generate random numbers: via *global scope* "
"methods or using the :ref:`class_RandomNumberGenerator` class."
msgstr ""

msgid ""
"Global scope methods are easier to set up, but they don't offer as much "
"control."
msgstr ""

msgid ""
"RandomNumberGenerator requires more code to use, but allows creating "
"multiple instances, each with their own seed and state."
msgstr ""

msgid ""
"This tutorial uses global scope methods, except when the method only exists "
"in the RandomNumberGenerator class."
msgstr ""

msgid "The randomize() method"
msgstr ""

msgid ""
"Since Godot 4.0, the random seed is automatically set to a random value when "
"the project starts. This means you don't need to call ``randomize()`` in "
"``_ready()`` anymore to ensure that results are random across project runs. "
"However, you can still use ``randomize()`` if you want to use a specific "
"seed number, or generate it using a different method."
msgstr ""

msgid ""
"In global scope, you can find a :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` method. **This method should be "
"called only once when your project starts to initialize the random seed.** "
"Calling it multiple times is unnecessary and may impact performance "
"negatively."
msgstr ""

msgid ""
"Putting it in your main scene script's ``_ready()`` method is a good choice:"
msgstr ""

msgid ""
"You can also set a fixed random seed instead using :ref:`seed() "
"<class_@GlobalScope_method_seed>`. Doing so will give you *deterministic* "
"results across runs:"
msgstr ""

msgid ""
"When using the RandomNumberGenerator class, you should call ``randomize()`` "
"on the instance since it has its own seed:"
msgstr ""

msgid "Getting a random number"
msgstr "Obtendo um número aleatório"

msgid ""
"Let's look at some of the most commonly used functions and methods to "
"generate random numbers in Godot."
msgstr ""

msgid ""
"The function :ref:`randi() <class_@GlobalScope_method_randi>` returns a "
"random number between 0 and 2^32-1. Since the maximum value is huge, you "
"most likely want to use the modulo operator (``%``) to bound the result "
"between 0 and the denominator:"
msgstr ""

msgid ""
":ref:`randf() <class_@GlobalScope_method_randf>` returns a random floating-"
"point number between 0 and 1. This is useful to implement a :ref:"
"`doc_random_number_generation_weighted_random_probability` system, among "
"other things."
msgstr ""

msgid ""
":ref:`randfn() <class_RandomNumberGenerator_method_randfn>` returns a random "
"floating-point number following a `normal distribution <https://en.wikipedia."
"org/wiki/Normal_distribution>`__. This means the returned value is more "
"likely to be around the mean (0.0 by default), varying by the deviation (1.0 "
"by default):"
msgstr ""

msgid ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` takes two "
"arguments ``from`` and ``to``, and returns a random floating-point number "
"between ``from`` and ``to``:"
msgstr ""

msgid ""
":ref:`RandomNumberGenerator.randi_range() "
"<class_RandomNumberGenerator_method_randi_range>` takes two arguments "
"``from`` and ``to``, and returns a random integer between ``from`` and "
"``to``:"
msgstr ""

msgid "Get a random array element"
msgstr ""

msgid ""
"We can use random integer generation to get a random element from an array:"
msgstr ""

msgid ""
"To prevent the same fruit from being picked more than once in a row, we can "
"add more logic to this method:"
msgstr ""

msgid ""
"This approach can be useful to make random number generation feel less "
"repetitive. Still, it doesn't prevent results from \"ping-ponging\" between "
"a limited set of values. To prevent this, use the :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` pattern instead."
msgstr ""

msgid "Get a random dictionary value"
msgstr "Obtenha um valor aleatório de um dicionário"

msgid "We can apply similar logic from arrays to dictionaries as well:"
msgstr ""

msgid "Weighted random probability"
msgstr "Probabilidade aleatória ponderada"

msgid ""
"The :ref:`randf() <class_@GlobalScope_method_randf>` method returns a "
"floating-point number between 0.0 and 1.0. We can use this to create a "
"\"weighted\" probability where different outcomes have different likelihoods:"
msgstr ""

msgid "\"Better\" randomness using shuffle bags"
msgstr ""

msgid ""
"Taking the same example as above, we would like to pick fruits at random. "
"However, relying on random number generation every time a fruit is selected "
"can lead to a less *uniform* distribution. If the player is lucky (or "
"unlucky), they could get the same fruit three or more times in a row."
msgstr ""

msgid ""
"You can accomplish this using the *shuffle bag* pattern. It works by "
"removing an element from the array after choosing it. After multiple "
"selections, the array ends up empty. When that happens, you reinitialize it "
"to its default value::"
msgstr ""

msgid ""
"When running the above code, there is a chance to get the same fruit twice "
"in a row. Once we picked a fruit, it will no longer be a possible return "
"value unless the array is now empty. When the array is empty, we reset it "
"back to its default value, making it possible to have the same fruit again, "
"but only once."
msgstr ""

msgid "Random noise"
msgstr "Ruído aleatório"

msgid ""
"The random number generation shown above can show its limits when you need a "
"value that *slowly* changes depending on the input. The input can be a "
"position, time, or anything else."
msgstr ""

msgid ""
"To achieve this, you can use random *noise* functions. Noise functions are "
"especially popular in procedural generation to generate realistic-looking "
"terrain. Godot provides :ref:`class_fastnoiselite` for this, which supports "
"1D, 2D and 3D noise. Here's an example with 1D noise:"
msgstr ""

msgid "Cryptographically secure pseudorandom number generation"
msgstr ""

msgid ""
"So far, the approaches mentioned above are **not** suitable for "
"*cryptographically secure* pseudorandom number generation (CSPRNG). This is "
"fine for games, but this is not sufficient for scenarios where encryption, "
"authentication or signing is involved."
msgstr ""

msgid ""
"Godot offers a :ref:`class_Crypto` class for this. This class can perform "
"asymmetric key encryption/decryption, signing/verification, while also "
"generating cryptographically secure random bytes, RSA keys, HMAC digests, "
"and self-signed :ref:`class_X509Certificate`\\ s."
msgstr ""

msgid ""
"The downside of :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` is that it's much slower than standard pseudorandom number "
"generation. Its API is also less convenient to use. As a result, :abbr:"
"`CSPRNG (Cryptographically secure pseudorandom number generation)` should be "
"avoided for gameplay elements."
msgstr ""

msgid ""
"Example of using the Crypto class to generate 2 random integers between "
"``0`` and ``2^32 - 1`` (inclusive):"
msgstr ""

msgid ""
"See :ref:`class_PackedByteArray`'s documentation for other methods you can "
"use to decode the generated bytes into various types of data, such as "
"integers or floats."
msgstr ""

msgid "Translation status"
msgstr "Progresso da Tradução"
