# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Screen-reading shaders"
msgstr "Shaders de lectura de pantalla"

msgid "Introduction"
msgstr "Introducción"

msgid ""
"It is often desired to make a shader that reads from the same screen to "
"which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""
"A menudo se desea crear un shader que lea desde la misma pantalla en la que "
"está escribiendo. Las API 3D, como OpenGL o DirectX, hacen esto muy difícil "
"debido a las limitaciones internas del hardware. Las GPU son extremadamente "
"paralelas, por lo que leer y escribir causa problemas de caché y coherencia. "
"Como resultado, ni siquiera el hardware más moderno admite esto "
"correctamente."

msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy."
msgstr ""
"La solución alternativa es hacer una copia de la pantalla, o una parte de la "
"pantalla, en un búfer de respaldo y luego leer de él mientras dibuja. Godot "
"proporciona algunas herramientas que facilitan este proceso."

#, fuzzy
msgid "Screen texture"
msgstr "Leer texturas"

#, fuzzy
msgid ""
"Godot :ref:`doc_shading_language` has a special texture to access the "
"already rendered contents of the screen. It is used by specifying a hint "
"when declaring a ``sampler2D`` uniform: ``hint_screen_texture``. A special "
"built-in varying ``SCREEN_UV`` can be used to obtain the UV relative to the "
"screen for the current fragment. As a result, this canvas_item fragment "
"shader results in an invisible object, because it only shows what lies "
"behind:"
msgstr ""
"Godot :ref:`doc_shading_language` tiene una textura especial, "
"``SCREEN_TEXTURE`` (y ``DEPTH_TEXTURE`` para la profundidad, en el caso de "
"3D). Toma como argumento el UV de la pantalla y devuelve un vec3 RGB con el "
"color. Una variación especial incorporada: SCREEN_UV puede ser usado para "
"obtener el UV del fragmento actual. Como resultado, este simple shader de "
"fragmentos de canvas_item:"

msgid ""
"``textureLod`` is used here as we only want to read from the bottom mipmap. "
"If you want to read from a blurred version of the texture instead, you can "
"increase the third argument to ``textureLod`` and change the hint "
"``filter_nearest`` to ``filter_nearest_mipmap`` (or any other filter with "
"mipmaps enabled). If using a filter with mipmaps, Godot will automatically "
"calculate the blurred texture for you."
msgstr ""

msgid ""
"If the filter mode is not changed to a filter mode that contains ``mipmap`` "
"in its name, ``textureLod`` with a LOD parameter greater than ``0.0`` will "
"have the same appearance as with the ``0.0`` LOD parameter."
msgstr ""

msgid "Screen texture example"
msgstr "Ejemplo de screen texture"

#, fuzzy
msgid ""
"The screen texture can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""
"``SCREEN_TEXTURE`` puede ser usada para muchas cosas. Hay una demo especial "
"para *Screen Spade Shader*, que puedes descargar para ver y aprender. Un "
"ejemplo es un simple shader para ajustar el brillo, el contraste y la "
"saturación:"

msgid "Behind the scenes"
msgstr "Entre bastidores"

#, fuzzy
msgid ""
"While this seems magical, it's not. In 2D, when ``hint_screen_texture`` is "
"first found in a node that is about to be drawn, Godot does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the screen texture."
msgstr ""
"Aunque esto parece mágico, no lo es. En 2D, la ``SCREEN_TEXTURE`` "
"incorporada, cuando se encuentra por primera vez en un nodo que está a punto "
"de ser dibujado, hace una copia a pantalla completa a un búfer trasero. Los "
"nodos subsiguientes que lo usan en los shaders no tendrán la pantalla "
"copiada para ellos, porque esto termina siendo ineficiente. En 3D, la "
"pantalla se copia después de la pasada de geometría opaca, pero antes de la "
"pasada de geometría transparente, por lo que los objetos transparentes no "
"serán capturados en la ``SCREEN_TEXTURE``."

#, fuzzy
msgid ""
"As a result, in 2D, if shaders that use ``hint_screen_texture`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""
"Como resultado, en 2D, si los shaders que usan ``SCREEN_TEXTURE`` se "
"superponen, el segundo no usará el resultado del primero, resultando en "
"visuales inesperados:"

#, fuzzy
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for the screen texture as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""
"En la imagen de arriba, la segunda esfera (arriba a la derecha) está usando "
"la misma fuente de ``SCREEN_TEXTURE`` que la primera de abajo, por lo que la "
"primera \"desaparece\", o no es visible."

msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""
"En 2D, esto puede ser corregido a través del nodo :ref:`BackBufferCopy "
"<class_BackBufferCopy>`, que puede ser instanciado entre ambas esferas. "
"BackBufferCopy puede funcionar especificando una región de la pantalla o la "
"pantalla completa:"

msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr ""
"Con la copia correcta de la memoria intermedia, las dos esferas se mezclan "
"correctamente:"

msgid ""
"In 3D, materials that use ``hint_screen_texture`` are considered transparent "
"themselves and will not appear in the resulting screen texture of other "
"materials. If you plan to instance a scene that uses a material with "
"``hint_screen_texture``, you will need to use a BackBufferCopy node."
msgstr ""

#, fuzzy
msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"screen texture is only captured once. Be careful when using the screen "
"texture in 3D as it won't capture transparent objects and may capture some "
"opaque objects that are in front of the object using the screen texture."
msgstr ""
"En 3D, hay menos flexibilidad para resolver este problema en particular "
"porque la ``SCREEN_TEXTURE`` sólo se captura una vez. Tenga cuidado al usar "
"\"SCREEN_TEXTURE\" en 3D, ya que no capturará objetos transparentes y puede "
"capturar algunos objetos opacos que están en frente del objeto."

#, fuzzy
msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of the "
"screen texture."
msgstr ""
"Puedes reproducir la lógica del búfer trasero en 3D creando un :ref:"
"`Viewport <class_Viewport>` con una cámara en la misma posición que tu "
"objeto, y luego usar la textura :ref:`Viewport's <class_Viewport>` en lugar "
"de ``SCREEN_TEXTURE``."

msgid "Back-buffer logic"
msgstr "Lógica del Back-buffer"

#, fuzzy
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in 2D "
"in Godot:"
msgstr ""
"Así que, para dejarlo más claro, así es como funciona la lógica de copia del "
"backbuffer en Godot:"

#, fuzzy
msgid ""
"If a node uses ``hint_screen_texture``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""
"Si un nodo utiliza la ``SCREEN_TEXTURE``, la pantalla entera se copia en el "
"buffer de atrás antes de dibujar ese nodo. Esto sólo ocurre la primera vez; "
"los nodos subsiguientes no lo activan."

#, fuzzy
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``hint_screen_texture`` was not used), the behavior described "
"in the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``hint_screen_texture`` is used in a node for "
"the first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""
"Si un nodo BackBufferCopy fue procesado antes de la situación en el punto "
"anterior (incluso si no se usó ``SCREEN_TEXTURE``), el comportamiento "
"descrito en el punto anterior no ocurre. En otras palabras, el copiado "
"automático de toda la pantalla sólo ocurre si ``SCREEN_TEXTURE`` se usa en "
"un nodo por primera vez y no se encontró antes un nodo BackBufferCopy (no "
"deshabilitado) en el orden del árbol."

#, fuzzy
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then read the screen texture from a "
"different region. Avoid this behavior!"
msgstr ""
"BackBufferCopy puede copiar la pantalla completa o una región. Si se "
"configura sólo una región (no toda la pantalla) y el shader utiliza píxeles "
"que no están en la región copiada, el resultado de esa lectura es indefinido "
"(lo más probable es que sea basura de fotogramas). En otras palabras, es "
"posible usar BackBufferCopy para copiar una región de la pantalla y luego "
"usar \"SCREEN_TEXTURE\" en una región diferente. ¡Evita este comportamiento!"

msgid "Depth texture"
msgstr "Textura de profundidad (depth)"

#, fuzzy
msgid ""
"For 3D shaders, it's also possible to access the screen depth buffer. For "
"this, the ``hint_depth_texture`` hint is used. This texture is not linear; "
"it must be converted using the inverse projection matrix."
msgstr ""
"Para los shaders 3D, también es posible acceder al búfer de profundidad de "
"la pantalla. Para esto, se utiliza el valor incorporado ``DEPTH_TEXTURE``. "
"Esta textura no es lineal; debe ser convertida a través de la matriz de "
"proyección inversa."

msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr ""
"El siguiente código recupera la posición 3D debajo del píxel que se está "
"dibujando:"

msgid "Normal-roughness texture"
msgstr ""

msgid ""
"Normal-roughness texture is only supported in the Forward+ rendering method, "
"not Mobile or Compatibility."
msgstr ""
"Las textura normal-rugosidad texture sólo están soportadas en el modo de "
"renderizado Forward+, no ni en Móvil ni Compatibilidad."

msgid ""
"Similarly, the normal-roughness texture can be used to read the normals and "
"roughness of objects rendered in the depth prepass. The normal is stored in "
"the ``.xyz`` channels (mapped to the 0-1 range) while the roughness is "
"stored in the ``.w`` channel."
msgstr ""

#, fuzzy
msgid "Redefining screen textures"
msgstr "Leer texturas"

msgid ""
"The screen texture hints (``hint_screen_texture``, ``hint_depth_texture``, "
"and ``hint_normal_roughness_texture``) can be used with multiple uniforms. "
"For example, you may want to read from the texture multiple times with a "
"different repeat flag or filter flag."
msgstr ""

msgid ""
"The following example shows a shader that reads the screen space normal with "
"linear filtering, but reads the screen space roughness using nearest "
"neighbor filtering."
msgstr ""

msgid "Translation status"
msgstr "Estado de traducción"
