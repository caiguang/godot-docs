# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using InputEvent"
msgstr "Usando InputEvent"

msgid "What is it?"
msgstr "¿Qué es eso?"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"Administrar inputs (o entradas) es normalmente complejo, sin importar en qué "
"SO o plataforma. Para aliviar un poco esto se provee un tipo built-in "
"especial, :ref:`InputEvent <class_InputEvent>`, este puede ser configurado "
"para contener varios tipos de eventos. Los eventos de entrada van a través "
"del motor y pueden ser recibidos en múltiples lugares, dependiendo de su "
"propósito."

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"Aquí hay un ejemplo rápido de cerrar el juego cuando se presiona la tecla "
"\"escape\":"

msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"Sin embargo, es más limpio y flexible usar la funcionalidad :ref:`InputMap "
"<class_InputMap>`, la que permite definir acciones de entrada y asignarlas a "
"diferentes teclas. De este modo, se pueden definir múltiples teclas para la "
"misma acción (por ejemplo, la tecla escape y el botón start de un gamepad). "
"Así se puede cambiar el mapeo fácilmente en las opciones de proyecto sin "
"necesidad de modificar el código, incluso se puede crear una funcionalidad "
"de mapeo que permita cambiar las teclas utilizadas dentro del juego en "
"ejecución!"

msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"Puedes configurar el InputMap dentro de **Proyecto > Ajustes del Proyecto > "
"Mapa de Entradas** y luego usa las acciones de este modo:"

msgid "How does it work?"
msgstr "¿Cómo funciona?"

#, fuzzy
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The DisplayServer for each platform will read events from the "
"operating system, then feed them to the root :ref:`Window <class_Window>`."
msgstr ""
"Cada evento de entrada es originado por el usuario/jugador (aunque también "
"es posible generar un InputEvent y enviarlos al motor, algo útil para "
"funciones como gestos). El objeto OS de cada plataforma leerá eventos desde "
"un dispositivo y los transmitirá a MainLoop. Como :ref:`SceneTree "
"<class_SceneTree>` es la implementación por defecto de MainLoop, los eventos "
"irán a este. Godot provee una función para obtener el objeto SceneTree "
"actual: **get_tree()**."

#, fuzzy
msgid ""
"The window's :ref:`Viewport <class_Viewport>` does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
"Los :ref:`Viewports <class_Viewport>` tienen una variedad de casos de uso, "
"incluyendo:"

msgid ""
"If the Viewport is embedding Windows, the Viewport tries to interpret the "
"event in its capability as a Window-Manager (e.g. for resizing or moving "
"Windows)."
msgstr ""

msgid ""
"Next if an embedded Window is focused, the event is sent to that Window and "
"processed in the Windows Viewport and afterwards treated as handled. If no "
"embedded Window is focused, the event is sent to the nodes of the current "
"viewport in the following order."
msgstr ""

#, fuzzy
msgid ""
"First of all, the standard :ref:`Node._input() "
"<class_Node_private_method__input>` function will be called in any node that "
"overrides it (and hasn't disabled input processing with :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. This ensures that you can filter all events of interest, even "
"before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` is generally a better fit, "
"because it allows the GUI to intercept the events."
msgstr ""
"Primero, la función estándar :ref:`Node._input() <class_Node_method__input>` "
"será llamada en cualquier nodo que la haya sobreescrito (y que no tenga "
"deshabilitado el procesamiento de entradas con :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). Si una función "
"consume el evento, podrá llamar a :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` y el evento no se propagará "
"más. Esto asegura que se puedan filtrar eventos de interés, incluso antes de "
"que lleguen a la GUI. Para entradas de gameplay, generalmente es mejor "
"utilizar :ref:`Node._unhandled_input() <class_Node_method__unhandled_input>` "
"porque permite que la GUI intercepte los eventos previamente."

#, fuzzy
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>` and the signal \"gui_input\" will "
"be emitted (this function is re-implementable by script by inheriting from "
"it). If the control wants to \"consume\" the event, it will call :ref:"
"`Control.accept_event() <class_Control_method_accept_event>` and the event "
"will not spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_private_method__gui_input>` callback, and "
"whether these events are propagated further."
msgstr ""
"Seguido, intentará transmitir el evento a la GUI y ver si algún Control la "
"puede recibir. De ser así, el :ref:`Control <class_Control>` será llamado "
"mediante la función virtual :ref:`Control._gui_input() "
"<class_Control_method__gui_input>` y la señal \"input_event\" será emitida "
"(esta función se puede re-implementar por script en caso utilizar herencia). "
"Si el Control quiere \"consumir\" el evento, llamará a :ref:`Control."
"accept_event() <class_Control_method_accept_event>` y el evento no se "
"propagará más. Los eventos que no son consumidos, se propagarán **hacia "
"arriba** hasta sus ancestros. Utiliza la propiedad :ref:`Control."
"mouse_filter <class_Control_property_mouse_filter>` para controlar si un :"
"ref:`Control <class_Control>` es notificado de eventos de ratón mediante :"
"ref:`Control._gui_input() <class_Control_method__gui_input>` y si esos "
"eventos deberán propagarse más."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._shortcut_input() "
"<class_Node_private_method__shortcut_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_shortcut_input() "
"<class_Node_method_set_process_shortcut_input>`). This happens only for :ref:"
"`InputEventKey <class_InputEventKey>`, :ref:`InputEventShortcut "
"<class_InputEventShortcut>` and :ref:`InputEventJoypadButton "
"<class_InputEventJoypadButton>`. If any function consumes the event, it can "
"call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The shortcut input callback is ideal for treating events that are "
"intended as shortcuts."
msgstr ""
"Si hasta el momento ningún evento fue consumido, se utilizará la llamada a "
"`_unhandled_input` si fue redefinida en el script (y no desactivada con :ref:"
"`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si alguna función consume "
"el evento, esta podrá llamar a :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, y el evento no se propagará "
"más. La llamada a _unhandled_input es ideal para eventos de gameplay de "
"pantalla completa que deben ser ignorados si hay elementos de GUI activos."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_key_input() "
"<class_Node_private_method__unhandled_key_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node."
"set_process_unhandled_key_input() "
"<class_Node_method_set_process_unhandled_key_input>`). This happens only if "
"the event is a :ref:`InputEventKey <class_InputEventKey>`. If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled key input callback is ideal for key events."
msgstr ""
"Si hasta el momento ningún evento fue consumido, se utilizará la llamada a "
"`_unhandled_input` si fue redefinida en el script (y no desactivada con :ref:"
"`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si alguna función consume "
"el evento, esta podrá llamar a :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, y el evento no se propagará "
"más. La llamada a _unhandled_input es ideal para eventos de gameplay de "
"pantalla completa que deben ser ignorados si hay elementos de GUI activos."

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled input callback is ideal for full-screen gameplay "
"events, so they are not received when a GUI is active."
msgstr ""
"Si hasta el momento ningún evento fue consumido, se utilizará la llamada a "
"`_unhandled_input` si fue redefinida en el script (y no desactivada con :ref:"
"`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). Si alguna función consume "
"el evento, esta podrá llamar a :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>`, y el evento no se propagará "
"más. La llamada a _unhandled_input es ideal para eventos de gameplay de "
"pantalla completa que deben ser ignorados si hay elementos de GUI activos."

#, fuzzy
msgid ""
"If no one wanted the event so far, and :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` is turned on, the event is "
"used for object picking. For the root viewport, this can also be enabled in :"
"ref:`Project Settings <class_ProjectSettings_property_physics/common/"
"enable_object_picking>`. In the case of a 3D scene if a :ref:`Camera3D "
"<class_Camera3D>` is assigned to the Viewport, a ray to the physics world "
"(in the ray direction from the click) will be cast. If this ray hits an "
"object, it will call the :ref:`CollisionObject3D._input_event() "
"<class_CollisionObject3D_private_method__input_event>` function in the "
"relevant physics object. In the case of a 2D scene, conceptually the same "
"happens with :ref:`CollisionObject2D._input_event() "
"<class_CollisionObject2D_private_method__input_event>`."
msgstr ""
"Si hasta ahora nadie ha querido el evento y se le asigna una :ref:`Cámara "
"<class_Camera>` a la Vista con la opción :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` activada, se lanzará un "
"rayo al mundo físico (en la dirección del clic). (Para la vista raíz, esto "
"también se puede habilitar en :ref:`Configuración del Proyecto "
"<class_ProjectSettings_property_physics/common/enable_object_picking>`). Si "
"este rayo golpea un objeto, se llamará a la función :ref:`CollisionObject."
"_input_event() <class_CollisionObject_method__input_event>` en el objeto "
"físico relevante (por defecto, los cuerpos reciben esta devolución de "
"llamada, pero las áreas no lo hacen. Esto se puede configurar a través de "
"las propiedades de :ref:`Área <class_Area>`)."

msgid ""
"When sending events to its child and descendant nodes, the viewport will do "
"so, as depicted in the following graphic, in a reverse depth-first order, "
"starting with the node at the bottom of the scene tree, and ending at the "
"root node. Excluded from this process are Windows and SubViewports."
msgstr ""
"Cuando se envían eventos a hijos y nodos descendientes, el viewport lo hará "
"como se indica en la siguiente imagen, en un orden depth-first (primero en "
"profundidad), comenzando por el nodo al final del árbol de escenas y "
"finalizando en el nodo raíz. Están excluidos de este proceso los nodos "
"Window y Subviewport."

#, fuzzy
msgid ""
"This order doesn't apply to :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`, which uses a different method "
"based on event location or focused Control."
msgstr ""
"Esta función es is :ref:`Control._gui_input() "
"<class_Control_method__gui_input>`. Simplemente sobrescríbelo en tu Control. "
"No es necesario establecer ningún procesamiento."

msgid ""
"Since Viewports don't send events to other :ref:`SubViewports "
"<class_SubViewport>`, one of the following methods has to be used:"
msgstr ""

msgid ""
"Use a :ref:`SubViewportContainer <class_SubViewportContainer>`, which "
"automatically sends events to its child :ref:`SubViewports "
"<class_SubViewport>` after :ref:`Node._input() "
"<class_Node_private_method__input>` or :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`."
msgstr ""

msgid "Implement event propagation based on the individual requirements."
msgstr ""

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"Los eventos de GUI irán hacia arriba del árbol de escenas, como los eventos "
"apuntan a Controls específicos, sólo se dirige a ancestros de los nodos "
"Control indicados para recibir el evento."

msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"De acuerdo al diseño basado en nodos de Godot, esto habilita que nodos hijos "
"especializados manipulen y consuman eventos particulares, mientras que los "
"ancestros y finalmente el árbol de escenas, pueden proveer un comportamiento "
"más generalizado si es necesario."

msgid "Anatomy of an InputEvent"
msgstr "Anatomía de un InputEvent"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` es un tipo base integrado, no "
"representa nada y sólo contiene información básica, como el identificador "
"del evento (ID, el cual es incrementado por cada evento), índice de "
"dispositivo, etc."

msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr ""
"Existen varios tipos de InputEvent especializados, descriptos en la "
"siguiente tabla:"

msgid "Event"
msgstr "Evento"

msgid "Description"
msgstr "Descripción"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "Empty Input Event."
msgstr "Evento de entrada vacío."

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr ":ref:`InputEventKey <class_InputEventKey>`"

#, fuzzy
msgid "Contains a keycode and Unicode value, as well as modifiers."
msgstr "Contiene un scancode y un valor unicode, así como modificadores."

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "Contiene información de click como botón, modificadores, etc."

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

#, fuzzy
msgid ""
"Contains motion information, such as relative and absolute positions and "
"speed."
msgstr ""
"Contiene información de movimiento, como posiciones relativas y absolutas "
"así como velocidad."

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "Contiene información de ejes análogos de Joystick/Joypad."

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "Contains Joystick/Joypad button information."
msgstr "Contiene información de botones de Joystick/Joypad."

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"Contiene información sobre press/release de multi-touch. (sólo disponible en "
"dispositivos móviles)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"Contiene información de arrastre multi-touch. (sólo disponible en "
"dispositivos móviles)"

#, fuzzy
msgid ":ref:`InputEventMagnifyGesture <class_InputEventMagnifyGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a factor as well as modifiers."
msgstr "Contiene un scancode y un valor unicode, así como modificadores."

#, fuzzy
msgid ":ref:`InputEventPanGesture <class_InputEventPanGesture>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a delta as well as modifiers."
msgstr "Contiene un scancode y un valor unicode, así como modificadores."

#, fuzzy
msgid ":ref:`InputEventMIDI <class_InputEventMIDI>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains MIDI-related information."
msgstr "Contiene información de botones de Joystick/Joypad."

#, fuzzy
msgid ":ref:`InputEventShortcut <class_InputEventShortcut>`"
msgstr ":ref:`InputEvent <class_InputEvent>`"

msgid "Contains a shortcut."
msgstr "Contiene un atajo."

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr ":ref:`InputEventAction <class_InputEventAction>`"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"Contiene una acción genérica. Estos eventos a menudo son generados por el "
"programador como feedback. (más información a continuación)"

msgid "Actions"
msgstr "Acciones"

msgid ""
"Actions are a grouping of zero or more InputEvents into a commonly "
"understood title (for example, the default \"ui_left\" action grouping both "
"joypad-left input and a keyboard's left arrow key). They are not required to "
"represent an InputEvent but are useful because they abstract various inputs "
"when programming the game logic."
msgstr ""

#, fuzzy
msgid "This allows for:"
msgstr "Esto permite varias características:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"Que el mismo código funcione para diferentes dispositivos con distintos "
"dispositivos de entrada (por ejemplo, teclado en PC, Joypad en consolas)."

msgid "Input to be reconfigured at run-time."
msgstr "Las entradas pueden ser reconfiguradas en tiempo de ejecución."

#, fuzzy
msgid "Actions to be triggered programmatically at run-time."
msgstr "Las entradas pueden ser reconfiguradas en tiempo de ejecución."

#, fuzzy
msgid ""
"Actions can be created from the Project Settings menu in the **Input Map** "
"tab and assigned input events."
msgstr ""
"Las acciones pueden ser creadas en Project Settings, pestaña Mapa de "
"Entradas."

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"Todos los eventos tienen los métodos :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_is_pressed>` y :ref:`InputEvent <class_InputEvent>`."

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"Alternativamente, es posible que quieras enviar una acción al juego desde el "
"código (un ejemplo de esto es la detección de gestos). El singleton Input "
"tiene un método para esto: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. Se usa normalmente así:"

msgid "InputMap"
msgstr "InputMap"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"A menudo se desea personalizar y re-mapear la entrada desde código. Si todo "
"el flujo de trabajo depende de las acciones, el singleton :ref:`InputMap "
"<class_InputMap>` es ideal para reasignar o crear diferentes acciones en "
"tiempo de ejecución. Este singleton no se guarda (debe ser modificado "
"manualmente) y su estado se ejecuta desde la configuración del proyecto "
"(project.godot). Por lo tanto, cualquier sistema dinámico de este tipo "
"necesita almacenar los ajustes de la forma que el programador considere más "
"adecuada."

msgid "Translation status"
msgstr "Estado de traducción"
