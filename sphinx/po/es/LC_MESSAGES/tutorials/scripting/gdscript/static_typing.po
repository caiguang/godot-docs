# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: es\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Tipado estático en GDScript"

msgid "In this guide, you will learn:"
msgstr "En esta guía aprenderás:"

msgid "how to use static typing in GDScript;"
msgstr "cómo utilizar tipado estático en GDScript;"

msgid "that static types can help you avoid bugs;"
msgstr "los tipos estáticos pueden ayudar a evitar errores;"

msgid "that static typing improves your experience with the editor."
msgstr ""

msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Dónde y cómo uses esta característica del lenguaje depende totalmente de tí: "
"puedes usarla solo en algunos archivos GDScript delicados, usarla en todas "
"partes o no utilizarla para nada."

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Los tipos estáticos se pueden usar en variables, constantes, funciones, "
"parámetros y tipos de retorno."

msgid "A brief look at static typing"
msgstr "Un breve vistazo a los tipos estáticos"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"Con GDScript tipado, Godot puede detectar aún más errores mientras escribes "
"código. Te da a ti y a tu equipo más información mientras trabajan, ya que "
"los tipos de los argumentos aparecen cuando llamas a un método."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Imagina que estás programando un sistema de inventario. Codificas un nodo "
"``Item``, luego un nodo ``Inventory``. Para agregar artículos al inventario, "
"las personas que trabajan con su código siempre deben pasar un ``Item`` al "
"método `` Inventory.add``. Con los tipos, puedes hacer cumplir esto:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Los tipos estáticos también le dan mejores opciones de completado del "
"código. A continuación, puedes ver la diferencia entre las opciones de "
"completado de tipo dinámico y estático para una clase llamada "
"``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

msgid "Completion options for dynamic typed code."
msgstr "Opciones de autocompletado para código con tipado dinámico."

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Esto se debe al código dinámico. Godot no puede saber qué tipo de nodo o "
"valor está pasando a la función. Sin embargo, si escribe el tipo "
"explícitamente, obtendrás todos los métodos y variables públicos del nodo:"

msgid "Completion options for static typed code."
msgstr "Opciones de autocompletado para código con tipado estático."

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"En general, la programación de tipado estático le brinda una experiencia más "
"estructurada. Ayuda a prevenir errores y mejora el aspecto de "
"autodocumentación de sus scripts. Esto es especialmente útil cuando trabajas "
"en equipo o en un proyecto a largo plazo: los estudios han demostrado que "
"los desarrolladores dedican la mayor parte de su tiempo a leer el código de "
"otras personas o los scripts que escribieron en el pasado y olvidaron. "
"Cuanto más claro y más estructurado sea el código, más rápido será de "
"entender, más rápido podrá avanzar."

msgid "How to use static typing"
msgstr "Cómo utilizar tipos estáticos"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Para definir el tipo de una variable o una constante, escriba dos puntos "
"después del nombre de la variable, seguido de su tipo. P.ej. ``var health: "
"int``. Esto obliga al tipo de variable a permanecer siempre igual:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot intentará inferir tipos si escribe dos puntos, pero puedes omitirlo:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr "No hay diferencia entre buffer shadow y ray shadow en la exportación."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"No necesitas escribir sugerencias de tipo para constantes, ya que Godot lo "
"establece automáticamente a partir del valor asignado. Pero aún puede "
"hacerlo para aclarar la intención de su código."

msgid "What can be a type hint"
msgstr "Qué puede utilizar indicación de tipo"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr ""
"Aquí hay un ejemplo completo de shader basado en estas guías de estilo:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Tipos integrados <doc_gdscript_builtin_types>`."

msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr "Clases nativas (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."

msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Clases globales <doc_gdscript_basics_class_name>`."

msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Clases internas <doc_gdscript_basics_inner_classes>`."

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Puedes utilizar cualquier clase, incluidas sus clases personalizadas, como "
"tipos. Hay dos formas de usarlos en scripts. El primer método es precargar "
"el script que desea utilizar como un tipo en una constante:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"El segundo método es usando la palabra clave ``class_name`` cuando lo creas. "
"Para el ejemplo anterior, tu Rifle.gd se vería así:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Si usas ``class_name``, Godot registrará el tipo Rifle globalmente en el "
"editor y lo podrás usar en cualquier parte, sin tener que precargarlo en una "
"constante:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Define el tipo de retorno de una función con la flecha ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Para definir el tipo de retorno de una función, escribe un guion y un "
"símbolo mayor que ``->`` después de su declaración, seguido del tipo de "
"retorno:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"El tipo ``void`` significa que la función no retorna nada. Puedes usar "
"cualquier tipo como con las variables:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "También puedes usar tus propios nodos como tipos de retorno:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Ejemplo:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Define el tipo de retorno de una función con la flecha ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Conversión (casting) de tipo"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"Casting es un concepto clave en lenguajes tipados, es la conversión de un "
"valor de un tipo a otro."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Imagina un Enemy en tu juego, que extiende de ``Area2D``. Y quieres que "
"colisione con el Player, un ``KinematicBody2D`` con un script asociado "
"llamado ``PlayerController``. Usarás la señal ``on_body_entered`` para "
"detectar la colisión. Con el código tipado, el cuerpo detectado será de un "
"tipo genérico ``PhysicsBody2D`` y no tu ``PlayerController``, en el callback "
"de ``_on_body_entered``."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Puedes comprobar si ``PhysicsBody2D`` es tu Jugador con la palabra clave de "
"conversión ``as`` y usando ``:`` para forzar a la variable a usar este tipo. "
"Esto hace que la variable se asuma como del tipo ``PlayerController``:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Como estamos lidiando con tipos personalizados, si el ``body`` no extiende "
"``PlayerControler, la variable ``Player`` será null. Podemos usar esto para "
"saber si body es Player o no. También tendremos mejor autocompletado en la "
"variable Player gracias a la conversión."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Si intentas convertir a un tipo integrado y falla, Godot disparará un error."

msgid "Safe lines"
msgstr "Líneas seguras"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Puedes usar casting para asegurarte de tener líneas de código seguras. Las "
"líneas seguras son una nueva herramienta de Godot 3.1 que indican cuando "
"líneas ambiguas de código son de tipado seguro (type-safe). Puedes mezclar "
"codigo dinámico y tipado y a veces Godot no tendrá información suficiente "
"para indicar si la instrucción resultará o no en un error en tiempo de "
"ejecución."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Esto sucede cuando obtienes un nodo hijo. Tomemos un temporizador (timer) "
"como ejemplo: con código dinámico obtendrás el nodo con ``$Timer``. GDScript "
"soporta lo comunmente llamado `duck-typing https://es.wikipedia.org/wiki/"
"Duck_typing`, así que mientras que tu temporizador es de tipo ``Timer``, "
"también es un ``Node`` y un ``Object``, las dos clases de las cual extiende. "
"Con GDScript dinámico no deberá importarte de qué tipo es el nodo mientras "
"tenga los métodos que necesites llamar."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Puedes usar casting para decirle a Godot el tipo que esperas cuando obtienes "
"un nodo: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, etc. Godot "
"se asegurará de que el tipo es correcto y en ese caso, la línea se marcará "
"de verde a la izquierda del editor de script."

msgid "Unsafe vs Safe Line"
msgstr "Linea Segura vs Insegura"

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Línea no segura (línea 7) vs Línea segura (líneas 6 y 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Puedes apagar el chequeo de líneas seguras (safe lines) o cambiar el color "
"en los ajustes del editor."

msgid "Typed or dynamic: stick to one style"
msgstr "Tipado estático o dinámico: apégate a un estilo"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"GDScript de tipado estático y GDScript de tipado dinámico pueden coexistir "
"en el mismo proyecto. Pero se recomienda seguir uno de los dos estilos para "
"mantener la coherencia en el código base y para tus compañeros. Es más fácil "
"para todos trabajar juntos si sigue las mismas pautas, y más rápido para "
"leer y comprender el código de otras personas."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"El código tipado lleva más tiempo para escribir, pero tiene el beneficio que "
"se mencionó anteriormente. Aquí hay un ejemplo del mismo script vacío en un "
"estilo dinámico:"

#, fuzzy
msgid "And with static typing::"
msgstr "Y con tipado estático:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Como puedes ver, se pueden usar tipos con métodos virtuales del motor. Los "
"callbacks de señales, como cualquier otro método, también pueden usar tipos. "
"Aquí hay una señal ``body_entered`` con tipado dinámico:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "Y el mismo callback con tipos especificados:"

msgid "Warning system"
msgstr "Sistema de advertencias"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"La documentación sobre el sistema de advertencias de GDScript se ha movido "
"a :ref:`doc_gdscript_warning_system`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Otra ventaja significativa de GDScript de tipado estático es el nuevo ** "
"sistema de advertencia **. A partir de la versión 3.1, Godot le advierte "
"sobre su código a medida que lo escribe: el motor identifica las secciones "
"de su código que pueden provocar problemas en el tiempo de ejecución, pero "
"le permite decidir si desea dejar el código como está. Más sobre esto en un "
"momento."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Casos en los que no puedes especificar tipos"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Para concluir con esta introducción, cubriremos algunos de los casos donde "
"no se puede usar tipado. Todos los ejemplos siguientes **generarán errores**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"No puedes especificar tipos de miembros individuales de un array. Esto te "
"dará un error:"

msgid "Nested types are not currently supported::"
msgstr "Los tipos anidados no están soportados actualmente::"

msgid "Typed dictionaries are not currently supported::"
msgstr "Los diccionarios tipados no están soportados actualmente::"

msgid "Summary"
msgstr "Sumario"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"GDScript tipado es una herremienta poderosa. Disponible desde la versión 3.1 "
"de Godot, ayuda a escribir código más estructurado, evitar errores comunes y "
"crear sistemas más escalables. En el futuro, tipos estáticos permitirán "
"mejorar el rendimiento gracias a optimizaciones del compilador."

msgid "Translation status"
msgstr "Estado de traducción"
