# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Heads up display"
msgstr "ヘッドアップディスプレイ"

msgid ""
"The final piece our game needs is a User Interface (UI) to display things "
"like score, a \"game over\" message, and a restart button."
msgstr ""
"このゲームに必要な最後の要素は、スコアや\"ゲームオーバー\"のメッセージ、リス"
"タートボタンなどを表示するユーザーインターフェイス（UI）です。"

#, fuzzy
msgid ""
"Create a new scene, click the \"Other Node\" button and add a :ref:"
"`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" stands for "
"\"heads-up display\", an informational display that appears as an overlay on "
"top of the game view."
msgstr ""
"新しいシーンを作成し、 \\ ``HUD``\\ という名前の\\ :ref:`CanvasLayer "
"<class_CanvasLayer>`\\ ノードを追加します。「HUD」は、ゲームビューの上にオー"
"バーレイとして表示される情報表示である「ヘッドアップディスプレイ」(\"Heads-"
"up display\")の略です。"

msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
":ref:`CanvasLayer <class_CanvasLayer>`\\ ノードを使用すると、ゲームの他の部分"
"よりも上のレイヤにUI要素を描画することができるため、表示される情報がプレイ"
"ヤーやモブなどのゲーム要素によって隠されることがなくなります。"

msgid "The HUD needs to display the following information:"
msgstr "HUDには、次の情報を表示する必要があります:"

msgid "Score, changed by ``ScoreTimer``."
msgstr "``ScoreTimer`` によって変更されるスコア。"

msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "「Game Over」や「Get Ready! (よーい！)」 などのメッセージ"

msgid "A \"Start\" button to begin the game."
msgstr "ゲームを開始する「スタート」ボタン。"

msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"UI要素の基本ノードは\\ :ref:`コントロール <class_Control>`\\ です。UIを作成す"
"るには、\\ :ref:`ラベル <class_Label>`\\ と\\ :ref:`ボタン <class_Button>`\\ "
"の2種類の\\ :ref:`コントロール <class_Control>`\\ ノードを使用します。"

msgid "Create the following as children of the ``HUD`` node:"
msgstr "``HUD`` ノードの子として次を作成します:"

msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr "``ScoreLabel`` という名前の\\ :ref:`ラベル <class_Label>`\\ 。"

msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr "``Message`` という名前の\\ :ref:`Label <class_Label>`\\ 。"

msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr "``StartButton`` という名前の\\ :ref:`ボタン <class_Button>`\\ 。"

msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr "``MessageTimer`` という名前の\\ :ref:`Timer <class_Timer>`\\ 。"

msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"``ScoreLabel`` をクリックし、インスペクタの\\ *Text*\\ フィールドに数字を入力"
"します。 ``Control`` ノードのデフォルトのフォントは小さく、うまくスケールしま"
"せん。そこで、ゲームアセットに含まれる 「Xolonium-Regular.ttf」というフォント"
"ファイルがあります。 このフォントを使用するには、次のようにしてください:"

msgid ""
"Under \"Theme Overrides > Fonts\", choose \"Load\" and select the \"Xolonium-"
"Regular.ttf\" file."
msgstr ""
"\"Theme Overrides > Fonts\" で 「読み込み」を選択して \"Xolonium-Regular."
"ttf\" を選択して下さい。"

msgid ""
"The font size is still too small, increase it to ``64`` under \"Theme "
"Overrides > Font Sizes\". Once you've done this with the ``ScoreLabel``, "
"repeat the changes for the ``Message`` and ``StartButton`` nodes."
msgstr ""
"フォントサイズがまだ小さいので、\"Theme Overrides > Font Sizes\" で ``64`` に"
"増やしてください。 ``Message`` と ``StartButton`` ノードも同じように変更しま"
"す。"

msgid ""
"**Anchors:** ``Control`` nodes have a position and size, but they also have "
"anchors. Anchors define the origin - the reference point for the edges of "
"the node."
msgstr ""
"**アンカー** : ``Control`` ノードには位置とサイズがありますが、アンカーもあり"
"ます。アンカーは原点 (ノードの端の基準点) を定義します。"

msgid ""
"Arrange the nodes as shown below. You can drag the nodes to place them "
"manually, or for more precise placement, use \"Anchor Presets\"."
msgstr ""
"以下のようにノードを配置します。ノードをドラッグして手動で配置することもでき"
"ますが、より正確な配置を行うには \"アンカーのプリセット\" を使用します。"

msgid "ScoreLabel"
msgstr "\\ ScoreLabel"

msgid "Add the text ``0``."
msgstr "``0`` というテキストを追加します。"

msgid ""
"Set the \"Horizontal Alignment\" and \"Vertical Alignment\" to ``Center``."
msgstr ""
"\"Horizontal Alignment\" と \"Vertical Alignment\" を ``Center`` に設定しま"
"す。"

msgid "Choose the \"Anchor Preset\" ``Center Top``."
msgstr "\"アンカーのプリセット\" で ``中央上`` を選択します。"

msgid "Message"
msgstr "Message"

#, fuzzy
msgid "Add the text ``Dodge the Creeps!``."
msgstr "``Dodge the creeps!`` というテキストを追加します。"

msgid ""
"Set the \"Autowrap Mode\" to ``Word``, otherwise the label will stay on one "
"line."
msgstr ""
"\"Autowrap Mode\" を ``Word`` に設定します。そうしないとラベルは1行のままにな"
"ります。"

msgid ""
"Under \"Control - Layout/Transform\" set \"Size X\"  to ``480`` to use the "
"entire width of the screen."
msgstr ""
"\"Control - Layout/Transform\" で \"Size X\" を ``480`` に設定して、画面の幅"
"全体を使うようにします。"

msgid "Choose the \"Anchor Preset\" ``Center``."
msgstr "\"アンカーのプリセット\" で ``中央`` を選択します。"

msgid "StartButton"
msgstr "\\ StartButton"

msgid "Add the text ``Start``."
msgstr "``Start`` というテキストを追加します。"

msgid ""
"Under \"Control - Layout/Transform\", set \"Size X\" to ``200`` and \"Size "
"Y\" to ``100`` to add a little bit more padding between the border and text."
msgstr ""
"\"Control - Layout/Transform\" で \"Size X\" を ``200`` 、 \"Size Y\" を "
"``100`` に設定し、ボーダーとテキストの間に少しパディングを追加します。"

msgid "Choose the \"Anchor Preset\" ``Center Bottom``."
msgstr "\"アンカーのプリセット\" で ``中央下`` を選択します。"

msgid "Under \"Control - Layout/Transform\", set \"Position Y\" to ``580``."
msgstr ""
"\"Control - Layout/Transform\" で \"Position Y\" を ``580`` に設定します。"

msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"``MessageTimer`` 上で、\\ ``Wait Time`` を ``2`` に設定し、\\ ``One Shot`` プ"
"ロパティを「オン」に設定してください。"

msgid "Now add this script to ``HUD``:"
msgstr "次に、このスクリプトを ``HUD`` に追加します:"

msgid ""
"We now want to display a message temporarily, such as \"Get Ready\", so we "
"add the following code"
msgstr ""
"\"Get Ready\" のようなメッセージを一時的に表示したいので、以下のコードを追加"
"します"

msgid ""
"We also need to process what happens when the player loses. The code below "
"will show \"Game Over\" for 2 seconds, then return to the title screen and, "
"after a brief pause, show the \"Start\" button."
msgstr ""
"プレイヤーが負けたときの処理も必要です。 以下のコードでは、2秒間 \"Game "
"Over\" を表示し、タイトル画面に戻り、少し間を置いて \"Start\" ボタンが表示さ"
"れます。"

msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"この関数は、プレイヤーが負けたときに呼び出されます。 2秒間「Game Over」と表示"
"され、タイトル画面に戻り、少し間を置いて「Start」ボタンが表示されます。"

msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"短い間、一時停止する必要がある場合は、Timerノードを使用する代わりに、"
"SceneTreeの ``create_timer()`` 関数を使用します。 これは、上記のコードのよう"
"に、\"Start\" ボタンを表示する前に少し時間を置きたい場合など、遅延させるのに"
"非常に役立ちます。"

msgid "Add the code below to ``HUD`` to update the score"
msgstr "以下のコードを ``HUD`` に追加してスコアを更新します"

#, fuzzy
msgid ""
"Connect the ``pressed()`` signal of ``StartButton`` and the ``timeout()`` "
"signal of ``MessageTimer``, and add the following code to the new functions:"
msgstr ""
"``MessageTimer`` の ``timeout()`` シグナルと ``StartButton`` の "
"``pressed()`` シグナルを接続してから、新しい関数に下記のコードを追加します:"

msgid "Connecting HUD to Main"
msgstr "HUDをメインに接続する"

msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"``HUD`` シーンの作成が完了したら、 ``Main`` に戻ります。 ``Player`` のシーン"
"と同じように ``HUD`` シーンを ``Main`` にインスタンス化し、ツリーの一番下に配"
"置します。ツリー全体は次のようになるはずです。何も見落としていないか確認して"
"ください:"

msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"次に、 ``HUD`` 機能を ``Main`` のスクリプトに接続します。これには、 ``Main`` "
"シーンにいくつかの追加が必要です:"

msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by clicking the \"Pick\" button in "
"the \"Connect a Signal\" window and selecting the ``new_game()`` method or "
"type \"new_game\" below \"Receiver Method\" in the window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""
"HUDのノードタブで、「メソッドにシグナルを接続」ウィンドウの「Pick」ボタンをク"
"リックして ``new_game()`` メソッドを選択するか、 「受信側メソッド」に "
"\"new_game\" と入力して、HUDの ``start_game`` のシグナルをメインノードの "
"``new_game()`` 関数に接続します。スクリプトの ``func new_game()`` の横に緑色"
"の接続アイコンが表示されていることを確認してください。"

msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"``new_game()`` で、スコア表示を更新し、「Get Ready」メッセージを表示します:"

msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "``game_over()`` では、対応する ``HUD`` 関数を呼び出す必要があります:"

msgid ""
"Finally, add this to ``_on_score_timer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"最後に、これを ``_on_score_timer_timeout()`` に追加して、変更されたスコアと同"
"期して表示を維持します:"

msgid ""
"Remember to remove the call to ``new_game()`` from ``_ready()`` if you "
"haven't already, otherwise your game will start automatically."
msgstr ""
"``_ready()`` から ``new_game()`` の呼び出しを削除することを忘れないでくださ"
"い。そうでなければ、ゲームが自動的に始まってしまうでしょう。"

msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``main.tscn``."
msgstr ""
"これでプレイの準備が整いました！ [プロジェクトを実行] ボタンをクリックしま"
"す。メインシーンの選択を求められるので、 ``main.tscn`` を選択します。"

msgid "Removing old creeps"
msgstr "古い「クリープ」を削除する"

msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"「ゲームオーバー」までプレイしてから新しいゲームを開始すると、前のゲームの"
"「クリープ」が画面に表示されたままになっています。 それらすべて、新しいゲーム"
"の開始時には消したほうがいいでしょう。それには、\\ *すべて*\\ のモブたちに自"
"身の削除を指示する方法が必要です。これは「グループ」機能を使えば可能です。"

msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""
"``Mob`` シーンでルートノードを選択し、インスペクタの隣にある「ノード」タブを"
"クリックしてください (ノードのシグナルを見つけるのと同じ場所です)。「シグナ"
"ル」の横にある「グループ」をクリックして、新しいグループ名を入力して「追加」"
"をクリックします。"

msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``new_game()`` function in ``Main``:"
msgstr ""
"これですべてのモブが 「mobs」グループに入るようになります。あとは、 \\ "
"``Main``\\ 内の \\ ``new_game()``\\ 関数に次の行を追加します。"

msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""
"``call_group()`` 関数はグループ内の全てのノードに対して名前付きの関数を呼び出"
"します - この場合は全てのモブに自分自身を削除するように指示しています。"

msgid ""
"The game's mostly done at this point. In the next and last part, we'll "
"polish it a bit by adding a background, looping music, and some keyboard "
"shortcuts."
msgstr ""
"この時点で、ゲームはほぼ完成しています。次と最後のパートでは、背景、ループす"
"る音楽、キーボードショートカットを追加して、もう少し磨きをかけます。"

msgid "Translation status"
msgstr "翻訳ステータス"
