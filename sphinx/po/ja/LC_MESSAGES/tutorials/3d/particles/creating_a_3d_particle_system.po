# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Creating a 3D particle system"
msgstr "パーティクル・システム(2D)"

#, fuzzy
msgid "Required particle node properties"
msgstr "ノード・プロパティ"

msgid ""
"To get started with particles, the first thing we need to do is add a "
"``GPUParticles3D`` node to the scene. Before we can actually see any "
"particles, we have to set up two parameters on the node: the ``Process "
"Material`` and at least one ``Draw Pass``."
msgstr ""

#, fuzzy
msgid "The process material"
msgstr "\\ ParticlesMaterial"

#, fuzzy
msgid ""
"To add a process material to your particles node, go to ``Process Material`` "
"in the inspector panel. Click on the box next to ``Process Material`` and "
"from the dropdown menu select ``New ParticleProcessMaterial``."
msgstr ""
"パーティクル・ノードにプロセス・マテリアルを追加するには、インスペクタパネル"
"の ``Process Material`` に移動します。 ``Material`` の横のボックスをクリック"
"し、ドロップダウン・メニューから ``New ParticlesMaterial`` を選択します。"

#, fuzzy
msgid "Creating a process material"
msgstr "ShaderMaterialの作成"

msgid ""
":ref:`class_ParticleProcessMaterial` is a special kind of material. We don't "
"use it to draw any objects. We use it to update particle data and behavior "
"on the GPU instead of the CPU, which comes with a massive performance boost. "
"A click on the newly added material displays a long list of properties that "
"you can set to control each particle's behavior."
msgstr ""

#, fuzzy
msgid "Draw passes"
msgstr "描画パラメーター"

msgid "At least one draw pass is required"
msgstr ""

msgid ""
"In order to render any particles, at least one draw pass needs to be "
"defined. To do that, go to ``Draw Passes`` in the inspector panel. Click on "
"the box next to ``Pass 1`` and select ``New QuadMesh`` from the dropdown "
"menu. After that, click on the mesh and set its ``Size`` to 0.1 for both "
"``x`` and ``y``. Reducing the mesh's size makes it a little easier to tell "
"the individual particle meshes apart at this stage."
msgstr ""

msgid ""
"You can use up to 4 draw passes per particle system. Each pass can render a "
"different mesh with its own unique material. All draw passes use the data "
"that is computed by the process material, which is an efficient method for "
"composing complex effects: Compute particle behavior once and feed it to "
"multiple render passes."
msgstr ""

msgid ""
"Using multiple draw passes: yellow rectangles (pass1) and blue spheres (pass "
"2)"
msgstr ""

msgid ""
"If you followed the steps above, your particle system should now be emitting "
"particles in a waterfall-like fashion, making them move downwards and "
"disappear after a few seconds. This is the foundation for all particle "
"effects. Take a look at the documentation for :ref:`particle "
"<doc_3d_particles_properties>` and :ref:`particle material "
"<doc_process_material_properties>` properties to learn how to make particle "
"effects more interesting."
msgstr ""

#, fuzzy
msgid "Particle conversion"
msgstr "パーティクルノード"

msgid "Turning GPU into CPU particles"
msgstr ""

msgid ""
"You can convert GPU particles to CPU particles at any time using the entry "
"in the viewport menu. When you do so, keep in mind that not every feature of "
"GPU particles is available for CPU particles, so the resulting particle "
"system will look and behave differently from the original."
msgstr ""

msgid ""
"You can also convert CPU particles to GPU particles if you no longer need to "
"use CPU particles. This is also done from the viewport menu."
msgstr ""

msgid ""
"Some of the most notable features that are lost during the conversion "
"include:"
msgstr ""

#, fuzzy
msgid "multiple draw passes"
msgstr "組み合わせパターン"

msgid "turbulence"
msgstr ""

#, fuzzy
msgid "sub-emitters"
msgstr "ジッター"

msgid "trails"
msgstr ""

#, fuzzy
msgid "attractors"
msgstr "パスの区切り記号"

#, fuzzy
msgid "collision"
msgstr "コリジョン"

#, fuzzy
msgid "You also lose the following properties:"
msgstr "このポップアップには次のプロパティがあります。"

#, fuzzy
msgid "``Ammount Ratio``"
msgstr "\\ ``Rotation``"

#, fuzzy
msgid "``Interp to End``"
msgstr "Interpolation(補間)"

#, fuzzy
msgid "``Damping as Friction``"
msgstr "アクションのキャプチャ"

#, fuzzy
msgid "``Emission Shape Offset``"
msgstr "\\ Emission Shapes"

#, fuzzy
msgid "``Emission Shape Scale``"
msgstr "\\ Emission Shapes"

#, fuzzy
msgid "``Inherit Velocity Ratio``"
msgstr "初期速度"

#, fuzzy
msgid "``Velocity Pivot``"
msgstr "\\ ``Vector2[]``"

#, fuzzy
msgid "``Directional Velocity``"
msgstr "指向性(Directional)ライト"

#, fuzzy
msgid "``Radial Velocity``"
msgstr "初期速度"

msgid "``Velocity Limit``"
msgstr ""

msgid "``Scale Over Velocity``"
msgstr ""

msgid ""
"Converting GPU particles to CPU particles can become necessary when you want "
"to release a game on older devices that don't support modern graphics APIs."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
