# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Screen-reading shaders"
msgstr "スクリーン読み取りシェーダー"

msgid "Introduction"
msgstr "はじめに"

#, fuzzy
msgid ""
"It is often desired to make a shader that reads from the same screen to "
"which it's writing. 3D APIs, such as OpenGL or DirectX, make this very "
"difficult because of internal hardware limitations. GPUs are extremely "
"parallel, so reading and writing causes all sorts of cache and coherency "
"problems. As a result, not even the most modern hardware supports this "
"properly."
msgstr ""
"非常に多くの場合、書き込み先と同じ画面から読み取るシェーダーを作成することが"
"望まれます。 OpenGLやDirectXなどの3D APIは、内部ハードウェアの制限により、こ"
"れを非常に困難にします。 GPUは非常に並列であるため、読み取りと書き込みはあら"
"ゆる種類のキャッシュと一貫性の問題を引き起こします。その結果、最新のハード"
"ウェアでさえこれを適切にサポートしていません。"

msgid ""
"The workaround is to make a copy of the screen, or a part of the screen, to "
"a back-buffer and then read from it while drawing. Godot provides a few "
"tools that make this process easy."
msgstr ""
"回避策は、画面または画面の一部をバックバッファにコピーし、描画中にそこから読"
"み取ることです。 Godotには、このプロセスを簡単にするツールがいくつか用意され"
"ています。"

#, fuzzy
msgid "Screen texture"
msgstr "動的テクスチャのレンダリング"

#, fuzzy
msgid ""
"Godot :ref:`doc_shading_language` has a special texture to access the "
"already rendered contents of the screen. It is used by specifying a hint "
"when declaring a ``sampler2D`` uniform: ``hint_screen_texture``. A special "
"built-in varying ``SCREEN_UV`` can be used to obtain the UV relative to the "
"screen for the current fragment. As a result, this canvas_item fragment "
"shader results in an invisible object, because it only shows what lies "
"behind:"
msgstr ""
"Godot :ref`doc_shading_language` には、\"SCREEN_TEXTURE\" (および3Dの場合は深"
"さの \"DEPTH_TEXTURE\")という特別なテクスチャがあります。引数として画面のUVを"
"取り、色付きのvec3 RGBを返します。特別なビルトインvarying: SCREEN_UVを使用し"
"て、現在のフラグメントのUVを取得できます。その結果、この単純な2Dフラグメント"
"シェーダーは次のようになります:"

msgid ""
"``textureLod`` is used here as we only want to read from the bottom mipmap. "
"If you want to read from a blurred version of the texture instead, you can "
"increase the third argument to ``textureLod`` and change the hint "
"``filter_nearest`` to ``filter_nearest_mipmap`` (or any other filter with "
"mipmaps enabled). If using a filter with mipmaps, Godot will automatically "
"calculate the blurred texture for you."
msgstr ""

msgid ""
"If the filter mode is not changed to a filter mode that contains ``mipmap`` "
"in its name, ``textureLod`` with a LOD parameter greater than ``0.0`` will "
"have the same appearance as with the ``0.0`` LOD parameter."
msgstr ""

#, fuzzy
msgid "Screen texture example"
msgstr "別の例:"

#, fuzzy
msgid ""
"The screen texture can be used for many things. There is a special demo for "
"*Screen Space Shaders*, that you can download to see and learn. One example "
"is a simple shader to adjust brightness, contrast and saturation:"
msgstr ""
"SCREEN_TEXTUREは、多くのことに使用できます。\\ *Screen Space Shaders* の特別"
"なデモがあり、ダウンロードして確認および学習できます。 1つの例は、明るさ、コ"
"ントラスト、彩度を調整するシンプルなシェーダーです:"

msgid "Behind the scenes"
msgstr "舞台裏"

#, fuzzy
msgid ""
"While this seems magical, it's not. In 2D, when ``hint_screen_texture`` is "
"first found in a node that is about to be drawn, Godot does a full-screen "
"copy to a back-buffer. Subsequent nodes that use it in shaders will not have "
"the screen copied for them, because this ends up being inefficient. In 3D, "
"the screen is copied after the opaque geometry pass, but before the "
"transparent geometry pass, so transparent objects will not be captured in "
"the screen texture."
msgstr ""
"これは魔法のように見えますが、そうではありません。 SCREEN_TEXTUREビルトイン"
"は、描画しようとしているノードで最初に見つかったときに、バックバッファへのフ"
"ルスクリーンコピーを実行します。シェーダーでそれを使用する後続のノードでは、"
"画面がコピーされません。これは、非効率的であるためです。"

#, fuzzy
msgid ""
"As a result, in 2D, if shaders that use ``hint_screen_texture`` overlap, the "
"second one will not use the result of the first one, resulting in unexpected "
"visuals:"
msgstr ""
"その結果、SCREEN_TEXTUREを使用するシェーダーがオーバーラップする場合、2番目の"
"シェーダーは最初のシェーダーの結果を使用せず、予期しないビジュアルになります:"

#, fuzzy
msgid ""
"In the above image, the second sphere (top right) is using the same source "
"for the screen texture as the first one below, so the first one "
"\"disappears\", or is not visible."
msgstr ""
"上の画像では、2番目の球体(右上)がSCREEN_TEXTUREに同じソースを使用しているた"
"め、最初の球体は「消える」か、表示されません。"

msgid ""
"In 2D, this can be corrected via the :ref:`BackBufferCopy "
"<class_BackBufferCopy>` node, which can be instantiated between both "
"spheres. BackBufferCopy can work by either specifying a screen region or the "
"whole screen:"
msgstr ""
"2Dでは、これは :ref:`BackBufferCopy <class_BackBufferCopy>` ノードを介して修"
"正できます。これは両方の球の間でインスタンス化できます。 BackBufferCopyは、画"
"面領域または画面全体を指定することで機能します:"

msgid "With correct back-buffer copying, the two spheres blend correctly:"
msgstr "バックバッファを正しくコピーすると、2つの球体が正しくブレンドされます:"

msgid ""
"In 3D, materials that use ``hint_screen_texture`` are considered transparent "
"themselves and will not appear in the resulting screen texture of other "
"materials. If you plan to instance a scene that uses a material with "
"``hint_screen_texture``, you will need to use a BackBufferCopy node."
msgstr ""

msgid ""
"In 3D, there is less flexibility to solve this particular issue because the "
"screen texture is only captured once. Be careful when using the screen "
"texture in 3D as it won't capture transparent objects and may capture some "
"opaque objects that are in front of the object using the screen texture."
msgstr ""

msgid ""
"You can reproduce the back-buffer logic in 3D by creating a :ref:`Viewport "
"<class_Viewport>` with a camera in the same position as your object, and "
"then use the :ref:`Viewport's <class_Viewport>` texture instead of the "
"screen texture."
msgstr ""

msgid "Back-buffer logic"
msgstr "バックバッファロジック"

#, fuzzy
msgid ""
"So, to make it clearer, here's how the backbuffer copying logic works in 2D "
"in Godot:"
msgstr ""
"したがって、わかりやすくするために、Godotでのバックバッファーコピーロジックの"
"動作を次に示します:"

#, fuzzy
msgid ""
"If a node uses ``hint_screen_texture``, the entire screen is copied to the "
"back buffer before drawing that node. This only happens the first time; "
"subsequent nodes do not trigger this."
msgstr ""
"ノードがSCREEN_TEXTUREを使用する場合、そのノードを描画する前に画面全体がバッ"
"クバッファーにコピーされます。これは最初にのみ発生します。後続のノードはこれ"
"をトリガーしません。"

#, fuzzy
msgid ""
"If a BackBufferCopy node was processed before the situation in the point "
"above (even if ``hint_screen_texture`` was not used), the behavior described "
"in the point above does not happen. In other words, automatic copying of the "
"entire screen only happens if ``hint_screen_texture`` is used in a node for "
"the first time and no BackBufferCopy node (not disabled) was found before in "
"tree-order."
msgstr ""
"上記の状況の前にBackBufferCopyノードが処理された場合(SCREEN_TEXTUREが使用され"
"なかった場合でも)、上記の状況で説明した動作は発生しません。言い換えると、"
"SCREEN_TEXTUREがノードで初めて使用され、BackBufferCopyノード(無効ではない)が"
"ツリー順で以前に見つからなかった場合にのみ、画面全体の自動コピーが発生しま"
"す。"

#, fuzzy
msgid ""
"BackBufferCopy can copy either the entire screen or a region. If set to only "
"a region (not the whole screen) and your shader uses pixels not in the "
"region copied, the result of that read is undefined (most likely garbage "
"from previous frames). In other words, it's possible to use BackBufferCopy "
"to copy back a region of the screen and then read the screen texture from a "
"different region. Avoid this behavior!"
msgstr ""
"BackBufferCopyは、画面全体または領域のいずれかをコピーできます。(画面全体では"
"なく)領域のみに設定され、シェーダーがコピーされた領域にないピクセルを使用する"
"場合、その読み取りの結果は未定義です(ほとんどの場合、前のフレームからのゴ"
"ミ)。つまり、BackBufferCopyを使用して画面の領域をコピーバックし、別の領域で"
"SCREEN_TEXTUREを使用することができてしまいます。この動作は避けてください！"

msgid "Depth texture"
msgstr "深度テクスチャ"

#, fuzzy
msgid ""
"For 3D shaders, it's also possible to access the screen depth buffer. For "
"this, the ``hint_depth_texture`` hint is used. This texture is not linear; "
"it must be converted using the inverse projection matrix."
msgstr ""
"3Dシェーダーの場合、画面深度バッファーにアクセスすることもできます。このため"
"に、DEPTH_TEXTUREビルトインが使用されます。このテクスチャは線形ではありませ"
"ん。逆射影行列を介して変換する必要があります。"

msgid ""
"The following code retrieves the 3D position below the pixel being drawn:"
msgstr "次のコードは、描画中のピクセルの下の3D位置を取得します:"

msgid "Normal-roughness texture"
msgstr ""

#, fuzzy
msgid ""
"Normal-roughness texture is only supported in the Forward+ rendering method, "
"not Mobile or Compatibility."
msgstr "*この機能は、GLES3バックエンドを使用している場合にのみ使用できます。*"

msgid ""
"Similarly, the normal-roughness texture can be used to read the normals and "
"roughness of objects rendered in the depth prepass. The normal is stored in "
"the ``.xyz`` channels (mapped to the 0-1 range) while the roughness is "
"stored in the ``.w`` channel."
msgstr ""

#, fuzzy
msgid "Redefining screen textures"
msgstr "動的テクスチャのレンダリング"

msgid ""
"The screen texture hints (``hint_screen_texture``, ``hint_depth_texture``, "
"and ``hint_normal_roughness_texture``) can be used with multiple uniforms. "
"For example, you may want to read from the texture multiple times with a "
"different repeat flag or filter flag."
msgstr ""

msgid ""
"The following example shows a shader that reads the screen space normal with "
"linear filtering, but reads the screen space roughness using nearest "
"neighbor filtering."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
