# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# の基本"

msgid "Introduction"
msgstr "はじめに"

#, fuzzy
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"このページでは、C#の概要と、Godotでの使用方法の両方について簡単に紹介していま"
"す。その後、\\ :ref:`特定の機能を使用する方法 "
"<doc_c_sharp_features>`\\ 、\\ :ref:`C#とGDScript APIの違い "
"<doc_c_sharp_differences>`\\ について読み、(再び)ステップバイステップ チュー"
"トリアルの\\ :ref:`スクリプトセクション <doc_scripting>`\\ を参照してくださ"
"い。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"これはC#言語全体に関する本格的なチュートリアルでは\\ **ありません**\\ 。まだ"
"その構文や機能に慣れていなければ、\\ `Microsoft C#ガイド <https://docs."
"microsoft.com/ja-jp/dotnet/csharp/index>`_\\ や他の適切な入門書を参照してくだ"
"さい。"

msgid "Prerequisites"
msgstr "前提条件"

msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""

#, fuzzy
msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr ""
"要約すると、Visual StudioまたはMono(オペレーティング システムによって異なりま"
"す) **および** Mono対応バージョンのGodotがインストールされている必要がありま"
"す。"

msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""

#, fuzzy
msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"Monoサポートが有効になっているGodotを使用する必要があるため、必ず **Mono "
"version** のGodotをダウンロードしてください。ソースからGodotをビルドする場合"
"は、 :ref:`doc_compiling_with_mono` ページに概説されている手順に従って、Mono"
"サポートを有効にしてビルドしてください。"

msgid "Configuring an external editor"
msgstr "外部エディタの設定"

#, fuzzy
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"GodotのスクリプトエディタでのC#のサポートは最小限です。外部IDEまたはエディタ"
"の使用を検討してください。これらは、C#のオートコンプリート、デバッグ、および"
"その他の便利な機能を提供します。Godotで外部エディタを選択するには、 **エディ"
"タ → エディタ設定** をクリックし、 **Mono** まで下にスクロールします。 "
"**Mono** で、 **Editor** をクリックし、外部エディタを選択します。Godotは現"
"在、次の外部エディタをサポートしています。"

#, fuzzy
msgid "Visual Studio 2022"
msgstr "\\ Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "\\ Visual Studio Code"

msgid "MonoDevelop"
msgstr "\\ MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "\\ Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "\\ JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr ""

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""

#, fuzzy
msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "Godotのエディタの設定では:"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""

msgid "In Rider:"
msgstr ""

msgid "Set **MSBuild version** to **.NET Core**."
msgstr ""

msgid "Install the **Godot support** plugin."
msgstr ""

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""

msgid "In Visual Studio Code:"
msgstr "Visual Studio Codeの場合："

#, fuzzy
msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"`VSMonoDebugger拡張機能 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ をインストールします。"

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (Windows のみ)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""

#, fuzzy
msgid "While installing Visual Studio, select this workload:"
msgstr "Visual Studioのインストールに関する注意事項:"

#, fuzzy
msgid ".NET desktop development"
msgstr "エディタの開発"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""

msgid "Creating a C# script"
msgstr "C#スクリプトの作成"

#, fuzzy
msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"Godot用にC#を正常に設定した後、シーン内のノードのコンテキストメニューで "
"``Attach script`` を選択すると、次のオプションが表示されます。"

#, fuzzy
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"一部の仕様は変更されますが、スクリプトにC#を使用する場合でも、ほとんどの概念"
"はGDScriptと同じように機能することに注意してください。Godotを初めて使用する場"
"合は、この時点で :ref:`doc_scripting` のチュートリアルに従うことをお勧めしま"
"す。ドキュメント内のいくつかの場所にはまだC#の例が欠けていますが、ほとんどの"
"概念はGDScriptから簡単に移行できます。"

msgid "Project setup and workflow"
msgstr "プロジェクトの設定とワークフロー"

#, fuzzy
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"最初のC#スクリプトを作成すると、GodotはGodotプロジェクトのC#プロジェクトファ"
"イルを初期化します。これには、C#ソリューション(``.sln``)とプロジェクトファイ"
"ル(``.csproj``)の生成、およびいくつかのユーティリティファイルとフォルダ(``."
"mono`` および ``Properties/AssemblyInfo.cs``)の生成が含まれます。 ``.mono`` "
"を除くこれらすべては重要であり、バージョン管理システム(VCS)にコミットする必要"
"があります。 ``.mono`` は、VCSの無視リストに安全に追加できます。 ``.mono`` "
"フォルダを削除して再生成すると、トラブルシューティングの際に役立つ場合があり"
"ます。"

msgid "Example"
msgstr "例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "以下に、空白のC#スクリプトと、その動作を示すコメントを示します。"

#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"ご覧のとおり、Godotの ``print`` 関数のようなGDScriptのグローバル スコープの関"
"数は、\\ ``Godot`` 名前空間の一部である ``GD`` クラスで使用できます。\\ "
"``GD`` クラスのメソッドの一覧については、\\ :ref:`@GDScript "
"<class_@gdscript>` および :ref:`@GlobalScope <class_@globalscope>` のクラス "
"リファレンス ページを参照してください。"

#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"ノードにアタッチしたいクラスは ``.cs`` ファイルと同じ名前にする必要があること"
"に注意してください。そうしないと、次のエラーが発生し、シーンを実行できませ"
"ん: *\"Cannot find class XXX for script res://XXX.cs\"*"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""

msgid "General differences between C# and GDScript"
msgstr "C#とGDScriptの一般的な違い"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# APIはGDScript/C++の ``snake_case`` の代わりに ``PascalCase`` を使います。 "
"可能であれば、フィールドとゲッター/セッターはプロパティに変換されています。一"
"般的に、C# Godot APIは合理的に可能な限り慣用的であるように努めています。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""
"詳細については、\\ :ref:`doc_c_sharp_differences` ページを参照してください。"

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"C# を使用している場合は、新しいエクスポート変数または信号を確認するたびに、プ"
"ロジェクト アセンブリを (再) ビルドする必要があります。 このビルドは、エディ"
"ターの右上にある「ビルド」ボタンをクリックすることで手動でトリガーできます。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""

msgid "Current gotchas and known issues"
msgstr "現在の課題と既知の問題"

#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"GodotでのC#のサポートは非常に新しいため、いくつかの苦労や解決する必要があるも"
"のがあります。以下は、GodotでC#に飛び込む際に注意する必要がある最も重要な問題"
"の一覧ですが、疑問がある場合は、公式の `issue tracker for Mono issues "
"<https://github.com/godotengine/godot/labels/topic%3Amono>` もご覧ください。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "エディタプラグインの作成は可能ですが、現在は非常に複雑です。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"現在、エクスポートされた変数を除き、状態(State)は保存およびホットリロード時に"
"復元されません。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"アタッチされた C#スクリプトは、ファイル名と一致するクラス名を持つクラスを参照"
"する必要があります。"

#, fuzzy
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"Godot の ``snake_case`` API 命名規則に依存する ``Get()``/``Set()`` 、\\ "
"``Call()``/``CallDeferred()`` 及びシグナル接続メソッド ``Connect()`` などのメ"
"ソッドがあります。したがって、例えば ``CallDeferred(\"AddChild\")`` を使用す"
"る場合、APIは本来の ``snake_case`` バージョンである ``add_child``を期待してい"
"るため、\\ ``AddChild`` では動作しません。ただし、任意のカスタムプロパティま"
"たはカスタムメソッドはこの制限なしに使用できます。"

#, fuzzy
msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"Monoプロジェクトのエクスポートは、デスクトッププラットフォーム(Linux、"
"Windows、およびmacOS)でのみサポートされています。 Android、iOS、HTML5、および"
"UWPは現在サポートされていません (`#20267 <https://github.com/godotengine/"
"godot/issues/20267>`_, `#20268 <https://github.com/godotengine/godot/"
"issues/20268>`_ `#20270 <https://github.com/godotengine/godot/"
"issues/20270>`_ `#20271 <https://github.com/godotengine/godot/"
"issues/20271>`_)。"

#, fuzzy
msgid "Common pitfalls"
msgstr "コメント"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""

msgid "Performance of C# in Godot"
msgstr "GodotにおけるC#のパフォーマンス"

#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"いくつかの予備的な `ベンチマーク <https://github.com/cart/godot3-bunnymark>` "
"によると、一般的にGodot のC#のパフォーマンスはGDScriptと同程度ですが、いくつ"
"かの単純なケースではGDScriptの約 **～4倍** です。C++はさらにもう少し高速で"
"す。具体的な内容はユースケースによって異なります。GDScriptは、ほとんどの一般"
"的なスクリプトワークロードに対して十分に高速である可能性があります。C#そのも"
"のは高速ですが、Godotと通信するときに負荷の高い形式変換処理が必要です。"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""

msgid "Using NuGet packages in Godot"
msgstr "GodotでのNuGetパッケージの使用"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>` パッケージは、他のC#プロジェクトと同様に、"
"Godotでインストールおよび使用できます。多くのIDEは、パッケージを直接追加でき"
"ます。プロジェクトのルートにある ``.csproj`` ファイルにパッケージ参照を追加す"
"ることにより、手動で追加することもできます:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""

msgid "Profiling your C# code"
msgstr "C#コードのプロファイリング"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr ""

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr ""

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr ""

#, fuzzy
msgid "Visual Studio."
msgstr "\\ Visual Studio Code"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
