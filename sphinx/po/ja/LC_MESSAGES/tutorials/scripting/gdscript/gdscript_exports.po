# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "GDScript exported properties"
msgstr "GDScriptのエクスポート"

#, fuzzy
msgid ""
"In Godot, class members can be exported. This means their value gets saved "
"along with the resource (such as the :ref:`scene <class_PackedScene>`) "
"they're attached to. They will also be available for editing in the property "
"editor. Exporting is done by using the ``@export`` annotation."
msgstr ""
"クラスメンバーはエクスポートできます。つまりそれらの値は、それらが関連付けら"
"れているリソース( \\ :ref:`scene <class_PackedScene>` など)と共に保存されま"
"す。プロパティエディタで編集することもできます。エクスポートは ``export`` "
"キーワードを使用して行われます::"

msgid ""
"In that example the value ``5`` will be saved and visible in the property "
"editor."
msgstr ""

#, fuzzy
msgid ""
"An exported variable must be initialized to a constant expression or have a "
"type specifier in the variable. Some of the export annotations have a "
"specific type and don't need the variable to be typed (see the *Examples* "
"section below)."
msgstr ""
"エクスポートされた変数は、定数式で初期化するか、\\ ``export`` キーワードの引"
"数の形式でエクスポート・ヒントを持つ必要があります(下記の\\ *例*\\ 参照)。"

msgid ""
"One of the fundamental benefits of exporting member variables is to have "
"them visible and editable in the editor. This way, artists and game "
"designers can modify values that later influence how the program runs. For "
"this, a special export syntax is provided."
msgstr ""
"メンバー変数をエクスポートする基本的な利点の1つは、エディタで表示および編集で"
"きることです。このようにして、アーティストやゲームデザイナーは後でプログラム"
"の実行方法に影響する値を変更できます。このために特別なエクスポート構文が用意"
"されています。"

#, fuzzy
msgid ""
"Exporting properties can also be done in other languages such as C#. The "
"syntax varies depending on the language. See :ref:`doc_c_sharp_exports` for "
"information on C# exports."
msgstr ""
"プロパティのエクスポートは C#のような別の言語でも実行できます。構文の違いは言"
"語に依存します。"

#, fuzzy
msgid "Basic use"
msgstr "基本的なセットアップ"

msgid ""
"If the exported value assigns a constant or constant expression, the type "
"will be inferred and used in the editor."
msgstr ""

msgid "If there's no default value, you can add a type to the variable."
msgstr ""

msgid "Resources and nodes can be exported."
msgstr ""

#, fuzzy
msgid "Grouping Exports"
msgstr "プロパティの追加"

msgid ""
"It is possible to group your exported properties inside the Inspector with "
"the :ref:`@export_group <class_@GDScript_annotation_@export_group>` "
"annotation. Every exported property after this annotation will be added to "
"the group. Start a new group or use ``@export_group(\"\")`` to break out."
msgstr ""

msgid ""
"The second argument of the annotation can be used to only group properties "
"with the specified prefix."
msgstr ""

msgid ""
"Groups cannot be nested, use :ref:`@export_subgroup "
"<class_@GDScript_annotation_@export_subgroup>` to create subgroups within a "
"group."
msgstr ""

msgid ""
"You can also change the name of your main category, or create additional "
"categories in the property list with the :ref:`@export_category "
"<class_@GDScript_annotation_@export_category>` annotation."
msgstr ""

msgid ""
"The list of properties is organized based on the class inheritance and new "
"categories break that expectation. Use them carefully, especially when "
"creating projects for public use."
msgstr ""

#, fuzzy
msgid "Strings as paths"
msgstr "文字列の長さ"

#, fuzzy
msgid "String as a path to a file."
msgstr "スクリプトを使用する"

msgid "String as a path to a directory."
msgstr ""

msgid "String as a path to a file, custom filter provided as hint."
msgstr ""

msgid ""
"Using paths in the global filesystem is also possible, but only in scripts "
"in tool mode."
msgstr ""

msgid "String as a path to a PNG file in the global filesystem."
msgstr ""

msgid "String as a path to a directory in the global filesystem."
msgstr ""

msgid ""
"The multiline annotation tells the editor to show a large input field for "
"editing over multiple lines."
msgstr ""

#, fuzzy
msgid "Limiting editor input ranges"
msgstr "既存のページの翻訳"

msgid "Allow integer values from 0 to 20."
msgstr ""

msgid "Allow integer values from -10 to 20."
msgstr ""

msgid "Allow floats from -10 to 20 and snap the value to multiples of 0.2."
msgstr ""

msgid ""
"The limits can be only for the slider if you add the hints \"or_greater\" "
"and/or \"or_less\"."
msgstr ""

msgid "Floats with easing hint"
msgstr ""

msgid "Display a visual representation of the 'ease()' function when editing."
msgstr ""

#, fuzzy
msgid "Colors"
msgstr "色"

msgid "Regular color given as red-green-blue-alpha value."
msgstr ""

msgid "Color given as red-green-blue value (alpha will always be 1)."
msgstr ""

msgid "Nodes"
msgstr "ノード"

msgid ""
"Since Godot 4.0, nodes can be directly exported as properties in a script "
"without having to use NodePaths:"
msgstr ""

msgid ""
"Exporting NodePaths like in Godot 3.x is still possible, in case you need it:"
msgstr ""

msgid ""
"If you want to limit the types of nodes for NodePaths, you can use the :ref:"
"`@export_node_path<class_@GDScript_annotation_@export_node_path>` annotation:"
msgstr ""

msgid "Resources"
msgstr "リソース"

msgid ""
"In the Inspector, you can then drag and drop a resource file from the "
"FileSystem dock into the variable slot."
msgstr ""

msgid ""
"Opening the inspector dropdown may result in an extremely long list of "
"possible classes to create, however. Therefore, if you specify an extension "
"of Resource such as:"
msgstr ""

msgid ""
"The drop-down menu will be limited to AnimationNode and all its inherited "
"classes."
msgstr ""

msgid ""
"It must be noted that even if the script is not being run while in the "
"editor, the exported properties are still editable. This can be used in "
"conjunction with a :ref:`script in \"tool\" mode <doc_gdscript_tool_mode>`."
msgstr ""
"スクリプトがエディタで実行されていない場合でも、エクスポートされたプロパティ"
"はまだ編集可能です。これは :ref:`script in \"tool\" mode "
"<doc_gdscript_tool_mode>` と共に使うことが出来ます。"

msgid "Exporting bit flags"
msgstr "ビットフラグのエクスポート"

#, fuzzy
msgid ""
"Integers used as bit flags can store multiple ``true``/``false`` (boolean) "
"values in one property. By using the ``@export_flags`` annotation, they can "
"be set from the editor::"
msgstr ""
"ビットフラグとして使用される整数は、1つのプロパティに複数の ``true``/"
"``false`` (ブール値)値を格納できます。エクスポートヒント ``int, FLAGS`` を使"
"用して、エディタから設定できます::"

#, fuzzy
msgid ""
"You must provide a string description for each flag. In this example, "
"``Fire`` has value 1, ``Water`` has value 2, ``Earth`` has value 4 and "
"``Wind`` corresponds to value 8. Usually, constants should be defined "
"accordingly (e.g. ``const ELEMENT_WIND = 8`` and so on)."
msgstr ""
"この例では、 ``Fire`` の値は1、 ``Water`` の値は2、 ``Earth`` の値は4、 "
"``Wind`` は値8に対応します。通常、定数はそれに応じて定義する必要があります"
"(例: ``const ELEMENT_WIND = 8`` など)。"

msgid "You can add explicit values using a colon::"
msgstr ""

msgid ""
"Only power of 2 values are valid as bit flags options. The lowest allowed "
"value is 1, as 0 means that nothing is selected. You can also add options "
"that are a combination of other flags::"
msgstr ""

#, fuzzy
msgid ""
"Export annotations are also provided for the physics, render, and navigation "
"layers defined in the project settings::"
msgstr ""
"エクスポートのヒントは、プロジェクト設定で定義された物理レイヤーとレンダーレ"
"イヤーにも提供されています:"

#, fuzzy
msgid ""
"Using bit flags requires some understanding of bitwise operations. If in "
"doubt, use boolean variables instead."
msgstr ""
"ビットフラグを使用するには、ビット単位の操作についてある程度理解する必要があ"
"ります。疑わしい場合は、代わりにブール変数をエクスポートしてください。"

#, fuzzy
msgid "Exporting enums"
msgstr "エクスポートメニュー"

msgid ""
"Properties can be exported with a type hint referencing an enum to limit "
"their values to the values of the enumeration. The editor will create a "
"widget in the Inspector, enumerating the following as \"Thing 1\", \"Thing "
"2\", \"Another Thing\". The value will be stored as an integer."
msgstr ""

msgid ""
"Integer and string properties can also be limited to a specific list of "
"values using the :ref:`@export_enum "
"<class_@GDScript_annotation_@export_enum>` annotation. The editor will "
"create a widget in the Inspector, enumerating the following as Warrior, "
"Magician, Thief. The value will be stored as an integer, corresponding to "
"the index of the selected option (i.e. ``0``, ``1``,  or ``2``)."
msgstr ""

#, fuzzy
msgid "If the type is String, the value will be stored as a string."
msgstr "タイプが文字列の場合、ファイルはそのパスからロードされます。"

msgid "If you want to set an initial value, you must specify it explicitly::"
msgstr ""

msgid "Exporting arrays"
msgstr "配列のエクスポート"

msgid ""
"Exported arrays can have initializers, but they must be constant expressions."
msgstr ""
"エクスポートされた配列は初期化子を持つことができますが、それらは定数式でなけ"
"ればなりません。"

msgid ""
"If the exported array specifies a type which inherits from Resource, the "
"array values can be set in the inspector by dragging and dropping multiple "
"files from the FileSystem dock at once."
msgstr ""
"エクスポートされた配列が、Resourceを継承する型を指定している場合は、ファイル"
"システム ドックから複数のファイルを一度にドラッグ＆ドロップすることで、インス"
"ペクタ上で配列の値を設定することができます。"

#, fuzzy
msgid "The default value **must** be a constant expression."
msgstr "このプリセットのオプションの既定値。"

msgid "Exported arrays can specify type (using the same hints as before)."
msgstr ""

msgid ""
"You can omit the default value, but it would then be ``null`` if not "
"assigned."
msgstr ""

#, fuzzy
msgid ""
"Arrays with specified types which inherit from resource can be set by drag-"
"and-dropping multiple files from the FileSystem dock."
msgstr ""
"エクスポートされた配列が、Resourceを継承する型を指定している場合は、ファイル"
"システム ドックから複数のファイルを一度にドラッグ＆ドロップすることで、インス"
"ペクタ上で配列の値を設定することができます。"

msgid "Packed type arrays also work, but only initialized empty:"
msgstr ""

msgid "Setting exported variables from a tool script"
msgstr "エクスポートされた変数をツールスクリプトから設定する"

#, fuzzy
msgid ""
"When changing an exported variable's value from a script in :ref:"
"`doc_gdscript_tool_mode`, the value in the inspector won't be updated "
"automatically. To update it, call :ref:`notify_property_list_changed() "
"<class_Object_method_notify_property_list_changed>` after setting the "
"exported variable's value."
msgstr ""
":ref:`doc_gdscript_tool_mode`\\ でエクスポートされた変数の値をスクリプトから"
"変更するとき、インスペクタ内の値は自動的に更新されません。これを更新するには"
"エクスポートされた変数の値を設定した後、 :ref:"
"`property_list_changed_notify() "
"<class_Object_method_property_list_changed_notify>` を呼び出します。"

#, fuzzy
msgid "Advanced exports"
msgstr "高度なベクトル演算"

msgid ""
"Not every type of export can be provided on the level of the language itself "
"to avoid unnecessary design complexity. The following describes some more or "
"less common exporting features which can be implemented with a low-level API."
msgstr ""

msgid ""
"Before reading further, you should get familiar with the way properties are "
"handled and how they can be customized with :ref:`_set() "
"<class_Object_private_method__set>`, :ref:`_get() "
"<class_Object_private_method__get>`, and :ref:`_get_property_list() "
"<class_Object_private_method__get_property_list>` methods as described in :"
"ref:`doc_accessing_data_or_logic_from_object`."
msgstr ""

msgid ""
"For binding properties using the above methods in C++, see :ref:"
"`doc_binding_properties_using_set_get_property_list`."
msgstr ""

msgid ""
"The script must operate in the ``tool`` mode so the above methods can work "
"from within the editor."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
