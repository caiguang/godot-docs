# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using InputEvent"
msgstr "InputEvent(入力イベント)"

msgid "What is it?"
msgstr "それは何ですか？"

msgid ""
"Managing input is usually complex, no matter the OS or platform. To ease "
"this a little, a special built-in type is provided, :ref:`InputEvent "
"<class_InputEvent>`. This datatype can be configured to contain several "
"types of input events. Input events travel through the engine and can be "
"received in multiple locations, depending on the purpose."
msgstr ""
"通常、入力の管理は、OSやプラットフォームに関係なく複雑です。これを少し簡単に"
"するために、特別な組み込み型、\\ :ref:`InputEvent <class_InputEvent>` が提供"
"されています。このデータ型は、いくつかのタイプの入力イベントを含むように構成"
"できます。入力イベントはエンジンを通過し、目的に応じて複数の場所で受信できま"
"す。"

msgid "Here is a quick example, closing your game if the escape key is hit:"
msgstr ""
"以下に簡単な例を示します。エスケープキーが押された場合にゲームを終了します:"

#, fuzzy
msgid ""
"However, it is cleaner and more flexible to use the provided :ref:`InputMap "
"<class_InputMap>` feature, which allows you to define input actions and "
"assign them different keys. This way, you can define multiple keys for the "
"same action (e.g. the keyboard escape key and the start button on a "
"gamepad). You can then more easily change this mapping in the project "
"settings without updating your code, and even build a key mapping feature on "
"top of it to allow your game to change the key mapping at runtime!"
msgstr ""
"ただし、提供されている\\ :ref:`InputMap <class_InputMap>` 機能を使用すると、"
"入力アクションを定義し、それらに異なるキーを割り当てることができます。このよ"
"うにして、同じアクションに対して複数のキーを定義できます(たとえば、キーボード"
"のエスケープキーとゲームパッドのスタートボタン)。その後、コードを更新せずにプ"
"ロジェクト設定でこのマッピングをより簡単に変更でき、さらにその上にキーマッピ"
"ング機能を構築して、実行時にゲームがキーマッピングを変更できるようにすること"
"もできます！"

#, fuzzy
msgid ""
"You can set up your InputMap under **Project > Project Settings > Input "
"Map** and then use those actions like this:"
msgstr ""
"InputMap は\\ **プロジェクト -> プロジェクト設定 -> インプットマップ** の下で"
"設定でき、次のようなアクションを使用できます:"

msgid "How does it work?"
msgstr "どのように機能しますか？"

#, fuzzy
msgid ""
"Every input event is originated from the user/player (though it's possible "
"to generate an InputEvent and feed them back to the engine, which is useful "
"for gestures). The DisplayServer for each platform will read events from the "
"operating system, then feed them to the root :ref:`Window <class_Window>`."
msgstr ""
"すべての入力イベントはユーザー/プレイヤーから発生します(ただし、InputEventを"
"生成してエンジンにフィードバックすることが可能で、ジェスチャーに役立ちます)。"
"各プラットフォームのOSオブジェクトは、デバイスからイベントを読み取り、それら"
"をMainLoopに送ります。\\ :ref:`SceneTree <class_SceneTree>` がデフォルトの"
"MainLoop実装であるため、イベントはそこに送られます。Godot には、現在の"
"SceneTree オブジェクトを取得する、\\ **get_tree()**\\ 関数が用意されていま"
"す。"

#, fuzzy
msgid ""
"The window's :ref:`Viewport <class_Viewport>` does quite a lot of stuff with "
"the received input, in order:"
msgstr ""
":ref:`Viewports <class_Viewport>` には、次のようなさまざまなユースケースがあ"
"ります:"

msgid ""
"If the Viewport is embedding Windows, the Viewport tries to interpret the "
"event in its capability as a Window-Manager (e.g. for resizing or moving "
"Windows)."
msgstr ""

msgid ""
"Next if an embedded Window is focused, the event is sent to that Window and "
"processed in the Windows Viewport and afterwards treated as handled. If no "
"embedded Window is focused, the event is sent to the nodes of the current "
"viewport in the following order."
msgstr ""

#, fuzzy
msgid ""
"First of all, the standard :ref:`Node._input() "
"<class_Node_private_method__input>` function will be called in any node that "
"overrides it (and hasn't disabled input processing with :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>`). If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. This ensures that you can filter all events of interest, even "
"before the GUI. For gameplay input, :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` is generally a better fit, "
"because it allows the GUI to intercept the events."
msgstr ""
"まず、標準の :ref:`Node._input() <class_Node_method__input>` 関数は、それを"
"オーバーライドするノードで呼び出されます(そして、\\ :ref:`Node."
"set_process_input() <class_Node_method_set_process_input>` で入力処理を無効化"
"していないなら)。いずれかの関数がイベントを消費する場合は、\\ :ref:"
"`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` を呼び出すことができ、イベント"
"はそれ以上他に拡散しません。これにより、GUIの前であっても、関心のあるすべての"
"イベントをフィルタリングできます。ゲームプレイ入力の場合、GUIがイベントを傍受"
"できるため、一般的に :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>` の方が適しています。"

#, fuzzy
msgid ""
"Second, it will try to feed the input to the GUI, and see if any control can "
"receive it. If so, the :ref:`Control <class_Control>` will be called via the "
"virtual function :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>` and the signal \"gui_input\" will "
"be emitted (this function is re-implementable by script by inheriting from "
"it). If the control wants to \"consume\" the event, it will call :ref:"
"`Control.accept_event() <class_Control_method_accept_event>` and the event "
"will not spread any more. Use the :ref:`Control.mouse_filter "
"<class_Control_property_mouse_filter>` property to control whether a :ref:"
"`Control <class_Control>` is notified of mouse events via :ref:`Control."
"_gui_input() <class_Control_private_method__gui_input>` callback, and "
"whether these events are propagated further."
msgstr ""
"次に、入力をGUIに送り、コントロールがそれを受信できるかどうかを確認します。そ"
"の場合、\\ :ref:`Control <class_Control>` が仮想関数 :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` を介して呼び出され、シグナル "
"\"input_event\" が発行されます(この関数はスクリプトで継承可能です)。コント"
"ロールがイベントを「消費」したい場合、\\ :ref:`Control.accept_event() "
"<class_Control_method_accept_event>` を呼び出せば、イベントはそれ以上拡散しま"
"せん。\\ :ref:`Control.mouse_filter <class_Control_property_mouse_filter>` プ"
"ロパティを使用して、\\ :ref:`Control <class_Control>` が :ref:`Control."
"_gui_input() <class_Control_method__gui_input>` コールバックを介してマウスイ"
"ベントを通知されるかどうか、およびこれらのイベントがさらに伝播されるかどうか"
"を制御します。"

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._shortcut_input() "
"<class_Node_private_method__shortcut_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_shortcut_input() "
"<class_Node_method_set_process_shortcut_input>`). This happens only for :ref:"
"`InputEventKey <class_InputEventKey>`, :ref:`InputEventShortcut "
"<class_InputEventShortcut>` and :ref:`InputEventJoypadButton "
"<class_InputEventJoypadButton>`. If any function consumes the event, it can "
"call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The shortcut input callback is ideal for treating events that are "
"intended as shortcuts."
msgstr ""
"これまでに誰もイベントを消費しなかった場合、未処理入力コールバックがオーバー"
"ライドされていれば、それが呼び出されます(そして 、\\ :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>` で無効化していないなら)。関"
"数がイベントを消費する場合、\\ :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` を呼び出すことができ、イベント"
"はそれ以上拡散しません。未処理入力コールバックは、フルスクリーンのゲームプレ"
"イイベントに最適であるため、GUIがアクティブな場合は受信されません。"

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_key_input() "
"<class_Node_private_method__unhandled_key_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node."
"set_process_unhandled_key_input() "
"<class_Node_method_set_process_unhandled_key_input>`). This happens only if "
"the event is a :ref:`InputEventKey <class_InputEventKey>`. If any function "
"consumes the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled key input callback is ideal for key events."
msgstr ""
"これまでに誰もイベントを消費しなかった場合、未処理入力コールバックがオーバー"
"ライドされていれば、それが呼び出されます(そして 、\\ :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>` で無効化していないなら)。関"
"数がイベントを消費する場合、\\ :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` を呼び出すことができ、イベント"
"はそれ以上拡散しません。未処理入力コールバックは、フルスクリーンのゲームプレ"
"イイベントに最適であるため、GUIがアクティブな場合は受信されません。"

#, fuzzy
msgid ""
"If so far no one consumed the event, the :ref:`Node._unhandled_input() "
"<class_Node_private_method__unhandled_input>` callback will be called if "
"overridden (and not disabled with :ref:`Node.set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>`). If any function consumes "
"the event, it can call :ref:`Viewport.set_input_as_handled() "
"<class_Viewport_method_set_input_as_handled>`, and the event will not spread "
"any more. The unhandled input callback is ideal for full-screen gameplay "
"events, so they are not received when a GUI is active."
msgstr ""
"これまでに誰もイベントを消費しなかった場合、未処理入力コールバックがオーバー"
"ライドされていれば、それが呼び出されます(そして 、\\ :ref:`Node."
"set_process_unhandled_input() "
"<class_Node_method_set_process_unhandled_input>` で無効化していないなら)。関"
"数がイベントを消費する場合、\\ :ref:`SceneTree.set_input_as_handled() "
"<class_SceneTree_method_set_input_as_handled>` を呼び出すことができ、イベント"
"はそれ以上拡散しません。未処理入力コールバックは、フルスクリーンのゲームプレ"
"イイベントに最適であるため、GUIがアクティブな場合は受信されません。"

#, fuzzy
msgid ""
"If no one wanted the event so far, and :ref:`Object Picking "
"<class_viewport_property_physics_object_picking>` is turned on, the event is "
"used for object picking. For the root viewport, this can also be enabled in :"
"ref:`Project Settings <class_ProjectSettings_property_physics/common/"
"enable_object_picking>`. In the case of a 3D scene if a :ref:`Camera3D "
"<class_Camera3D>` is assigned to the Viewport, a ray to the physics world "
"(in the ray direction from the click) will be cast. If this ray hits an "
"object, it will call the :ref:`CollisionObject3D._input_event() "
"<class_CollisionObject3D_private_method__input_event>` function in the "
"relevant physics object. In the case of a 2D scene, conceptually the same "
"happens with :ref:`CollisionObject2D._input_event() "
"<class_CollisionObject2D_private_method__input_event>`."
msgstr ""
"これまで誰もイベントを望んでおらず :ref:`Camera <class_Camera>` がビューポー"
"トに割り当てられている場合、物理処理を行う世界への光線(光線の方向はクリックし"
"た場所から始まる)が投影されます。この光線がオブジェクトに当たると、関連する物"
"理処理オブジェクトの :ref:`CollisionObject._input_event() "
"<class_CollisionObject_method__input_event>` 関数を呼び出します(ボディはデ"
"フォルトでこのコールバックを受け取りますが、エリアはそうしません。これは :"
"ref:`Area <class_Area>` プロパティで設定できます)。(訳注: 要するに画面内のオ"
"ブジェクトにタッチできるという話です)。"

#, fuzzy
msgid ""
"When sending events to its child and descendant nodes, the viewport will do "
"so, as depicted in the following graphic, in a reverse depth-first order, "
"starting with the node at the bottom of the scene tree, and ending at the "
"root node. Excluded from this process are Windows and SubViewports."
msgstr ""
"シーン内のすべてのリスニングノードにイベントを送信する場合、ビューポートは逆"
"の深さ優先順で送信します。シーンツリーの一番下のノードから始まり、ルートノー"
"ドで終わります:"

#, fuzzy
msgid ""
"This order doesn't apply to :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`, which uses a different method "
"based on event location or focused Control."
msgstr ""
"この関数は\\ :ref:`Control._gui_input() <class_Control_method__gui_input>` で"
"す。コントロールで単にオーバーライドします。処理を設定する必要はありません。"

msgid ""
"Since Viewports don't send events to other :ref:`SubViewports "
"<class_SubViewport>`, one of the following methods has to be used:"
msgstr ""

msgid ""
"Use a :ref:`SubViewportContainer <class_SubViewportContainer>`, which "
"automatically sends events to its child :ref:`SubViewports "
"<class_SubViewport>` after :ref:`Node._input() "
"<class_Node_private_method__input>` or :ref:`Control._gui_input() "
"<class_Control_private_method__gui_input>`."
msgstr ""

msgid "Implement event propagation based on the individual requirements."
msgstr ""

msgid ""
"GUI events also travel up the scene tree but, since these events target "
"specific Controls, only direct ancestors of the targeted Control node "
"receive the event."
msgstr ""
"GUIイベントもシーンツリーを上に移動しますが、これらのイベントは特定のコント"
"ロールを対象とするため、ターゲットコントロールノードの直接の先祖のみがイベン"
"トを受け取ります。"

#, fuzzy
msgid ""
"In accordance with Godot's node-based design, this enables specialized child "
"nodes to handle and consume particular events, while their ancestors, and "
"ultimately the scene root, can provide more generalized behavior if needed."
msgstr ""
"Godotのノードベースの設計に従って、これにより、特殊な子ノードが特定のイベント"
"を処理および消費できるようになるので、祖先、および最終的にシーンルートは、必"
"要に応じてより一般化された動作を提供できます。"

msgid "Anatomy of an InputEvent"
msgstr "InputEventの構造"

msgid ""
":ref:`InputEvent <class_InputEvent>` is just a base built-in type, it does "
"not represent anything and only contains some basic information, such as "
"event ID (which is increased for each event), device index, etc."
msgstr ""
":ref:`InputEvent <class_InputEvent>` は単なる基本組み込み型であり、何も表さ"
"ず、イベントID(イベントごとに増加する)、デバイスインデックスなどの基本情報の"
"みを含みます。"

#, fuzzy
msgid ""
"There are several specialized types of InputEvent, described in the table "
"below:"
msgstr "InputEventにはいくつかの特殊なタイプがあり、次の表で説明します:"

msgid "Event"
msgstr "イベント"

msgid "Description"
msgstr "説明"

msgid ":ref:`InputEvent <class_InputEvent>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

msgid "Empty Input Event."
msgstr "空の入力イベント。"

msgid ":ref:`InputEventKey <class_InputEventKey>`"
msgstr "\\ :ref:`InputEventKey <class_InputEventKey>`"

#, fuzzy
msgid "Contains a keycode and Unicode value, as well as modifiers."
msgstr ""
"スキャンコードとユニコードの値、および(Ctrl、Shiftなどの)モディファイヤが含ま"
"れています。"

msgid ":ref:`InputEventMouseButton <class_InputEventMouseButton>`"
msgstr "\\ :ref:`InputEventMouseButton <class_InputEventMouseButton>`"

msgid "Contains click information, such as button, modifiers, etc."
msgstr "ボタン、モディファイヤなどのクリック情報が含まれます。"

msgid ":ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"
msgstr "\\ :ref:`InputEventMouseMotion <class_InputEventMouseMotion>`"

#, fuzzy
msgid ""
"Contains motion information, such as relative and absolute positions and "
"speed."
msgstr "相対位置、絶対位置、速度などのモーション情報が含まれます。"

msgid ":ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"
msgstr "\\ :ref:`InputEventJoypadMotion <class_InputEventJoypadMotion>`"

msgid "Contains Joystick/Joypad analog axis information."
msgstr "ジョイスティック/ジョイパッドのアナログ軸情報が含まれています。"

msgid ":ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"
msgstr "\\ :ref:`InputEventJoypadButton <class_InputEventJoypadButton>`"

msgid "Contains Joystick/Joypad button information."
msgstr "ジョイスティック/ジョイパッドのボタン情報が含まれます。"

msgid ":ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"
msgstr "\\ :ref:`InputEventScreenTouch <class_InputEventScreenTouch>`"

msgid ""
"Contains multi-touch press/release information. (only available on mobile "
"devices)"
msgstr ""
"マルチタッチのプレス/リリース情報が含まれています。(モバイルデバイスでのみ使"
"用可能)"

msgid ":ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"
msgstr "\\ :ref:`InputEventScreenDrag <class_InputEventScreenDrag>`"

msgid ""
"Contains multi-touch drag information. (only available on mobile devices)"
msgstr ""
"マルチタッチドラッグ情報が含まれています。(モバイルデバイスでのみ使用可能)"

#, fuzzy
msgid ":ref:`InputEventMagnifyGesture <class_InputEventMagnifyGesture>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a factor as well as modifiers."
msgstr ""
"スキャンコードとユニコードの値、および(Ctrl、Shiftなどの)モディファイヤが含ま"
"れています。"

#, fuzzy
msgid ":ref:`InputEventPanGesture <class_InputEventPanGesture>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a position, a delta as well as modifiers."
msgstr ""
"スキャンコードとユニコードの値、および(Ctrl、Shiftなどの)モディファイヤが含ま"
"れています。"

#, fuzzy
msgid ":ref:`InputEventMIDI <class_InputEventMIDI>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains MIDI-related information."
msgstr "ジョイスティック/ジョイパッドのボタン情報が含まれます。"

#, fuzzy
msgid ":ref:`InputEventShortcut <class_InputEventShortcut>`"
msgstr "\\ :ref:`InputEvent <class_InputEvent>`"

#, fuzzy
msgid "Contains a shortcut."
msgstr "コンテナのレイアウト"

msgid ":ref:`InputEventAction <class_InputEventAction>`"
msgstr "\\ :ref:`InputEventAction <class_InputEventAction>`"

msgid ""
"Contains a generic action. These events are often generated by the "
"programmer as feedback. (more on this below)"
msgstr ""
"汎用アクションが含まれています。これらのイベントは多くの場合、フィードバック"
"としてプログラマーによって生成されます。(詳細は以下)"

msgid "Actions"
msgstr "アクション"

msgid ""
"Actions are a grouping of zero or more InputEvents into a commonly "
"understood title (for example, the default \"ui_left\" action grouping both "
"joypad-left input and a keyboard's left arrow key). They are not required to "
"represent an InputEvent but are useful because they abstract various inputs "
"when programming the game logic."
msgstr ""

#, fuzzy
msgid "This allows for:"
msgstr "このアプローチにはいくつかの利点があります:"

msgid ""
"The same code to work on different devices with different inputs (e.g., "
"keyboard on PC, Joypad on console)."
msgstr ""
"入力が異なるさまざまなデバイス(PCのキーボード、コンソールのJoypadなど)で動作"
"する同じコード。"

msgid "Input to be reconfigured at run-time."
msgstr "実行時に再構成される入力。"

#, fuzzy
msgid "Actions to be triggered programmatically at run-time."
msgstr "実行時に再構成される入力。"

#, fuzzy
msgid ""
"Actions can be created from the Project Settings menu in the **Input Map** "
"tab and assigned input events."
msgstr ""
"アクションは、[プロジェクト設定]メニューの[アクション]タブから作成できます。"

msgid ""
"Any event has the methods :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`, :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` and :ref:`InputEvent "
"<class_InputEvent>`."
msgstr ""
"すべてのイベントには、メソッド :ref:`InputEvent.is_action() "
"<class_InputEvent_method_is_action>`\\ 、\\ :ref:`InputEvent.is_pressed() "
"<class_InputEvent_method_is_pressed>` および :ref:`InputEvent "
"<class_InputEvent>` があります。"

msgid ""
"Alternatively, it may be desired to supply the game back with an action from "
"the game code (a good example of this is detecting gestures). The Input "
"singleton has a method for this: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`. You would normally use it like this:"
msgstr ""
"あるいは、ゲームコードからのアクションをゲームに返すことが望ましい場合があり"
"ます(この良い例は、ジェスチャの検出です)。Inputシングルトンには、次のメソッド"
"があります: :ref:`Input.parse_input_event() "
"<class_input_method_parse_input_event>`\\ 。通常は次のように使用します:"

msgid "InputMap"
msgstr "入力マップ"

msgid ""
"Customizing and re-mapping input from code is often desired. If your whole "
"workflow depends on actions, the :ref:`InputMap <class_InputMap>` singleton "
"is ideal for reassigning or creating different actions at run-time. This "
"singleton is not saved (must be modified manually) and its state is run from "
"the project settings (project.godot). So any dynamic system of this type "
"needs to store settings in the way the programmer best sees fit."
msgstr ""
"多くの場合、コードからの入力をカスタマイズして再マッピングすることが望まれま"
"す。ワークフロー全体がアクションに依存する場合、\\ :ref:`InputMap "
"<class_InputMap>` シングルトンは、実行時に異なるアクションを再割り当てまたは"
"作成するのに理想的です。このシングルトンは保存されず(手動で変更する必要があり"
"ます)、そのステートはプロジェクト設定(project.godot)から実行されます。した"
"がって、このタイプの動的システムは、プログラマーが最適と考える方法で設定を保"
"存する必要があります。"

msgid "Translation status"
msgstr "翻訳ステータス"
