# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Runtime file loading and saving"
msgstr "次の例を参照してください:"

#, fuzzy
msgid ""
"See :ref:`doc_saving_games` for information on saving and loading game "
"progression."
msgstr ""
"Godotでの翻訳のインポートとテストの詳細については、\\ :ref:"
"`doc_internationalizing_games` を参照してください。"

msgid ""
"Sometimes, :ref:`exporting packs, patches, and mods <doc_exporting_pcks>` is "
"not ideal when you want players to be able to load user-generated content in "
"your project. It requires users to generate a PCK or ZIP file through the "
"Godot editor, which contains resources imported by Godot."
msgstr ""

msgid "Example use cases for runtime file loading and saving include:"
msgstr ""

#, fuzzy
msgid "Loading texture packs designed for the game."
msgstr "渡されたベースパスからエンジンをロードします。"

msgid ""
"Loading user-provided audio tracks and playing them back in an in-game radio "
"station."
msgstr ""

msgid ""
"Loading custom levels or 3D models that can be designed with any 3D DCC that "
"can export to glTF (including glTF scenes saved by Godot at runtime)."
msgstr ""

msgid "Using user-provided fonts for menus and HUD."
msgstr ""

msgid ""
"Saving/loading a file format that can contain multiple files but can still "
"easily be read by other applications (ZIP)."
msgstr ""

msgid ""
"Loading files created by another game or program, or even game data files "
"from another game not made with Godot."
msgstr ""

msgid ""
"Runtime file loading can be combined with :ref:`HTTP requests "
"<doc_http_request_class>` to load resources from the Internet directly."
msgstr ""

msgid ""
"Do **not** use this runtime loading approach to load resources that are part "
"of the project, as it's less efficient and doesn't allow benefiting from "
"Godot's resource handling functionality (such as translation remaps). See :"
"ref:`doc_import_process` for details."
msgstr ""

#, fuzzy
msgid ""
"You can see how saving and loading works in action using the `Run-time File "
"Saving and Loading (Serialization) demo project <https://github.com/"
"godotengine/godot-demo-projects/blob/master/loading/runtime_save_load>`__."
msgstr ""
"例を見てよりよく学ぶならば、デモプロジェクトは `こちら <https://github.com/"
"godotengine/godot-demo-projects/tree/master/mobile/android_iap>`_で見つけられ"
"ます。"

msgid "Plain text and binary files"
msgstr ""

msgid ""
"Godot's :ref:`class_FileAccess` class provides methods to access files on "
"the filesystem for reading and writing:"
msgstr ""

msgid ""
"To handle custom binary formats (such as loading file formats not supported "
"by Godot), :ref:`class_FileAccess` provides several methods to read/write "
"integers, floats, strings and more. These FileAccess methods have names that "
"start with ``get_`` and ``store_``."
msgstr ""

msgid ""
"If you need more control over reading binary files or need to read binary "
"streams that are not part of a file, :ref:`class_PackedByteArray` provides "
"several helper methods to decode/encode series of bytes to integers, floats, "
"strings and more. These PackedByteArray methods have names that start with "
"``decode_`` and ``encode_``. See also :ref:`doc_binary_serialization_api`."
msgstr ""

#, fuzzy
msgid "Images"
msgstr "mainImage(メインイメージ)"

msgid ""
"Image's :ref:`Image.load_from_file <class_Image_method_load_from_file>` "
"static method handles everything, from format detection based on file "
"extension to reading the file from disk."
msgstr ""

msgid ""
"If you need error handling or more control (such as changing the scale a SVG "
"is loaded at), use one of the following methods depending on the file format:"
msgstr ""

msgid ""
":ref:`Image.load_jpg_from_buffer <class_Image_method_load_jpg_from_buffer>`"
msgstr ""

msgid ""
":ref:`Image.load_ktx_from_buffer <class_Image_method_load_ktx_from_buffer>`"
msgstr ""

msgid ""
":ref:`Image.load_png_from_buffer <class_Image_method_load_png_from_buffer>`"
msgstr ""

msgid ""
":ref:`Image.load_svg_from_buffer <class_Image_method_load_svg_from_buffer>` "
"or :ref:`Image.load_svg_from_string "
"<class_Image_method_load_svg_from_string>`"
msgstr ""

msgid ""
":ref:`Image.load_tga_from_buffer <class_Image_method_load_tga_from_buffer>`"
msgstr ""

msgid ""
":ref:`Image.load_webp_from_buffer <class_Image_method_load_webp_from_buffer>`"
msgstr ""

msgid ""
"Several image formats can also be saved by Godot at runtime using the "
"following methods:"
msgstr ""

msgid ""
":ref:`Image.save_png <class_Image_method_save_png>` or :ref:`Image."
"save_png_to_buffer <class_Image_method_save_png_to_buffer>`"
msgstr ""

msgid ""
":ref:`Image.save_webp <class_Image_method_save_webp>` or :ref:`Image."
"save_webp_to_buffer <class_Image_method_save_webp_to_buffer>`"
msgstr ""

msgid ""
":ref:`Image.save_jpg <class_Image_method_save_jpg>` or :ref:`Image."
"save_jpg_to_buffer <class_Image_method_save_jpg_to_buffer>`"
msgstr ""

msgid ""
":ref:`Image.save_exr <class_Image_method_save_exr>` or :ref:`Image."
"save_exr_to_buffer <class_Image_method_save_exr_to_buffer>` *(only available "
"in editor builds, cannot be used in exported projects)*"
msgstr ""

msgid ""
"The methods with the ``to_buffer`` suffix save the image to a "
"PackedByteArray instead of the filesystem. This is useful to send the image "
"over the network or into a ZIP archive without having to write it on the "
"filesystem. This can increase performance by reducing I/O utilization."
msgstr ""

msgid ""
"If displaying the loaded image on a 3D surface, make sure to call :ref:"
"`Image.generate_mipmaps <class_Image_method_generate_mipmaps>` so that the "
"texture doesn't look grainy when viewed at a distance. This is also useful "
"in 2D when following instructions on :ref:`reducing aliasing when "
"downsampling <doc_multiple_resolutions_reducing_aliasing_on_downsampling>`."
msgstr ""

msgid ""
"Example of loading an image and displaying it in a :ref:`class_TextureRect` "
"node (which requires conversion to :ref:`class_ImageTexture`):"
msgstr ""

#, fuzzy
msgid "Audio/video files"
msgstr "エフェクトの追加"

msgid ""
"Godot supports loading Ogg Vorbis audio at runtime. Note that not *all* "
"files with an ``.ogg`` extension may be Ogg Vorbis files. Some may be Ogg "
"Theora videos, or contain Opus audio within an Ogg container. These files "
"will **not** load correctly as audio files in Godot."
msgstr ""

msgid ""
"Example of loading an Ogg Vorbis audio file in an :ref:"
"`class_AudioStreamPlayer` node:"
msgstr ""

msgid ""
"Example of loading an Ogg Theora video file in a :ref:"
"`class_VideoStreamPlayer` node:"
msgstr ""

msgid ""
"Godot doesn't support runtime loading of MP3 or WAV files yet. Until this is "
"implemented, it's feasible to implement runtime WAV loading using a script "
"since :ref:`class_AudioStreamWAV`'s ``data`` property is exposed to "
"scripting."
msgstr ""

msgid ""
"It's still possible to *save* WAV files using :ref:`AudioStreamWAV."
"save_to_wav <class_AudioStreamWAV_method_save_to_wav>`, which is useful for "
"procedurally generated audio or microphone recordings."
msgstr ""

#, fuzzy
msgid "3D scenes"
msgstr "シーン"

msgid ""
"Godot has first-class support for glTF 2.0, both in the editor and exported "
"projects. Using :ref:`class_gltfdocument` and :ref:`class_gltfstate` "
"together, Godot can load and save glTF files in exported projects, in both "
"text (``.gltf``) and binary (``.glb``) formats. The binary format should be "
"preferred as it's faster to write and smaller, but the text format is easier "
"to debug."
msgstr ""

msgid ""
"Example of loading a glTF scene and appending its root node to the scene:"
msgstr ""

msgid ""
"When loading a glTF scene, a *base path* must be set so that external "
"resources like textures can be loaded correctly. When loading from a file, "
"the base path is automatically set to the folder containing the file. When "
"loading from a buffer, this base path must be manually set as there is no "
"way for Godot to infer this path."
msgstr ""

msgid ""
"To set the base path, set :ref:`GLTFState.base_path "
"<class_GLTFState_property_base_path>` on your GLTFState instance *before* "
"calling :ref:`GLTFDocument.append_from_buffer "
"<class_GLTFDocument_method_append_from_buffer>` or :ref:`GLTFDocument."
"append_from_file <class_GLTFDocument_method_append_from_file>`."
msgstr ""

#, fuzzy
msgid "Fonts"
msgstr "前面図"

msgid ""
":ref:`FontFile.load_dynamic_font <class_FontFile_method_load_bitmap_font>` "
"supports the following font file formats: TTF, OTF, WOFF, WOFF2, PFB, PFM"
msgstr ""

msgid ""
"On the other hand, :ref:`FontFile.load_bitmap_font "
"<class_FontFile_method_load_bitmap_font>` supports the `BMFont <https://www."
"angelcode.com/products/bmfont/>`__ format (``.fnt`` or ``.font``)."
msgstr ""

msgid ""
"Additionally, it is possible to load any font that is installed on the "
"system using Godot's support for :ref:`doc_using_fonts_system_fonts`."
msgstr ""

msgid ""
"Example of loading a font file automatically according to its file "
"extension, then adding it as a theme override to a :ref:`class_Label` node:"
msgstr ""

msgid "ZIP archives"
msgstr ""

msgid ""
"Godot supports reading and writing ZIP archives using the :ref:"
"`class_zipreader` and :ref:`class_zippacker` classes. This supports any ZIP "
"file, including files generated by Godot's \"Export PCK/ZIP\" functionality "
"(although these will contain imported Godot resources rather than the "
"original project files)."
msgstr ""

msgid ""
"Use :ref:`ProjectSettings.load_resource_pack "
"<class_ProjectSettings_method_load_resource_pack>` to load PCK or ZIP files "
"exported by Godot as :ref:`additional data packs <doc_exporting_pcks>`. That "
"approach is preferred for DLCs, as it makes interacting with additional data "
"packs seamless (virtual filesystem)."
msgstr ""

msgid ""
"This ZIP archive support can be combined with runtime image, 3D scene and "
"audio loading to provide a seamless modding experience without requiring "
"users to go through the Godot editor to generate PCK/ZIP files."
msgstr ""

msgid ""
"Example that lists files in a ZIP archive in an :ref:`class_ItemList` node, "
"then writes contents read from it to a new ZIP archive (essentially "
"duplicating the archive):"
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
