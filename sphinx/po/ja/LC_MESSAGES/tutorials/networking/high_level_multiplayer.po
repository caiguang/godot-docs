# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "High-level multiplayer"
msgstr "高レベルのマルチプレイヤー"

#, fuzzy
msgid "High-level vs low-level API"
msgstr "高レベルAPIと低レベルAPI"

msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"以下では、Godotの高レベルネットワークと低レベルネットワークの違いといくつかの"
"基本事項について説明します。基本をとばして最初のノードにネットワークを追加す"
"る場合は、以下の `Initializing the network`_ までスキップしてください。ただ"
"し、後で残りも読んでください！"

#, fuzzy
msgid ""
"Godot always supported standard low-level networking via :abbr:`UDP (User "
"Datagram Protocol)`, :abbr:`TCP (Transmission Control Protocol)` and some "
"higher-level protocols such as :abbr:`HTTP (Hypertext Transfer Protocol)` "
"and :abbr:`SSL (Secure Sockets Layer)`. These protocols are flexible and can "
"be used for almost anything. However, using them to synchronize game state "
"manually can be a large amount of work. Sometimes that work can't be avoided "
"or is worth it, for example when working with a custom server implementation "
"on the backend. But in most cases, it's worthwhile to consider Godot's high-"
"level networking API, which sacrifices some of the fine-grained control of "
"low-level networking for greater ease of use."
msgstr ""
"Godotは、UDP、TCP、およびSSLやHTTPなどの一部の高レベルプロトコルを介した標準"
"の低レベルネットワークを常にサポートしてきました。これらのプロトコルは柔軟性"
"があり、ほとんどすべてに使用できます。ただし、ゲームの状態を手動で同期するた"
"めにそれらを使用すると、多大な作業が必要になる場合があります。バックエンドで"
"カスタムサーバー実装を使用する場合など、その作業を回避できない場合や、そうす"
"るほうが価値がある場合があります。しかし、ほとんどの場合、使いやすさを高める"
"ために低レベルネットワークのきめ細かな制御の一部を犠牲にしてでも、Godotの高レ"
"ベルネットワークAPIを検討する価値があります。"

msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "これは、低レベルプロトコルの固有の制限によるものです:"

msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCPは、パケットが常に確実に順序どおりに到着することを保証しますが、一般に、エ"
"ラー修正のために待ち時間が長くなります。また、手順に「接続(connection)」を必"
"要とし、マルチプレイヤーゲームのようなアプリケーションには向かない目的に合わ"
"せて最適化されているので、非常に複雑なプロトコルでもあります。パケットはより"
"大きなバッチで送信されるようにバッファリングされ、パケットごとのオーバーヘッ"
"ドが少なくなり、待ち時間が長くなります。これはHTTPのようなものには便利です"
"が、一般的にはゲームには役立ちません。この一部は、(例えば、TCP接続の「Nagleの"
"アルゴリズム」を無効にすることによって)設定および無効にすることができます。"

msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDPはより単純なプロトコルであり、パケットのみを送信します(「接続」の概念はあ"
"りません)。エラー修正を行わないので処理がかなり速くなりますが(低遅延)、パケッ"
"トは途中で失われたり、間違った順序で受信されたりする可能性があります。それに"
"加えて、UDPのMTU(最大パケットサイズ)は一般的に小さい(数百バイトのみ)ため、大"
"きなパケットを送信することは、パケットを分割し、再編成し、一部が失敗した場合"
"に再試行することを意味します。"

msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"一般に、TCPは信頼性が高く、順序があり、低速であると考えることができます。それ"
"に対し、UDPは信頼性がなく、順序がなく、高速であるといえます。パフォーマンスが"
"大きく異なるため、多くの場合、ゲームに必要なTCPの部分(オプションの信頼性とパ"
"ケット順序)を再構築し、不要な部分(輻輳/トラフィック制御機能、Nagleのアルゴリ"
"ズムなど)を回避することは理にかなっています。このため、ほとんどのゲームエンジ"
"ンにはこのような実装が付属しており、Godotも例外ではありません。"

msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"要約すると、低レベルのネットワークAPIを使用して最大限の制御を行い、すべてを素"
"のネットワークプロトコルの上に実装するか、または `SceneTree "
"<class_SceneTree>`に基づいた高レベルAPIを使用するかです。これは、一般的に最適"
"化された方法で、シーンの後ろで重い処理を引き受けます。"

#, fuzzy
msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently offers WebSockets and WebRTC support but lacks some of the higher-"
"level features, as well as raw access to low-level protocols like TCP and "
"UDP."
msgstr ""
"Godotがサポートするプラットフォームのほとんどは、言及された高レベルおよび低レ"
"ベルのネットワーク機能のすべてまたはほとんどを提供します。ただし、ネットワー"
"クは常にハードウェアとオペレーティングシステムに大きく依存しているため、一部"
"のターゲットプラットフォームでは一部の機能が変更されたり利用できない場合があ"
"ります。最も顕著ものとしてHTML5プラットフォームは、現在、WebSocketサポートの"
"みを提供しており、TCPやUDPのような低レベルのプロトコルへの未加工のアクセスだ"
"けでなく、より高いレベルの機能の一部も欠いています。"

#, fuzzy
msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""
"TCP/IP、UDP、およびネットワーキングの詳細: https://web.archive.org/"
"web/20190406162102/https://gafferongames.com/post/udp_vs_tcp/"

#, fuzzy
msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/categories/game-networking/>`__), "
"including the comprehensive `introduction to networking models in games "
"<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""
"Gaffer On Gamesには、ゲームのネットワーキングに関する便利な記事が多数あります"
"(`こちら　https://web.archive.org/web/20190405204744/https://gafferongames."
"com/tags/networking/>`__)、包括的な `ゲームのネットワークモデルの紹介 "
"<http://web.archive.org/web/20190407004521/https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__。"

msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""
"Godotの組み込みネットワークではなく、選択した低レベルネットワークライブラリを"
"使用する場合は、次の例を参照してください: https://github.com/PerduGames/"
"gdnet3"

#, fuzzy
msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users' data if they play your game."
msgstr ""
"ゲームにネットワークを追加するには、ある程度の責任が伴います。間違って実行す"
"ると、アプリケーションが脆弱になり、チートや悪用につながる可能性があります。"
"攻撃者がアプリケーションを実行しているマシンを危険にさらし、サーバーを使用し"
"てスパムを送信したり、他のユーザーを攻撃したり、ユーザーがゲームをプレイして"
"いる場合にユーザーデータを盗んだりすることもできます。"

msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"これは、ネットワーキングが関係する場合に常に当てはまり、Godotとは関係ありませ"
"ん。もちろん実験はできますが、ネットワークアプリケーションをリリースするとき"
"は、考えられるセキュリティ上の問題に常に注意してください。"

#, fuzzy
msgid "Mid-level abstraction"
msgstr "中レベルの抽象化"

msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"ネットワークを介してゲームを同期する方法に入る前に、同期のための基本のネット"
"ワークAPIがどのように機能するかを理解しておくと役立ちます。"

#, fuzzy
msgid ""
"Godot uses a mid-level object :ref:`MultiplayerPeer "
"<class_MultiplayerPeer>`. This object is not meant to be created directly, "
"but is designed so that several C++ implementations can provide it."
msgstr ""
"Godotは、中間レベルのオブジェクト :ref:`NetworkedMultiplayerPeer "
"<class_NetworkedMultiplayerPeer>` を使用します。このオブジェクトは直接作成す"
"るためのものではなく、いくつかの実装が提供できるように設計されています。"

msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"このオブジェクトは :ref:`PacketPeer <class_PacketPeer>` から継承されるため、"
"データのシリアル化、送信、受信に役立つすべてのメソッドを引き継ぎます。さら"
"に、ピア、転送モードなどを設定するメソッドを追加します。また、ピアが接続また"
"は切断したときに通知するシグナルも含まれています。"

#, fuzzy
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`ENetMultiplayerPeer <class_ENetMultiplayerPeer>`), one based on WebRTC "
"(:ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`), and one based "
"on WebSocket (:ref:`WebSocketPeer <class_WebSocketPeer>`), but this could be "
"used to implement mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/"
"console-specific networking APIs."
msgstr ""
"このクラスインターフェイスは、ほとんどの種類のネットワーク層、トポロジ、およ"
"びライブラリを抽象化できます。デフォルトでは、GodotはENet(:ref:"
"`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`)に基づいた実装、"
"WebRTC(:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`)に基づいた実装、お"
"よびWebSocket(:ref:`WebSocketMultiplayerPeer < "
"class_WebSocketMultiplayerPeer> `)に基づいた実装を提供しますが、これはモバイ"
"ルAPI(アドホックWiFi、Bluetooth用)またはカスタムデバイス/コンソール固有のネッ"
"トワークAPIを実装するために使用できます。"

#, fuzzy
msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. This object is still made "
"available in case a game has specific needs for a lower-level API."
msgstr ""
"ほとんどの場合、Godotはさらに高度なネットワーク機能を提供するため、このオブ"
"ジェクトを直接使用することはお勧めしません。 それでも、ゲームに低レベルAPIの"
"特定のニーズがある場合に利用できます。"

#, fuzzy
msgid "Hosting considerations"
msgstr "その他の考慮事項"

msgid ""
"When hosting a server, clients on your :abbr:`LAN (Local Area Network)` can "
"connect using the internal IP address which is usually of the form ``192.168."
"*.*``. This internal IP address is **not** reachable by non-LAN/Internet "
"clients."
msgstr ""

msgid ""
"On Windows, you can find your internal IP address by opening a command "
"prompt and entering ``ipconfig``. On macOS, open a Terminal and enter "
"``ifconfig``. On Linux, open a terminal and enter ``ip addr``."
msgstr ""

msgid ""
"If you're hosting a server on your own machine and want non-LAN clients to "
"connect to it, you'll probably have to *forward* the server port on your "
"router. This is required to make your server reachable from the Internet "
"since most residential connections use a `NAT <https://en.wikipedia.org/wiki/"
"Network_address_translation>`__. Godot's high-level multiplayer API only "
"uses UDP, so you must forward the port in UDP, not just TCP."
msgstr ""

msgid ""
"After forwarding an UDP port and making sure your server uses that port, you "
"can use `this website <https://icanhazip.com/>`__ to find your public IP "
"address. Then give this public IP address to any Internet clients that wish "
"to connect to your server."
msgstr ""

msgid ""
"Godot's high-level multiplayer API uses a modified version of ENet which "
"allows for full IPv6 support."
msgstr ""

msgid "Initializing the network"
msgstr "ネットワークの初期化"

#, fuzzy
msgid ""
"High level networking in Godot is managed by the :ref:`SceneTree "
"<class_SceneTree>`."
msgstr ""
"Godotでネットワークを制御するオブジェクトは、ツリー関連のすべてを制御するオブ"
"ジェクトと同じです: :ref:`SceneTree <class_SceneTree>`\\ 。"

msgid ""
"Each node has a ``multiplayer`` property, which is a reference to the "
"``MultiplayerAPI`` instance configured for it by the scene tree. Initially, "
"every node is configured with the same default ``MultiplayerAPI`` object."
msgstr ""

msgid ""
"It is possible to create a new ``MultiplayerAPI`` object and assign it to a "
"``NodePath`` in the the scene tree, which will override ``multiplayer`` for "
"the node at that path and all of its descendants. This allows sibling nodes "
"to be configured with different peers, which makes it possible to run a "
"server and a client simultaneously in one instance of Godot."
msgstr ""

msgid ""
"To initialize networking, a ``MultiplayerPeer`` object must be created, "
"initialized as a server or client, and passed to the ``MultiplayerAPI``."
msgstr ""

#, fuzzy
msgid "To terminate networking:"
msgstr "ネットワーク機能の終了:"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""

msgid "Managing connections"
msgstr "接続の管理"

msgid ""
"Every peer is assigned a unique ID. The server's ID is always 1, and clients "
"are assigned a random positive integer."
msgstr ""

msgid ""
"Responding to connections or disconnections is possible by connecting to "
"``MultiplayerAPI``'s signals:"
msgstr ""

msgid ""
"``peer_connected(id: int)`` This signal is emitted with the newly connected "
"peer's ID on each other peer, and on the new peer multiple times, once with "
"each other peer's ID."
msgstr ""

msgid ""
"``peer_disconnected(id: int)`` This signal is emitted on every remaining "
"peer when one disconnects."
msgstr ""

#, fuzzy
msgid "The rest are only emitted on clients:"
msgstr "次の注意事項があります:"

#, fuzzy
msgid "``connected_to_server()``"
msgstr "``connected_to_server``"

#, fuzzy
msgid "``connection_failed()``"
msgstr "``connection_failed``"

#, fuzzy
msgid "``server_disconnected()``"
msgstr "``server_disconnected``"

msgid "To get the unique ID of the associated peer:"
msgstr ""

#, fuzzy
msgid "To check whether the peer is server or client:"
msgstr ""
"ツリーがサーバーまたはクライアントとして初期化されているかどうかを確認します:"

#, fuzzy
msgid "Remote procedure calls"
msgstr "手続き型テクスチャの作成。"

msgid ""
"Remote procedure calls, or RPCs, are functions that can be called on other "
"peers. To create one, use the ``@rpc`` annotation before a function "
"definition. To call an RPC, use ``Callable``'s method ``rpc()`` to call in "
"every peer, or ``rpc_id()`` to call in a specific peer."
msgstr ""

msgid "RPCs will not serialize objects or callables."
msgstr ""

msgid ""
"For a remote call to be successful, the sending and receiving node need to "
"have the same ``NodePath``, which means they must have the same name. When "
"using ``add_child()`` for nodes which are expected to use RPCs, set the "
"argument ``force_readable_name`` to ``true``."
msgstr ""

msgid ""
"If a function is annotated with ``@rpc`` on the client script (resp. server "
"script), then this function must also be declared on the server script "
"(resp. client script). Both RPCs must have the same signature which is "
"evaluated with a checksum of **all RPCs**. All RPCs in a script are checked "
"at once, and all RPCs must be declared on both the client scripts and the "
"server scripts, **even functions that are currently not in use**."
msgstr ""

msgid ""
"The signature of the RPC includes the ``@rpc()`` declaration, the function, "
"return type, AND the nodepath. If an RPC resides in a script attached to ``/"
"root/Main/Node1``, then it must reside in precisely the same path and node "
"on both the client script and the server script. Function arguments "
"(example: ``func sendstuff():`` and ``func sendstuff(arg1, arg2):`` **will "
"pass** signature matching)."
msgstr ""

msgid ""
"If these conditions are not met (if all RPCs do not pass signature "
"matching), the script may print an error or cause unwanted behavior. The "
"error message may be unrelated to the RPC function you are currently "
"building and testing."
msgstr ""

msgid ""
"See further explanation and troubleshooting on `this post <https://github."
"com/godotengine/godot/issues/57869#issuecomment-1034215138>`__."
msgstr ""

msgid ""
"The annotation can take a number of arguments, which have default values. "
"``@rpc`` is equivalent to:"
msgstr ""

#, fuzzy
msgid "The parameters and their functions are as follows:"
msgstr "最も一般的な使用例は次のとおりです:"

#, fuzzy
msgid "``mode``:"
msgstr "\\ ``node``"

msgid ""
"``\"authority\"``: Only the multiplayer authority (the server) can call "
"remotely."
msgstr ""

msgid ""
"``\"any_peer\"``: Clients are allowed to call remotely. Useful for "
"transferring user input."
msgstr ""

#, fuzzy
msgid "``sync``:"
msgstr "``remotesync``"

msgid "``\"call_remote\"``: The function will not be called on the local peer."
msgstr ""

msgid ""
"``\"call_local\"``: The function can be called on the local peer. Useful "
"when the server is also a player."
msgstr ""

#, fuzzy
msgid "``transfer_mode``:"
msgstr "\\ ``transform``"

msgid ""
"``\"unreliable\"`` Packets are not acknowledged, can be lost, and can arrive "
"at any order."
msgstr ""

msgid ""
"``\"unreliable_ordered\"`` Packets are received in the order they were sent "
"in. This is achieved by ignoring packets that arrive later if another that "
"was sent after them has already been received. Can cause packet loss if used "
"incorrectly."
msgstr ""

msgid ""
"``\"reliable\"`` Resend attempts are sent until packets are acknowledged, "
"and their order is preserved. Has a significant performance penalty."
msgstr ""

msgid "``transfer_channel`` is the channel index."
msgstr ""

msgid ""
"The first 3 can be passed in any order, but ``transfer_channel`` must always "
"be last."
msgstr ""

msgid ""
"The function ``multiplayer.get_remote_sender_id()`` can be used to get the "
"unique id of an rpc sender, when used within the function called by rpc."
msgstr ""

#, fuzzy
msgid "Channels"
msgstr "\\ iChanneli"

msgid ""
"Modern networking protocols support channels, which are separate connections "
"within the connection. This allows for multiple streams of packets that do "
"not interfere with each other."
msgstr ""

msgid ""
"For example, game chat related messages and some of the core gameplay "
"messages should all be sent reliably, but a gameplay message should not wait "
"for a chat message to be acknowledged. This can be achieved by using "
"different channels."
msgstr ""

msgid ""
"Channels are also useful when used with the unreliable ordered transfer "
"mode. Sending packets of variable size with this transfer mode can cause "
"packet loss, since packets which are slower to arrive are ignored. "
"Separating them into multiple streams of homogeneous packets by using "
"channels allows ordered transfer with little packet loss, and without the "
"latency penalty caused by reliable mode."
msgstr ""

msgid ""
"The default channel with index 0 is actually three different channels - one "
"for each transfer mode."
msgstr ""

#, fuzzy
msgid "Example lobby implementation"
msgstr "実装"

msgid ""
"This is an example lobby that can handle peers joining and leaving, notify "
"UI scenes through signals, and start the game after all clients have loaded "
"the game scene."
msgstr ""

msgid ""
"The game scene's root node should be named Game. In the script attached to "
"it:"
msgstr ""

#, fuzzy
msgid "Exporting for dedicated servers"
msgstr "Webのエクスポート"

msgid ""
"Once you've made a multiplayer game, you may want to export it to run it on "
"a dedicated server with no GPU available. See :ref:"
"`doc_exporting_for_dedicated_servers` for more information."
msgstr ""

msgid ""
"The code samples on this page aren't designed to run on a dedicated server. "
"You'll have to modify them so the server isn't considered to be a player. "
"You'll also have to modify the game starting mechanism so that the first "
"player who joins can start the game."
msgstr ""

msgid "Translation status"
msgstr "翻訳ステータス"
