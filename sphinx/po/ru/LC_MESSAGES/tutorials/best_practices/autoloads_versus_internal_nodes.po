# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Autoloads versus regular nodes"
msgstr "Автозагрузки по сравнению с обычными узлами"

msgid ""
"Godot offers a feature to automatically load nodes at the root of your "
"project, allowing you to access them globally, that can fulfill the role of "
"a Singleton: :ref:`doc_singletons_autoload`. These autoloaded nodes are not "
"freed when you change the scene from code with :ref:`SceneTree."
"change_scene_to_file <class_SceneTree_method_change_scene_to_file>`."
msgstr ""
"Godot предлагает функцию автоматической загрузки узлов в корень проекта, "
"позволяющую получить к ним глобальный доступ, которые могут выполнять роль "
"синглтонов: :ref:`doc_singletons_autoload`. Эти узлы автозагрузки не "
"освобождаются при изменении сцены из кода с помощью :ref:`SceneTree."
"change_scene_to_file <class_SceneTree_method_change_scene_to_file>`."

msgid ""
"In this guide, you will learn when to use the Autoload feature, and "
"techniques you can use to avoid it."
msgstr ""
"В этом руководстве вы узнаете, когда использовать функцию автозагрузки, и "
"какие приемы можно использовать, чтобы избежать её."

msgid "The cutting audio issue"
msgstr "Проблема с прерыванием звука"

msgid ""
"Other engines can encourage the use of creating manager classes, singletons "
"that organize a lot of functionality into a globally accessible object. "
"Godot offers many ways to avoid global state thanks to the node tree and "
"signals."
msgstr ""
"Другие движки могут стимулировать использование создания классов менеджера, "
"синглтонов, которые организуют множество функциональных возможностей в "
"глобально доступный объект. Godot предлагает множество способов избежать "
"глобального состояния благодаря дереву узлов и сигналам."

msgid ""
"For example, let's say we are building a platformer and want to collect "
"coins that play a sound effect. There's a node for that: the :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. But if we call the "
"``AudioStreamPlayer`` while it is already playing a sound, the new sound "
"interrupts the first."
msgstr ""
"Например, предположим, что мы создаём платформер и хотим собирать монеты, "
"которые воспроизводят звуковой эффект. Для этого есть узел :ref:"
"`AudioStreamPlayer <class_AudioStreamPlayer>`. Но если мы вызываем "
"AudioStreamPlayer, когда он уже воспроизводит звук, новый звук прерывает "
"первый."

msgid ""
"A solution is to code a global, autoloaded sound manager class. It generates "
"a pool of ``AudioStreamPlayer`` nodes that cycle through as each new request "
"for sound effects comes in. Say we call that class ``Sound``, you can use it "
"from anywhere in your project by calling ``Sound.play(\"coin_pickup."
"ogg\")``. This solves the problem in the short term but causes more problems:"
msgstr ""
"Решением является создание глобального, автозагружаемого класса менеджера "
"звуковых эффектов. Он генерирует пул узлов ``AudioStreamPlayer``, которые "
"циклически перебираются при каждом новом запросе на звуковые эффекты. "
"Назовем этот класс ``Sound``, и вы сможете использовать его из любого места "
"проекта, вызвав ``Sound.play(\"coin_pickup.ogg\")``. Это решает проблему в "
"краткосрочной перспективе, но порождает дополнительные проблемы:"

msgid ""
"**Global state**: one object is now responsible for all objects' data. If "
"the ``Sound`` class has errors or doesn't have an AudioStreamPlayer "
"available, all the nodes calling it can break."
msgstr ""
"**Глобальное состояние**: теперь один объект отвечает за данные всех "
"объектов. Если в классе ``Sound`` есть ошибки или отсутствует "
"AudioStreamPlayer, то все вызывающие его узлы могут сломаться."

msgid ""
"**Global access**: now that any object can call ``Sound.play(sound_path)`` "
"from anywhere, there's no longer an easy way to find the source of a bug."
msgstr ""
"**Глобальный доступ**: теперь, когда любой объект может вызвать ``Sound."
"play(sound_path)`` откуда угодно, более нет простого способа найти источник "
"ошибки."

msgid ""
"**Global resource allocation**: with a pool of ``AudioStreamPlayer`` nodes "
"stored from the start, you can either have too few and face bugs, or too "
"many and use more memory than you need."
msgstr ""
"**Глобальное распределение ресурсов**: с пулом узлов ``AudioStreamPlayer``, "
"хранящихся с самого начала, вы можете либо иметь слишком мало и сталкиваются "
"с ошибками, или слишком много и использовать больше памяти, чем вам нужно."

msgid ""
"About global access, the problem is that any code anywhere could pass wrong "
"data to the ``Sound`` autoload in our example. As a result, the domain to "
"explore to fix the bug spans the entire project."
msgstr ""
"Что касается глобального доступа, то проблема заключается в том, что любой "
"код в любом месте может передать неверные данные в автозагрузку ``Sound`` в "
"нашем примере. В результате область, которую необходимо исследовать для "
"устранения ошибки, охватывает весь проект."

msgid ""
"When you keep code inside a scene, only one or two scripts may be involved "
"in audio."
msgstr ""
"Когда вы храните код внутри сцены, только один или два скрипта могут быть "
"задействованы в аудио."

msgid ""
"Contrast this with each scene keeping as many ``AudioStreamPlayer`` nodes as "
"it needs within itself and all these problems go away:"
msgstr ""
"Сравните это с тем, что каждая сцена содержит столько узлов "
"``AudioStreamPlayer``, сколько нужно внутри себя, и все эти проблемы "
"исчезнут:"

msgid ""
"Each scene manages its own state information. If there is a problem with the "
"data, it will only cause issues in that one scene."
msgstr ""
"Каждая сцена управляет собственной информацией о состоянии. Если есть "
"проблема с данными, то она будет вызывать проблемы только в этой одной сцене."

msgid ""
"Each scene accesses only its own nodes. Now, if there is a bug, it's easy to "
"find which node is at fault."
msgstr ""
"Каждая сцена получает доступ только к своим узлам. Теперь, если есть ошибка, "
"легко найти, какой из узлов виноват."

msgid "Each scene allocates exactly the amount of resources it needs."
msgstr ""
"Каждая сцена выделяет именно то количество ресурсов, которое ей необходимо."

msgid "Managing shared functionality or data"
msgstr "Управление общей функциональностью или данными"

msgid ""
"Another reason to use an Autoload can be that you want to reuse the same "
"method or data across many scenes."
msgstr ""
"Другой причиной использования Autoload может быть то, что вы хотите повторно "
"использовать один и тот же метод или данные во многих сценах."

msgid ""
"In the case of functions, you can create a new type of ``Node`` that "
"provides that feature for an individual scene using the :ref:`class_name "
"<doc_gdscript_basics_class_name>` keyword in GDScript."
msgstr ""
"В случае с функциями можно создать новый тип ``Node``, который обеспечивает "
"эту функцию для отдельной сцены, используя ключевое слово :ref:`class_name "
"<doc_gdscript_basics_class_name>` в GDScript."

msgid "When it comes to data, you can either:"
msgstr "Когда дело доходит до данных, вы можете:"

msgid ""
"Create a new type of :ref:`Resource <class_Resource>` to share the data."
msgstr ""
"Создайте новый тип :ref:`Resource <class_Resource>` для совместного "
"использования данных."

msgid ""
"Store the data in an object to which each node has access, for example using "
"the ``owner`` property to access the scene's root node."
msgstr ""
"Храните данные в объекте, к которому имеет доступ каждый узел, например, "
"используя свойство ``owner`` для доступа к корневому узлу сцены."

msgid "When you should use an Autoload"
msgstr "Когда вы должны использовать Autoload (автозагрузку)"

msgid ""
"GDScript supports the creation of ``static`` functions using ``static "
"func``. When combined with ``class_name``, this makes it possible to create "
"libraries of helper functions without having to create an instance to call "
"them. The limitation of static functions is that they can't reference member "
"variables, non-static functions or ``self``."
msgstr ""
"GDScript поддерживает создание ``статических`` функций с помощью ``static "
"func``. В сочетании с ``class_name`` это позволяет создавать библиотеки "
"вспомогательных функций без необходимости создавать экземпляр для их вызова. "
"Ограничением статических функций является то, что они не могут ссылаться на "
"переменные-члены, нестатические функции или ``self``."

msgid ""
"Since Godot 4.1, GDScript also supports ``static`` variables using ``static "
"var``. This means you can now share a variables across instances of a class "
"without having to create a separate autoload."
msgstr ""
"Начиная с версии Godot 4.1, GDScript также поддерживает ``статические`` "
"переменные с помощью ``static var``. Это означает, что теперь можно "
"совместно использовать переменные для всех экземпляров класса без "
"необходимости создавать отдельную автозагрузку."

msgid ""
"Still, autoloaded nodes can simplify your code for systems with a wide "
"scope. If the autoload is managing its own information and not invading the "
"data of other objects, then it's a great way to create systems that handle "
"broad-scoped tasks. For example, a quest or a dialogue system."
msgstr ""
"Тем не менее, узлы автозагрузки могут упростить код для систем с широкой "
"областью применения. Если автозагрузка управляет своей собственной "
"информацией и не вторгается в данные других объектов, то это отличный способ "
"создания систем, решающих широкомасштабные задачи. Например, квест или "
"диалоговая система."

msgid ""
"An autoload is *not* necessarily a singleton. Nothing prevents you from "
"instantiating copies of an autoloaded node. An autoload is only a tool that "
"makes a node load automatically as a child of the root of your scene tree, "
"regardless of your game's node structure or which scene you run, e.g. by "
"pressing the :kbd:`F6` key."
msgstr ""
"Автозагрузка *не* обязательно является синглтоном. Ничто не мешает вам "
"инстанцировать копии узла, загружаемого в автозагрузку. Автозагрузка - это "
"только инструмент, который заставляет узел автоматически загружаться в "
"качестве дочернего узла корня дерева сцены, независимо от структуры узлов "
"игры или запущенной сцены, например, при нажатии клавиши :kbd:`F6`."

msgid ""
"As a result, you can get the autoloaded node, for example an autoload called "
"``Sound``, by calling ``get_node(\"/root/Sound\")``."
msgstr ""
"В результате вы можете получить узел автозагрузки, например, автозагрузку с "
"именем ``Sound``, можно, вызвав ``get_node(\"/root/Sound\")``."

msgid "Translation status"
msgstr "Статус перевода"
