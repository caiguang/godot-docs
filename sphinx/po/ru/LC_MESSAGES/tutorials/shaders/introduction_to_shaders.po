# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to shaders"
msgstr "Введение в шейдеры"

msgid ""
"This page explains what shaders are and will give you an overview of how "
"they work in Godot. For a detailed reference of the engine's shading "
"language, see :ref:`doc_shading_language`."
msgstr ""
"Эта страница объясняет, что такое шейдеры, и даёт представление о том, как "
"они работают в Godot. Подробную информацию о языке шейдеров движка можно "
"найти в :ref:`doc_shading_language`."

msgid ""
"Shaders are a special kind of program that runs on Graphics Processing Units "
"(GPUs). They were initially used to shade 3D scenes but can nowadays do much "
"more. You can use them to control how the engine draws geometry and pixels "
"on the screen, allowing you to achieve all sorts of effects."
msgstr ""
"Шейдеры - это особый вид программ, которые работают на графических "
"процессорах (GPU). Изначально они использовались для просчёта 3D-сцен, но "
"сегодня могут делать гораздо больше. С их помощью можно управлять тем, как "
"движок отрисовывает геометрию и пиксели на экране, что позволяет добиться "
"самых разных эффектов."

msgid ""
"Modern rendering engines like Godot draw everything with shaders: graphics "
"cards can run thousands of instructions in parallel, leading to incredible "
"rendering speed."
msgstr ""
"Современные движки рендеринга, такие как Godot, рисуют всё с помощью "
"шейдеров: видеокарты могут выполнять тысячи инструкций параллельно, что "
"приводит к невероятной скорости рендеринга."

msgid ""
"Because of their parallel nature, though, shaders don't process information "
"the way a typical program does. Shader code runs on each vertex or pixel in "
"isolation. You cannot store data between frames either. As a result, when "
"working with shaders, you need to code and think differently from other "
"programming languages."
msgstr ""
"Однако из-за своей параллельной природы шейдеры обрабатывают информацию не "
"так, как обычные программы. Код шейдера работает с каждой вершиной или "
"пикселем в отдельности. Вы также не можете хранить данные между кадрами. В "
"результате при работе с шейдерами вам придется писать код и думать иначе, "
"чем в других языках программирования."

msgid ""
"Suppose you want to update all the pixels in a texture to a given color. In "
"GDScript, your code would use ``for`` loops::"
msgstr ""
"Предположим, вы хотите обновить все пиксели в текстуре до заданного цвета. "
"На языке GDScript в коде будут использоваться циклы ``for``::"

msgid ""
"Your code is already part of a loop in a shader, so the corresponding code "
"would look like this."
msgstr ""
"Ваш код уже является частью цикла в шейдере, поэтому соответствующий код "
"будет выглядеть следующим образом."

msgid ""
"The graphics card calls the ``fragment()`` function once or more for each "
"pixel it has to draw. More on that below."
msgstr ""
"Видеокарта вызывает функцию ``fragment()`` один или несколько раз для "
"каждого пикселя, который она должна нарисовать. Подробнее об этом ниже."

msgid "Shaders in Godot"
msgstr "Шейдеры в Godot"

msgid ""
"Godot provides a shading language based on the popular OpenGL Shading "
"Language (GLSL) but simplified. The engine handles some of the lower-level "
"initialization work for you, making it easier to write complex shaders."
msgstr ""
"Godot предоставляет язык шейдеров, основанный на популярном OpenGL Shading "
"Language (GLSL), но упрощённый. Движок обрабатывает за вас часть работы по "
"инициализации нижнего уровня, что упрощает написание сложных шейдеров."

msgid ""
"In Godot, shaders are made up of main functions called \"processor "
"functions\". Processor functions are the entry point for your shader into "
"the program. There are seven different processor functions."
msgstr ""
"В Godot шейдеры состоят из основных функций, называемых \"процессорными "
"функциями\". Процессорные функции - это точка входа шейдера в программу. "
"Существует семь различных функций процессора."

msgid ""
"The ``vertex()`` function runs over all the vertices in the mesh and sets "
"their positions and some other per-vertex variables. Used in :ref:"
"`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial shaders "
"<doc_spatial_shader>`."
msgstr ""
"Функция ``vertex()`` пробегает по всем вершинам сетки и задаёт их положение "
"и некоторые другие переменные для каждой вершины. Используется в шейдерах :"
"ref:`canvas_item <doc_canvas_item_shader>` и :ref:`spatial shaders "
"<doc_spatial_shader>`."

msgid ""
"The ``fragment()`` function runs for every pixel covered by the mesh. It "
"uses values output by the ``vertex()`` function, interpolated between the "
"vertices. Used in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :"
"ref:`spatial shaders <doc_spatial_shader>`."
msgstr ""
"Функция ``fragment()`` выполняется для каждого пикселя, покрытого сеткой. "
"Она использует значения, выводимые функцией ``vertex()``, интерполированные "
"между вершинами. Используется в шейдерах :ref:`canvas_item shader "
"<doc_canvas_item_shader>` и :ref:`spatial shader <doc_spatial_shader>`."

msgid ""
"The ``light()`` function runs for every pixel and for every light. It takes "
"variables from the ``fragment()`` function and from its previous runs. Used "
"in :ref:`canvas_item shaders <doc_canvas_item_shader>` and :ref:`spatial "
"shaders <doc_spatial_shader>`."
msgstr ""
"Функция ``light()`` выполняется для каждого пикселя и для каждого освещения. "
"Она берёт переменные из функции ``fragment()`` и из предыдущих запусков. "
"Используется в шейдерах :ref:`canvas_item <doc_canvas_item_shader>` и :ref:"
"`spatial shaders <doc_spatial_shader>`."

msgid ""
"The ``start()`` function runs for every particle in a particle system once "
"when the particle is first spawned. Used in :ref:`particles shaders "
"<doc_particle_shader>`."
msgstr ""
"Функция ``start()`` запускается для каждой частицы в системе частиц один "
"раз, когда частица впервые порождается. Используется в шейдерах :ref:"
"`particles shader <doc_particle_shader>`."

msgid ""
"The ``process()`` function runs for every particle in a particle system for "
"each frame. Used in :ref:`particles shaders <doc_particle_shader>`."
msgstr ""
"Функция ``process()`` выполняется для каждой частицы в системе частиц для "
"каждого кадра. Используется в шейдерах :ref:`particles shader "
"<doc_particle_shader>`."

msgid ""
"The ``sky()`` function runs for every pixel in the radiance cubemap when the "
"radiance cubemap needs to be updated, and for every pixel on the current "
"screen. Used in :ref:`sky shaders <doc_sky_shader>`."
msgstr ""
"Функция ``sky()`` запускается для каждого пикселя в кубической карте сияния, "
"когда необходимо обновить кубическую карту сияния, и для каждого пикселя на "
"текущем экране. Используется в :ref:`sky shaders <doc_sky_shader>`."

msgid ""
"The ``fog()`` function runs for every froxel in the volumetric fog froxel "
"buffer that intersects with the :ref:`FogVolume <class_FogVolume>`. Used by :"
"ref:`fog shaders <doc_fog_shader>`."
msgstr ""
"Функция ``fog()`` выполняется для каждого фрокселя в объемном буфере "
"фрокселей тумана, который пересекается с :ref:`FogVolume <class_FogVolume>`. "
"Используется шейдерами :ref:`fog shader <doc_fog_shader>`."

msgid ""
"The ``light()`` function won't run if the ``vertex_lighting`` render mode is "
"enabled, or if **Rendering > Quality > Shading > Force Vertex Shading** is "
"enabled in the Project Settings. It's enabled by default on mobile platforms."
msgstr ""
"Функция ``light()`` не будет выполняться, если включен режим рендеринга "
"``vertex_lighting`` или если в настройках проекта включено **Rendering > "
"Quality > Shading > Force Vertex Shading**. На мобильных платформах он "
"включен по умолчанию."

msgid ""
"Godot also exposes an API for users to write totally custom GLSL shaders. "
"For more information see :ref:`doc_compute_shaders`."
msgstr ""
"Godot также предоставляет пользователям API для написания полностью "
"собственных GLSL-шейдеров. Более подробную информацию можно найти в :ref:"
"`doc_compute_shaders`."

msgid "Shader types"
msgstr "Типы шейдеров"

msgid ""
"Instead of supplying a general-purpose configuration for all uses (2D, 3D, "
"particles, sky, fog), you must specify the type of shader you're writing. "
"Different types support different render modes, built-in variables, and "
"processing functions."
msgstr ""
"Вместо того, чтобы предоставлять конфигурацию общего назначения для всех "
"случаев использования (2D, 3D, частицы, небо, туман), вы должны указать тип "
"шейдера, который вы пишете. Разные типы поддерживают различные режимы "
"рендеринга, встроенные переменные и функции обработки."

msgid ""
"In Godot, all shaders need to specify their type in the first line, like so:"
msgstr ""
"В Godot все шейдеры должны указывать свой тип в первой строке, например, так:"

msgid "Here are the available types:"
msgstr "Ниже представлены доступные типы:"

msgid ":ref:`spatial <doc_spatial_shader>` for 3D rendering."
msgstr ":ref:`spatial <doc_spatial_shader>` для 3D визуализации."

msgid ":ref:`canvas_item <doc_canvas_item_shader>` for 2D rendering."
msgstr ":ref:`canvas_item <doc_canvas_item_shader>` для 2D визуализации."

msgid ":ref:`particles <doc_particle_shader>` for particle systems."
msgstr ":ref:`particles <doc_particle_shader>` для системы частиц."

msgid ":ref:`sky <doc_sky_shader>` to render :ref:`Skies <class_Sky>`."
msgstr ":ref:`sky <doc_sky_shader>` для визуализации :ref:`Неба <class_Sky>`."

msgid ""
":ref:`fog <doc_fog_shader>` to render :ref:`FogVolumes <class_FogVolume>`"
msgstr ""
":ref:`fog <doc_fog_shader>` для визуализации :ref:`Объёмного тумана "
"<class_FogVolume>`"

msgid "Render modes"
msgstr "Режимы визуализации"

msgid ""
"Shaders have optional render modes you can specify on the second line, after "
"the shader type, like so:"
msgstr ""
"Шейдеры имеют дополнительные режимы рендеринга, которые можно указать во "
"второй строке после типа шейдера, например, так:"

msgid ""
"Render modes alter the way Godot applies the shader. For example, the "
"``unshaded`` mode makes the engine skip the built-in light processor "
"function."
msgstr ""
"Режимы рендеринга изменяют способ применения шейдера Godot. Например, режим "
"``unshaded`` заставляет движок пропустить встроенную функцию обработки света."

msgid ""
"Each shader type has different render modes. See the reference for each "
"shader type for a complete list of render modes."
msgstr ""
"Каждый тип шейдера имеет различные режимы рендеринга. Полный список режимов "
"рендеринга см. в справке по каждому типу шейдера."

msgid "Vertex processor"
msgstr "Вершинный процессор"

msgid ""
"The ``vertex()`` processing function is called once for every vertex in "
"``spatial`` and ``canvas_item`` shaders. For ``particles`` shaders, it is "
"called once for every particle."
msgstr ""
"Функция обработки ``vertex()`` вызывается один раз для каждой вершины в "
"шейдерах ``spatial`` и ``canvas_item``. В шейдерах ``particles`` она "
"вызывается один раз для каждой частицы."

msgid ""
"Each vertex in your world's geometry has properties like a position and "
"color. The function modifies those values and passes them to the fragment "
"function. You can also use it to send extra data to the fragment function "
"using varyings."
msgstr ""
"Каждая вершина в геометрии вашего мира имеет такие свойства, как положение и "
"цвет. Функция изменяет эти значения и передает их в функцию fragment. Вы "
"также можете использовать её для передачи дополнительных данных в функцию "
"fragment с помощью varying."

msgid ""
"By default, Godot transforms your vertex information for you, which is "
"necessary to project geometry onto the screen. You can use render modes to "
"transform the data yourself; see the :ref:`Spatial shader doc "
"<doc_spatial_shader>` for an example."
msgstr ""
"По умолчанию Godot преобразует для вас информацию о вершинах, которая "
"необходима для проецирования геометрии на экран. Вы можете использовать "
"режимы рендеринга для самостоятельного преобразования данных; пример "
"смотрите в :ref:`Шейдер Spatial doc <doc_spatial_shader>`."

msgid "Fragment processor"
msgstr "Фрагментный процессор"

msgid ""
"The ``fragment()`` processing function is used to set up the Godot material "
"parameters per pixel. This code runs on every visible pixel the object or "
"primitive draws. It is only available in ``spatial``, ``canvas_item``, and "
"``sky`` shaders."
msgstr ""
"Функция обработки ``fragment()`` используется для установки параметров "
"материала Godot на каждый пиксель. Этот код запускается на каждом видимом "
"пикселе, который рисует объект или примитив. Он доступен только в шейдерах "
"``spatial``, ``canvas_item`` и ``sky``."

msgid ""
"The standard use of the fragment function is to set up material properties "
"used to calculate lighting. For example, you would set values for "
"``ROUGHNESS``, ``RIM``, or ``TRANSMISSION``, which would tell the light "
"function how the lights respond to that fragment. This makes it possible to "
"control a complex shading pipeline without the user having to write much "
"code. If you don't need this built-in functionality, you can ignore it and "
"write your own light processing function, and Godot will optimize it away. "
"For example, if you do not write a value to ``RIM``, Godot will not "
"calculate rim lighting. During compilation, Godot checks to see if ``RIM`` "
"is used; if not, it cuts all the corresponding code out. Therefore, you will "
"not waste calculations on the effects that you do not use."
msgstr ""
"Стандартным использованием фрагментной функции является настройка свойств "
"материала, которые будут использоваться для расчёта освещения. Например, вы "
"должны установить значения для ``ROUGHNESS`` (шероховатости поверхности), "
"``RIM`` (контура света) или ``TRANSMISSION`` (пропускания света), которые "
"сообщат световой функции, как свет реагирует на этот фрагмент. Это позволяет "
"контролировать сложную последовательность процессов шейдинга без "
"необходимости написания пользователем большого количества кода. Если вам не "
"нужен этот встроенный функционал, вы можете игнорировать его и написать свою "
"собственную функцию обработки света, и Godot её оптимизирует. Например, если "
"вы не укажете значение для ``RIM``, Godot не будет рассчитывать контурное "
"освещение. Во время компиляции Godot проверяет, используется ли ``RIM``; "
"если нет, то он вырежет весь соответствующий код. Таким образом, вы не "
"будете тратить вычисления на эффекты, которые не используете."

msgid "Light processor"
msgstr "Световой процессор"

msgid ""
"The ``light()`` processor runs per pixel too, and it runs once for every "
"light that affects the object. It does not run if no lights affect the "
"object. It exists as a function called inside the ``fragment()`` processor "
"and typically operates on the material properties setup inside the "
"``fragment()`` function."
msgstr ""
"Процессор ``light()`` также работает попиксельно, и он запускается один раз "
"для каждого источника освещения, который влияет на объект. Он не "
"запускается, если ни один источник освещения не влияет на объект. Он "
"существует как функция, вызываемая внутри процессора ``fragment()`` и обычно "
"оперирует свойствами материала, заданными в функции ``fragment()``."

msgid ""
"The ``light()`` processor works differently in 2D than it does in 3D; for a "
"description of how it works in each, see their documentation, :ref:"
"`CanvasItem shaders <doc_canvas_item_shader>` and :ref:`Spatial shaders "
"<doc_spatial_shader>`, respectively."
msgstr ""
"Процессор ``light()`` работает в 2D иначе, чем в 3D; для описания того, как "
"он работает в каждом из них, смотрите их документацию, :ref:`Шейдеры "
"CanvasItem <doc_canvas_item_shader>` и :ref:`Шейдеры Spatial "
"<doc_spatial_shader>`, соответственно."

msgid "Translation status"
msgstr "Статус перевода"
