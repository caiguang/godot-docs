# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Converting GLSL to Godot shaders"
msgstr "Преобразование GLSL в шейдеры Godot"

msgid ""
"This document explains the differences between Godot's shading language and "
"GLSL and gives practical advice on how to migrate shaders from other "
"sources, such as Shadertoy and The Book of Shaders, into Godot shaders."
msgstr ""
"В этом документе объясняются различия между языком шейдеров Godot и GLSL, и "
"даются практические советы по переносу шейдеров из других источников, таких "
"как Shadertoy и The Book of Shaders, в шейдеры Godot."

msgid ""
"For detailed information on Godot's shading language, please refer to the :"
"ref:`Shading Language <doc_shading_language>` reference."
msgstr ""
"Для получения подробной информации о языке шейдеров Godot, пожалуйста, "
"обратитесь к ссылке :ref:`Shading Language <doc_shading_language>`."

msgid "GLSL"
msgstr ""

msgid ""
"Godot uses a shading language based on GLSL with the addition of a few "
"quality-of-life features. Accordingly, most features available in GLSL are "
"available in Godot's shading language."
msgstr ""
"В Godot используется язык шейдеров, основанный на GLSL, с добавлением "
"нескольких функций, отвечающих за качество жизни. Соответственно, "
"большинство функций, доступных в GLSL, доступны и в языке шейдеров Godot."

msgid "Shader programs"
msgstr "Шейдерные программы"

msgid ""
"In GLSL, each shader uses a separate program. You have one program for the "
"vertex shader and one for the fragment shader. In Godot, you have a single "
"shader that contains a ``vertex`` and/or a ``fragment`` function. If you "
"only choose to write one, Godot will supply the other."
msgstr ""
"В GLSL каждый шейдер использует отдельную программу. У вас есть одна "
"программа для вершинного шейдера и одна для фрагментного шейдера. В Godot у "
"вас есть один шейдер, который содержит функцию ``vertex`` и/или "
"``fragment``. Если вы решили написать только одну функцию, Godot предоставит "
"другую."

msgid ""
"Godot allows uniform variables and functions to be shared by defining the "
"fragment and vertex shaders in one file. In GLSL, the vertex and fragment "
"programs cannot share variables except when varyings are used."
msgstr ""
"Godot позволяет совместно использовать унифицированные переменные и функции, "
"определяя фрагментный и вершинный шейдеры в одном файле. В GLSL вершинные и "
"фрагментные программы не могут совместно использовать переменные, за "
"исключением случаев, когда используются вариации."

msgid "Vertex attributes"
msgstr "Атрибуты вершин"

msgid ""
"In GLSL, you can pass in per-vertex information using attributes and have "
"the flexibility to pass in as much or as little as you want. In Godot, you "
"have a set number of input attributes, including ``VERTEX`` (position), "
"``COLOR``, ``UV``, ``UV2``, ``NORMAL``. Each shaders' page in the shader "
"reference section of the documentation comes with a complete list of its "
"vertex attributes."
msgstr ""
"В GLSL вы можете передавать информацию о каждой вершине с помощью атрибутов "
"и иметь возможность передавать её как можно больше или меньше. В Godot у вас "
"есть определенное количество входных атрибутов, включая ``VERTEX`` "
"(позиция), ``COLOR``, ``UV``, ``UV2``, ``NORMAL``. На странице каждого "
"шейдера в разделе документации \"Ссылки на шейдеры\" приводится полный "
"список вершинных атрибутов."

msgid "gl_Position"
msgstr "gl_Position"

msgid ""
"``gl_Position`` receives the final position of a vertex specified in the "
"vertex shader. It is specified by the user in clip space. Typically, in "
"GLSL, the model space vertex position is passed in using a vertex attribute "
"called ``position`` and you handle the conversion from model space to clip "
"space manually."
msgstr ""
"``gl_Position`` получает конечную позицию вершины, указанной в вершинном "
"шейдере. Она задаётся пользователем в пространстве клипа. Обычно в GLSL "
"положение вершины в пространстве модели передается с помощью атрибута "
"вершины под названием ``position``, а преобразование из пространства модели "
"в пространство клипа выполняется вручную."

msgid ""
"In Godot, ``VERTEX`` specifies the vertex position in model space at the "
"beginning of the ``vertex`` function. Godot also handles the final "
"conversion to clip space after the user-defined ``vertex`` function is run. "
"If you want to skip the conversion from model to view space, you can set the "
"``render_mode`` to ``skip_vertex_transform``. If you want to skip all "
"transforms, set ``render_mode`` to ``skip_vertex_transform`` and set the "
"``PROJECTION_MATRIX`` to ``mat4(1.0)`` in order to nullify the final "
"transform from view space to clip space."
msgstr ""
"В Godot, ``VERTEX`` определяет положение вершины в пространстве модели в "
"начале функции ``vertex``. Godot также обрабатывает окончательное "
"преобразование в пространство клипа после выполнения пользовательской "
"функции ``vertex``. Если вы хотите пропустить преобразование из пространства "
"модели в пространство вида, вы можете установить ``render_mode`` на "
"``skip_vertex_transform``. Если вы хотите пропустить все преобразования, "
"установите ``render_mode`` в ``skip_vertex_transform`` и установите "
"``PROJECTION_MATRIX`` в ``mat4(1.0)``, чтобы обнулить окончательное "
"преобразование из пространства вида в пространство клипа."

msgid "Varyings"
msgstr "Varуings"

msgid ""
"Varyings are a type of variable that can be passed from the vertex shader to "
"the fragment shader. In modern GLSL (3.0 and up), varyings are defined with "
"the ``in`` and ``out`` keywords. A variable going out of the vertex shader "
"is defined with ``out`` in the vertex shader and ``in`` inside the fragment "
"shader."
msgstr ""
"Varyings - это тип переменных, которые можно передавать из вершинного "
"шейдера во фрагментный шейдер. В современном GLSL (3.0 и выше) переменные "
"определяются с помощью ключевых слов ``in`` и ``out``. Переменная, выходящая "
"из вершинного шейдера, определяется с помощью ``out`` в вершинном шейдере и "
"``in`` во фрагментном шейдере."

msgid "Main"
msgstr "Main"

msgid ""
"In GLSL, each shader program looks like a self-contained C-style program. "
"Accordingly, the main entry point is ``main``. If you are copying a vertex "
"shader, rename ``main`` to ``vertex`` and if you are copying a fragment "
"shader, rename ``main`` to ``fragment``."
msgstr ""
"В GLSL каждая шейдерная программа выглядит как самодостаточная программа в "
"стиле языка Си. Соответственно, главной точкой входа является ``main``. Если "
"вы копируете вершинный шейдер, переименуйте ``main`` в ``vertex``, а если вы "
"копируете фрагментный шейдер, переименуйте ``main`` в ``fragment``."

msgid "Macros"
msgstr "Макросы"

msgid ""
"The :ref:`Godot shader preprocessor<doc_shader_preprocessor>` supports the "
"following macros:"
msgstr ""

msgid "``#define`` / ``#undef``"
msgstr ""

msgid ""
"``#if``, ``#elif``, ``#else``, ``#endif``, ``defined()``, ``#ifdef``, "
"``#ifndef``"
msgstr ""

msgid ""
"``#include`` (only ``.gdshaderinc`` files and with a maximum depth of 25)"
msgstr ""

msgid ""
"``#pragma disable_preprocessor``, which disables preprocessing for the rest "
"of the file"
msgstr ""

msgid "Variables"
msgstr "Переменные"

msgid ""
"GLSL has many built-in variables that are hard-coded. These variables are "
"not uniforms, so they are not editable from the main program."
msgstr ""
"В GLSL есть множество встроенных переменных, которые жёстко закодированы. "
"Эти переменные не являются унифицированными, поэтому их нельзя редактировать "
"из основной программы."

msgid "Variable"
msgstr "Переменная"

msgid "Type"
msgstr "Тип"

msgid "Equivalent"
msgstr ""

msgid "Description"
msgstr "Описание"

msgid "gl_FragColor"
msgstr ""

msgid "out vec4"
msgstr ""

msgid "COLOR"
msgstr ""

msgid "Output color for each pixel."
msgstr ""

msgid "gl_FragCoord"
msgstr ""

msgid "vec4"
msgstr ""

msgid "FRAGCOORD"
msgstr ""

msgid "For full screen quads. For smaller quads, use UV."
msgstr ""

msgid "VERTEX"
msgstr ""

msgid "Position of Vertex, output from Vertex Shader."
msgstr ""

msgid "gl_PointSize"
msgstr ""

msgid "float"
msgstr "float"

msgid "POINT_SIZE"
msgstr ""

msgid "Size of Point primitive."
msgstr ""

msgid "gl_PointCoord"
msgstr ""

msgid "vec2"
msgstr ""

msgid "POINT_COORD"
msgstr ""

msgid "Position on point when drawing Point primitives."
msgstr ""

msgid "gl_FrontFacing"
msgstr "gl_FrontFаcing"

msgid "bool"
msgstr "bool"

msgid "FRONT_FACING"
msgstr ""

msgid "True if front face of primitive."
msgstr ""

msgid "Coordinates"
msgstr "Координаты"

msgid ""
"``gl_FragCoord`` in GLSL and ``FRAGCOORD`` in the Godot shading language use "
"the same coordinate system. If using UV in Godot, the y-coordinate will be "
"flipped upside down."
msgstr ""

msgid "Precision"
msgstr "Точность"

msgid ""
"In GLSL, you can define the precision of a given type (float or int) at the "
"top of the shader with the ``precision`` keyword. In Godot, you can set the "
"precision of individual variables as you need by placing precision "
"qualifiers ``lowp``, ``mediump``, and ``highp`` before the type when "
"defining the variable. For more information, see the :ref:`Shading Language "
"<doc_shading_language>` reference."
msgstr ""

msgid "Shadertoy"
msgstr "Shаdertoy"

msgid ""
"`Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ is a website that makes it easy to "
"write fragment shaders and create `pure magic <https://www.shadertoy.com/"
"view/4tjGRh>`_."
msgstr ""

msgid ""
"Shadertoy does not give the user full control over the shader. It handles "
"all the input and uniforms and only lets the user write the fragment shader."
msgstr ""

msgid "Types"
msgstr "Типы"

msgid ""
"Shadertoy uses the webgl spec, so it runs a slightly different version of "
"GLSL. However, it still has the regular types, including constants and "
"macros."
msgstr ""

msgid "mainImage"
msgstr "mаinImage"

msgid ""
"The main point of entry to a Shadertoy shader is the ``mainImage`` function. "
"``mainImage`` has two parameters, ``fragColor`` and ``fragCoord``, which "
"correspond to ``COLOR`` and ``FRAGCOORD`` in Godot, respectively. These "
"parameters are handled automatically in Godot, so you do not need to include "
"them as parameters yourself. Anything in the ``mainImage`` function should "
"be copied into the ``fragment`` function when porting to Godot."
msgstr ""

msgid ""
"In order to make writing fragment shaders straightforward and easy, "
"Shadertoy handles passing a lot of helpful information from the main program "
"into the fragment shader for you. A few of these have no equivalents in "
"Godot because Godot has chosen not to make them available by default. This "
"is okay because Godot gives you the ability to make your own uniforms. For "
"variables whose equivalents are listed as \"Provide with Uniform\", users "
"are responsible for creating that uniform themselves. The description gives "
"the reader a hint about what they can pass in as a substitute."
msgstr ""
"Чтобы сделать написание фрагментных шейдеров простым и легким, Shadertoy "
"обрабатывает передачу множества полезной информации из основной программы в "
"фрагментный шейдер за вас. Некоторые из них не имеют аналогов в Godot, "
"потому что Godot решил не делать их доступными по умолчанию. Это нормально, "
"потому что Godot дает вам возможность создавать свои собственные формы. Для "
"переменных, эквиваленты которых перечислены как \"Provide with Uniform\", "
"пользователи сами отвечают за создание такой формы. Описание дает читателю "
"подсказку о том, что можно передать в качестве замены."

msgid "fragColor"
msgstr "frаgColor"

msgid "fragCoord"
msgstr ""

msgid "FRAGCOORD.xy"
msgstr ""

msgid "iResolution"
msgstr "iRеsolution"

msgid "vec3"
msgstr ""

msgid "1.0 / SCREEN_PIXEL_SIZE"
msgstr ""

msgid "Can also pass in manually."
msgstr ""

msgid "iTime"
msgstr ""

msgid "TIME"
msgstr ""

msgid "Time since shader started."
msgstr ""

msgid "iTimeDelta"
msgstr ""

msgid "Provide with Uniform"
msgstr ""

msgid "Time to render previous frame."
msgstr ""

msgid "iFrame"
msgstr ""

msgid "Frame number."
msgstr ""

msgid "iChannelTime[4]"
msgstr ""

msgid "Time since that particular texture started."
msgstr ""

msgid "iMouse"
msgstr ""

msgid "Mouse position in pixel coordinates."
msgstr ""

msgid "iDate"
msgstr ""

msgid "Current date, expressed in seconds."
msgstr ""

msgid "iChannelResolution[4]"
msgstr ""

msgid "1.0 / TEXTURE_PIXEL_SIZE"
msgstr ""

msgid "Resolution of particular texture."
msgstr ""

msgid "iChanneli"
msgstr ""

msgid "Sampler2D"
msgstr ""

msgid "TEXTURE"
msgstr ""

msgid "Godot provides only one built-in; user can make more."
msgstr ""

msgid ""
"``fragCoord`` behaves the same as ``gl_FragCoord`` in :ref:`GLSL "
"<glsl_coordinates>` and ``FRAGCOORD`` in Godot."
msgstr ""

msgid "The Book of Shaders"
msgstr ""

msgid ""
"Similar to Shadertoy, `The Book of Shaders <https://thebookofshaders.com>`_ "
"provides access to a fragment shader in the web browser, with which the user "
"may interact. The user is restricted to writing fragment shader code with a "
"set list of uniforms passed in and with no ability to add additional "
"uniforms."
msgstr ""

msgid ""
"For further help on porting shaders to various frameworks generally, The "
"Book of Shaders provides a `page <https://thebookofshaders.com/04>`_ on "
"running shaders in various frameworks."
msgstr ""

msgid ""
"The Book of Shaders uses the webgl spec, so it runs a slightly different "
"version of GLSL. However, it still has the regular types, including "
"constants and macros."
msgstr ""

msgid ""
"The entry point for a Book of Shaders fragment shader is ``main``, just like "
"in GLSL. Everything written in a Book of Shaders ``main`` function should be "
"copied into Godot's ``fragment`` function."
msgstr ""

msgid ""
"The Book of Shaders sticks closer to plain GLSL than Shadertoy does. It also "
"implements fewer uniforms than Shadertoy."
msgstr ""

msgid "u_resolution"
msgstr ""

msgid "u_time"
msgstr ""

msgid "u_mouse"
msgstr ""

msgid ""
"The Book of Shaders uses the same coordinate system as :ref:`GLSL "
"<glsl_coordinates>`."
msgstr ""

msgid "Translation status"
msgstr "Статус перевода"
