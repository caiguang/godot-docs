# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shader preprocessor"
msgstr "Шейдерный препроцессор"

msgid "Why use a shader preprocessor?"
msgstr "Зачем нужен шейдерный препроцессор?"

msgid ""
"In programming languages, a *preprocessor* allows changing the code before "
"the compiler reads it. Unlike the compiler, the preprocessor does not care "
"about whether the syntax of the preprocessed code is valid. The preprocessor "
"always performs what the *directives* tell it to do. A directive is a "
"statement starting with a hash symbol (``#``). It is not a *keyword* of the "
"shader language (such as ``if`` or ``for``), but a special kind of token "
"within the language."
msgstr ""
"В языках программирования *препроцессор* позволяет изменить код до того, как "
"его прочитает компилятор. В отличие от компилятора, препроцессор не "
"заботится о том, является ли синтаксис препроцессированного кода правильным. "
"Препроцессор всегда выполняет то, что ему предписывают *директивы*. "
"Директива - это утверждение, начинающееся с хэш-символа (``#``). Это не "
"*ключевое слово* языка шейдеров (такое как ``if`` или ``for``), а особый вид "
"лексем внутри языка."

msgid ""
"From Godot 4.0 onwards, you can use a shader preprocessor within text-based "
"shaders. The syntax is similar to what most GLSL shader compilers support "
"(which in turn is similar to the C/C++ preprocessor)."
msgstr ""
"Начиная с Godot 4.0, вы можете использовать шейдерный препроцессор в "
"текстовых шейдерах. Синтаксис похож на тот, который поддерживают большинство "
"компиляторов шейдеров GLSL (которые, в свою очередь, похожи на препроцессор "
"C/C++)."

msgid ""
"The shader preprocessor is not available in :ref:`visual shaders "
"<doc_visual_shaders>`. If you need to introduce preprocessor statements to a "
"visual shader, you can convert it to a text-based shader using the **Convert "
"to Shader** option in the VisualShader inspector resource dropdown. This "
"conversion is a one-way operation; text shaders cannot be converted back to "
"visual shaders."
msgstr ""
"Препроцессор шейдеров недоступен в :ref:`визуальных шейдерах "
"<doc_visual_shaders>`. Если вам нужно добавить операторы препроцессора в "
"визуальный шейдер, вы можете преобразовать его в текстовый шейдер с помощью "
"опции **Convert to Shader** в выпадающем списке ресурсов инспектора "
"VisualShader. Это преобразование является односторонней операцией; текстовые "
"шейдеры не могут быть преобразованы обратно в визуальные шейдеры."

msgid "Directives"
msgstr "Директивы"

msgid "General syntax"
msgstr "Общий синтаксис"

msgid ""
"Preprocessor directives do not use brackets (``{}``), but can use "
"parentheses."
msgstr ""
"Директивы препроцессора не используют фигурные скобки (``{}``), но могут "
"использовать круглые скобки."

msgid ""
"Preprocessor directives **never** end with semicolons (with the exception of "
"``#define``, where this is allowed but potentially dangerous)."
msgstr ""
"Директивы препроцессора **никогда** не заканчиваются точкой с запятой (за "
"исключением ``#define``, где это разрешено, но потенциально опасно)."

msgid ""
"Preprocessor directives can span several lines by ending each line with a "
"backslash (``\\``). The first line break *not* featuring a backslash will "
"end the preprocessor statement."
msgstr ""
"Директивы препроцессора могут занимать несколько строк, завершая каждую "
"строку обратной косой чертой (``\\``). Первый разрыв строки, *не* содержащий "
"обратную косую черту, завершает операцию препроцессора."

msgid "#define"
msgstr ""

msgid "**Syntax:** ``#define <identifier> [replacement_code]``."
msgstr "**Синтаксис:** ``#define <identifier> [заменяемый_код]``."

msgid ""
"Defines the identifier after that directive as a macro, and replaces all "
"successive occurrences of it with the replacement code given in the shader. "
"Replacement is performed on a \"whole words\" basis, which means no "
"replacement is performed if the string is part of another string (without "
"any spaces or operators separating it)."
msgstr ""
"Определяет идентификатор после этой директивы как макрос и заменяет все "
"последующие его вхождения на код замены, указанный в шейдере. Замена "
"выполняется по принципу \"целых слов\", то есть замена не выполняется, если "
"строка является частью другой строки (без пробелов и операторов, разделяющих "
"её)."

msgid ""
"Defines with replacements may also have one or more *arguments*, which can "
"then be passed when referencing the define (similar to a function call)."
msgstr ""
"Определения с заменой могут также иметь один или несколько *аргументов*, "
"которые могут передаваться при обращении к определению (подобно вызову "
"функции)."

msgid ""
"If the replacement code is not defined, the identifier may only be used with "
"``#ifdef`` or ``#ifndef`` directives."
msgstr ""
"Если код замены не определён, идентификатор можно использовать только с "
"директивами ``#ifdef`` или ``#ifndef``."

msgid ""
"If the *concatenation* symbol (``##``) is present in the replacement code "
"then it will be removed upon macro insertion, together with any space "
"surrounding it, and join the surrounding words and arguments into a new "
"token."
msgstr ""
"Если в коде замены присутствует символ *конкатенации* (``##``), то при "
"вставке макроса он будет удалён вместе с окружающим его пробелом и объединит "
"окружающие слова и аргументы в новую лексему."

msgid ""
"Compared to constants (``const CONSTANT = value;``), ``#define`` can be used "
"anywhere within the shader (including in uniform hints). ``#define`` can "
"also be used to insert arbitrary shader code at any location, while "
"constants can't do that."
msgstr ""
"По сравнению с константами (``const CONSTANT = value;``), ``#define`` можно "
"использовать в любом месте шейдера (в том числе в унифицированных "
"подсказках). ``#define`` также можно использовать для вставки произвольного "
"кода шейдера в любое место, в то время как константы этого делать не могут."

msgid ""
"Defining a ``#define`` for an identifier that is already defined results in "
"an error. To prevent this, use ``#undef <identifier>``."
msgstr ""
"Определение ``#define`` для идентификатора, который уже определён, приводит "
"к ошибке. Чтобы предотвратить это, используйте ``#undef <identifier>``."

msgid "#undef"
msgstr ""

msgid "**Syntax:** ``#undef identifier``"
msgstr "**Синтаксис:** ``#undef identifier``"

msgid ""
"The ``#undef`` directive may be used to cancel a previously defined "
"``#define`` directive:"
msgstr ""
"Директива ``#undef`` может быть использована для отмены ранее определённой "
"директивы ``#define``:"

msgid ""
"Without ``#undef`` in the above example, there would be a macro redefinition "
"error."
msgstr ""
"Если бы в приведённом выше примере не было ``#undef``, то возникла бы ошибка "
"переопределения макроса."

msgid "#if"
msgstr ""

msgid "**Syntax:** ``#if <condition>``"
msgstr "**Синтаксис:** ``#if <условие>``"

msgid ""
"The ``#if`` directive checks whether the ``condition`` passed. If it "
"evaluates to a non-zero value, the code block is included, otherwise it is "
"skipped."
msgstr ""
"Директива ``#if`` проверяет, прошло ли ``условие``. Если оно оценивается в "
"ненулевое значение, блок кода включается, в противном случае он пропускается."

msgid ""
"To evaluate correctly, the condition must be an expression giving a simple "
"floating-point, integer or boolean result. There may be multiple condition "
"blocks connected by ``&&`` (AND) or ``||`` (OR) operators. It may be "
"continued by a ``#else`` block, but **must** be ended with the ``#endif`` "
"directive."
msgstr ""
"Для правильной оценки условие должно быть выражением, дающим простой "
"результат с плавающей точкой, целым числом или логическим значением. Может "
"быть несколько блоков условия, связанных операторами ``&&`` (AND) или ``||`` "
"(OR). Условие может быть продолжено блоком ``#else``, но **обязательно** "
"должно быть завершено директивой ``#endif``."

msgid ""
"Using the ``defined()`` *preprocessor function*, you can check whether the "
"passed identifier is defined a by ``#define`` placed above that directive. "
"This is useful for creating multiple shader versions in the same file. It "
"may be continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"Используя *препроцессорную функцию* ``defined()``, вы можете проверить, "
"определён ли переданный идентификатор директивой ``#define``, расположенной "
"над этой директивой. Это полезно для создания нескольких версий шейдеров в "
"одном файле. Она может быть продолжена блоком ``#else``, но должна быть "
"завершена директивой ``#endif``."

msgid ""
"The ``defined()`` function's result can be negated by using the ``!`` "
"(boolean NOT) symbol in front of it. This can be used to check whether a "
"define is *not* set."
msgstr ""
"Результат функции ``defined()`` можно отрицать, используя перед ним символ "
"``!`` (логическое НЕТ). Это можно использовать для проверки того, что define "
"*не* задан."

msgid ""
"Be careful, as ``defined()`` must only wrap a single identifier within "
"parentheses, never more:"
msgstr ""
"Будьте осторожны, так как ``defined()`` должен заключать в круглые скобки "
"только один идентификатор, и никогда больше:"

msgid ""
"In the shader editor, preprocessor branches that evaluate to ``false`` (and "
"are therefore excluded from the final compiled shader) will appear grayed "
"out. This does not apply to run-time ``if`` statements."
msgstr ""
"В редакторе шейдеров ветви препроцессора, которые оцениваются как ``false`` "
"(и поэтому исключаются из окончательно скомпилированного шейдера), будут "
"отображаться серым цветом. Это не относится к операторам ``if'' во время "
"выполнения."

msgid "**#if preprocessor versus if statement: Performance caveats**"
msgstr ""
"**Препроцессор #if в сравнении с оператором if: Предостережения по "
"производительности**"

msgid ""
"The :ref:`shading language <doc_shading_language>` supports run-time ``if`` "
"statements:"
msgstr ""
":ref:`Язык шейдеров <doc_shading_language>` поддерживает операторы ``if`` во "
"время выполнения:"

msgid ""
"If the uniform is never changed, this behaves identical to the following "
"usage of the ``#if`` preprocessor statement:"
msgstr ""
"Если uniform-переменная никогда не изменяется, это поведение идентично "
"следующему использованию оператора препроцессора ``#if``:"

msgid ""
"However, the ``#if`` variant can be faster in certain scenarios. This is "
"because all run-time branches in a shader are still compiled and variables "
"within those branches may still take up register space, even if they are "
"never run in practice."
msgstr ""
"Однако вариант ``#if`` может быть быстрее в некоторых сценариях. Это связано "
"с тем, что все ветви времени выполнения в шейдере всё равно компилируются, и "
"переменные в этих ветвях могут занимать место в регистре, даже если они "
"никогда не будут выполняться на практике."

msgid ""
"Modern GPUs are `quite effective <https://medium.com/@jasonbooth_86226/"
"branching-on-a-gpu-18bfc83694f2>`__ at performing \"static\" branching. "
"\"Static\" branching refers to ``if`` statements where *all* pixels/vertices "
"evaluate to the same result in a given shader invocation. However, high "
"amounts of :abbr:`VGPRs (Vector General-Purpose Register)` (which can be "
"caused by having too many branches) can still slow down shader execution "
"significantly."
msgstr ""
"Современные графические процессоры `достаточно эффективно <https://medium."
"com/@jasonbooth_86226/branching-on-a-gpu-18bfc83694f2>`__ выполняют "
"\"статическое\" ветвление. Под \"статическим\" ветвлением подразумеваются "
"операторы ``if``, в которых *все* пиксели/вершины вычисляются одинаково при "
"данном вызове шейдера. Однако большое количество :abbr:`VGPRs (Vector "
"General-Purpose Register)` (которое может быть вызвано слишком большим "
"количеством ветвлений) всё ещё может значительно замедлить выполнение "
"шейдера."

msgid "#elif"
msgstr ""

msgid ""
"The ``#elif`` directive stands for \"else if\" and checks the condition "
"passed if the above ``#if`` evaluated to ``false``. ``#elif`` can only be "
"used within an ``#if`` block. It is possible to use several ``#elif`` "
"statements after an ``#if`` statement."
msgstr ""
"Директива ``#elif`` расшифровывается как \"else if\" и проверяет условие, "
"переданное, если вышеприведенное ``#if`` равняется ``false``. Директива "
"``#elif`` может использоваться только внутри блока ``#if``. Можно "
"использовать несколько операторов ``#elif`` после оператора ``#if``."

msgid "Like with ``#if``, the ``defined()`` preprocessor function can be used:"
msgstr ""
"Как и в случае с ``#if``, можно использовать функцию препроцессора "
"``defined()``:"

msgid "#ifdef"
msgstr ""

msgid "**Syntax:** ``#ifdef <identifier>``"
msgstr "**Синтаксис:** ``#ifdef <identifier>``"

msgid ""
"This is a shorthand for ``#if defined(...)``. Checks whether the passed "
"identifier is defined by ``#define`` placed above that directive. This is "
"useful for creating multiple shader versions in the same file. It may be "
"continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"Это сокращение для ``#if defined(...)``. Проверяет, определён ли переданный "
"идентификатор директивой ``#define``, расположенной над этой директивой. Это "
"полезно для создания нескольких версий шейдеров в одном файле. Она может "
"быть продолжена блоком ``#else``, но должна быть завершена директивой "
"``#endif``."

msgid ""
"The processor does *not* support ``#elifdef`` as a shortcut for ``#elif "
"defined(...)``. Instead, use the following series of ``#ifdef`` and "
"``#else`` when you need more than two branches:"
msgstr ""
"Процессор *не* поддерживает ``#elifdef`` как сокращение для ``#elif "
"defined(...)``. Вместо этого используйте следующие серии ``#ifdef`` и "
"``#else``, если вам нужно более двух ветвей:"

msgid "#ifndef"
msgstr ""

msgid "**Syntax:** ``#ifndef <identifier>``"
msgstr "**Синтаксис:** ``#ifndef <идентификатор>``"

msgid ""
"This is a shorthand for ``#if !defined(...)``. Similar to ``#ifdef``, but "
"checks whether the passed identifier is **not** defined by ``#define`` "
"before that directive."
msgstr ""
"Это сокращение для ``#if !defined(...)``. Аналогично ``#ifdef``, но "
"проверяет, не является ли переданный идентификатор **не** определённым в "
"``#define`` до этой директивы."

msgid ""
"This is the exact opposite of ``#ifdef``; it will always match in situations "
"where ``#ifdef`` would never match, and vice versa."
msgstr ""
"Это полная противоположность ``#ifdef``; он всегда будет соответствовать в "
"ситуациях, в которых ``#ifdef`` никогда не будет соответствовать, и наоборот."

msgid "#else"
msgstr ""

msgid "**Syntax:** ``#else``"
msgstr "**Синтаксис:** ``#else``"

msgid ""
"Defines the optional block which is included when the previously defined "
"``#if``, ``#elif``, ``#ifdef`` or ``#ifndef`` directive evaluates to false."
msgstr ""
"Определяет необязательный блок, который включается, когда ранее определённая "
"директива ``#if``, ``#elif``, ``#ifdef`` или ``#ifndef`` оценивается как "
"false."

msgid "#endif"
msgstr ""

msgid "**Syntax:** ``#endif``"
msgstr "**Синтаксис:** ``#endif``"

msgid ""
"Used as terminator for the ``#if``, ``#ifdef``, ``#ifndef`` or subsequent "
"``#else`` directives."
msgstr ""
"Используется в качестве терминатора для директив ``#if``, ``#ifdef``, "
"``#ifndef`` или последующих ``#else``."

msgid "#include"
msgstr ""

msgid "**Syntax:** ``#include \"path\"``"
msgstr "**Синтаксис:** ``#include \"путь\"``"

msgid ""
"The ``#include`` directive includes the *entire* content of a shader include "
"file in a shader. ``\"path\"`` can be an absolute ``res://`` path or "
"relative to the current shader file. Relative paths are only allowed in "
"shaders that are saved to ``.gdshader`` or ``.gdshaderinc`` files, while "
"absolute paths can be used in shaders that are built into a scene/resource "
"file."
msgstr ""
"Директива ``#include`` включает *полное* содержимое включаемого файла "
"шейдера в шейдер. ``путь`` может быть абсолютным ``res://`` или "
"относительным к текущему файлу шейдера. Относительные пути допустимы только "
"в шейдерах, которые сохраняются в файлах ``.gdshader`` или ``.gdshaderinc``, "
"в то время как абсолютные пути могут использоваться в шейдерах, встроенных в "
"файл сцены/ресурса."

msgid ""
"You can create new shader includes by using the **File > Create Shader "
"Include** menu option of the shader editor, or by creating a new :ref:"
"`ShaderInclude<class_ShaderInclude>` resource in the FileSystem dock."
msgstr ""
"Вы можете создавать новые шейдерные включения, используя опцию меню **File > "
"Create Shader Include** редактора шейдеров или создав новый ресурс :ref:"
"`ShaderInclude<class_ShaderInclude>` в панели FileSystem."

msgid ""
"Shader includes can be included from within any shader, or other shader "
"include, at any point in the file."
msgstr ""
"Шейдерные включения могут быть включены в любой шейдер или другой шейдерный "
"элемент в любой точке файла."

msgid ""
"When including shader includes in the global scope of a shader, it is "
"recommended to do this after the initial ``shader_type`` statement."
msgstr ""
"При включении шейдерных инклудов в глобальную область видимости шейдера "
"рекомендуется делать это после начального оператора ``shader_type``."

msgid ""
"You can also include shader includes from within the body a function. Please "
"note that the shader editor is likely going to report errors for your shader "
"include's code, as it may not be valid outside of the context that it was "
"written for. You can either choose to ignore these errors (the shader will "
"still compile fine), or you can wrap the include in an ``#ifdef`` block that "
"checks for a define from your shader."
msgstr ""
"Вы также можете включать шейдерные включения в тело функции. Обратите "
"внимание, что редактор шейдеров, скорее всего, сообщит об ошибках для кода "
"вашего шейдерного включения, поскольку он может быть недействительным вне "
"контекста, для которого он был написан. Вы можете либо проигнорировать эти "
"ошибки (шейдер всё равно скомпилируется), либо обернуть include в блок "
"``#ifdef``, который будет проверять наличие define в шейдере."

msgid ""
"``#include`` is useful for creating libraries of helper functions (or "
"macros) and reducing code duplication. When using ``#include``, be careful "
"about naming collisions, as redefining functions or macros is not allowed."
msgstr ""
"``#include`` полезен для создания библиотек вспомогательных функций (или "
"макросов) и сокращения дублирования кода. При использовании ``#include`` "
"будьте осторожны с коллизиями имён, так как переопределение функций или "
"макросов не допускается."

msgid "``#include`` is subject to several restrictions:"
msgstr "На ``#include`` наложен ряд ограничений:"

msgid ""
"Only shader include resources (ending with ``.gdshaderinc``) can be "
"included. ``.gdshader`` files cannot be included by another shader, but a ``."
"gdshaderinc`` file can include other ``.gdshaderinc`` files."
msgstr ""
"Включать можно только включаемые ресурсы шейдера (заканчивающиеся на ``."
"gdshaderinc``). Файлы ``.gdshader`` не могут быть включены другим шейдером, "
"но файл ``.gdshaderinc`` может включать другие файлы ``.gdshaderinc``."

msgid "Cyclic dependencies are **not** allowed and will result in an error."
msgstr "Циклические зависимости **не** разрешены и приведут к ошибке."

msgid "To avoid infinite recursion, include depth is limited to 25 steps."
msgstr ""
"Чтобы избежать бесконечной рекурсии, глубина включения ограничена 25 шагами."

msgid "Example shader include file:"
msgstr "Пример включаемого файла шейдера:"

msgid "Example base shader (using the include file we created above):"
msgstr ""
"Пример базового шейдера (с использованием файла include, который мы создали "
"выше):"

msgid "#pragma"
msgstr ""

msgid "**Syntax:** ``#pragma value``"
msgstr "**Синтаксис:** ``#pragma значение``"

msgid ""
"The ``#pragma`` directive provides additional information to the "
"preprocessor or compiler."
msgstr ""
"Директива ``#pragma`` предоставляет дополнительную информацию препроцессору "
"или компилятору."

msgid ""
"Currently, it may have only one value: ``disable_preprocessor``. If you "
"don't need the preprocessor, use that directive to speed up shader "
"compilation by excluding the preprocessor step."
msgstr ""
"В настоящее время она может иметь только одно значение: "
"``disable_preprocessor``. Если вам не нужен препроцессор, используйте эту "
"директиву, чтобы ускорить компиляцию шейдеров, исключив шаг препроцессора."

msgid "Translation status"
msgstr "Статус перевода"
