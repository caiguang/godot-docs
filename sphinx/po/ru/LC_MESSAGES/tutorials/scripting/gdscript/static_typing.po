# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Статическая типизация в GDScript"

msgid "In this guide, you will learn:"
msgstr "В этом руководстве вы узнаете:"

msgid "how to use static typing in GDScript;"
msgstr "как использовать статическую типизацию в GDScript;"

msgid "that static types can help you avoid bugs;"
msgstr "эти статические типы могут помочь вам избежать ошибки;"

msgid "that static typing improves your experience with the editor."
msgstr ""

#, fuzzy
msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Где и как вы используете эту языковую функцию полностью зависит от вас: вы "
"можете использовать ее только в некоторых чувствительных файлах GDScript, "
"использовать везде или вообще не использовать."

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Статические типы могут использоваться для переменных, констант, функций, "
"параметров и возвращаемых типов."

msgid "A brief look at static typing"
msgstr "Краткий обзор статической типизации"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"С помощью типизированного GDScript Godot может обнаружить еще больше ошибок "
"при написании кода! Это дает вам и вашим товарищам по команде больше "
"информации по мере работы, поскольку типы аргументов появляются при вызове "
"метода."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Представьте, что вы программируете систему инвентаризации. Вы "
"запрограммировали узел ``Item``, а затем ``Inventory``. Чтобы добавить "
"предметы в инвентарь, люди, работающие с вашим кодом, должны всегда "
"передавать ``Item`` методу ``Inventory.add``. С помощью типов вы можете "
"осуществить это:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Статические типы также дают вам лучшие варианты завершения кода. Ниже вы "
"можете увидеть разницу между динамическими и статическими типизированными "
"вариантами завершения для класса под названием ``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

msgid "Completion options for dynamic typed code."
msgstr ""

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Это связано с динамическим кодом. Godot не может знать, какой тип узла или "
"значения вы передаете в функцию. Однако, если вы опишите тип явно, вы "
"получите все публичные методы и переменные из узла:"

msgid "Completion options for static typed code."
msgstr ""

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"В целом, типизированное программирование дает вам более структурированный "
"опыт. Это помогает предотвратить ошибки и улучшает аспект "
"самодокументирования ваших скриптов. Это особенно полезно, когда вы "
"работаете в команде или над долгосрочным проектом: исследования показали, "
"что разработчики проводят большую часть своего времени за чтением чужого "
"кода или скриптов, которые они написали в прошлом и о которых забыли. Чем "
"яснее и структурированнее код, тем быстрее его понять, тем быстрее вы "
"сможете двигаться вперед."

msgid "How to use static typing"
msgstr "Как использовать статическую типизацию"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Чтобы определить тип переменной или константы, напишите двоеточие после "
"имени переменной, а затем ее тип. Например, ``var health: int``. Это "
"заставляет тип переменной всегда оставаться неизменным:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot попытается определить тип самостоятельно, если вы напишете двоеточие, "
"но не укажите тип:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr "Нет никакой разницы между Buffer Shadow и Ray Shadow при экспорте."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Вам не нужно писать типовые подсказки для констант, так как Godot "
"устанавливает их автоматически из присвоенного значения. Но вы все равно "
"можете сделать это, чтобы прояснить смысл вашего кода."

#, fuzzy
msgid "What can be a type hint"
msgstr "Что может быть подсказкой типа"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "Вот полный пример класса основанный на этих рекомендациях:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

#, fuzzy
msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"Основные классы и узлы (``Object``, ``Node``, ``Area2D``, ``Camera2D``, и т."
"д.)"

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Классы сценариев <doc_gdscript_basics_class_name>``"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Классы сценариев <doc_gdscript_basics_class_name>``"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Вы можете использовать любой класс, включая ваши собственные классы, как "
"типы. Есть два способа использовать их в скриптах. Первый способ - "
"предварительно загрузить скрипт, который вы хотите использовать в качестве "
"типа константы:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"Второй метод заключается в использовании ключевого слова ``class_name`` при "
"создании. Для приведенного выше примера ваш Rifle.gd будет выглядеть так:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Если вы используете ``class_name``, Godot глобально регистрирует тип Rifle в "
"редакторе, и вы можете использовать его где угодно, без предварительной "
"загрузки в константу:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Определите тип возвращаемого значения функции с помощью стрелки ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Чтобы определить тип возвращаемого значения функции, напишите тире и угловую "
"скобку показывающую направо ``->`` после ее объявления, а затем тип "
"возвращаемого значения:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"Тип ``void`` означает, что функция ничего не возвращает. Вы можете "
"использовать любой тип, как с переменными:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr ""
"Вы также можете использовать свои собственные узлы в качестве возвращаемых "
"типов:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Пример:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Определите тип возвращаемого значения функции с помощью стрелки ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Приведение типов"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"Приведение типов является ключевым понятием в типизированных языках. "
"Приведение - это преобразование значения из одного типа в другой."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Представьте себе врага в вашей игре, который ``расширяет Area2D``. Вы "
"хотите, чтобы он сталкивался с Player-ом : ``KinematicBody2D`` со скриптом "
"под названием ``PlayerController``, прикрепленным к нему. Вы используете "
"сигнал ``on_body_entered`` для обнаружения столкновений. С типизированным "
"кодом тело, которое вы обнаружите, будет общим ``PhysicsBody2D``, а не вашим "
"``PlayerController`` при обратном вызове ``_on_body_entered``."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Вы можете проверить, является ли этот ``PhysicsBody2D`` вашим Player-ом "
"используя ключевое слово ``as`` и снова использовать двоеточие ``:``, чтобы "
"заставить переменную использовать этот тип. Это заставляет переменную "
"придерживаться типа ``PlayerController``:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Так как мы имеем дело с пользовательским типом, если ``body`` не расширяет "
"``PlayerController``, значение переменной ``player`` будет установлено на "
"``null``. Мы можем использовать это, чтобы проверить, является ли тело "
"Player-ом или нет. Мы также получим полное автозаполнение переменной Player-"
"а благодаря этому исполнению."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Если вы попытаетесь выполнить приведение со встроенным типом, и это не "
"удастся, Godot выдаст ошибку."

msgid "Safe lines"
msgstr "Безопасные строки"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Вы также можете использовать приведение, чтобы обеспечить безопасные строки. "
"Безопасные строки - это новый инструмент в Godot 3.1, который поможет вам "
"понять, когда неоднозначные строки кода являются типо-безопасными. Поскольку "
"вы можете смешивать и сопоставлять типизированный и динамический код, иногда "
"у Godot не хватает информации, чтобы знать, вызовет ли инструкция ошибку или "
"нет во время выполнения."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Это происходит, когда вы получаете дочерний узел. Возьмем, к примеру, "
"таймер: с динамическим кодом вы можете получить узел с помощью ``$Timer``. "
"GDScript поддерживает `Утиную типизацию <https://stackoverflow.com/"
"a/4205163/8125343>`__, поэтому даже если ваш таймер имеет тип ``Timer``, он "
"также является ``Node`` и ``Object``, два класса которые он расширяет. В "
"динамическом GDScript вы также не заботитесь о типе узла, если у него есть "
"необходимые вам методы для вызова."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Вы можете использовать приведение, чтобы сообщить Godot-у тип, который вы "
"ожидаете, когда получаете узел: ``($Timer as Timer)``, ``($Player as "
"KinematicBody2D)`` и т.д. Godot обеспечит работу типа и, если это так, то "
"номер строки слева в редакторе скриптов станет зеленым."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Небезопасная строка (строка 7) против Безопасных Строк (строки 6 и 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Вы можете отключить безопасные строки или изменить их цвет в настройках "
"редактора."

msgid "Typed or dynamic: stick to one style"
msgstr "Типизированный или динамичный: придерживайтесь одного стиля"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"Типизированный GDScript и динамический GDScript могут сосуществовать в одном "
"проекте. Но рекомендуется придерживаться единого стиля написания вашего "
"кода. Всем будет проще понимать код, если все будет использоваться единый "
"стиль написания."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"Типизированный код требует немного больше времени для написания, но вы "
"получаете преимущества, которые мы обсуждали выше. Ниже приведен пример того "
"же пустого скрипта в динамическом стиле:"

#, fuzzy
msgid "And with static typing::"
msgstr "И со статической типизацией:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Как видите, вы также можете использовать типы с виртуальными методами "
"движка. Сигнальные обратные вызовы, как и любые методы, также могут "
"использовать типы. Вот сигнал ``body_entered`` в динамическом стиле:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "И тот же обратный вызов, с типовыми подсказками:"

msgid "Warning system"
msgstr "Система предупреждений"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"Документация о системе предупреждений GDScript была перемещена в :ref:"
"`doc_gdscript_warning_system`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Еще одним существенным преимуществом типизированного GDScript является новая "
"**система предупреждений**. Начиная с версии 3.1, Godot выдает вам "
"предупреждения о вашем коде в процессе его написания: движок определяет "
"части вашего кода, которые могут привести к проблемам во время выполнения, "
"но позволяет вам решить, хотите ли вы оставить код таким, какой он есть. "
"Подробнее об этом через минуту."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Случаи, когда вы не можете указывать типы"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Чтобы завершить это введение, давайте рассмотрим несколько случаев, когда вы "
"не можете использовать типовые подсказки. Все приведенные ниже примеры "
"**вызовут ошибки**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"Вы не можете указать тип отдельных членов в массиве. Это приведет к ошибке:"

#, fuzzy
msgid "Nested types are not currently supported::"
msgstr "**Мобильные браузеры в настоящее время не поддерживаются.**"

#, fuzzy
msgid "Typed dictionaries are not currently supported::"
msgstr "**Мобильные браузеры в настоящее время не поддерживаются.**"

msgid "Summary"
msgstr "Подведение итогов"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"Типизированный GDScript - это мощный инструмент. Доступный начиная с версии "
"3.1 Godot, он помогает вам писать более структурированный код, избегать "
"распространенных ошибок и создавать масштабируемые системы. В будущем "
"статические типы также принесут вам хороший прирост производительности "
"благодаря предстоящей оптимизации компилятора."

msgid "Translation status"
msgstr "Статус перевода"
