# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "Основы C#"

msgid "Introduction"
msgstr "Введение"

#, fuzzy
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"Эта страница предоставляет краткое введение в C#, о том что это и как "
"использовать его в Godot. После, вас может заинтересовать чтение о том :ref:"
"`как использовать особые возможности <doc_c_sharp_features>`, о :ref:"
"`различиях между C# и GDScript API <doc_c_sharp_differences>` и "
"(пере)посещение :ref:`Секции скриптинга <doc_scripting>` для пошагового "
"руководства."

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"Это **не** полномасштабное руководство по целому языку C#. Если вы не "
"знакомы с его синтаксисом или возможностями, посмотрите `Microsoft C# "
"руководство <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ или "
"поищите подходящее введение где-нибудь ещё."

msgid "Prerequisites"
msgstr "Требования"

#, fuzzy
msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot объединяет части Mono, необходимые для запуска уже скомпилированных "
"игр, однако Godot не включает инструменты, требуемые для сборки и компиляции "
"игр, такие как MSBuild. Эти инструменты необходимо устанавливать отдельно. "
"Требуемые инструменты включены в .NET Core SDK. MSBuild также включен в Mono "
"SDK, но он не может создавать проекты C# с новым форматом ``csproj``, "
"поэтому для Godot 3.2.3+ требуется .NET Core SDK."

#, fuzzy
msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr ""
"В итоге, у вас должны быть установлены .NET Core SDK **и** версия Godot с "
"поддержкой Mono."

#, fuzzy
msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"Установите последнюю стабильную версию `.NET Core SDK <https://dotnet."
"microsoft.com/download/dotnet-core>`__ (3.1 на момент написания)."

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""
"Обязательно установите 64-битную версию SDK, если вы используете 64-битную "
"версию Godot."

#, fuzzy
msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"Если вы собираете Godot из исходников, установите последнюю стабильную "
"версию `Mono <https://www.mono-project.com/download/stable/>`__, и убедитесь "
"что следуете шагам для включения поддержки Mono в вашей сборке на странице :"
"ref:`doc_compiling_with_mono`."

msgid "Configuring an external editor"
msgstr "Настройка внешнего редактора"

#, fuzzy
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot имеет собственный редактор скриптов, его поддержка C# минимальна; "
"вместо этого рекомендовано использовать отдельную IDE или редактор, такой "
"как `Visual Studio Code <https://code.visualstudio.com/>`_ или MonoDevelop. "
"Они поддерживают авто-завершение кода, отладку и другие возможности полезные "
"при разработке на C#. Для установки их в Godot, кликните по **Editor → "
"Editor Settings** и прокрутите вниз к настройкам **Mono**. Под **Mono**, "
"кликните по **Editor** и выберите внешний редактор на выбор:"

#, fuzzy
msgid "Visual Studio 2022"
msgstr "Visuаl Studio 2019"

msgid "Visual Studio Code"
msgstr "Visuаl Studio Code"

msgid "MonoDevelop"
msgstr "MonоDevelop"

msgid "Visual Studio for Mac"
msgstr "Visual Studio для MacOS"

msgid "JetBrains Rider"
msgstr "JetBrains rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "См. cледующие разделы, чтобы узнать, как настроить внешний редактор:"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"Прочитав раздел «Предварительные требования», вы можете загрузить и "
"установить `JetBrains Rider <https://www.jetbrains.com/rider/download>`__."

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "В меню **Редактор→ Настройки редактора** Godot:"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"Установите **Mono** -> **Editor** -> **External Editor** на **JetBrains "
"Rider**."

msgid "In Rider:"
msgstr "В Rider:"

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "Установите **MSBuild version** на **.NET Core**."

msgid "Install the **Godot support** plugin."
msgstr "Установите плагин **Godot support**(**Поддержка Godot**)."

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"После прочтения раздела \"Предварительные условия\" вы можете загрузить и "
"установить ` Visual Studio Code <https://code.visualstudio.com/download>`__ "
"(он же VS Code)."

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""
"Установите **Mono** -> **Editor** -> **External Editor** на **Visual Studio "
"Code**."

msgid "In Visual Studio Code:"
msgstr "В Visual Studio Code:"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"Установите расширение `C# <https://marketplace.visualstudio.com/items?"
"itemName=ms-dotnettools.csharp>`__ ."

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"Если вы используете Linux, вам необходимо установить `Mono SDK <https://www."
"mono-project.com/download/stable/#download-lin> `__ для работы плагина "
"инструментов C#."

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio (Только windows)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"Загрузите и установите последнюю версию Visual Studio <https://visualstudio."
"microsoft.com/downloads/>`__. Visual Studio будет включать необходимые SDK, "
"если у вас выбраны правильные рабочие нагрузки, поэтому вам не нужно вручную "
"устанавливать вещи, перечисленные в разделе \"Предварительные условия\"."

#, fuzzy
msgid "While installing Visual Studio, select this workload:"
msgstr "При установке Visual Studio, выберите эти нагрузки:"

#, fuzzy
msgid ".NET desktop development"
msgstr "Разработка редактора"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"Установите **Mono** -> **Editor** -> **External Editor** на **Visual "
"Studio**."

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""

msgid "Creating a C# script"
msgstr "Создание C# скрипта"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"После успешной настройки C# в Godot, вы должны увидеть новую опцию выбора — "
"из контекстного меню прикрепляемого к сцене скрипта:"

#, fuzzy
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"Заметьте что хотя некоторые особенности изменились, большинство остались "
"теми же во время использования C# для скриптинга. Если вы новичок в Godot, "
"вы возможно захотите поизучать руководства из :ref:`doc_scripting` на этом "
"месте. Тогда как в некоторых местах документации ещё отсутствуют примеры для "
"C#, большинство концептов могут быть легко перенесены из GDScript."

msgid "Project setup and workflow"
msgstr "Настройка проекта и рабочего процесса"

#, fuzzy
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"Когда вы создали ваш первый скрипт C#, Godot инициализирует его проектными "
"файлами C# для вашего проекта. Это включает генерацию решения(solution) C# "
"(``.sln``) и проектного файла (``.csproj``), а также создаются ещё некоторые "
"файлы и папки (``.mono`` и ``Properties/AssemblyInfo.cs``). Все они (кроме "
"``.mono``) важны и должны быть включены в вашу систему контроля версий. ``."
"mono`` можно спокойно добавить в лист исключений вашего VCS. Когда вы ищите "
"проблему, иногда может помочь удаление папки ``.mono`` которая затем "
"самовосстановится."

msgid "Example"
msgstr "Пример"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr ""
"Это пустой C# скрипт с некоторыми комментариями, чтобы продемонстрировать, "
"как он работает."

#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"Как вы можете видеть, функции, обычно находящиеся в глобальной области "
"видимости в GDScript, такие как функция Godot ``print``, доступны в классе "
"``GD``, который является частью пространства имен ``Godot``. Список методов "
"класса ``GD`` смотрите в справочных страницах классов :ref:`@GDScript "
"<class_@gdscript>` и :ref:`@GlobalScope <class_@globalscope>`."

#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"Помните, что класс, который вы хотите присоединить к вашему узлу, должен "
"иметь то же имя, что и файл `` .cs``. В противном случае вы получите "
"следующую ошибку и не сможете запустить сцену: *«Не удается найти класс XXX "
"для сценария res://XXX.cs»*"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""

msgid "General differences between C# and GDScript"
msgstr "Основные различия между C# и GDScript"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"В языке C# всё API использует стиль записи ``PascalCase`` вместо "
"``snake_case``, принятого в GDScript/C++. Поля и getters/setters "
"представленны в виде свойств, там где это допустимо. В целом, Godot API на "
"C# стримится быть наиболее наглядным, насколько это возможно."

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr ""
"За дополнительно информацией, обратитесь к странице: :ref:"
"`doc_c_sharp_differences`."

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"Если вы используете C#, вам нужно (пере)собирать сборки проекта всякий раз, "
"когда вы хотите увидеть новые экспортируемые переменные или сигналы. Эта "
"сборка может быть запущена вручную путем нажатия на слово \"Mono\" в нижней "
"части окна редактора, чтобы открыть Mono Panel, а затем на кнопку \"Build "
"Project\"."

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""
"Вам также потребуется перестроить сборки проекта, чтобы применить изменения "
"в скриптовых \"инструментах\"."

msgid "Current gotchas and known issues"
msgstr "Текущие ограничения и известные проблемы"

#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"Поскольку поддержка C# введена относительно недавно, в ней всё ещё "
"присутствуют \"детские болячки\" и проблемы, которые необходимо устранить. "
"Ниже вы найдёте список наиболее важных проблем, о существовании которых вам "
"следовало бы знать, при использовании C# вместе с Godot. Если есть какие-то "
"сомнения, вы также можете заглянуть на `официальный трекер проблем/запросов "
"Mono <https://github.com/godotengine/godot/labels/topic%3Amono>`_."

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""
"Написание плагинов для редактора возможно, но в настоящее время это довольно "
"затруднительно."

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"В данный момент, при выполнении горячей-перезагруки, состояние не "
"сохраняется и не восстанавливается, за исключением экспортируемых переменных."

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"Прикрепленные C# скрипты должны относиться к классу, который имеет имя "
"класса, соответствующее имени файла."

#, fuzzy
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"Есть некоторые методы, такие как ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` и метод соединения сигналов ``Connect()``, которые "
"полагаются на соглашениях именования API ``snake_case`` от Godot. Так, "
"например, при использовании ``CallDeferred(\"AddChild\")``, ``AddChild`` не "
"будет работать, потому что API ожидает исходную ``snake_case`` версию "
"``add_child``. Однако вы можете использовать любые пользовательские свойства "
"или методы без этого ограничения."

#, fuzzy
msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"Экспорт Mono проектов поддерживается для настольных платформ (Linux, Windows "
"и macOS), Android, HTML5 и iOS. Единственная платформа, которая еще не "
"поддерживается, - это UWP."

#, fuzzy
msgid "Common pitfalls"
msgstr "Комментарии"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""

msgid "Performance of C# in Godot"
msgstr "Производительность C# в Godot"

#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"Согласно некоторым предварительным `бенчмарк-тестам <https://github.com/cart/"
"godot3-bunnymark>`_, производительность C# в Godot — пусть и находится в "
"пределах одной величины — что приблизительно **в ~4 раза** выше, чем в "
"GDScript в некоторых наивных случаях. Но C++ до сих пор немного быстрее; "
"производительность будет зависеть от вашего варианта использования. Но "
"помните, что быстродействия GDScript будет вполне достаточно для большинства "
"основных задач по написанию сценариев. Хоть C# и производительнее, но он "
"требует выполнение достаточно дорогостоящего маршалинга, когда речь заходит "
"об использовании C# в Godot."

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""

msgid "Using NuGet packages in Godot"
msgstr "Использование пакетов NuGet в Godot"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ пакеты могут быть установлены и "
"использованы вместе с Godot, как и в любом другом C# проекте. Множество IDE "
"способны добавлять пакеты напрямую. Если необходимо, вы можете добавить их "
"вручную, добавив ссылку на пакет в ``.csproj`` файл, который расположен в "
"корне проекта:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"Начиная с Godot 3.2.3, Godot автоматически загружает и устанавливает недавно "
"добавленные пакеты NuGet при следующей сборке проекта."

msgid "Profiling your C# code"
msgstr "Профилирование вашего C# кода"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr ""

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr ""

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr ""

#, fuzzy
msgid "Visual Studio."
msgstr "Visual Studio Code"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""

msgid "Translation status"
msgstr "Статус перевода"
