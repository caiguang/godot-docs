# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Heads up display"
msgstr ""

msgid ""
"The final piece our game needs is a User Interface (UI) to display things "
"like score, a \"game over\" message, and a restart button."
msgstr ""
"Posledním kouskem, který naše hra potřebuje, je UI: rozhraní pro zobrazování "
"věcí, jako je skóre, zpráva „konec hry“ a tlačítko restartu."

#, fuzzy
msgid ""
"Create a new scene, click the \"Other Node\" button and add a :ref:"
"`CanvasLayer <class_CanvasLayer>` node named ``HUD``. \"HUD\" stands for "
"\"heads-up display\", an informational display that appears as an overlay on "
"top of the game view."
msgstr ""
"Vytvořte novou scénu a přidejte uzel s názvem ``HUD`` :ref:`CanvasLayer "
"<class_CanvasLayer>`. „HUD“ znamená „heads-up display“, informační displej, "
"který se zobrazuje jako překryv v horní části herní obrazovky."

msgid ""
"The :ref:`CanvasLayer <class_CanvasLayer>` node lets us draw our UI elements "
"on a layer above the rest of the game, so that the information it displays "
"isn't covered up by any game elements like the player or mobs."
msgstr ""
"Uzel :ref:`CanvasLayer <class_CanvasLayer>` umožňuje nakreslit naše prvky "
"uživatelského rozhraní do vrstvy nad zbytkem hry, takže informace, které "
"zobrazuje, nejsou zakryty žádnými herními prvky, jako je hráč nebo nepřátelé."

msgid "The HUD needs to display the following information:"
msgstr "HUD musí zobrazit následující informace:"

msgid "Score, changed by ``ScoreTimer``."
msgstr "Skóre, změněno uzlem ``ScoreTimer``."

msgid "A message, such as \"Game Over\" or \"Get Ready!\""
msgstr "Zprávu, například „Game Over“ nebo „Připravte se!“"

msgid "A \"Start\" button to begin the game."
msgstr "Tlačítko \"Start\" pro zahájení hry."

msgid ""
"The basic node for UI elements is :ref:`Control <class_Control>`. To create "
"our UI, we'll use two types of :ref:`Control <class_Control>` nodes: :ref:"
"`Label <class_Label>` and :ref:`Button <class_Button>`."
msgstr ""
"Základní uzel pro prvky uživatelského rozhraní je :ref:`Control "
"<class_Control>`. K vytvoření našeho uživatelského rozhraní použijeme dva "
"typy :ref:`Control <class_Control>` nodes: :ref:`Label <class_Label>` a :ref:"
"`Button <class_Button>`."

msgid "Create the following as children of the ``HUD`` node:"
msgstr "Jako podřízené uzlu ``HUD`` vytvořte následující:"

msgid ":ref:`Label <class_Label>` named ``ScoreLabel``."
msgstr ":ref:`Label <class_Label>` s názvem ``ScoreLabel``."

msgid ":ref:`Label <class_Label>` named ``Message``."
msgstr ":ref:`Label <class_Label>` pojmenovaný ``Message``."

msgid ":ref:`Button <class_Button>` named ``StartButton``."
msgstr ":ref:`Button <class_Button>` s názvem ``StartButton``."

msgid ":ref:`Timer <class_Timer>` named ``MessageTimer``."
msgstr ":ref:`Timer <class_Timer>` s názvem ``MessageTimer``."

msgid ""
"Click on the ``ScoreLabel`` and type a number into the ``Text`` field in the "
"Inspector. The default font for ``Control`` nodes is small and doesn't scale "
"well. There is a font file included in the game assets called \"Xolonium-"
"Regular.ttf\". To use this font, do the following:"
msgstr ""
"Klikněte na ``ScoreLabel`` a zadejte číslo do pole ``Text`` v Inspektoru. "
"Výchozí písmo pro uzly ``Control`` je malé a neškáluje se dobře. Ve "
"herníchzdrojích je obsažen soubor s názvem „Xolonium-Regular.ttf“. Chcete-li "
"použít toto písmo, proveďte následující:"

#, fuzzy
msgid ""
"Under \"Theme Overrides > Fonts\", choose \"Load\" and select the \"Xolonium-"
"Regular.ttf\" file."
msgstr ""
"Klikněte na přidaný \"DynamicFont\" a v části \"Font > FontData\" zvolte "
"\"Load\" a vyberte soubor \"Xolonium-Regular.ttf\"."

msgid ""
"The font size is still too small, increase it to ``64`` under \"Theme "
"Overrides > Font Sizes\". Once you've done this with the ``ScoreLabel``, "
"repeat the changes for the ``Message`` and ``StartButton`` nodes."
msgstr ""

#, fuzzy
msgid ""
"**Anchors:** ``Control`` nodes have a position and size, but they also have "
"anchors. Anchors define the origin - the reference point for the edges of "
"the node."
msgstr ""
"**Kotvy (Anchors) a okraje(Margins):** Uzly ``Control`` mají polohu a "
"velikost, ale mají také kotvy a okraje. Kotvy definují počátek - referenční "
"bod pro okraje uzlu. Okraje se aktualizují automaticky, když přesunete nebo "
"změníte velikost řídicího uzlu. Představují vzdálenost od okrajů řídicího "
"uzlu k jeho kotvě. Viz :ref:`doc_design_interfaces_with_the_control_nodes` "
"pro více informací."

msgid ""
"Arrange the nodes as shown below. You can drag the nodes to place them "
"manually, or for more precise placement, use \"Anchor Presets\"."
msgstr ""
"Uzly můžete přetáhnout a umístit je ručně, nebo pro přesnější umístění "
"použijte následující nastavení."

msgid "ScoreLabel"
msgstr "ScoreLabel"

msgid "Add the text ``0``."
msgstr ""

msgid ""
"Set the \"Horizontal Alignment\" and \"Vertical Alignment\" to ``Center``."
msgstr ""

msgid "Choose the \"Anchor Preset\" ``Center Top``."
msgstr ""

msgid "Message"
msgstr "Zpráva"

msgid "Add the text ``Dodge the Creeps!``."
msgstr "Přidejte text ``Dodge the Creeps!``."

msgid ""
"Set the \"Autowrap Mode\" to ``Word``, otherwise the label will stay on one "
"line."
msgstr ""

msgid ""
"Under \"Control - Layout/Transform\" set \"Size X\"  to ``480`` to use the "
"entire width of the screen."
msgstr ""

msgid "Choose the \"Anchor Preset\" ``Center``."
msgstr ""

msgid "StartButton"
msgstr "StartButton"

msgid "Add the text ``Start``."
msgstr "Přidejte text ``Start``."

msgid ""
"Under \"Control - Layout/Transform\", set \"Size X\" to ``200`` and \"Size "
"Y\" to ``100`` to add a little bit more padding between the border and text."
msgstr ""

msgid "Choose the \"Anchor Preset\" ``Center Bottom``."
msgstr ""

msgid "Under \"Control - Layout/Transform\", set \"Position Y\" to ``580``."
msgstr ""

msgid ""
"On the ``MessageTimer``, set the ``Wait Time`` to ``2`` and set the ``One "
"Shot`` property to \"On\"."
msgstr ""
"V ``MessageTimer`` nastavte ``Wait Time`` na ``2`` a nastavte vlastnost "
"``One Shot`` na ``On``."

msgid "Now add this script to ``HUD``:"
msgstr "Nyní přidejte tento skript do ``HUD``:"

msgid ""
"We now want to display a message temporarily, such as \"Get Ready\", so we "
"add the following code"
msgstr ""
"Nyní cheme zobrazit dočasnou zprávu, například „Připravte se“, takže přidáme "
"následující kód"

#, fuzzy
msgid ""
"We also need to process what happens when the player loses. The code below "
"will show \"Game Over\" for 2 seconds, then return to the title screen and, "
"after a brief pause, show the \"Start\" button."
msgstr ""
"Tato funkce se volá, když hráč prohraje. Na 2 sekundy se zobrazí „Game "
"Over“, poté se vratíme na titulní obrazovku a po krátké pauze se zobrazí "
"tlačítko „Start“."

msgid ""
"This function is called when the player loses. It will show \"Game Over\" "
"for 2 seconds, then return to the title screen and, after a brief pause, "
"show the \"Start\" button."
msgstr ""
"Tato funkce se volá, když hráč prohraje. Na 2 sekundy se zobrazí „Game "
"Over“, poté se vratíme na titulní obrazovku a po krátké pauze se zobrazí "
"tlačítko „Start“."

msgid ""
"When you need to pause for a brief time, an alternative to using a Timer "
"node is to use the SceneTree's ``create_timer()`` function. This can be very "
"useful to add delays such as in the above code, where we want to wait some "
"time before showing the \"Start\" button."
msgstr ""
"Pokud potřebujete pozastavit na krátkou dobu, alternativou k použití uzlu "
"Timer je použití funkce ``create_timer()`` třídy SceneTree. To může být "
"velmi užitečné pro přidání zpoždění, jako například ve výše uvedeném kódu, "
"kdy chceme počkat, než se zobrazí tlačítko „Start“."

msgid "Add the code below to ``HUD`` to update the score"
msgstr ""

#, fuzzy
msgid ""
"Connect the ``pressed()`` signal of ``StartButton`` and the ``timeout()`` "
"signal of ``MessageTimer``, and add the following code to the new functions:"
msgstr ""
"Připojte signál ``timeout()`` uzlu ``MessageTimer`` a ``pressed()`` signál "
"uzlu ``StartButton`` a k novým funkcím přidejte následující kód:"

msgid "Connecting HUD to Main"
msgstr "Připojení HUD k Main"

msgid ""
"Now that we're done creating the ``HUD`` scene, go back to ``Main``. "
"Instance the ``HUD`` scene in ``Main`` like you did the ``Player`` scene. "
"The scene tree should look like this, so make sure you didn't miss anything:"
msgstr ""
"Nyní, když jsme dokončili scénu ``HUD``, vraťte se ke scéně ``Main``. "
"Vytvořte instanci scény ``HUD`` ve ``Main``, jak jste to udělali se scénou "
"``Player``. Strom scény by měl vypadat takto, takže se ujistětě, že vám něco "
"neuniklo:"

msgid ""
"Now we need to connect the ``HUD`` functionality to our ``Main`` script. "
"This requires a few additions to the ``Main`` scene:"
msgstr ""
"Nyní musíme propojit funkcionalitu ``HUD`` se skriptem ``Main``. To vyžaduje "
"několik přídavků ke scéně ``Main``:"

#, fuzzy
msgid ""
"In the Node tab, connect the HUD's ``start_game`` signal to the "
"``new_game()`` function of the Main node by clicking the \"Pick\" button in "
"the \"Connect a Signal\" window and selecting the ``new_game()`` method or "
"type \"new_game\" below \"Receiver Method\" in the window. Verify that the "
"green connection icon now appears next to ``func new_game()`` in the script."
msgstr ""
"Na kartě Uzel připojte signál ``start_game`` scény HUD k funkci "
"``new_game()`` Main uzlu zadáním \"new_game\" v \"Metoda příjemce\" v okně "
"\"Připojit signál\". Ověřte, že zelená ikonka připojení se nyní objeví ve "
"skriptu vedle ``func new_game()``."

msgid ""
"In ``new_game()``, update the score display and show the \"Get Ready\" "
"message:"
msgstr ""
"V ``new_game()`` aktualizujte zobrazení skóre a zobrazte zprávu „Připravte "
"se“:"

msgid "In ``game_over()`` we need to call the corresponding ``HUD`` function:"
msgstr "V ``game_over()`` musíme zavolat odpovídající `HUD`` funkci:"

#, fuzzy
msgid ""
"Finally, add this to ``_on_score_timer_timeout()`` to keep the display in "
"sync with the changing score:"
msgstr ""
"Nakonec přidejte toto do ``_on_ScoreTimer_timeout()``, aby byl displej "
"synchronizován s měnícím se skóre:"

#, fuzzy
msgid ""
"Remember to remove the call to ``new_game()`` from ``_ready()`` if you "
"haven't already, otherwise your game will start automatically."
msgstr ""
"Pokud jste si jisti, že vše funguje, odeberte volání ``new_game()`` z "
"``_ready()``."

#, fuzzy
msgid ""
"Now you're ready to play! Click the \"Play the Project\" button. You will be "
"asked to select a main scene, so choose ``main.tscn``."
msgstr ""
"Nyní jste připraveni hrát! Klikněte na tlačítko „Přehrát projekt“. Budete "
"vyzváni k výběru hlavní scény, takže zvolte ``Main.tscn``."

msgid "Removing old creeps"
msgstr "Odstranění starých nepřátel"

msgid ""
"If you play until \"Game Over\" and then start a new game right away, the "
"creeps from the previous game may still be on the screen. It would be better "
"if they all disappeared at the start of a new game. We just need a way to "
"tell *all* the mobs to remove themselves. We can do this with the \"group\" "
"feature."
msgstr ""
"Pokud budete hrát až do „Game Over“ a ihned poté zahájíte novou hru, můžou "
"se na obrazovce stále zobrazovat nepřátelé z předchozí hry. Bylo by lepší, "
"kdyby všichni zmizeli na začátku hry nové. Potřebujeme jen způsob, jak říct "
"všem nepřátelům, aby zmizeli. Můžeme to udělat pomocí funkcionality "
"„skupina“."

msgid ""
"In the ``Mob`` scene, select the root node and click the \"Node\" tab next "
"to the Inspector (the same place where you find the node's signals). Next to "
"\"Signals\", click \"Groups\" and you can type a new group name and click "
"\"Add\"."
msgstr ""
"Ve scéně ``Mob`` vyberte kořenový uzel a klikněte na kartu \"Uzel\" vedle "
"Inspektoru (na stejném místě, kde najdete signály uzlu). Vedle položky "
"\"Signály\" klikněte na \"Skupiny\" a můžete zadat nový název skupiny a "
"kliknout na tlačítko \"Přidat\"."

msgid ""
"Now all mobs will be in the \"mobs\" group. We can then add the following "
"line to the ``new_game()`` function in ``Main``:"
msgstr ""
"Nyní budou všechny nepřátelé ve skupině „mobs“. K funkci ``game_over()`` v "
"``Main`` pak můžeme přidat následující řádek:"

msgid ""
"The ``call_group()`` function calls the named function on every node in a "
"group - in this case we are telling every mob to delete itself."
msgstr ""
"Funkce ``call_group()`` volá pojmenovanou funkci na každém uzlu ve skupině - "
"v tomto případě říkáme každému nepříteli, aby se sám odstranil."

msgid ""
"The game's mostly done at this point. In the next and last part, we'll "
"polish it a bit by adding a background, looping music, and some keyboard "
"shortcuts."
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
