# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Statické typování v jazyce GDScript"

msgid "In this guide, you will learn:"
msgstr "V této příručce se dozvíte:"

msgid "how to use static typing in GDScript;"
msgstr "Statické typování v jazyce GDScript;"

msgid "that static types can help you avoid bugs;"
msgstr "Že **statické typy vám mohou pomoci vyhnout se chybám** ;"

msgid "that static typing improves your experience with the editor."
msgstr ""

msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Je jen na vás, kde a jak tuto novou jazykovou funkci využijete: můžete ji "
"používat pouze v některých citlivých souborech GDScript, používat ji všude "
"nebo psát kód jako dosud."

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Statické typy lze použít pro proměnné, konstanty, funkce, parametry a "
"návratové typy."

msgid "A brief look at static typing"
msgstr "Stručný pohled na statické typování"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"S typovaným GDScriptem dokáže Godot při psaní kódu odhalit ještě více chyb! "
"Vám i vašim kolegům poskytuje více informací při práci, protože při volání "
"metody se zobrazují typy argumentů."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Představte si, že programujete inventář. Vytvoříte uzel ``Item`` a pak "
"``Inventory``. Chcete-li do inventáře přidat položky, měli by lidé, kteří s "
"vaším kódem pracují, metodě ``Inventory.add`` vždy předat uzel ``Item``. "
"Pomocí typů to můžete vynutit:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Statické typy také poskytují lepší možnosti pro automatické doplňování kódu. "
"Níže můžete vidět rozdíl mezi dynamickými a statickými možnostmi doplňování "
"pro třídu s názvem ``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

msgid "Completion options for dynamic typed code."
msgstr ""

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"To je způsobeno dynamickým kódem. Godot nemůže vědět, jaký typ uzlu nebo "
"hodnoty předáváte funkci. Pokud však typ zapíšete explicitně, získáte z uzlu "
"všechny veřejné metody a proměnné:"

msgid "Completion options for static typed code."
msgstr ""

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Celkově lze říci, že typované programování poskytuje strukturovanější "
"zážitek. Pomáhá předcházet chybám a zlepšuje aspekt sebedokumentace vašich "
"skriptů. To je obzvláště užitečné, když pracujete v týmu nebo na dlouhodobém "
"projektu: studie ukázaly, že vývojáři tráví většinu času čtením kódu jiných "
"lidí nebo skriptů, které napsali v minulosti a zapomněli na ně. Čím je kód "
"přehlednější a strukturovanější, tím rychleji mu porozumíte a tím rychleji "
"se můžete posunout dál."

msgid "How to use static typing"
msgstr "Jak používat statické typování"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Chcete-li definovat typ proměnné nebo konstanty, napište za název proměnné "
"dvojtečku a poté její typ. Např. ``var health: int``. Tím si vynutíte, aby "
"typ proměnné zůstal vždy stejný:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot se pokusí odvodit typy, pokud napíšete dvojtečku, ale typ vynecháte:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr ""
"V exportu není žádný rozdíl mezi stíny ``Buffer Shadow`` a ``Ray Shadow``."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Pro konstanty nemusíte uvádět typ, Godot je nastaví automaticky z přiřazené "
"hodnoty. Přesto tak můžete učinit, aby byl záměr vašeho kódu jasnější."

msgid "What can be a type hint"
msgstr "Jaký může být tip na typy"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "Zde je kompletní příklad třídy založený na těchto pokynech:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

#, fuzzy
msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Built-in <doc_gdscript_builtin_types>`"

#, fuzzy
msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"Základní třídy a uzly (``Object``, ``Node``, ``Area2D``, ``Camera2D`` atd.)"

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Třídy skriptů <doc_gdscript_basics_class_name>`"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Třídy skriptů <doc_gdscript_basics_class_name>`"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Jako typy můžete použít libovolnou třídu, včetně vlastních tříd. Ve "
"skriptech je lze využítt dvěma způsoby. První způsob spočívá v tom, že "
"skript, který chcete použít jako typ, předem načtete do konstanty:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"Druhým způsobem je použití klíčového slova ``class_name`` při vytváření "
"vlastní třídy. Pro výše uvedený příklad by váš soubor Rifle.gd vypadal takto:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Pokud použijete ``class_name``, Godot zaregistruje typ Rifle v editoru "
"globálně a můžete jej využít kdekoli, aniž byste ho museli přednačítat do "
"konstanty:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Definujte návratový typ funkce pomocí šipky ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Chcete-li definovat návratový typ funkce, napište za její deklaraci pomlčku "
"a pravoúhlou závorku ``->`` a za ní návratový typ:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"Typ ``void`` znamená, že funkce nic nevrací. Stejně jako u proměnných můžete "
"použít libovolný typ:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "Jako návratové typy můžete použít i vlastní uzly:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

msgid "Example::"
msgstr "Příklad::"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Definujte návratový typ funkce pomocí šipky ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Přetypování"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"V typovaných jazycích je klíčovým konceptem přetypování. Je to převod "
"hodnoty jednoho typu na typ druhý."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Představte si ve své hře nepřítele, který ``dědí Area2D``. Chcete, aby se "
"střetl s hráčem, což je ``KinematicBody2D`` rozšířený skriptem "
"``PlayerController``. K detekci kolize použijete signál ``on_body_entered``. "
"S typovaným kódem bude těleso, které detekujete, generické "
"``PhysicsBody2D``, a ne váš ``PlayerController`` ve zpětném volání "
"``_on_body_entered``."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Pomocí klíčového slova ``as`` pro přetypování a opětovného použití dvojtečky "
"``:`` můžete zkontrolovat, zda je proměnná ``PhysicsBody2D`` skutečně vaším "
"hráčem. A také tím donutíte proměnnou, aby se přidržela typu "
"``PlayerController``:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Protože se jedná o vlastní typ, pokud ``body`` nerozšiřuje "
"``PlayerController``, bude proměnná ``player`` nastavena na ``null``. Toho "
"můžeme využít k ověření, zda je tělo hráčem, nebo ne. Díky tomuto "
"přetypování také získáme plnohodnotné automatické doplňování proměnné hráč."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Pokud se pokusíte použít ``as`` na vestavěný typ a nepodaří se to, Godot "
"ukončí provádění chybovou hláškou."

msgid "Safe lines"
msgstr "Bezpečné řádky"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Přetypování pomocí ``as`` můžete také použít k zajištění bezpečnosti řádků . "
"Bezpečné řádky jsou novým nástrojem v Godotu 3.1, který vám řekne, kdy jsou "
"nejednoznačné řádky kódu typově bezpečné. Vzhledem k tomu, že můžete "
"kombinovat typovaný a dynamický kód, nemá Godot občas dostatek informací, "
"aby věděl, zda instrukce za běhu vyvolá chybu, nebo ne."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"K tomu dojde, když získáte podřízený uzel. Vezměme si například časovač: "
"pomocí dynamického kódu můžete získat uzel pomocí ``$Timer``. GDScript "
"podporuje `duck-typing <https://stackoverflow.com/a/4205163/8125343>`__, "
"takže i když je váš časovač typu ``Timer``, je zároveň ``Node`` a "
"``Object``, tj. dvěma třídami, které rozšiřuje. V dynamickém jazyce GDScript "
"vás také nezajímá typ uzlu, pokud má metody, které potřebujete volat."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Pomocí ``as`` můžete Godotovi sdělit, jaký typ očekáváte, již při získávání "
"uzlu: ``($Timer as Timer)``, ``($Player as KinematicBody2D)``, atd. Godot se "
"ujistí, že typ funguje, a pokud ano, číslo řádku se v levé části editoru "
"skriptu změní na zelené."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Nebezpečný kód (řádek 7) vs Bezpečný kód (řádek 6 a 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"V nastavení editoru můžete bezpečné čáry vypnout nebo změnit jejich barvu."

msgid "Typed or dynamic: stick to one style"
msgstr "Typizované nebo dynamické: držte se jednoho stylu"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"V jednom projektu mohou vedle sebe existovat typované a dynamické jazyky "
"GDScript. Doporučujeme však držet se jednoho z těchto stylů, abyste "
"zajistili konzistenci své kódové základny a příčetnost svých kolegů. Pro "
"všechny je snazší spolupracovat, pokud dodržujete stejné zásady, rychleji se "
"pak čte a chápe cizí kód."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"Zadaný kód vyžaduje trochu více psaní, ale získáte výhody, které jsme "
"probrali výše. Zde je příklad stejného prázdného skriptu v dynamickém stylu:"

#, fuzzy
msgid "And with static typing::"
msgstr "A se statickým typováním:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Jak vidíte, typy můžete také používat s virtuálními metodami enginu. Zpětná "
"volání signálů, stejně tak jako libovolná jiná metoda, mohou používat typy "
"též. Zde je signál ``body_entered`` v dynamickém stylu:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "A stejné zpětné volání s typy:"

msgid "Warning system"
msgstr "Systém varování"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"Dokumentace k systému varování GDScriptu byla přesunuta na :ref:"
"`doc_gdscript_warning_system`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Další významnou výhodou typovaného jazyka GDScript je nový systém "
"**varování**. Od verze 3.1 vám Godot poskytuje varování ohledně vašeho kódu "
"již v průběhu jeho psaní: engine identifikuje části vašeho kódu, které mohou "
"za běhu vést k problémům, ale nechá vás rozhodnout, zda chcete kód ponechat "
"tak, jak je. Více o tom za chvíli."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Případy, kdy nelze zadat typy"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Na závěr tohoto úvodu se věnujme několika případům, kdy nelze použít typy. "
"Všechny níže uvedené příklady **vyvolají chyby**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr "Typ jednotlivých prvků pole nelze určit. Vyvolá to chybu:"

msgid "Nested types are not currently supported::"
msgstr "Vnořené typy nejsou v současné době podporovány::"

msgid "Typed dictionaries are not currently supported::"
msgstr "Typované slovníky nejsou v současné době podporovány::"

msgid "Summary"
msgstr "Shrnutí"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"Typovaný GDScript je výkonný nástroj. Je k dispozici od verze 3.1 Godotu a "
"pomáhá psát strukturovanější kód, vyhnout se běžným chybám a vytvářet "
"škálovatelné systémy. V budoucnu vám statické typy přinesou také příjemné "
"zvýšení výkonu díky chystaným optimalizacím překladače."

msgid "Translation status"
msgstr "Stav překladu"
