# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: cs\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Android in-app purchases"
msgstr ""

msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin "
"compatible with Godot 4 which uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`_."
msgstr ""

msgid "Usage"
msgstr "Používání"

msgid "Getting started"
msgstr "Začínáme"

msgid ""
"Make sure you have enabled and successfully set up :ref:`Android Gradle "
"Builds <doc_android_gradle_build>`. Follow the compiling instructions on the "
"``GodotGooglePlayBilling`` `github page <https://github.com/godotengine/"
"godot-google-play-billing>`__."
msgstr ""

msgid ""
"Then put the files `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` and `./GodotGooglePlayBilling.gdap` "
"into your project in the `res://android/plugins` folder."
msgstr ""

msgid ""
"The plugin should now show up in the Android export settings, where you can "
"enable it."
msgstr ""

#, fuzzy
msgid "Initialize the plugin"
msgstr "Instalace doplňku"

msgid "To use the ``GodotGooglePlayBilling`` API:"
msgstr ""

msgid "Obtain a reference to the ``GodotGooglePlayBilling`` singleton"
msgstr ""

msgid "Connect handlers for the plugin signals"
msgstr ""

#, fuzzy
msgid "Call ``startConnection``"
msgstr "``připojení``"

msgid "Initialization example:"
msgstr "Příklad inicializace:"

msgid ""
"The API must be in a connected state prior to use. The ``connected`` signal "
"is sent when the connection process succeeds. You can also use ``isReady()`` "
"to determine if the plugin is ready for use. The ``getConnectionState()`` "
"function returns the current connection state of the plugin."
msgstr ""

msgid "Return values for ``getConnectionState()``:"
msgstr ""

msgid "Query available items"
msgstr "Dotaz na dostupné položky"

msgid ""
"Once the API has connected, query SKUs using ``querySkuDetails()``. You must "
"successfully complete a SKU query before calling the ``purchase()`` or "
"``queryPurchases()`` functions, or they will return an error. "
"``querySkuDetails()`` takes two parameters: an array of SKU name strings, "
"and a string specifying the type of SKU being queried. The SKU type string "
"should be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The name strings in the array should match the SKU product "
"ids defined in the Google Play Console entry for your app."
msgstr ""

msgid "Example use of ``querySkuDetails()``:"
msgstr ""

msgid "Query user purchases"
msgstr ""

msgid ""
"To retrieve a user's purchases, call the ``queryPurchases()`` function "
"passing a string with the type of SKU to query. The SKU type string should "
"be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The ``query_purchases_response`` signal is sent with the "
"result. The signal has a single parameter: a :ref:`Dictionary "
"<class_Dictionary>` with a status code and either an array of purchases or "
"an error message. Only active subscriptions and non-consumed one-time "
"purchases are included in the purchase array."
msgstr ""

msgid "Example use of ``queryPurchases()``:"
msgstr ""

msgid ""
"You should query purchases during startup after successfully retrieving SKU "
"details. Since the user may make a purchase or resolve a pending transaction "
"from outside your app, you should recheck for purchases when resuming from "
"the background. To accomplish this, you can use the ``billing_resume`` "
"signal."
msgstr ""

msgid "Example use of ``billing_resume``:"
msgstr ""

msgid ""
"For more information on processing the purchase items returned by "
"``queryPurchases()``, see `Processing a purchase item`_"
msgstr ""

msgid "Purchase an item"
msgstr ""

msgid ""
"To initiate the purchase flow for an item, call ``purchase()`` passing the "
"product id string of the SKU you wish to purchase. Reminder: you **must** "
"query the SKU details for an item before you can pass it to ``purchase()``."
msgstr ""

msgid "Example use of ``purchase()``:"
msgstr ""

msgid ""
"The payment flow will send a ``purchases_updated`` signal on success or a "
"``purchase_error`` signal on failure."
msgstr ""

#, fuzzy
msgid "Processing a purchase item"
msgstr "Vytvoření spritu"

msgid ""
"The ``query_purchases_response`` and ``purchases_updated`` signals provide "
"an array of purchases in :ref:`Dictionary <class_Dictionary>` format. The "
"purchase Dictionary includes keys that map to values of the Google Play "
"Billing `Purchase <https://developer.android.com/reference/com/android/"
"billingclient/api/Purchase>`_ class."
msgstr ""

msgid "Purchase fields:"
msgstr ""

msgid "Check purchase state"
msgstr ""

msgid ""
"Check the ``purchase_state`` value of a purchase to determine if a purchase "
"was completed or is still pending."
msgstr ""

msgid "PurchaseState values:"
msgstr ""

msgid ""
"If a purchase is in a ``PENDING`` state, you should not award the contents "
"of the purchase or do any further processing of the purchase until it "
"reaches the ``PURCHASED`` state. If you have a store interface, you may wish "
"to display information about pending purchases needing to be completed in "
"the Google Play Store. For more details on pending purchases, see `Handling "
"pending transactions <https://developer.android.com/google/play/billing/"
"integrate#pending>`_ in the Google Play Billing Library documentation."
msgstr ""

msgid "Consumables"
msgstr "Spotřebovatelné předměty"

msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase()`` passing the ``purchase_token`` value from the "
"purchase dictionary. Calling ``consumePurchase()`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, it will no longer appear in subsequent ``queryPurchases()`` calls "
"unless it is repurchased."
msgstr ""

msgid "Example use of ``consumePurchase()``:"
msgstr ""

msgid "Acknowledging purchases"
msgstr ""

msgid ""
"If your in-app item is a one-time purchase, you must acknowledge the "
"purchase by calling the ``acknowledgePurchase()`` function, passing the "
"``purchase_token`` value from the purchase dictionary. If you do not "
"acknowledge a purchase within three days, the user automatically receives a "
"refund, and Google Play revokes the purchase. If you are calling "
"``comsumePurchase()`` it automatically acknowledges the purchase and you do "
"not need to call ``acknowledgePurchase()``."
msgstr ""

msgid "Example use of ``acknowledgePurchase()``:"
msgstr ""

msgid "Subscriptions"
msgstr "Předplatné"

msgid ""
"Subscriptions work mostly like regular in-app items. Use ``\"subs\"`` as the "
"second argument to ``querySkuDetails()`` to get subscription details. Pass "
"``\"subs\"`` to ``queryPurchases()`` to get subscription purchase details."
msgstr ""

msgid ""
"You can check ``is_auto_renewing`` in the a subscription purchase returned "
"from ``queryPurchases()`` to see if a user has cancelled an auto-renewing "
"subscription."
msgstr ""

msgid ""
"You need to acknowledge new subscription purchases, but not automatic "
"subscription renewals."
msgstr ""

msgid ""
"If you support upgrading or downgrading between different subscription "
"levels, you should use ``updateSubscription()`` to use the subscription "
"update flow to change an active subscription. Like ``purchase()``, results "
"are returned by the ``purchases_updated`` and ``purchase_error`` signals. "
"There are three parameters to ``updateSubscription()``:"
msgstr ""

msgid "The purchase token of the currently active subscription"
msgstr ""

msgid "The product id string of the subscription SKU to change to"
msgstr ""

msgid "The proration mode to apply to the subscription."
msgstr ""

msgid "The proration values are defined as:"
msgstr ""

msgid "Default behavior is ``IMMEDIATE_WITH_TIME_PRORATION``."
msgstr ""

msgid "Example use of ``updateSubscription``:"
msgstr ""

msgid ""
"The ``confirmPriceChange()`` function can be used to launch price change "
"confirmation flow for a subscription. Pass the product id of the "
"subscription SKU subject to the price change. The result will be sent by the "
"``price_change_acknowledged`` signal."
msgstr ""

msgid "Example use of ``confirmPriceChange()``:"
msgstr ""

msgid "Translation status"
msgstr "Stav překladu"
