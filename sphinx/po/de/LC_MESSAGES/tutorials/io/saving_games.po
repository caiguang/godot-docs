# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Saving games"
msgstr "Spielestände speichern"

msgid "Introduction"
msgstr "Einführung"

msgid ""
"Save games can be complicated. For example, it may be desirable to store "
"information from multiple objects across multiple levels. Advanced save game "
"systems should allow for additional information about an arbitrary number of "
"objects. This will allow the save function to scale as the game grows more "
"complex."
msgstr ""
"Das Behandeln von Spielständen kann komplex sein. So kann es zum Beispiel "
"wünschenswert sein, Informationen von mehreren Objekten über mehrere Levels "
"hinweg zu speichern. Fortgeschrittene Spielespeichersysteme sollten "
"zusätzliche Informationen über eine beliebige Anzahl von Objekten "
"ermöglichen. Dadurch kann die Speicherfunktion skaliert werden, wenn das "
"Spiel komplexer wird."

msgid ""
"If you're looking to save user configuration, you can use the :ref:"
"`class_ConfigFile` class for this purpose."
msgstr ""
"Wenn Sie die Benutzerkonfiguration speichern möchten, können Sie zu diesem "
"Zweck die Klasse :ref:`class_ConfigFile` verwenden."

msgid ""
"You can see how saving and loading works in action using the `Saving and "
"Loading (Serialization) demo project <https://github.com/godotengine/godot-"
"demo-projects/blob/master/loading/serialization>`__."
msgstr ""
"Sie können sehen, wie das Speichern und Laden in Aktion funktioniert, indem "
"Sie das `Speichern und Laden (Serialisierung) Demo-Projekt <https://github."
"com/godotengine/godot-demo-projects/blob/master/loading/serialization>`__ "
"verwenden."

msgid "Identify persistent objects"
msgstr "Identifizieren beständiger Objekte"

msgid ""
"Firstly, we should identify what objects we want to keep between game "
"sessions and what information we want to keep from those objects. For this "
"tutorial, we will use groups to mark and handle objects to be saved, but "
"other methods are certainly possible."
msgstr ""
"Erstens sollten wir ermitteln, welche Objekte wir zwischen den "
"Spielsitzungen behalten möchten und welche Informationen wir von diesen "
"Objekten behalten möchten. Für dieses Tutorial verwenden wir Gruppen, um zu "
"speichernde Objekte zu markieren und zu behandeln, aber andere Methoden sind "
"genauso möglich."

msgid ""
"We will start by adding objects we wish to save to the \"Persist\" group. We "
"can do this through either the GUI or script. Let's add the relevant nodes "
"using the GUI:"
msgstr ""
"Wir beginnen mit dem Hinzufügen von Objekten, die wir der Gruppe \"Persist\" "
"speichern möchten. Dies können wir entweder über die GUI oder das Skript "
"tun. Fügen wir die entsprechenden Nodes mithilfe der GUI hinzu:"

msgid ""
"Once this is done, when we need to save the game, we can get all objects to "
"save them and then tell them all to save with this script:"
msgstr ""
"Sobald dies erledigt ist und wir das Spiel speichern müssen, können wir alle "
"Objekte dazu bringen, sie zu speichern und ihnen dann sagen, dass sie mit "
"diesem Skript speichern sollen:"

msgid "Serializing"
msgstr "Serialisierung"

msgid ""
"The next step is to serialize the data. This makes it much easier to read "
"from and store to disk. In this case, we're assuming each member of group "
"Persist is an instanced node and thus has a path. GDScript has helper class :"
"ref:`JSON<class_json>` to convert between dictionary and string, Our node "
"needs to contain a save function that returns this data. The save function "
"will look like this:"
msgstr ""
"Der nächste Schritt ist die Serialisierung der Daten. Dies erleichtert das "
"Auslesen und Speichern auf der Festplatte. In diesem Fall gehen wir davon "
"aus, dass jedes Mitglied der Gruppe Persist ein instanziierter Node ist und "
"somit einen Pfad hat. GDScript verfügt über die Hilfsklasse :ref:"
"`JSON<class_json>`, um zwischen Dictionary und String zu konvertieren. Unser "
"Node muss eine Speicherfunktion enthalten, die diese Daten zurückgibt. Die "
"Speicherfunktion wird wie folgt aussehen:"

msgid ""
"This gives us a dictionary with the style ``{ \"variable_name\":"
"value_of_variable }``, which will be useful when loading."
msgstr ""
"So erhalten wir ein Dictionary in der Form ``{ \"variable_name\":"
"value_of_variable }``, das beim Laden nützlich sein wird."

msgid "Saving and reading data"
msgstr "Daten speichern und einlesen"

msgid ""
"As covered in the :ref:`doc_filesystem` tutorial, we'll need to open a file "
"so we can write to it or read from it. Now that we have a way to call our "
"groups and get their relevant data, let's use the class :ref:"
"`JSON<class_json>` to convert it into an easily stored string and store them "
"in a file. Doing it this way ensures that each line is its own object, so we "
"have an easy way to pull the data out of the file as well."
msgstr ""
"Wie im :ref:`doc_filesystem`-Tutorial behandelt, müssen wir eine Datei "
"öffnen, damit wir in sie schreiben oder aus ihr lesen können. Da wir nun "
"eine Möglichkeit haben, unsere Gruppen aufzurufen und ihre relevanten Daten "
"zu erhalten, verwenden wir die Klasse :ref:`JSON<class_json>`, um sie in "
"einen einfach zu speichernden String umzuwandeln und ihn in einer Datei zu "
"speichern. Auf diese Weise wird sichergestellt, dass jede Zeile ein eigenes "
"Objekt ist, so dass wir die Daten auch leicht aus der Datei herausholen "
"können."

msgid ""
"Game saved! Now, to load, we'll read each line. Use the :ref:"
"`parse<class_JSON_method_parse>` method to read the JSON string back to a "
"dictionary, and then iterate over the dict to read our values. But we'll "
"need to first create the object and we can use the filename and parent "
"values to achieve that. Here is our load function:"
msgstr ""
"Spiel gespeichert! Um das Spiel zu laden, lesen wir nun jede Zeile. "
"Verwenden Sie die Methode :ref:`parse<class_JSON_method_parse>`, um den JSON-"
"String zurück in ein Dictionary zu lesen, und iterieren Sie dann über das "
"Dictionary, um unsere Werte zu lesen. Aber wir müssen zuerst das Objekt "
"erstellen, und wir können den Dateinamen und die Parent-Werte verwenden, um "
"das zu erreichen. Hier ist unsere Ladefunktion:"

msgid ""
"Now we can save and load an arbitrary number of objects laid out almost "
"anywhere across the scene tree! Each object can store different data "
"depending on what it needs to save."
msgstr ""
"Jetzt können wir eine beliebige Anzahl von Objekten speichern und laden, die "
"fast überall im Szenenbaum angeordnet sind! Jedes Objekt kann "
"unterschiedliche Daten speichern, je nachdem was benötigt wird."

msgid "Some notes"
msgstr "Einige Anmerkungen"

msgid ""
"We have glossed over setting up the game state for loading. It's ultimately "
"up to the project creator where much of this logic goes. This is often "
"complicated and will need to be heavily customized based on the needs of the "
"individual project."
msgstr ""
"Wir haben die Einrichtung des Spielzustands für das Laden nur am Rande "
"erwähnt. Es ist letztendlich Sache des Projektentwicklers, wo ein Großteil "
"dieser Logik hingeht. Dies ist oft kompliziert und muss je nach den "
"Bedürfnissen des einzelnen Projekts stark angepasst werden."

msgid ""
"Additionally, our implementation assumes no Persist objects are children of "
"other Persist objects. Otherwise, invalid paths would be created. To "
"accommodate nested Persist objects, consider saving objects in stages. Load "
"parent objects first so they are available for the :ref:`add_child() "
"<class_node_method_add_child>` call when child objects are loaded. You will "
"also need a way to link children to parents as the :ref:`NodePath "
"<class_nodepath>` will likely be invalid."
msgstr ""
"Außerdem geht unsere Implementierung davon aus, dass keine Persist-Objekte "
"Child-Objekte von anderen Persist-Objekten sind. Andernfalls würden "
"ungültige Pfade entstehen. Um verschachtelte Persist-Objekte unterzubringen, "
"sollten Sie das Speichern von Objekten in Stufen erwägen. Laden Sie zuerst "
"die Parent-Objekte, damit sie für den Aufruf :ref:`add_child() "
"<class_node_method_add_child>` zur Verfügung stehen, wenn die Child-Objekte "
"geladen werden. Sie brauchen auch eine Möglichkeit, Child-Objekte mit Parent-"
"Objekten zu verknüpfen, da der :ref:`NodePath <class_nodepath>` "
"wahrscheinlich ungültig sein wird."

msgid "JSON vs binary serialization"
msgstr "JSON vs. binäre Serialisierung"

msgid ""
"For simple game state, JSON may work and it generates human-readable files "
"that are easy to debug."
msgstr ""
"Für einfache Spielzustände kann JSON funktionieren und erzeugt "
"menschenlesbare Dateien, die leicht zu debuggen sind."

msgid ""
"But JSON has many limitations. If you need to store more complex game state "
"or a lot of it, :ref:`binary serialization<doc_binary_serialization_api>` "
"may be a better approach."
msgstr ""
"Aber JSON hat viele Einschränkungen. Wenn Sie komplexere Spielzustände oder "
"viele davon speichern müssen, ist :ref:`binary "
"serialization<doc_binary_serialization_api>` vielleicht ein besserer Ansatz."

msgid "JSON limitations"
msgstr "JSON-Beschränkungen"

msgid "Here are some important gotchas to know about when using JSON."
msgstr ""
"Hier sind einige wichtige Stolpersteine, die bei der Verwendung von JSON zu "
"beachten sind."

msgid ""
"**Filesize:** JSON stores data in text format, which is much larger than "
"binary formats."
msgstr ""
"**Dateigröße:** JSON speichert Daten im Textformat, das viel größer ist als "
"Binärformate."

msgid ""
"**Data types:** JSON only offers a limited set of data types. If you have "
"data types that JSON doesn't have, you will need to translate your data to "
"and from types that JSON can handle. For example, some important types that "
"JSON can't parse are: ``Vector2``, ``Vector3``, ``Color``, ``Rect2``, and "
"``Quaternion``."
msgstr ""
"**Datentypen:** JSON bietet nur eine begrenzte Anzahl von Datentypen. Wenn "
"Sie Datentypen haben, die JSON nicht kennt, müssen Sie Ihre Daten in und aus "
"Typen übersetzen, die JSON verarbeiten kann. Einige wichtige Typen, die JSON "
"nicht parsen kann, sind zum Beispiel: ``Vector2``, ``Vector3``, ``Color``, "
"``Rect2``, und ``Quaternion``."

msgid ""
"**Custom logic needed for encoding/decoding:** If you have any custom "
"classes that you want to store with JSON, you will need to write your own "
"logic for encoding and decoding those classes."
msgstr ""
"**Benutzerdefinierte Logik für Kodierung/Dekodierung erforderlich:** Wenn "
"Sie benutzerdefinierte Klassen haben, die Sie mit JSON speichern möchten, "
"müssen Sie Ihre eigene Logik für die Kodierung und Dekodierung dieser "
"Klassen schreiben."

msgid "Binary serialization"
msgstr "Binäre Serialisierung"

msgid ""
":ref:`Binary serialization<doc_binary_serialization_api>` is an alternative "
"approach for storing game state, and you can use it with the functions "
"``get_var`` and ``store_var`` of :ref:`class_FileAccess`."
msgstr ""
":ref:`Binär-Serialisierung <doc_binary_serialization_api>` ist ein "
"alternativer Ansatz für die Speicherung des Spielstatus und kann mit den "
"Funktionen ``get_var`` und ``store_var`` von :ref:`class_FileAccess` "
"verwendet werden."

msgid "Binary serialization should produce smaller files than JSON."
msgstr "Die binäre Serialisierung sollte kleinere Dateien als JSON erzeugen."

msgid "Binary serialization can handle most common data types."
msgstr ""
"Binäre Serialisierung kann die meisten gängigen Datentypen verarbeiten."

msgid ""
"Binary serialization requires less custom logic for encoding and decoding "
"custom classes."
msgstr ""
"Binäre Serialisierung erfordert weniger benutzerdefinierte Logik für die "
"Kodierung und Dekodierung benutzerdefinierter Klassen."

msgid ""
"Note that not all properties are included. Only properties that are "
"configured with the :ref:"
"`PROPERTY_USAGE_STORAGE<class_@GlobalScope_constant_PROPERTY_USAGE_STORAGE>` "
"flag set will be serialized. You can add a new usage flag to a property by "
"overriding the :ref:"
"`_get_property_list<class_Object_private_method__get_property_list>` method "
"in your class. You can also check how property usage is configured by "
"calling ``Object._get_property_list``. See :ref:"
"`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` for the possible "
"usage flags."
msgstr ""
"Beachten Sie, dass nicht alle Propertys einbezogen werden. Nur Propertys, "
"die mit dem gesetzten :ref:"
"`PROPERTY_USAGE_STORAGE<class_@GlobalScope_constant_PROPERTY_USAGE_STORAGE>`-"
"Flag konfiguriert sind, werden serialisiert. Sie können ein neues Usage-Flag "
"zu einer Property hinzufügen, indem Sie die Methode :ref:"
"`_get_property_list<class_Object_private_method__get_property_list>` in "
"Ihrer Klasse überschreiben. Sie können auch überprüfen, wie die Verwendung "
"von Propertys konfiguriert ist, indem Sie ``Object._get_property_list`` "
"aufrufen. Siehe :ref:"
"`PropertyUsageFlags<enum_@GlobalScope_PropertyUsageFlags>` für die möglichen "
"Usage-Flags."

msgid "Translation status"
msgstr "Übersetzungsstatus"
