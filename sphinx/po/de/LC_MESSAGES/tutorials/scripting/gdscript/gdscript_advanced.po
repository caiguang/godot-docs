# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript: Eine Einführung in dynamische Programmiersprachen"

msgid "About"
msgstr "Über"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"Dieses Tutorial soll eine kurze Referenz sein um GDScript effektiver nutzen "
"zu können. Er konzentriert sich auf allgemeine, sprachspezifische Fälle, "
"enthält aber auch viele Informationen über dynamisch typisierte Sprachen."

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"Dies ist besonders nützlich für Programmierer, die bisher nur wenig oder "
"keine Erfahrung mit dynamischen Programmiersprachen haben."

msgid "Dynamic nature"
msgstr "Eigenschaften dynamischer Programmiersprachen"

msgid "Pros & cons of dynamic typing"
msgstr "Vor- und Nachteile von dynamischer Typisierung"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr ""
"GDScript ist eine dynamische Programmiersprache und hat damit folgende "
"Vorteile:"

msgid "The language is easy to get started with."
msgstr "Der Einstieg in die Sprache ist einfach."

msgid "Most code can be written and changed quickly and without hassle."
msgstr ""
"Der meiste Code kann schnell und problemlos geschrieben und geändert werden."

msgid "Less code written means less errors & mistakes to fix."
msgstr "Weniger geschriebener Code bedeutet weniger mögliche Fehler ."

msgid "The code is easy to read (little clutter)."
msgstr "Der Code ist leicht zu lesen (wenig Ballast)."

msgid "No compilation is required to test."
msgstr "Es ist keine Kompilierung nötig, um den Code zu testen."

msgid "Runtime is tiny."
msgstr "Laufzeit ist gering."

msgid "It has duck-typing and polymorphism by nature."
msgstr "Sie hat von Natur aus Duck-Typing und Polymorphismus."

msgid "While the main disadvantages are:"
msgstr "Die größten Nachteile sind:"

msgid "Less performance than statically typed languages."
msgstr "Geringere Performance als statische Programmiersprachen."

msgid "More difficult to refactor (symbols can't be traced)."
msgstr ""
"Refactoring ist schwieriger (Symbole können nicht zurückverfolgt werden)."

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"Einige Fehler, die normalerweise zur Kompilierungszeit in statisch "
"typisierten Sprachen erkannt werden, erscheinen nur während der Ausführung "
"des Codes (da das Parsen von Ausdrücken strenger ist)."

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr ""
"Weniger flexibel für Code-Vervollständigung (einige Variablentypen sind erst "
"zur Laufzeit bekannt)."

msgid ""
"This, translated to reality, means that Godot used with GDScript is a "
"combination designed to create games quickly and efficiently. For games that "
"are very computationally intensive and can't benefit from the engine built-"
"in tools (such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"In der Realität bedeutet dies, dass Godot in Verbindung mit GDScript eine "
"Kombination darstellt, mit der sich Spiele schnell und effizient erstellen "
"lassen. Für Spiele, die sehr rechenintensiv sind und nicht von den "
"integrierten Werkzeugen der Engine profitieren können (wie die Vektortypen, "
"die Physik-Engine, die mathematische Bibliothek usw.), gibt es auch die "
"Möglichkeit, C++ zu verwenden. So können Sie den größten Teil des Spiels in "
"GDScript erstellen und in den Bereichen, in denen eine Performance-"
"Steigerung erforderlich ist, kleine Teile von C++ hinzufügen."

msgid "Variables & assignment"
msgstr "Variablen & Zuweisungen"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"Alle Variablen in einer dynamisch typisierten Sprache sind \"Varianten\"-"
"artig. Das bedeutet, dass ihr Typ nicht festgelegt ist, sondern nur durch "
"Zuweisung geändert wird. Beispiel:"

msgid "Static:"
msgstr "Statisch:"

msgid "Dynamic:"
msgstr "Dynamisch:"

msgid "As function arguments:"
msgstr "Als Funktions-Argumente:"

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr ""
"Funktionen sind ebenfalls dynamisch, was bedeutet, dass sie mit "
"unterschiedlichen Argumenten aufgerufen werden können, zum Beispiel:"

msgid "Pointers & referencing:"
msgstr "Pointer & Referenzen:"

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"In statischen Sprachen wie C oder C++ (und einigen weiteren wie Java und "
"C#), gibt es einen Unterschied zwischen einer Variablen und einem Pointer "
"bzw. Referenz auf eine Variable. Dies erlaubt dem Objekt, durch andere "
"Funktionen verändert zu werden, durch Übergabe einer Referenz auf das "
"Original."

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"In C# oder Java ist alles, was kein Built-in-Typ ist (int, float, manchmal "
"String) immer ein Pointer oder eine Referenz. Referenzen werden auch "
"automatisch vom Garbage Collector bereinigt: Sie werden gelöscht werden, "
"wenn sie nicht mehr benötigt werden. Dynamische Sprachen bieten meistens "
"ebenfalls dieses Model. Hier einige Beispiele:"

msgid "C++:"
msgstr "C++:"

msgid "Java:"
msgstr "Java:"

msgid "GDScript:"
msgstr "GDScript:"

msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_RefCounted` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"In GDScript werden nur Basistypen (int, float, String und die Vektortypen) "
"als Wert an Funktionen übergeben (der Wert wird kopiert). Alles andere "
"(Instanzen, Arrays, Dictionarys, etc.) wird als Referenz übergeben. Klassen, "
"die von :ref:`class_RefCounted` erben (der Default, wenn nichts angegeben "
"ist), werden freigegeben, wenn sie nicht verwendet werden, aber manuelle "
"Speicherverwaltung ist ebenfalls erlaubt, wenn sie manuell von :ref:"
"`class_Object` erben."

msgid "Arrays"
msgstr "Arrays"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"Arrays in dynamischen Programmiersprachen können viele verschiedene "
"Datentypen enthalten und sind immer dynamisch (können also jederzeit in der "
"Größe verändert werden). Vergleichen wir hierzu Arrays in statischen "
"Programmiersprachen:"

msgid "And in GDScript:"
msgstr "Und in GDScript:"

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr ""
"In dynamisch typisierten Sprachen können Arrays auch als andere Datentypen, "
"wie etwa Listen, verwendet werden:"

msgid "Or unordered sets:"
msgstr "Oder unsortierte Sets:"

msgid "Dictionaries"
msgstr "Dictionarys"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"Dictionarys sind ein leistungsstarkes Werkzeug in dynamisch typisierten "
"Sprachen. Die meisten Programmierer, die aus statisch typisierten Sprachen "
"(wie C++ oder C#) stammen, ignorieren ihre Existenz und erschweren ihr Leben "
"unnötig. Dieser Datentyp ist in solchen Sprachen im Allgemeinen nicht (oder "
"nur in begrenzter Form) vorhanden."

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"Dictionarys können jeden Wert jedem anderen Wert zuordnen, wobei es völlig "
"egal ist, ob der Datentyp als Key oder Value genutzt wird. Entgegen der "
"landläufigen Meinung sind sie effizient, da sie mit Hash-Tabellen "
"implementiert werden können. Sie sind in der Tat so effizient, dass einige "
"Sprachen sogar Arrays als Dictionaries implementieren."

msgid "Example of Dictionary:"
msgstr "Beispiel für ein Dictionary:"

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr ""
"Dictionarys sind auch dynamisch, Keys können jederzeit mit geringen Aufwand "
"hinzugefügt oder entfernt werden:"

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a battleship game example:"
msgstr ""
"In den meisten Fällen können zweidimensionale Arrays einfacher mit "
"Dictionarys implementiert werden. Hier ist ein Beispiel für ein \"Schiffe "
"Versenken\"-Spiel:"

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"Dictionarys können auch als Datenmarkup oder schnelle Strukturen verwendet "
"werden. Während die Dictionarys von GDScript Python-Dictionarys ähneln, "
"unterstützt es auch die Syntax und Indizierung im Lua-Stil, was es nützlich "
"macht, Inititalzustände und schnelle Strukturen zu schreiben:"

msgid "For & while"
msgstr "For & while"

msgid ""
"Iterating using the C-style for loop in C-derived languages can be quite "
"complex:"
msgstr ""
"Die Iteration mit der C-ähnlichen for-Schleife in von C abgeleiteten "
"Sprachen kann recht komplex sein:"

msgid ""
"Because of this, GDScript makes the opinionated decision to have a for-in "
"loop over iterables instead:"
msgstr ""
"Aus diesem Grund hat GDScript sich entschieden, stattdessen eine for-in-"
"Schleife über Iterables zu verwenden:"

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr ""
"Container-Datentypen (Arrays und Dictionarys) sind iterierbar. Dictionarys "
"erlauben die Iteration über ihre Keys:"

msgid "Iterating with indices is also possible:"
msgstr "Die Iteration mit Indizes ist ebenfalls möglich:"

msgid "The range() function can take 3 arguments:"
msgstr "Die range()-Funktion kann bis zu 3 Argumente annehmen:"

msgid "Some examples involving C-style for loops:"
msgstr "Einige Beispiele mit for-Schleifen im C-Stil:"

msgid "Translate to:"
msgstr "Entsprechen:"

msgid "And backwards looping done through a negative counter:"
msgstr ""
"Und die Rückwärtsschleife wird durch einen negativen Zähler ausgeführt:"

msgid "Becomes:"
msgstr "Wird zu:"

msgid "While"
msgstr "While"

msgid "while() loops are the same everywhere:"
msgstr "while()-Schleifen sind überall gleich:"

msgid "Custom iterators"
msgstr "Benutzerdefinierte Iteratoren"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"Sie können benutzerdefinierte Iteratoren generieren, wenn die vorgegebenen "
"nicht ganz Ihren Anforderungen entsprechen, indem Sie die ``_iter_init``, "
"``_iter_next``, und ``_iter_get``-Funktionen der Variant-Klasse in Ihrem "
"Skript überschreiben. Hier ist ein Beispiel einer Implementierung für einen "
"Vorwärts-Iterator:"

msgid "And it can be used like any other iterator:"
msgstr "Und er kann wie jeder andere Iterator verwendet werden:"

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"Stellen Sie sicher, dass Sie den Zustand des Iterators in ``_iter_init`` "
"zurücksetzen, da sonst verschachtelte for-Schleifen, die benutzerdefinierte "
"Iteratoren verwenden, nicht wie erwartet funktionieren."

msgid "Duck typing"
msgstr "Duck-Typing"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"Eines der am schwersten zu greifenden Konzepte, wenn man von einer statisch "
"typisierten zu einer dynamisch typisierten Sprache wechselt, ist Duck-"
"Typing. Duck-Typing macht allgemeines Code-Design viel leichter und "
"unkomplizierter zu schreiben, aber es ist vielleicht nicht gleich "
"ersichtlich, wie es funktioniert."

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"Stellen Sie sich zum Beispiel eine Situation vor, in der ein großer Felsen "
"einen Tunnel hinunterfällt und alles auf seinem Weg zertrümmert. Der Code "
"für den Felsen würde in einer statisch typisierten Sprache etwa so aussehen:"

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"Auf diese Weise müsste alles, was von einem Stein zerschlagen werden kann, "
"von Smashable erben. Wenn ein Charakter, ein Gegner, ein Möbelstück oder ein "
"kleiner Stein zerschmettert werden könnten, müssten sie von der Klasse "
"Smashable erben, was möglicherweise eine Mehrfachvererbung erfordert. Wenn "
"Mehrfachvererbung unerwünscht ist, müssten sie von einer gemeinsame Klasse "
"wie Entity erben. Es wäre jedoch nicht sehr elegant, zu Entity nur dann eine "
"virtuelle Methode ``smash()`` hinzuzufügen, wenn nur wenige von ihnen "
"zerschlagen werden können."

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"Bei dynamischen Programmiersprachen ist dies kein Problem. Duck-Typing "
"stellt sicher, dass man nur an benötigter Stelle eine ``smash()``-Funktion "
"definieren muss, und das war's. Vererbung, Basisklassen usw. müssen nicht "
"berücksichtigt werden."

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"Und das ist es auch schon. Falls das Objekt, dass den großen Felsen trifft, "
"eine smash() Methode hat, wird diese aufgerufen. Vererbung oder Polymorphie "
"ist nicht nötig. Dynamischen Programmiersprachen ist es nur wichtig, dass "
"die Instanz die gewünschte Methode oder Member hat, nicht was sie vererbt "
"oder deren Klassentyp. Die Definition von \"Duck-Typing\" (Konzept der "
"objektorientierten Programmierung) macht das deutlicher:"

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*\"Wenn ich einen Vogel sehe, der wie eine Ente läuft, wie eine Ente "
"schwimmt und wie eine Ente quakt, nenne ich diesen Vogel eine Ente.\"*"

msgid "In this case, it translates to:"
msgstr "In diesem Fall lautet es übersetzt:"

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""
"*\"Falls das Objekt zerstört werden kann, ist es egal was es ist, zerstöre "
"es einfach\"*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "Ja, wir sollten es stattdessen Hulk-Typing nennen."

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"Es ist möglich, dass das zu treffende Objekt keine smash()-Funktion hat. "
"Einige dynamisch typisierte Sprachen ignorieren einfach einen "
"Methodenaufruf, wenn er nicht existiert, aber GDScript ist strenger, so dass "
"eine Überprüfung, ob die Funktion existiert, wünschenswert ist:"

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"Dann definieren Sie einfach diese Methode und alles, was der Stein berührt, "
"kann zerschlagen werden."

msgid "Translation status"
msgstr "Übersetzungsstatus"
