# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Overridable functions"
msgstr "Überschreibbare Funktionen"

msgid ""
"Godot's Node class provides virtual functions you can override to update "
"nodes every frame or on specific events, like when they enter the scene tree."
msgstr ""
"Die Node-Klasse von Godot bietet virtuelle Funktionen, die Sie überschreiben "
"können, um Nodes in jedem Frame oder bei bestimmten Ereignissen zu "
"aktualisieren, z.B. wenn sie den Szenenbaum betreten."

msgid "This document presents the ones you'll use most often."
msgstr "In diesem Dokument finden Sie die am häufigsten verwendeten."

msgid ""
"Under the hood, these functions rely on Godot's low-level notifications "
"system. To learn more about it, see :ref:`doc_godot_notifications`."
msgstr ""
"Unter der Haube basieren diese Funktionen auf Godots Low-Level-"
"Benachrichtigungssystem. Um mehr darüber zu erfahren, siehe :ref:"
"`doc_godot_notifications`."

msgid ""
"Two functions allow you to initialize and get nodes besides the class's "
"constructor: ``_enter_tree()`` and ``_ready()``."
msgstr ""
"Neben dem Konstruktor der Klasse gibt es zwei Funktionen, mit denen man "
"Nodes initialisieren und darauf zugreifen kann: ``_enter_tree()`` und "
"``_ready()``."

msgid ""
"When the node enters the Scene Tree, it becomes active and the engine calls "
"its ``_enter_tree()`` method. That node's children may not be part of the "
"active scene yet. As you can remove and re-add nodes to the scene tree, this "
"function may be called multiple times throughout a node's lifetime."
msgstr ""
"Wenn der Node in den Szenenbaum eintritt, wird er aktiv und die Engine ruft "
"seine Methode ``_enter_tree()`` auf. Die Child-Nodes dieses Nodes dürfen "
"noch nicht Teil der aktiven Szene sein. Da Sie Knoten aus dem Szenenbaum "
"entfernen und wieder hinzufügen können, kann diese Funktion während der "
"Lebensdauer eines Nodes mehrere Male aufgerufen werden."

msgid ""
"Most of the time, you'll use ``_ready()`` instead. This function is called "
"only once in a node's lifetime, after ``_enter_tree()``. ``_ready()`` "
"ensures that all children have entered the scene tree first, so you can "
"safely call ``get_node()`` on them."
msgstr ""
"Die meiste Zeit werden Sie stattdessen ``_ready()`` verwenden. Diese "
"Funktion wird nur einmal während der Lebensdauer eines Nodes aufgerufen, "
"nach ``_enter_tree()``. ``_ready()`` stellt sicher, daß alle Child-Nodes "
"zuerst in den Szenenbaum eingetreten sind, so daß Sie ``get_node()`` sicher "
"für sie aufrufen können."

msgid ""
"To learn more about getting node references, read :ref:"
"`doc_nodes_and_scene_instances`."
msgstr ""
"Weitere Informationen darüber, wie man Node-Referenzen erhält, finden Sie "
"unter :ref:`doc_nodes_and_scene_instances`."

msgid ""
"Another related callback is ``_exit_tree()``, which the engine calls every "
"time a node is about to exit the scene tree. This can be when you call :ref:"
"`Node.remove_child() <class_Node_method_remove_child>` or when you free a "
"node."
msgstr ""
"Ein weiterer verwandter Callback ist ``_exit_tree()``, den die Engine jedes "
"Mal aufruft, wenn ein Node im Begriff ist, den Szenenbaum zu verlassen. Das "
"kann sein, wenn Sie :ref:`Node.remove_child() "
"<class_Node_method_remove_child>` aufrufen oder wenn Sie einen Node "
"freigeben."

msgid ""
"The two virtual methods ``_process()`` and ``_physics_process()`` allow you "
"to update the node, every frame and every physics frame respectively. For "
"more information, read the dedicated documentation: :ref:"
"`doc_idle_and_physics_processing`."
msgstr ""
"Die beiden virtuellen Methoden ``_process()`` und ``_physics_process()`` "
"erlauben es, den Node, jeden Frame bzw. jeden Physik-Frame zu aktualisieren. "
"Für weitere Informationen lesen Sie bitte die entsprechende Dokumentation: :"
"ref:`doc_idle_and_physics_processing`."

msgid ""
"Two more essential built-in node callback functions are :ref:`Node."
"_unhandled_input() <class_Node_private_method__unhandled_input>` and :ref:"
"`Node._input() <class_Node_private_method__input>`, which you use to both "
"receive and process individual input events. The ``_unhandled_input()`` "
"method receives every key press, mouse click, etc. that have not been "
"handled already in an ``_input()`` callback or in a user interface "
"component. You want to use it for gameplay input in general. The "
"``_input()`` callback allows you to intercept and process input events "
"before ``_unhandled_input()`` gets them."
msgstr ""
"Zwei weitere wichtige Built-in-Node-Callback-Funktionen sind :ref:`Node."
"_unhandled_input() <class_Node_private_method__unhandled_input>` und :ref:"
"`Node._input() <class_Node_private_method__input>`, die Sie verwenden, um "
"einzelne Eingabe-Events zu empfangen und zu verarbeiten. Die Methode "
"``_unhandled_input()`` empfängt jeden Tastendruck, Mausklick usw., der nicht "
"bereits in einem ``_input()``-Callback oder in einer Komponente der "
"Benutzeroberfläche behandelt wurde. Sie sollten diese Methode generell für "
"Spieleingaben verwenden. Der ``_input()``-Callback erlaubt es Ihnen, Eingabe-"
"Events abzufangen und zu verarbeiten, bevor ``_unhandled_input()`` sie "
"erhält."

msgid ""
"To learn more about inputs in Godot, see the :ref:`Input section <toc-learn-"
"features-inputs>`."
msgstr ""
"Um mehr über Eingaben in Godot zu erfahren, lesen Sie bitte den :ref:"
"`Abschnitt über Eingaben <toc-learn-features-inputs>`."

msgid ""
"There are some more overridable functions like :ref:`Node."
"_get_configuration_warnings() "
"<class_Node_private_method__get_configuration_warnings>`. Specialized node "
"types provide more callbacks like :ref:`CanvasItem._draw() "
"<class_CanvasItem_private_method__draw>` to draw programmatically or :ref:"
"`Control._gui_input() <class_Control_private_method__gui_input>` to handle "
"clicks and input on UI elements."
msgstr ""
"Es gibt einige weitere überschreibbare Funktionen wie :ref:`Node."
"_get_configuration_warnings() "
"<class_Node_private_method__get_configuration_warnings>`. Spezialisierte "
"Node-Typen bieten mehr Callbacks, wie :ref:`CanvasItem._draw() "
"<class_CanvasItem_private_method__draw>` um programmatisch zu zeichnen oder :"
"ref:`Control._gui_input() <class_Control_private_method__gui_input>` um "
"Klicks und Eingaben auf UI-Elementen zu behandeln."

msgid "Translation status"
msgstr "Übersetzungsstatus"
