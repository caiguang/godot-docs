# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "When and how to avoid using nodes for everything"
msgstr "Wann und wie man es vermeidet, Nodes für alles zu verwenden"

msgid ""
"Nodes are cheap to produce, but even they have their limits. A project may "
"have tens of thousands of nodes all doing things. The more complex their "
"behavior though, the larger the strain each one adds to a project's "
"performance."
msgstr ""
"Nodes sind sparsam mit Ressourcen, aber selbst sie haben ihre Grenzen. Ein "
"Projekt kann zehntausende von Nodes haben, die alle irgendetwas tun.Je "
"komplexer ihr Verhalten jedoch ist, desto größer ist die Belastung, die "
"jeder einzelne Node für die Performace eines Projekts darstellt."

msgid ""
"Godot provides more lightweight objects for creating APIs which nodes use. "
"Be sure to keep these in mind as options when designing how you wish to "
"build your project's features."
msgstr ""
"Godot bietet leichtgewichtigere Objekte zum Erstellen von APIs, die von "
"Nodes verwendet werden. Behalten Sie dies als Möglichkeit im Hinterkopf, "
"wenn Sie festlegen, wie Sie die Features Ihres Projekts erstellen möchten."

msgid ""
":ref:`Object <class_Object>`: The ultimate lightweight object, the original "
"Object must use manual memory management. With that said, it isn't too "
"difficult to create one's own custom data structures, even node structures, "
"that are also lighter than the :ref:`Node <class_Node>` class."
msgstr ""
":ref:`Object <class_Object>`: Das ultimative Lightweight-Objekt, das "
"ursprüngliche Object muss seinen Speicher manuell verwalten. Trotzdem ist es "
"nicht allzu schwierig, eigene benutzerdefinierte Datenstrukturen zu "
"erstellen, selbst Nodestrukturen, die auch leichtgewichtiger sind als die :"
"ref:`Node <class_Node>`-Klasse."

msgid ""
"**Example:** See the :ref:`Tree <class_Tree>` node. It supports a high level "
"of customization for a table of content with an arbitrary number of rows and "
"columns. The data that it uses to generate its visualization though is "
"actually a tree of :ref:`TreeItem <class_TreeItem>` Objects."
msgstr ""
"**Beispiel:** Siehe den Node :ref:`Tree <class_Tree>`. Er unterstützt ein "
"hohes Maß an Personalisierung für ein Inhaltsverzeichnis mit einer "
"beliebigen Anzahl von Zeilen und Spalten. Die Daten, die es zum Generieren "
"der Visualisierung verwendet, sind tatsächlich ein Baum von :ref:`TreeItem "
"<class_TreeItem>`-Objects."

msgid ""
"**Advantages:** Simplifying one's API to smaller scoped objects helps "
"improve its accessibility and improve iteration time. Rather than working "
"with the entire Node library, one creates an abbreviated set of Objects from "
"which a node can generate and manage the appropriate sub-nodes."
msgstr ""
"**Vorteile:** Durch die Vereinfachung der API auf Objekte mit kleinerem "
"Gültigkeitsbereich wird die Zugänglichkeit und die Iterationszeit "
"verbessert. Anstatt mit der gesamten Node-Bibliothek zu arbeiten, wird eine "
"kleinere Menge von Objects erstellt, aus denen ein Node die entsprechenden "
"Unter-Notes generieren und verwalten kann."

msgid ""
"One should be careful when handling them. One can store an Object into a "
"variable, but these references can become invalid without warning. For "
"example, if the object's creator decides to delete it out of nowhere, this "
"would trigger an error state when one next accesses it."
msgstr ""
"Man sollte vorsichtig damit umgehen. Man kann ein Object in einer Variablen "
"speichern, aber diese Referenzen können ohne Warnung ungültig werden. Wenn "
"der Ersteller des Objekts beispielsweise beschließt, es aus dem Nichts zu "
"löschen, wird beim nächsten Zugriff ein Fehlerstatus ausgelöst."

msgid ""
":ref:`RefCounted <class_RefCounted>`: Only a little more complex than "
"Object. They track references to themselves, only deleting loaded memory "
"when no further references to themselves exist. These are useful in the "
"majority of cases where one needs data in a custom class."
msgstr ""
":ref:`RefCounted <class_RefCounted>`: Nur ein wenig komplexer als Object. "
"Sie tracken Referenzen auf sich selbst und geben den geladenen Speicher erst "
"frei, wenn keine weiteren Referenzen auf sich selbst existieren. Sie sind in "
"den meisten Fällen nützlich, wenn man Daten in einer eigenen Klasse benötigt."

msgid ""
"**Example:** See the :ref:`FileAccess <class_FileAccess>` object. It "
"functions just like a regular Object except that one need not delete it "
"themselves."
msgstr ""
"**Beispiel:** Siehe das :ref:`FileAccess <class_FileAccess>`-Objekt. Es "
"funktioniert genau wie ein normales Object, außer dass man es nicht selbst "
"löschen muss."

msgid "**Advantages:** same as the Object."
msgstr "**Vorteile:** die gleichen wie bei Object."

msgid ""
":ref:`Resource <class_Resource>`: Only slightly more complex than "
"RefCounted. They have the innate ability to serialize/deserialize (i.e. save "
"and load) their object properties to/from Godot resource files."
msgstr ""
":ref:`Resource <class_Resource>`: Nur wenig komplexer als RefCounted. Sie "
"bringen die Fähigkeit mit, ihre Objekteigenschaften in/aus Godot-"
"Ressourcendateien zu serialisieren/deserialisieren (d. h. zu speichern und "
"zu laden)."

msgid ""
"**Example:** Scripts, PackedScene (for scene files), and other types like "
"each of the :ref:`AudioEffect <class_AudioEffect>` classes. Each of these "
"can be save and loaded, therefore they extend from Resource."
msgstr ""
"**Beispiel:** Skripte, PackedScene (für Szenendateien) und andere Typen wie "
"die verschiedenen :ref:`AudioEffect <class_AudioEffect>`-Klassen. Jedes "
"dieser Elemente kann gespeichert und geladen werden, daher stellen Sie eine "
"Erweiterung von Resource dar."

msgid ""
"**Advantages:** Much has :ref:`already been said <doc_resources>` on :ref:"
"`Resource <class_Resource>`'s advantages over traditional data storage "
"methods. In the context of using Resources over Nodes though, their main "
"advantage is in Inspector-compatibility. While nearly as lightweight as "
"Object/RefCounted, they can still display and export properties in the "
"Inspector. This allows them to fulfill a purpose much like sub-Nodes on the "
"usability front, but also improve performance if one plans to have many such "
"Resources/Nodes in their scenes."
msgstr ""
"**Vorteile:** Es wurde bereits viel über die Vorteile von :ref:`Resource "
"<class_Resource>` gegenüber traditionellen Datenspeichermethoden :ref:"
"`gesagt <doc_resources>`. Im Zusammenhang mit der Verwendung von Resources "
"gegenüber Nodes liegt ihr Hauptvorteil jedoch in der Inspektor-"
"Kompatibilität. Obwohl sie fast so leichtgewichtig sind wie Object/"
"RefCounted, können sie dennoch Propertys im Inspektor anzeigen und "
"exportieren. Dadurch erfüllen sie bezüglich Benutzerfreundlichkeit einen "
"ähnlichen Zweck wie Unter-Nodes, verbessern aber auch die Performance, wenn "
"man plant, viele solcher Resources/Nodes in seinen Szenen zu haben."

msgid "Translation status"
msgstr "Übersetzungsstatus"
