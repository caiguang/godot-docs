# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Godot notifications"
msgstr "Benachrichtigungen in Godot"

msgid ""
"Every Object in Godot implements a :ref:`_notification "
"<class_Object_private_method__notification>` method. Its purpose is to allow "
"the Object to respond to a variety of engine-level callbacks that may relate "
"to it. For example, if the engine tells a :ref:`CanvasItem "
"<class_CanvasItem>` to \"draw\", it will call "
"``_notification(NOTIFICATION_DRAW)``."
msgstr ""
"Jedes Objekt in Godot implementiert eine Methode :ref:`_notification "
"<class_Object_private_method__notification>`. Ihr Zweck ist es, dem Objekt "
"die Möglichkeit zu geben, auf eine Vielzahl von Callbacks auf Engine-Ebene "
"zu reagieren, die sich auf das Objekt beziehen können. Wenn die Engine zum "
"Beispiel einem :ref:`CanvasItem <class_CanvasItem>` sagt, dass es "
"\"zeichnen\" soll, wird es ``_notification(NOTIFICATION_DRAW)`` aufrufen."

msgid ""
"Some of these notifications, like draw, are useful to override in scripts. "
"So much so that Godot exposes many of them with dedicated functions:"
msgstr ""
"Einige dieser Benachrichtigungen, wie z.B. Zeichnen, sind nützlich um sie in "
"Skripten zu überschreiben. Godot hat viele von ihnen mit speziellen "
"Funktionen ausstattet:"

msgid "``_ready()``: ``NOTIFICATION_READY``"
msgstr "``_ready()``: ``NOTIFICATION_READY``"

msgid "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"
msgstr "``_enter_tree()``: ``NOTIFICATION_ENTER_TREE``"

msgid "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"
msgstr "``_exit_tree()``: ``NOTIFICATION_EXIT_TREE``"

msgid "``_process(delta)``: ``NOTIFICATION_PROCESS``"
msgstr "``_process(delta)``: ``NOTIFICATION_PROCESS``"

msgid "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"
msgstr "``_physics_process(delta)``: ``NOTIFICATION_PHYSICS_PROCESS``"

msgid "``_draw()``: ``NOTIFICATION_DRAW``"
msgstr "``_draw()``: ``NOTIFICATION_DRAW``"

msgid ""
"What users might *not* realize is that notifications exist for types other "
"than Node alone, for example:"
msgstr ""
"Was die Benutzer vielleicht *nicht* wissen, ist, dass es auch "
"Benachrichtigungen für andere Typen als nur für Node gibt, zum Beispiel:"

msgid ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: a callback that "
"triggers during object initialization. Not accessible to scripts."
msgstr ""
":ref:`Object::NOTIFICATION_POSTINITIALIZE "
"<class_Object_constant_NOTIFICATION_POSTINITIALIZE>`: Ein Callback, das "
"während der Objektinitialisierung ausgelöst wird. Für Skripte nicht "
"zugänglich."

msgid ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: a callback that triggers "
"before the engine deletes an Object, i.e. a \"destructor\"."
msgstr ""
":ref:`Object::NOTIFICATION_PREDELETE "
"<class_Object_constant_NOTIFICATION_PREDELETE>`: Ein Callback, das ausgelöst "
"wird, bevor die Engine ein Objekt löscht, d.h. ein \"Destruktor\"."

msgid ""
"And many of the callbacks that *do* exist in Nodes don't have any dedicated "
"methods, but are still quite useful."
msgstr ""
"Und viele der Callbacks, die in Nodes *existieren*, haben keine dedizierten "
"Methoden, sind aber dennoch sehr nützlich."

msgid ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: a callback that triggers "
"anytime one adds a child node to another node."
msgstr ""
":ref:`Node::NOTIFICATION_PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`: Ein Callback, das immer dann "
"ausgelöst wird, wenn jemand einen Child-Node zu einem anderen Node hinzufügt."

msgid ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: a callback that triggers "
"anytime one removes a child node from another node."
msgstr ""
":ref:`Node::NOTIFICATION_UNPARENTED "
"<class_Node_constant_NOTIFICATION_UNPARENTED>`: Ein Callback, das immer dann "
"ausgelöst wird, wenn jemand einen Child-Node von einem anderen Node entfernt."

msgid ""
"One can access all these custom notifications from the universal "
"``_notification()`` method."
msgstr ""
"Auf all diese benutzerdefinierten Benachrichtigungen kann man über die "
"universelle Methode ``_notification()`` zugreifen."

msgid ""
"Methods in the documentation labeled as \"virtual\" are also intended to be "
"overridden by scripts."
msgstr ""
"Methoden in der Dokumentation, die als \"virtuell\" gekennzeichnet sind, "
"sollen auch von Skripten überschrieben werden."

msgid ""
"A classic example is the :ref:`_init <class_Object_private_method__init>` "
"method in Object. While it has no ``NOTIFICATION_*`` equivalent, the engine "
"still calls the method. Most languages (except C#) rely on it as a "
"constructor."
msgstr ""
"Ein klassisches Beispiel ist die Methode :ref:`_init "
"<class_Object_private_method__init>` in Object. Obwohl sie keine "
"``NOTIFICATION_*``-Entsprechung hat, ruft die Engine die Methode trotzdem "
"auf. Die meisten Sprachen (außer C#) verwenden sie als Konstruktor."

msgid ""
"So, in which situation should one use each of these notifications or virtual "
"functions?"
msgstr ""
"In welcher Situation sollte man also jede dieser Benachrichtigungen oder "
"virtuellen Funktionen verwenden?"

msgid "_process vs. _physics_process vs. \\*_input"
msgstr "_process, _physics_process und \\*_input"

msgid ""
"Use ``_process()`` when one needs a framerate-dependent delta time between "
"frames. If code that updates object data needs to update as often as "
"possible, this is the right place. Recurring logic checks and data caching "
"often execute here, but it comes down to the frequency at which one needs "
"the evaluations to update. If they don't need to execute every frame, then "
"implementing a Timer-timeout loop is another option."
msgstr ""
"Verwenden Sie ``_process()``, wenn Sie eine von der Framerate abhängige "
"Deltazeit zwischen den Frames benötigen. Wenn Code, der Objektdaten "
"aktualisiert, so oft wie möglich aktualisiert werden muss, ist dies der "
"richtige Ort. Wiederkehrende Logikprüfungen und Daten-Caching werden oft "
"hier ausgeführt, aber es hängt davon ab, wie oft man die Auswertungen "
"aktualisieren muss. Wenn sie nicht in jedem Frame ausgeführt werden müssen, "
"bietet die Implementierung einer Timer-Timeout-Schleife eine weitere Option."

msgid ""
"Use ``_physics_process()`` when one needs a framerate-independent delta time "
"between frames. If code needs consistent updates over time, regardless of "
"how fast or slow time advances, this is the right place. Recurring kinematic "
"and object transform operations should execute here."
msgstr ""
"Verwenden Sie ``_physics_process()``, wenn Sie eine von der Framerate "
"unabhängige Delta-Zeit zwischen den Frames benötigen. Wenn Ihr Code "
"konsistente Aktualisierungen über die Zeit benötigt, unabhängig davon, wie "
"schnell oder langsam die Zeit voranschreitet, ist dies der richtige Ort. "
"Wiederkehrende kinematische und objekttransformierende Operationen sollten "
"hier ausgeführt werden."

msgid ""
"While it is possible, to achieve the best performance, one should avoid "
"making input checks during these callbacks. ``_process()`` and "
"``_physics_process()`` will trigger at every opportunity (they do not "
"\"rest\" by default). In contrast, ``*_input()`` callbacks will trigger only "
"on frames in which the engine has actually detected the input."
msgstr ""
"Dies ist zwar möglich, aber um die beste Performance zu erzielen, sollte man "
"es vermeiden, während dieser Callbacks Eingabeprüfungen durchzuführen. "
"``_process()`` und ``_physics_process()`` werden bei jeder Gelegenheit "
"ausgelöst (sie \"ruhen\" normalerweise nicht). Im Gegensatz dazu werden "
"``*_input()``-Callbacks nur in Frames ausgelöst, in denen die Engine die "
"Eingabe tatsächlich erkannt hat."

msgid ""
"One can check for input actions within the input callbacks just the same. If "
"one wants to use delta time, one can fetch it from the related delta time "
"methods as needed."
msgstr ""
"In den Eingabe-Callbacks kann man genauso nach Eingabeaktionen suchen. Wenn "
"man die Deltazeit verwenden möchte, kann man sie bei Bedarf aus den "
"entsprechenden Deltazeit-Methoden abrufen."

msgid "_init vs. initialization vs. export"
msgstr "_init vs. Initialisierung vs. Exportieren"

msgid ""
"If the script initializes its own node subtree, without a scene, that code "
"should execute in ``_init()``. Other property or SceneTree-independent "
"initializations should also run here."
msgstr ""
"Wenn das Skript seinen eigenen Node-Unterbaum initialisiert, ohne eine "
"Szene, sollte dieser Code in ``_init()`` ausgeführt werden. Weitere "
"Propertys oder SceneTree-unabhängige Initialisierungen sollten ebenfalls "
"hier ausgeführt werden."

msgid "The C# equivalent to GDScript's ``_init()`` method is the constructor."
msgstr ""
"Das C#-Äquivalent zu GDScript's ``_init()`` Methode ist der Konstruktor."

msgid ""
"``_init()`` triggers before ``_enter_tree()`` or ``_ready()``, but after a "
"script creates and initializes its properties. When instantiating a scene, "
"property values will set up according to the following sequence:"
msgstr ""
"``_init()`` wird vor ``_enter_tree()`` oder ``_ready()`` ausgeführt, aber "
"nachdem ein Skript seine Propertys erzeugt und initialisiert hat. Wenn eine "
"Szene instanziiert wird, werden die Property-Werte gemäß der folgenden "
"Reihenfolge eingerichtet:"

msgid ""
"**Initial value assignment:** the property is assigned its initialization "
"value, or its default value if one is not specified. If a setter exists, it "
"is not used."
msgstr ""
"**Initiale Wertzuweisung:** Der Property wird ihr Initialisierungswert "
"zugewiesen, oder ihr Defaultwert, wenn keiner angegeben ist. Wenn ein Setter "
"vorhanden ist, wird er nicht verwendet."

msgid ""
"**``_init()`` assignment:** the property's value is replaced by any "
"assignments made in ``_init()``, triggering the setter."
msgstr ""
"**``_init()``-Zuweisung:** Der Wert der Property wird durch jegliche "
"Zuweisungen ersetzt, die in ``_init()`` gemacht wurden, wodurch der Setter "
"ausgelöst wird."

msgid ""
"**Exported value assignment:** an exported property's value is again "
"replaced by any value set in the Inspector, triggering the setter."
msgstr ""
"**Exportierte Wertzuweisung:** Der Wert einer exportierten Property wird "
"wiederum durch einen im Inspektor festgelegten Wert ersetzt, wodurch der "
"Setter ausgelöst wird."

msgid ""
"As a result, instantiating a script versus a scene may affect both the "
"initialization *and* the number of times the engine calls the setter."
msgstr ""
"Daher kann die Instanziierung eines Skripts im Vergleich zu einer Szene "
"sowohl die Initialisierung *als auch* die Anzahl der Aufrufe des Setters "
"durch die Engine beeinflussen."

msgid "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"
msgstr "_ready vs. _enter_tree vs. NOTIFICATION_PARENTED"

msgid ""
"When instantiating a scene connected to the first executed scene, Godot will "
"instantiate nodes down the tree (making ``_init()`` calls) and build the "
"tree going downwards from the root. This causes ``_enter_tree()`` calls to "
"cascade down the tree. Once the tree is complete, leaf nodes call "
"``_ready``. A node will call this method once all child nodes have finished "
"calling theirs. This then causes a reverse cascade going up back to the "
"tree's root."
msgstr ""
"Wenn Godot eine Szene instanziiert, die mit der ersten ausgeführten Szene "
"verbunden ist, instanziiert es Nodes entlang des Baumes (durch ``_init()``-"
"Aufrufe) und baut den Baum von seiner Wurzel abwärts auf. Dies führt dazu, "
"daß ``_enter_tree()``-Aufrufe kaskadenartig den Baum hinunterlaufen. Sobald "
"der Baum vollständig ist, rufen die Nodes der Blätter ``_ready`` auf. Ein "
"Node ruft diese Methode auf, sobald alle untergeordneten Nodes ihre Aufrufe "
"beendet haben. Dies führt dann zu einer umgekehrten Kaskade zurück zur "
"Wurzel des Baumes."

msgid ""
"When instantiating a script or a standalone scene, nodes are not added to "
"the SceneTree upon creation, so no ``_enter_tree()`` callbacks trigger. "
"Instead, only the ``_init()`` call occurs. When the scene is added to the "
"SceneTree, the ``_enter_tree()`` and ``_ready()`` calls occur."
msgstr ""
"Wenn ein Skript oder eine eigenständige Szene instanziiert wird, werden die "
"Nodes bei der Erstellung nicht zum SceneTree hinzugefügt, so dass keine "
"``_enter_tree()``-Callbacks ausgelöst werden. Stattdessen erfolgt nur der "
"``_init()``-Aufruf. Wenn die Szene zum SceneTree hinzugefügt wird, erfolgen "
"die ``_enter_tree()`` und ``_ready()`` Aufrufe."

msgid ""
"If one needs to trigger behavior that occurs as nodes parent to another, "
"regardless of whether it occurs as part of the main/active scene or not, one "
"can use the :ref:`PARENTED <class_Node_constant_NOTIFICATION_PARENTED>` "
"notification. For example, here is a snippet that connects a node's method "
"to a custom signal on the parent node without failing. Useful on data-"
"centric nodes that one might create at runtime."
msgstr ""
"Wenn man ein Verhalten auslösen muss, sobald ein Node Parent eines anderen "
"wird, unabhängig davon, ob dies als Teil der Haupt-/aktiven Szene auftritt "
"oder nicht, kann man die :ref:`PARENTED "
"<class_Node_constant_NOTIFICATION_PARENTED>`-Benachrichtigung verwenden. "
"Hier ist beispielsweise ein Snippet, das die Methode eines Nodes mit einem "
"benutzerdefinierten Signal auf dem Parent-Node verbindet, ohne dass dies "
"fehlschlägt. Nützlich für datenzentrierte Nodes, die man zur Laufzeit "
"erstellen kann."

msgid "Translation status"
msgstr "Übersetzungsstatus"
