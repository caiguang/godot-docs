# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using multiple threads"
msgstr "Mehrere Threads verwenden"

msgid "Threads"
msgstr "Threads"

msgid ""
"Threads allow simultaneous execution of code. It allows off-loading work "
"from the main thread."
msgstr ""
"Threads ermöglichen die gleichzeitige Ausführung von Code. Es ermöglicht das "
"Auslagern von Rechenlast aus dem Hauptprogramm."

msgid "Godot supports threads and provides many handy functions to use them."
msgstr ""
"Godot unterstützt Threads und bietet viele praktische Funktionen, um sie zu "
"verwenden."

msgid ""
"If using other languages (C#, C++), it may be easier to use the threading "
"classes they support."
msgstr ""
"Wenn Sie andere Sprachen verwenden (C#, C++), ist es möglicherweise "
"einfacher, die von ihnen unterstützten Threading-Klassen zu verwenden."

msgid ""
"Before using a built-in class in a thread, read :ref:`doc_thread_safe_apis` "
"first to check whether it can be safely used in a thread."
msgstr ""
"Bevor Sie eine Built-in-Klasse in einem Thread verwenden, lesen Sie zuerst :"
"ref:`doc_thread_safe_apis`, um zu prüfen, ob sie sicher in einem Thread "
"verwendet werden kann."

msgid "Creating a Thread"
msgstr "Erstellen eines Threads"

msgid "To create a thread, use the following code:"
msgstr "Um einen Thread zu erstellen, verwenden Sie den folgenden Code:"

msgid ""
"Your function will, then, run in a separate thread until it returns. Even if "
"the function has returned already, the thread must collect it, so call :ref:"
"`Thread.wait_to_finish()<class_Thread_method_wait_to_finish>`, which will "
"wait until the thread is done (if not done yet), then properly dispose of it."
msgstr ""
"Ihre Funktion wird dann in einem separaten Thread ausgeführt, bis sie "
"zurückkehrt. Selbst wenn die Funktion bereits zurückgekehrt ist, muss der "
"Thread sie einsammeln, also rufen Sie die Funktion :ref:`Thread."
"wait_to_finish()<class_Thread_method_wait_to_finish>` auf, die wartet, bis "
"der Thread fertig ist (wenn er nicht bereits fertig ist), und ihn dann "
"ordnungsgemäß entsorgt."

msgid ""
"Creating threads at run-time is slow on Windows and should be avoided to "
"prevent stuttering. Semaphores, explained later on this page, should be used "
"instead."
msgstr ""
"Das Erstellen von Threads zur Laufzeit ist unter Windows langsam und sollte "
"vermieden werden, um Stuttering zu vermeiden. Stattdessen sollten Semaphoren "
"verwendet werden, die weiter unten auf dieser Seite erläutert werden."

msgid "Mutexes"
msgstr "Mutexes"

msgid ""
"Accessing objects or data from multiple threads is not always supported (if "
"you do it, it will cause unexpected behaviors or crashes). Read the :ref:"
"`doc_thread_safe_apis` documentation to understand which engine APIs support "
"multiple thread access."
msgstr ""
"Der Zugriff auf Objekte oder Daten von mehreren Threads aus wird nicht immer "
"unterstützt (wenn Sie es tun, führt es zu unerwartetem Verhalten oder "
"Abstürzen). Lesen Sie die Dokumentation :ref:`doc_thread_safe_apis`, um zu "
"verstehen, welche Engine-APIs den Zugriff über mehrere Threads unterstützen."

msgid ""
"When processing your own data or calling your own functions, as a rule, try "
"to avoid accessing the same data directly from different threads. You may "
"run into synchronization problems, as the data is not always updated between "
"CPU cores when modified. Always use a :ref:`Mutex<class_Mutex>` when "
"accessing a piece of data from different threads."
msgstr ""
"Wenn Sie Ihre eigenen Daten verarbeiten oder Ihre eigenen Funktionen "
"aufrufen, sollten Sie in der Regel vermeiden, von verschiedenen Threads aus "
"direkt auf dieselben Daten zuzugreifen. Es kann zu Synchronisationsproblemen "
"kommen, da die Daten bei Änderungen nicht immer zwischen den CPU-Kernen "
"aktualisiert werden. Verwenden Sie immer einen :ref:`Mutex<class_Mutex>`, "
"wenn Sie von verschiedenen Threads aus auf ein Datenelement zugreifen."

msgid ""
"When calling :ref:`Mutex.lock()<class_Mutex_method_lock>`, a thread ensures "
"that all other threads will be blocked (put on suspended state) if they try "
"to *lock* the same mutex. When the mutex is unlocked by calling :ref:`Mutex."
"unlock()<class_Mutex_method_unlock>`, the other threads will be allowed to "
"proceed with the lock (but only one at a time)."
msgstr ""
"Wenn ein Thread :ref:`Mutex.lock()<class_Mutex_method_lock>` aufruft, stellt "
"er sicher, dass alle anderen Threads blockiert (in den Suspended-Zustand "
"versetzt) werden, wenn sie versuchen, denselben Mutex zu *sperren*. Wenn der "
"Mutex durch den Aufruf von :ref:`Mutex.unlock()<class_Mutex_method_unlock>` "
"entsperrt wird, können die anderen Threads mit dem Lock fortfahren (aber nur "
"einer nach dem anderen)."

msgid "Here is an example of using a Mutex:"
msgstr "Hier ist ein Beispiel für die Verwendung eines Mutex:"

msgid "Semaphores"
msgstr "Semaphoren"

msgid ""
"Sometimes you want your thread to work *\"on demand\"*. In other words, tell "
"it when to work and let it suspend when it isn't doing anything. For this, :"
"ref:`Semaphores<class_Semaphore>` are used. The function :ref:`Semaphore."
"wait()<class_Semaphore_method_wait>` is used in the thread to suspend it "
"until some data arrives."
msgstr ""
"Manchmal möchten Sie, dass Ihr Thread *\"auf Anforderung\"* arbeitet. Mit "
"anderen Worten, sagen Sie ihm, wann er arbeiten soll und pausieren Sie ihn, "
"wenn er nichts zu tun hat. Dafür werden :ref:`Semaphores<class_Semaphore>` "
"verwendet. Die Funktion :ref:`Semaphore.wait()<class_Semaphore_method_wait>` "
"wird im Thread benutzt, um ihn zu pausieren, bis Daten ankommen."

msgid ""
"The main thread, instead, uses :ref:`Semaphore."
"post()<class_Semaphore_method_post>` to signal that data is ready to be "
"processed:"
msgstr ""
"Der Hauptthread verwendet stattdessen :ref:`Semaphore."
"post()<class_Semaphore_method_post>`, um zu signalisieren, dass die Daten "
"zur Verarbeitung bereit sind:"

msgid "Translation status"
msgstr "Übersetzungsstatus"
