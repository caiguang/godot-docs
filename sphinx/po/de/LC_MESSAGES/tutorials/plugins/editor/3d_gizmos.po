# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D gizmo plugins"
msgstr "3D-Gizmo-Plugins"

msgid "Introduction"
msgstr "Einführung"

msgid ""
"3D gizmo plugins are used by the editor and custom plugins to define the "
"gizmos attached to any kind of Node3D node."
msgstr ""
"3D-Gizmo-Plugins werden vom Editor und von benutzerdefinierten Plugins "
"verwendet, um die Gizmos zu definieren, die mit jeder Art von Node3D-Node "
"verbunden sind."

msgid ""
"This tutorial shows the two main approaches to defining your own custom "
"gizmos. The first option works well for simple gizmos and creates less "
"clutter in your plugin structure, and the second one will let you store some "
"per-gizmo data."
msgstr ""
"Dieses Tutorial zeigt die beiden Hauptansätze für die Definition Ihrer "
"eigenen benutzerdefinierten Gizmos. Die erste Option eignet sich gut für "
"einfache Gizmos und schafft weniger Unordnung in Ihrer Plugin-Struktur, und "
"die zweite ermöglicht es Ihnen, einige Daten pro Gizmo zu speichern."

msgid ""
"This tutorial assumes you already know how to make generic plugins. If in "
"doubt, refer to the :ref:`doc_making_plugins` page."
msgstr ""
"Dieses Tutorial setzt voraus, dass Sie bereits wissen, wie man generische "
"Plugins erstellt. Im Zweifelsfall lesen Sie bitte die Seite :ref:"
"`doc_making_plugins`."

msgid "The EditorNode3DGizmoPlugin"
msgstr "Das EditorNode3DGizmoPlugin"

msgid ""
"Regardless of the approach we choose, we will need to create a new :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>`. This will allow "
"us to set a name for the new gizmo type and define other behaviors such as "
"whether the gizmo can be hidden or not."
msgstr ""
"Unabhängig davon, welchen Ansatz wir wählen, müssen wir ein neues :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` erstellen. Damit "
"können wir einen Namen für den neuen Gizmo-Typ festlegen und andere "
"Verhaltensweisen definieren, z. B. ob das Gizmo ausgeblendet werden kann "
"oder nicht."

msgid "This would be a basic setup:"
msgstr "Dies wäre ein einfaches Setup:"

msgid ""
"For simple gizmos, inheriting :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>` is enough. If you want to store some per-"
"gizmo data or you are porting a Godot 3.0 gizmo to 3.1+, you should go with "
"the second approach."
msgstr ""
"Für einfache Gizmos reicht es aus, :ref:`EditorNode3DGizmoPlugin "
"<class_EditorNode3DGizmoPlugin>` zu erben. Wenn Sie einige Daten pro Gizmo "
"speichern wollen oder ein Godot 3.0-Gizmo auf 3.1+ portieren, sollten Sie "
"den zweiten Ansatz wählen."

msgid "Simple approach"
msgstr "Ein einfacher Ansatz"

msgid ""
"The first step is to, in our custom gizmo plugin, override the :ref:"
"`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` "
"method so that it returns ``true`` when the node parameter is of our target "
"type."
msgstr ""
"Der erste Schritt besteht darin, in unserem benutzerdefinierten Gizmo-Plugin "
"die Methode :ref:"
"`_has_gizmo()<class_EditorNode3DGizmoPlugin_private_method__has_gizmo>` zu "
"überschreiben, so dass sie ``true`` zurückgibt, wenn der Node-Parameter "
"unserem Zieltyp entspricht."

msgid ""
"Then we can override methods like :ref:"
"`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` or all the "
"handle related ones."
msgstr ""
"Dann können wir Methoden wie :ref:"
"`_redraw()<class_EditorNode3DGizmoPlugin_private_method__redraw>` oder alle "
"Handle-bezogenen Methoden außer Kraft setzen."

msgid ""
"Note that we created a material in the `_init` method, and retrieved it in "
"the `_redraw` method using :ref:"
"`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>`. This "
"method retrieves one of the material's variants depending on the state of "
"the gizmo (selected and/or editable)."
msgstr ""
"Beachten Sie, dass wir in der Methode `_init` ein Material erstellt und es "
"in der Methode `_redraw` mit :ref:"
"`get_material()<class_EditorNode3DGizmoPlugin_method_get_material>` "
"abgerufen haben. Diese Methode ruft je nach Zustand des Gizmo (ausgewählt "
"und/oder bearbeitbar) eine der Materialvarianten ab."

msgid "So the final plugin would look somewhat like this:"
msgstr "Das fertige Plugin sollte ungefähr so aussehen:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` to get properly "
"working handles."
msgstr ""
"Beachten Sie, dass wir nur einige Handles in der `_redraw` Methode "
"hinzugefügt haben, aber wir müssen noch den Rest der Handle-bezogenen "
"Callbacks in :ref:`EditorNode3DGizmoPlugin <class_EditorNode3DGizmoPlugin>` "
"implementieren, um richtig funktionierende Handles zu bekommen."

msgid "Alternative approach"
msgstr "Ein alternativer Ansatz"

msgid ""
"In some cases we want to provide our own implementation of :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>`, maybe because we want to have "
"some state stored in each gizmo or because we are porting an old gizmo "
"plugin and we don't want to go through the rewriting process."
msgstr ""
"In einigen Fällen wollen wir unsere eigene Implementierung von :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>` bereitstellen, vielleicht weil "
"wir einen gewissen Zustand in jedem Gizmo gespeichert haben wollen oder weil "
"wir ein altes Gizmo-Plugin portieren und nicht durch den "
"Neuschreibungsprozess gehen wollen."

msgid ""
"In these cases all we need to do is, in our new gizmo plugin, override :ref:"
"`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>`, "
"so it returns our custom gizmo implementation for the Node3D nodes we want "
"to target."
msgstr ""
"In diesen Fällen müssen wir in unserem neuen Gizmo-Plugin nur :ref:"
"`_create_gizmo()<class_EditorNode3DGizmoPlugin_private_method__create_gizmo>` "
"überschreiben, damit es unsere benutzerdefinierte Gizmo-Implementierung für "
"die Node3D-Node zurückgibt, auf die wir abzielen wollen."

msgid ""
"This way all the gizmo logic and drawing methods can be implemented in a new "
"class extending :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>`, like so:"
msgstr ""
"Auf diese Weise kann die gesamte Gizmo-Logik und die Zeichenmethoden in "
"einer neuen Klasse implementiert werden, von der die Klasse :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>` erweitert wird, etwa so:"

msgid ""
"Note that we just added some handles in the `_redraw` method, but we still "
"need to implement the rest of handle-related callbacks in :ref:"
"`EditorNode3DGizmo<class_EditorNode3DGizmo>` to get properly working handles."
msgstr ""
"Beachten Sie, dass wir gerade einige Handles in der `_redraw` Methode "
"hinzugefügt haben, aber wir müssen noch den Rest der Handle-bezogenen "
"Callbacks in :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` "
"implementieren, um richtig funktionierende Handles zu bekommen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
