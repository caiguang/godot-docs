# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Vector math"
msgstr "Vektormathematik"

msgid "Introduction"
msgstr "Einführung"

msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"Dieses Tutorial ist eine kurze und praktische Einführung in die lineare "
"Algebra, so wie sie in der Spielentwicklung benötigt wird. Lineare Algebra "
"ist die Lehre von Vektoren und deren Nutzung. Vektoren haben viele "
"Anwendungen in der 2D- und 3D-Entwicklung und Godot nutzt diese umfangreich. "
"Für einen guten Spielentwickler ist es unverzichtbar, ein gutes Verständnis "
"über Vektormathematik zu entwickeln."

msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"Dieses Tutorial ist **kein** formelles Lehrbuch über lineare Algebra, wir "
"werden hier nur auf deren Anwendung bei der Spieleentwicklung eingehen. Für "
"einen umfassenden Blick auf diesen Bereich der Mathematik siehe https://www."
"khanacademy.org/math/linear-algebra"

msgid "Coordinate systems (2D)"
msgstr "Koordinatensysteme (2D)"

msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"Im 2D-Raum werden die Koordinaten mittels einer horizontalen (``x``) und "
"vertikalen (``y``) Achse definiert. Eine bestimmte Position im 2D-Raum wird "
"als Wertepaar geschrieben, z.B. ``(4, 3)``."

msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"Es mag ungewöhnlich erscheinen, dass die positive ``y`` Achse nach unten "
"zeigt anstatt nach oben, wie man es im Mathematikunterricht einmal gelernt "
"hat. Dies ist aber normal in den meisten Computergrafik-Programmen."

msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"Jede Position im 2D-System kann über ein Zahlenpaar angesprochen werden. Man "
"kann somit die Position ``(4, 3)`` als **Versatz** vom Ursprung ``(0, 0)`` "
"ansehen. Hier sehen wir einen Pfeil vom Ursprung zum Punkt:"

msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` (theta) and a length (or magnitude) ``m``. In this case, "
"the arrow is a **position vector** - it denotes a position in space, "
"relative to the origin."
msgstr ""
"Dies ist ein **Vektor**. Ein Vektor repräsentiert eine Menge nützlicher "
"Informationen. Er sagt uns nicht nur, dass der Punkt bei ``(4, 3)`` liegt, "
"sondern wir können ihn uns auch als einen Winkel ``θ`` (Theta) und eine "
"Länge (oder Betrag) ``m`` vorstellen. In diesem Fall ist der Pfeil ein "
"**Positionsvektor** - er bezeichnet eine Position im Raum, bezogen auf den "
"Ursprung."

msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"Ein sehr wichtiger Punkt bei Vektoren ist, dass sie nur die **relative** "
"Richtung und Betrag darstellen. Es gibt kein Konzept für die Position eines "
"Vektors. Die folgenden zwei Vektoren sind identisch:"

msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"Beide Vektoren stellen einen Punkt dar, der 4 Einheiten nach rechts und 3 "
"Einheiten unter einem Ausgangspunkt liegt. Es spielt keine Rolle, wo auf der "
"Ebene Sie den Vektor zeichnen, er stellt immer eine relative Richtung und "
"Betrag dar."

msgid "Vector operations"
msgstr "Vektoroperationen"

msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"Sie können jede der beiden Methoden (x- und y-Koordinaten oder Winkel und "
"Betrag) verwenden, um sich auf einen Vektor zu beziehen, aber der "
"Einfachheit halber verwenden Programmierer normalerweise die Koordinaten-"
"Notation. Zum Beispiel ist in Godot der Ursprung die linke obere Ecke des "
"Bildschirms. Um einen 2D-Node namens ``Node2D`` 400 Pixel nach rechts und "
"300 Pixel nach unten zu platzieren, verwenden Sie den folgenden Code:"

msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types, and wherever we link to "
"``Vector2`` methods in the class reference, you can also check out their "
"``Vector3`` counterparts."
msgstr ""
"Godot unterstützt sowohl :ref:`Vector2 <class_Vector2>` als auch :ref:"
"`Vector3 <class_Vector3>` für den 2D- bzw. 3D-Gebrauch. Die gleichen "
"mathematischen Regeln, die in diesem Artikel besprochen werden, gelten für "
"beide Typen, und wo immer wir in der Klassenreferenz auf ``Vektor2``-"
"Methoden verweisen, können Sie auch deren ``Vektor3``-Gegenstücke nachlesen."

msgid "Member access"
msgstr "Zugriff auf die Komponenten"

msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr ""
"Auf die einzelnen Komponenten des Vektors kann direkt über den Namen "
"zugegriffen werden."

msgid "Adding vectors"
msgstr "Vektoren addieren"

msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr ""
"Beim Addieren oder Subtrahieren zweier Vektoren werden die entsprechenden "
"Komponenten addiert:"

msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr ""
"Wir können dies auch visuell sehen, indem wir den zweiten Vektor an das Ende "
"des ersten anhängen:"

msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr ""
"Beachten Sie, dass ``a + b`` zum gleichen Ergebnis führt wie ``b + a``."

msgid "Scalar multiplication"
msgstr "Skalarmultiplikation"

msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**. Scalars use the :ref:`class_float` type in "
"Godot."
msgstr ""
"Vektoren stellen sowohl die Richtung als auch den Betrag dar. Ein Wert, der "
"nur den Betrag darstellt, wird **Skalar** genannt. Skalare verwenden in "
"Godot den Typ :ref:`class_float`."

msgid "A vector can be multiplied by a **scalar**:"
msgstr "Ein Vektor kann mit einen **Skalar** multipliziert werden:"

msgid ""
"Multiplying a vector by a positive scalar does not change its direction, "
"only its magnitude. Multiplying with a negative scalar results in a vector "
"in the opposite direction. This is how you **scale** a vector."
msgstr ""
"Die Multiplikation eines Vektors mit einem positiven Skalar ändert nicht "
"seine Richtung, sondern nur seinen Betrag. Die Multiplikation mit einem "
"negativen Skalar ergibt einen Vektor in umgekehrter Richtung. Auf diese "
"Weise **skaliert** man einen Vektor."

msgid "Practical applications"
msgstr "Praktische Anwendungen"

msgid "Let's look at two common uses for vector addition and subtraction."
msgstr ""
"Sehen wir uns einmal zwei einfache Anwendungen zur Vektoraddition und -"
"subtraktion an."

msgid "Movement"
msgstr "Bewegung"

msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1, 3)`` and a "
"velocity vector of ``(2, 1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"Ein Vektor kann **jede** Größe mit einem Betrag und einer Richtung "
"darstellen. Typische Beispiele sind: Position, Geschwindigkeit, "
"Beschleunigung und Kraft. In diesem Bild hat das Raumschiff bei Schritt 1 "
"einen Positionsvektor von ``(1, 3)`` und einen Geschwindigkeitsvektor von "
"``(2, 1)``. Der Geschwindigkeitsvektor gibt an, wie weit sich das Raumschiff "
"in jedem Schritt bewegt. Wir können die Position für Schritt 2 ermitteln, "
"indem wir die Geschwindigkeit zur aktuellen Position addieren."

msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding the velocity multiplied by the elapsed time "
"(here assumed to be one unit, e.g. 1 s) to the previous position."
msgstr ""
"Die Geschwindigkeit misst die **Veränderung** der Position pro Zeiteinheit. "
"Die neue Position wird durch Addition der Geschwindigkeit multipliziert mit "
"der verstrichenen Zeit (hier als eine Einheit angenommen, z.B. 1 s) zur "
"vorherigen Position ermittelt."

msgid ""
"In a typical 2D game scenario, you would have a velocity in pixels per "
"second, and multiply it by the ``delta`` parameter (time elapsed since the "
"previous frame) from the :ref:`_process() "
"<class_Node_private_method__process>` or :ref:`_physics_process() "
"<class_Node_private_method__physics_process>` callbacks."
msgstr ""
"In einem typischen 2D-Spielszenario würde man eine Geschwindigkeit in Pixeln "
"pro Sekunde angeben und diese mit dem Parameter ``delta`` (die seit dem "
"letzten Frame verstrichene Zeit) aus den :ref:`_process() "
"<class_Node_private_method__process>` oder :ref:`_physics_process() "
"<class_Node_private_method__physics_process>`-Callbacks multiplizieren."

msgid "Pointing toward a target"
msgstr "Ausrichtung auf ein Ziel"

msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"In diesem Szenario haben Sie einen Panzer, der seinen Turm auf einen Roboter "
"richten möchte. Subtrahiert man die Position des Panzers von der Position "
"des Roboters, erhält man den Vektor, der vom Panzer auf den Roboter zeigt."

msgid "To find a vector pointing from ``A`` to ``B``, use ``B - A``."
msgstr ""
"Um einen Vektor zu finden, der von ``A`` nach ``B`` zeigt, benutzt man ``B - "
"A``."

msgid "Unit vectors"
msgstr "Einheitsvektoren"

msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"Ein Vektor mit dem **Betrag** von ``1`` wird **Einheitsvektor** genannt. Sie "
"werden manchmal auch als **Richtungsvektoren** oder **Normalen** bezeichnet. "
"Einheitsvektoren sind hilfreich, wenn man eine Richtung festhalten muss."

msgid "Normalization"
msgstr "Normierung"

msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, Godot provides a "
"dedicated :ref:`normalized() <class_Vector2_method_normalized>` method for "
"this:"
msgstr ""
"**Normieren** eines Vektors bedeutet, seine Länge auf ``1`` zu reduzieren "
"und dabei seine Richtung beizubehalten. Dies geschieht, indem jede seiner "
"Komponenten durch ihren Betrag dividiert wird. Weil dies eine so häufige "
"Operation ist, bietet Godot eine eigene Methode :ref:`normalisiert() "
"<class_Vector2_method_normalized>` dafür an:"

msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so would normally "
"result in an error. In GDScript though, trying to call the ``normalized()`` "
"method on a vector of length 0 leaves the value untouched and avoids the "
"error for you."
msgstr ""
"Da bei der Normierung durch die Länge des Vektors dividiert wird, können Sie "
"einen Vektor der Länge ``0`` nicht normieren. Der Versuch, dies zu tun, "
"würde normalerweise zu einem Fehler führen. In GDScript bleibt der Wert "
"jedoch unverändert, wenn man die Methode ``normalized()`` für einen Vektor "
"der Länge 0 aufruft, so dass der Fehler nicht auftritt."

msgid "Reflection"
msgstr "Reflexion"

msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"Eine häufige Verwendung von Einheitsvektoren ist die Angabe von "
"**Normalen**. Normalenvektoren sind Einheitsvektoren, die senkrecht zu einer "
"Oberfläche ausgerichtet sind und deren Richtung definieren. Sie werden "
"häufig für Beleuchtung, Kollisionen und andere Operationen mit Oberflächen "
"verwendet."

msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr ""
"Stellen Sie sich zum Beispiel vor, Sie haben einen sich bewegenden Ball, den "
"Sie an einer Wand oder einem anderen Objekt abprallen lassen wollen:"

msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, there is a :ref:`bounce() <class_Vector2_method_bounce>` method to "
"handle this. Here is a code example of the above diagram using a :ref:"
"`CharacterBody2D <class_CharacterBody2D>`:"
msgstr ""
"Die Oberflächennormale hat den Wert ``(0, -1)``, da es sich um eine "
"horizontale Fläche handelt. Wenn der Ball aufprallt, nehmen wir seine "
"verbleibende Bewegung (die Menge, die übrig bleibt, wenn er auf die "
"Oberfläche trifft) und reflektieren sie mit Hilfe der Normalen. In Godot "
"gibt es eine Methode :ref:`bounce() <class_Vector2_method_bounce>`, um dies "
"zu behandeln. Hier ist ein Code-Beispiel für das obige Diagramm unter "
"Verwendung eines :ref:`CharacterBody2D <class_CharacterBody2D>`:"

msgid "Dot product"
msgstr "Skalarprodukt"

msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"Das **Skalarprodukt** ist eines der wichtigsten Konzepte in der "
"Vektormathematik, wird allerdings oft falsch verstanden. Das Skalarprodukt "
"ist eine Operation auf zwei Vektoren, die einen **Skalar** ergibt. Im "
"Gegensatz zu einem Vektor, der sowohl den Betrag als auch die Richtung "
"enthält, hat ein Skalarwert nur einen Betrag."

msgid "The formula for dot product takes two common forms:"
msgstr "Die Formel für das Skalarprodukt hat zwei übliche Formen:"

msgid "and"
msgstr "und"

msgid ""
"The mathematical notation *||A||* represents the magnitude of vector ``A``, "
"and *A*\\ :sub:`x` means the ``x`` component of vector ``A``."
msgstr ""
"Die mathematische Notation *||A||* steht für den Betrag des Vektors ``A``, "
"und *A*\\ :sub:`x` bezeichnet die Komponente ``x`` des Vektors ``A``."

msgid ""
"However, in most cases it is easiest to use the built-in :ref:`dot() "
"<class_Vector2_method_dot>` method. Note that the order of the two vectors "
"does not matter:"
msgstr ""
"In den meisten Fällen ist es jedoch am einfachsten, die built-in-Methode :"
"ref:`dot() <class_Vector2_method_dot>` zu verwenden. Beachten Sie, dass die "
"Reihenfolge der beiden Vektoren keine Rolle spielt:"

msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cos(θ)``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"Das Skalarprodukt ist am nützlichsten, wenn es mit Einheitsvektoren "
"verwendet wird, wodurch sich die erste Formel auf ``cos(θ)`` reduziert. Das "
"bedeutet, dass wir das Skalarprodukt verwenden können, um uns etwas über den "
"Winkel zwischen zwei Vektoren auszusagen:"

msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr ""
"Bei Verwendung von Einheitsvektoren liegt das Ergebnis immer zwischen ``-1`` "
"(180°) und ``1`` (0°)."

msgid "Facing"
msgstr "Blickrichtung"

msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"Wir können diese Tatsache nutzen, um festzustellen, ob ein Objekt einem "
"anderen Objekt zugewandt ist. In der folgenden Abbildung versucht der "
"Spieler ``P``, den Zombies ``A`` und ``B`` auszuweichen. Angenommen, das "
"Sichtfeld eines Zombies ist **180°**, können sie den Spieler sehen?"

msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombie's facing direction and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called :ref:`direction_to() <class_Vector2_method_direction_to>`. "
"If the angle between this vector and the facing vector is less than 90°, "
"then the zombie can see the player."
msgstr ""
"Die grünen Pfeile ``fA`` und ``fB`` sind **Einheitsvektoren**, und stellen "
"die Blickrichtung des Zombies dar, und der blaue Halbkreis repräsentiert "
"sein Sichtfeld. Für den Zombie ``A`` finden wir den Richtungsvektor ``AP``, "
"der auf den Spieler zeigt, indem wir ``P - A`` verwenden und ihn normieren. "
"Godot hat dafür eine Hilfsmethode namens :ref:`direction_to() "
"<class_Vector2_method_direction_to>`. Wenn der Winkel zwischen diesem Vektor "
"und dem gegenüberliegenden Vektor kleiner als 90° ist, kann der Zombie den "
"Spieler sehen."

msgid "In code it would look like this:"
msgstr "Der entsprechende Code sieht so aus:"

msgid "Cross product"
msgstr "Kreuzprodukt"

msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"Wie das Skalarprodukt ist das **Kreuzprodukt** eine Operation auf zwei "
"Vektoren. Das Ergebnis des Kreuzprodukts ist jedoch ein Vektor mit einer "
"Richtung, die senkrecht zu beiden ist. Ihr Betrag hängt von ihrem relativen "
"Winkel ab. Wenn zwei Vektoren parallel sind, ist das Ergebnis ihres "
"Kreuzprodukts ein Nullvektor."

msgid "The cross product is calculated like this:"
msgstr "Das Kreuzprodukt wird wie folgt berechnet:"

msgid ""
"With Godot, you can use the built-in :ref:`Vector3.cross() "
"<class_Vector3_method_cross>` method:"
msgstr ""
"Mit Godot können Sie die Built-in-Methode :ref:`Vector3.cross() "
"<class_Vector3_method_cross>` verwenden:"

msgid ""
"The cross product is not mathematically defined in 2D. The :ref:`Vector2."
"cross() <class_Vector2_method_cross>` method is a commonly used analog of "
"the 3D cross product for 2D vectors."
msgstr ""
"Das Kreuzprodukt ist in 2D nicht mathematisch definiert. Die Methode :ref:"
"`Vector2.cross() <class_Vector2_method_cross>` ist ein häufig verwendetes "
"Analogon des 3D-Kreuzprodukts für 2D-Vektoren."

msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"Im Kreuzprodukt ist die Reihenfolge wichtig. ``a.cross(b)`` liefert nicht "
"das gleiche Ergebnis wie ``b.cross(a)``. Die resultierenden Vektoren zeigen "
"in **entgegengesetzte** Richtungen."

msgid "Calculating normals"
msgstr "Normalen berechnen"

msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB × AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"Eine häufige Anwendung von Kreuzprodukten ist die Ermittlung der "
"Flächennormalen einer Ebene oder Fläche im 3D-Raum. Wenn wir das Dreieck "
"``ABC`` haben, können wir die Vektorsubtraktion verwenden, um zwei Kanten "
"``AB`` und ``AC`` zu finden. Mit dem Kreuzprodukt ``AB × AC`` erhält man "
"einen Vektor, der senkrecht zu beiden Kanten steht: die Oberflächennormale."

msgid "Here is a function to calculate a triangle's normal:"
msgstr "Hier ist eine Funktion zur Bestimmung der Normalen eines Dreiecks:"

msgid "Pointing to a target"
msgstr "Auf ein Ziel ausrichten"

msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"Im obigen Abschnitt über das Skalarprodukt haben wir gesehen, wie damit der "
"Winkel zwischen zwei Vektoren ermittelt werden kann. In 3D reichen diese "
"Informationen jedoch nicht aus. Wir müssen auch wissen, um welche Achse wir "
"uns drehen müssen. Wir können dies feststellen, indem wir das Kreuzprodukt "
"der aktuellen Blickrichtung und der Zielrichtung berechnen. Der "
"resultierende senkrechte Vektor ist die Rotationsachse."

msgid "More information"
msgstr "Weitere Informationen"

msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr ""
"Für weitere Informationen über Vektormathematik in Godot siehe die folgenden "
"Artikel:"

msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid "Translation status"
msgstr "Übersetzungsstatus"
