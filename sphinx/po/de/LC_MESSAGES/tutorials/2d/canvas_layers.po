# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr "Canvas-Ebenen"

msgid "Viewport and Canvas items"
msgstr "Viewport- und Canvas-Elemente"

msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
":ref:`CanvasItem <class_CanvasItem>` ist die Basis für alle 2D-Nodes, seien "
"es normale 2D-Nodes, wie :ref:`Node2D <class_Node2D>`, oder :ref:`Control "
"<class_Control>`. Beide erben von :ref:`CanvasItem <class_CanvasItem>`. Sie "
"können Canvas-Elemente in Bäumen anordnen. Jedes Element erbt die "
"Transformation seines Parents: Wenn sich der Parent bewegt, bewegen sich "
"auch seine Child-Elemente."

msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that displays them."
msgstr ""
"CanvasItem-Nodes und Nodes, die davon erben, sind direkte oder indirekte "
"Child-Elemente eines :ref:`Viewport <class_Viewport>`, das sie anzeigt."

msgid ""
"The Viewport's property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Die Viewport-Property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>` erlaubt es, eine "
"benutzerdefinierte :ref:`Transform2D <class_Transform2D>`-Transformation auf "
"die CanvasItem-Hierarchie anzuwenden, die sie enthält. Nodes wie :ref:"
"`Camera2D <class_Camera2D>` funktionieren, indem sie diese Transformation "
"ändern."

msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""
"Effekte wie das Scrollen lassen sich am besten durch Bearbeiten der Canvas-"
"Property \"Transformation\" erzielen. Dieser Ansatz ist effizienter als das "
"Verschieben des Root-Canvas-Elements (und damit der gesamten Szene)."

msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"Normalerweise wollen wir nicht, dass *alles* im Spiel durch Canvas-"
"Transformation beeinflusst werden soll. Dazu zählen beispielsweise:"

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Parallax-Hintergründe**: Hintergründe, die sich langsamer bewegen als der "
"Rest des Geschehens."

msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**UI**: Stellen Sie sich eine Benutzeroberfläche (UI) oder ein Head-up-"
"Display (HUD) vor, die unsere Sicht auf die Spielwelt überlagert. Wir "
"möchten, dass eine Lebensanzeige, eine Punkteanzeige und andere Elemente "
"ihre Positionen auf dem Bildschirm beibehalten, auch wenn sich unsere Sicht "
"auf die Spielwelt ändert."

msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Übergänge**: Übergangseffekte (Fading, Blending) bleiben üblicherweise "
"ebenso auf einer festen Position."

msgid "How to solve these problems in a single scene tree?"
msgstr "Wie lassen sich diese Probleme in einem einzigen Szenenbaum lösen?"

msgid "CanvasLayers"
msgstr "CanvasLayers"

msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"Die Antwort ist :ref:`CanvasLayer <class_CanvasLayer>`, ein Node, der eine "
"separate 2D-Ebene zum Zeichnen seiner untergeordneten Nodes bietet. Child-"
"Nodes des Viewports werden grundsätzlich auf Ebene \"0\" gezeichnet, "
"wohingegen ein CanvasLayer auf jeder beliebigen Ebene sein kann. Ebenen mit "
"einer höheren Nummer liegen über jenen mit einer kleineren. CanvasLayers "
"besitzen jeweils eigene Transformationsanpassungen und sind nicht von denen "
"der anderen Ebenen abhängig. Dadurch kann die Benutzeroberfläche im Screen-"
"Space fixiert werden, während sich die Ansicht der Spielwelt ändert."

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Ein Beispiel dazu ist ein Parallax-Hintergrund. So kann dieser in einem "
"CanvasLayer auf Ebene \"-1\" dargestellt werden. Die Ansicht mit "
"Punktestand, Lebensanzeige und Pause-Button dagegen werden auf Ebene \"1\" "
"angelegt."

msgid "Here's a diagram of how it looks:"
msgstr "Hier ein Diagramm zur Veranschaulichung:"

msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayer sind unabhängig von der Baumreihenfolge und hängen nur von der "
"Ebenennummer ab, so dass sie bei Bedarf instanziiert werden können."

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2D nodes also have the :ref:"
"`CanvasItem.z_index <class_CanvasItem_property_z_index>` property for "
"controlling their drawing order."
msgstr ""
"CanvasLayer sind nicht notwendig, um die Zeichenreihenfolge von Nodes zu "
"steuern. Der Standardweg, um sicherzustellen, dass ein Node korrekt \"vor\" "
"oder \"hinter\" anderen gezeichnet wird, besteht darin, die Reihenfolge der "
"Nodes im Szenenfenster zu manipulieren. Vielleicht kontraintuitiv, werden "
"die obersten Nodes im Szenenfenster *hinter* den niedrigeren im Viewport "
"gezeichnet. 2D-Nodes haben auch die Property :ref:`CanvasItem.z_index "
"<class_CanvasItem_property_z_index>`, um ihre Zeichenreihenfolge zu steuern."

msgid "Translation status"
msgstr "Übersetzungsstatus"
