# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shader preprocessor"
msgstr "Shader-Präprozessor"

msgid "Why use a shader preprocessor?"
msgstr "Warum einen Shader-Präprozessor verwenden?"

msgid ""
"In programming languages, a *preprocessor* allows changing the code before "
"the compiler reads it. Unlike the compiler, the preprocessor does not care "
"about whether the syntax of the preprocessed code is valid. The preprocessor "
"always performs what the *directives* tell it to do. A directive is a "
"statement starting with a hash symbol (``#``). It is not a *keyword* of the "
"shader language (such as ``if`` or ``for``), but a special kind of token "
"within the language."
msgstr ""
"In Programmiersprachen ermöglicht ein *Präprozessor* die Änderung des Codes, "
"bevor der Compiler ihn liest. Anders als der Compiler kümmert sich der "
"Präprozessor nicht darum, ob die Syntax des vorverarbeiteten Codes gültig "
"ist. Der Präprozessor führt immer das aus, was die *Direktiven* ihm "
"vorgeben. Eine Direktive ist eine Anweisung, die mit einem Rautezeichen "
"(``#``) beginnt. Sie ist kein *Schlüsselwort* der Shader-Sprache (wie ``if`` "
"oder ``for``), sondern eine spezielle Art von Token innerhalb der Sprache."

msgid ""
"From Godot 4.0 onwards, you can use a shader preprocessor within text-based "
"shaders. The syntax is similar to what most GLSL shader compilers support "
"(which in turn is similar to the C/C++ preprocessor)."
msgstr ""
"Ab Godot 4.0 können Sie einen Shader-Präprozessor in textbasierten Shadern "
"verwenden. Die Syntax ähnelt dem, was die meisten GLSL-Shader-Compiler "
"unterstützen (was wiederum dem C/C++-Präprozessor ähnelt)."

msgid ""
"The shader preprocessor is not available in :ref:`visual shaders "
"<doc_visual_shaders>`. If you need to introduce preprocessor statements to a "
"visual shader, you can convert it to a text-based shader using the **Convert "
"to Shader** option in the VisualShader inspector resource dropdown. This "
"conversion is a one-way operation; text shaders cannot be converted back to "
"visual shaders."
msgstr ""
"Der Shader-Präprozessor ist in :ref:`visuellen Shadern <doc_visual_shaders>` "
"nicht verfügbar. Wenn Sie Präprozessoranweisungen in einen visuellen Shader "
"einfügen müssen, können Sie ihn in einen textbasierten Shader konvertieren, "
"indem Sie die Option **In Shader konvertieren** im Ressourcen-Dropdown des "
"VisualShader-Inspektors verwenden. Diese Konvertierung ist eine Einweg-"
"Operation; Text-Shader können nicht zurück in visuelle Shader konvertiert "
"werden."

msgid "Directives"
msgstr "Direktiven"

msgid "General syntax"
msgstr "Allgemeine Syntax"

msgid ""
"Preprocessor directives do not use brackets (``{}``), but can use "
"parentheses."
msgstr ""
"Präprozessor-Direktiven verwenden keine geschweiften Klammern(``{}``), "
"können aber runde Klammern verwenden."

msgid ""
"Preprocessor directives **never** end with semicolons (with the exception of "
"``#define``, where this is allowed but potentially dangerous)."
msgstr ""
"Präprozessor-Direktiven enden **nie** mit Semikolons (mit Ausnahme von "
"``#define``, wo dies erlaubt, aber potentiell gefährlich ist)."

msgid ""
"Preprocessor directives can span several lines by ending each line with a "
"backslash (``\\``). The first line break *not* featuring a backslash will "
"end the preprocessor statement."
msgstr ""
"Präprozessor-Direktiven können sich über mehrere Zeilen erstrecken, indem "
"jede Zeile mit einem Backslash (``\\``) abgeschlossen wird. Der erste "
"Zeilenumbruch, der *keinen* Backslash enthält, beendet die Präprozessor-"
"Direktive."

msgid "#define"
msgstr "#define"

msgid "**Syntax:** ``#define <identifier> [replacement_code]``."
msgstr "**Syntax:** ``#define <bezeichner> [ersetzungscode]``."

msgid ""
"Defines the identifier after that directive as a macro, and replaces all "
"successive occurrences of it with the replacement code given in the shader. "
"Replacement is performed on a \"whole words\" basis, which means no "
"replacement is performed if the string is part of another string (without "
"any spaces or operators separating it)."
msgstr ""
"Definiert den Bezeichner nach dieser Direktive als Makro und ersetzt alle "
"aufeinanderfolgenden Vorkommen durch den im Shader angegebenen "
"Ersetzungscode. Die Ersetzung erfolgt auf der Basis \"ganzer Wörter\", d.h. "
"es wird keine Ersetzung vorgenommen, wenn der String Teil eines anderen "
"Strings ist (ohne Leerzeichen oder Operatoren als Trennzeichen)."

msgid ""
"Defines with replacements may also have one or more *arguments*, which can "
"then be passed when referencing the define (similar to a function call)."
msgstr ""
"Defines mit Ersetzungen können auch ein oder mehrere *Argumente* haben, die "
"dann beim Verweis auf das Define übergeben werden können (ähnlich wie bei "
"einem Funktionsaufruf)."

msgid ""
"If the replacement code is not defined, the identifier may only be used with "
"``#ifdef`` or ``#ifndef`` directives."
msgstr ""
"Wenn der Ersetzungscode nicht definiert ist, darf der Bezeichner nur mit "
"``#ifdef`` oder ``#ifndef``-Direktiven verwendet werden."

msgid ""
"If the *concatenation* symbol (``##``) is present in the replacement code "
"then it will be removed upon macro insertion, together with any space "
"surrounding it, and join the surrounding words and arguments into a new "
"token."
msgstr ""
"Wenn das *Verkettungs*-Symbol (``##``) im Ersetzungscode vorhanden ist, wird "
"es beim Einfügen des Makros zusammen mit einem etwaigen umgebenden "
"Leerzeichen entfernt und die umgebenden Wörter und Argumente zu einem neuen "
"Token zusammengefügt."

msgid ""
"Compared to constants (``const CONSTANT = value;``), ``#define`` can be used "
"anywhere within the shader (including in uniform hints). ``#define`` can "
"also be used to insert arbitrary shader code at any location, while "
"constants can't do that."
msgstr ""
"Im Vergleich zu Konstanten (``const CONSTANT = value;``) kann ``#define`` an "
"jeder beliebigen Stelle innerhalb des Shaders verwendet werden (auch in "
"Uniform-Hints). ``#define`` kann auch verwendet werden, um beliebigen "
"Shadercode an jeder beliebigen Stelle einzufügen, während dies bei "
"Konstanten nicht möglich ist."

msgid ""
"Defining a ``#define`` for an identifier that is already defined results in "
"an error. To prevent this, use ``#undef <identifier>``."
msgstr ""
"Die Definition eines ``#define`` für einen Bezeichner, der bereits definiert "
"ist, führt zu einem Fehler. Um dies zu verhindern, verwenden Sie ``#undef "
"<bezeichner>``."

msgid "#undef"
msgstr "#undef"

msgid "**Syntax:** ``#undef identifier``"
msgstr "**Syntax:** ``#undef bezeichner``"

msgid ""
"The ``#undef`` directive may be used to cancel a previously defined "
"``#define`` directive:"
msgstr ""
"Die ``#undef``-Direktive kann verwendet werden, um eine zuvor definierte "
"``#define``-Direktive zu beenden:"

msgid ""
"Without ``#undef`` in the above example, there would be a macro redefinition "
"error."
msgstr ""
"Ohne ``#undef`` im obigen Beispiel würde es einen Fehler bei der "
"Neudefinition des Makros geben."

msgid "#if"
msgstr "#if"

msgid "**Syntax:** ``#if <condition>``"
msgstr "**Syntax:** ``#if <bedingung>``"

msgid ""
"The ``#if`` directive checks whether the ``condition`` passed. If it "
"evaluates to a non-zero value, the code block is included, otherwise it is "
"skipped."
msgstr ""
"Die ``#if``-Direktive prüft, ob die ``bedingung`` erfüllt ist. Wenn sie "
"einen Wert ungleich Null ergibt, wird der Codeblock verwendet, andernfalls "
"wird er übersprungen."

msgid ""
"To evaluate correctly, the condition must be an expression giving a simple "
"floating-point, integer or boolean result. There may be multiple condition "
"blocks connected by ``&&`` (AND) or ``||`` (OR) operators. It may be "
"continued by a ``#else`` block, but **must** be ended with the ``#endif`` "
"directive."
msgstr ""
"Um korrekt ausgewertet zu werden, muss die Bedingung ein Ausdruck sein, der "
"ein einfaches Float-, Integer- oder boolesches Ergebnis liefert. Es kann "
"mehrere Bedingungsblöcke geben, die mit den Operatoren ``&&`` (AND) oder ``||"
"`` (OR) verbunden sind. Er kann durch einen ``#else``-Block fortgesetzt "
"werden, muss aber mit der Anweisung ``#endif`` abgeschlossen werden."

msgid ""
"Using the ``defined()`` *preprocessor function*, you can check whether the "
"passed identifier is defined a by ``#define`` placed above that directive. "
"This is useful for creating multiple shader versions in the same file. It "
"may be continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"Mit Hilfe der ``defined()`` *Präprozessorfunktion* können Sie überprüfen, ob "
"der übergebene Bezeichner durch das ``#define`` definiert ist, das über "
"dieser Direktive steht. Dies ist nützlich, um mehrere Shaderversionen in der "
"gleichen Datei zu erstellen. Sie kann durch einen ``#else`` Block "
"fortgesetzt werden, muss aber mit der ``#endif``-Direktive beendet werden."

msgid ""
"The ``defined()`` function's result can be negated by using the ``!`` "
"(boolean NOT) symbol in front of it. This can be used to check whether a "
"define is *not* set."
msgstr ""
"Das Ergebnis der Funktion ``defined()`` kann mit dem vorangestellten Symbol "
"``!`` (boolesches NOT) negiert werden. Dies kann verwendet werden, um zu "
"prüfen, ob ein Define *nicht* gesetzt ist."

msgid ""
"Be careful, as ``defined()`` must only wrap a single identifier within "
"parentheses, never more:"
msgstr ""
"Seien Sie vorsichtig, da ``defined()`` nur einen einzigen Bezeichner in "
"Klammern einschließen darf, niemals mehr:"

msgid ""
"In the shader editor, preprocessor branches that evaluate to ``false`` (and "
"are therefore excluded from the final compiled shader) will appear grayed "
"out. This does not apply to run-time ``if`` statements."
msgstr ""
"Im Shader-Editor werden Präprozessor-Zweige, die als ``falsch`` ausgewertet "
"werden (und daher vom endgültigen kompilierten Shader ausgeschlossen sind), "
"ausgegraut dargestellt. Dies gilt nicht für ``if``-Anweisungen zur Laufzeit."

msgid "**#if preprocessor versus if statement: Performance caveats**"
msgstr "**#if-Präprozessor vs. if-Anweisung: Performance-Hinweise**"

msgid ""
"The :ref:`shading language <doc_shading_language>` supports run-time ``if`` "
"statements:"
msgstr ""
"Die :ref:`Shading-Sprache <doc_shading_language>` unterstützt ``if``-"
"Anweisungen zur Laufzeit:"

msgid ""
"If the uniform is never changed, this behaves identical to the following "
"usage of the ``#if`` preprocessor statement:"
msgstr ""
"Wenn das Uniform nie geändert wird, verhält sich dies genauso wie die "
"folgende Verwendung der ``#if``-Präprozessoranweisung:"

msgid ""
"However, the ``#if`` variant can be faster in certain scenarios. This is "
"because all run-time branches in a shader are still compiled and variables "
"within those branches may still take up register space, even if they are "
"never run in practice."
msgstr ""
"Die ``#if``-Variante kann jedoch in bestimmten Szenarien schneller sein. Das "
"liegt daran, dass alle Laufzeitverzweigungen in einem Shader immer noch "
"kompiliert werden und die Variablen innerhalb dieser Verzweigungen immer "
"noch Registerplatz belegen können, auch wenn sie in der Praxis nie "
"ausgeführt werden."

msgid ""
"Modern GPUs are `quite effective <https://medium.com/@jasonbooth_86226/"
"branching-on-a-gpu-18bfc83694f2>`__ at performing \"static\" branching. "
"\"Static\" branching refers to ``if`` statements where *all* pixels/vertices "
"evaluate to the same result in a given shader invocation. However, high "
"amounts of :abbr:`VGPRs (Vector General-Purpose Register)` (which can be "
"caused by having too many branches) can still slow down shader execution "
"significantly."
msgstr ""
"Moderne GPUs sind `recht effektiv <https://medium.com/@jasonbooth_86226/"
"branching-on-a-gpu-18bfc83694f2>`__ bei der Durchführung von \"statischen\" "
"Verzweigungen. \"Statische\" Verzweigungen beziehen sich auf ``if``-"
"Anweisungen, bei denen *alle* Pixel/Vertices bei einem bestimmten Shader-"
"Aufruf das gleiche Ergebnis liefern. Allerdings können große Mengen von :"
"abbr:`VGPRs (Vector General-Purpose Register)` (die durch zu viele "
"Verzweigungen verursacht werden können) die Shader-Ausführung immer noch "
"erheblich verlangsamen."

msgid "#elif"
msgstr "#elif"

msgid ""
"The ``#elif`` directive stands for \"else if\" and checks the condition "
"passed if the above ``#if`` evaluated to ``false``. ``#elif`` can only be "
"used within an ``#if`` block. It is possible to use several ``#elif`` "
"statements after an ``#if`` statement."
msgstr ""
"Die Anweisung ``#elif`` steht für \"else if\" und prüft die Bedingung, die "
"übergeben wird, wenn die obige ``#if`` als ``false`` ausgewertet wird. "
"``#elif`` kann nur innerhalb eines ``#if``-Blocks verwendet werden. Es ist "
"möglich, mehrere ``#elif``-Anweisungen nach einer ``#if``-Anweisung zu "
"verwenden."

msgid "Like with ``#if``, the ``defined()`` preprocessor function can be used:"
msgstr ""
"Wie bei ``#if`` kann die Präprozessorfunktion ``defined()`` verwendet werden:"

msgid "#ifdef"
msgstr "#ifdef"

msgid "**Syntax:** ``#ifdef <identifier>``"
msgstr "**Syntax:** ``#ifdef <bezeichner>``"

msgid ""
"This is a shorthand for ``#if defined(...)``. Checks whether the passed "
"identifier is defined by ``#define`` placed above that directive. This is "
"useful for creating multiple shader versions in the same file. It may be "
"continued by a ``#else`` block, but must be ended with the ``#endif`` "
"directive."
msgstr ""
"Dies ist eine Kurzform für ``#if defined(...)``. Prüft, ob der übergebene "
"Bezeichner durch ein ``#define`` definiert ist, das über dieser Direktive "
"steht. Dies ist nützlich, um mehrere Shaderversionen in der gleichen Datei "
"zu erzeugen. Sie kann durch einen ``#else`` Block fortgesetzt werden, muss "
"aber mit der ``#endif`` Direktive beendet werden."

msgid ""
"The processor does *not* support ``#elifdef`` as a shortcut for ``#elif "
"defined(...)``. Instead, use the following series of ``#ifdef`` and "
"``#else`` when you need more than two branches:"
msgstr ""
"Der Prozessor unterstützt *nicht* ``#elifdef`` als Abkürzung für ``#elif "
"defined(...)``. Verwenden Sie stattdessen die folgende Reihe von ``#ifdef`` "
"und ``#else``, wenn Sie mehr als zwei Verzweigungen benötigen:"

msgid "#ifndef"
msgstr "#ifndef"

msgid "**Syntax:** ``#ifndef <identifier>``"
msgstr "**Syntax:** ``#ifndef <bezeichner>``"

msgid ""
"This is a shorthand for ``#if !defined(...)``. Similar to ``#ifdef``, but "
"checks whether the passed identifier is **not** defined by ``#define`` "
"before that directive."
msgstr ""
"Dies ist eine Kurzform für ``#if !defined(...)``. Ähnlich wie ``#ifdef``, "
"prüft aber, ob der übergebene Bezeichner **nicht** durch ``#define`` vor "
"dieser Direktive definiert ist."

msgid ""
"This is the exact opposite of ``#ifdef``; it will always match in situations "
"where ``#ifdef`` would never match, and vice versa."
msgstr ""
"Dies ist das genaue Gegenteil von ``#ifdef``; es wird immer in Situationen "
"passen, in denen ``#ifdef`` niemals passen würde, und andersherum."

msgid "#else"
msgstr "#else"

msgid "**Syntax:** ``#else``"
msgstr "**Syntax:** ``#else``"

msgid ""
"Defines the optional block which is included when the previously defined "
"``#if``, ``#elif``, ``#ifdef`` or ``#ifndef`` directive evaluates to false."
msgstr ""
"Definiert den optionalen Block, der eingeschlossen wird, wenn die zuvor "
"definierte ``#if``-, ``#elif``-, ``#ifdef``- oder ``#ifndef``-Direktive als "
"false ausgewertet wird."

msgid "#endif"
msgstr "#endif"

msgid "**Syntax:** ``#endif``"
msgstr "**Syntax:** ``#endif``"

msgid ""
"Used as terminator for the ``#if``, ``#ifdef``, ``#ifndef`` or subsequent "
"``#else`` directives."
msgstr ""
"Wird als Endelement für die ``#if``, ``#ifdef``, ``#ifndef`` oder "
"nachfolgende ``#else``-Direktiven verwendet."

msgid "#include"
msgstr "#include"

msgid "**Syntax:** ``#include \"path\"``"
msgstr "**Syntax:** ``#include \"pfad\"``"

msgid ""
"The ``#include`` directive includes the *entire* content of a shader include "
"file in a shader. ``\"path\"`` can be an absolute ``res://`` path or "
"relative to the current shader file. Relative paths are only allowed in "
"shaders that are saved to ``.gdshader`` or ``.gdshaderinc`` files, while "
"absolute paths can be used in shaders that are built into a scene/resource "
"file."
msgstr ""
"Die ``#include``-Direktive schließt den *gesamten* Inhalt einer Shader-"
"Include-Datei in einen Shader ein. Der ``pfad`` kann ein absoluter ``res://"
"`` Pfad oder relativ zur aktuellen Shaderdatei sein. Relative Pfade sind nur "
"in Shadern erlaubt, die in ``.gdshader`` oder ``.gdshaderinc`` Dateien "
"gespeichert sind, während absolute Pfade in Shadern verwendet werden können, "
"die in eine Szene/Ressourcendatei eingebaut sind."

msgid ""
"You can create new shader includes by using the **File > Create Shader "
"Include** menu option of the shader editor, or by creating a new :ref:"
"`ShaderInclude<class_ShaderInclude>` resource in the FileSystem dock."
msgstr ""
"Sie können neue Shader-Includes erstellen, indem Sie die Menüoption **Datei "
"> Shader-Include erstellen** des Shader-Editors verwenden oder indem Sie "
"eine neue :ref:`ShaderInclude<class_ShaderInclude>`-Ressource im FileSystem-"
"Dock erstellen."

msgid ""
"Shader includes can be included from within any shader, or other shader "
"include, at any point in the file."
msgstr ""
"Shader-Includes können von jedem Shader oder einem anderen Shader-Include "
"aus an jeder beliebigen Stelle der Datei eingefügt werden."

msgid ""
"When including shader includes in the global scope of a shader, it is "
"recommended to do this after the initial ``shader_type`` statement."
msgstr ""
"Wenn Sie Shader-Includes in den globalen Bereich eines Shaders aufnehmen, "
"wird empfohlen, dies nach der ersten ``shader_type``-Anweisung zu tun."

msgid ""
"You can also include shader includes from within the body a function. Please "
"note that the shader editor is likely going to report errors for your shader "
"include's code, as it may not be valid outside of the context that it was "
"written for. You can either choose to ignore these errors (the shader will "
"still compile fine), or you can wrap the include in an ``#ifdef`` block that "
"checks for a define from your shader."
msgstr ""
"Sie können Shader-Includes auch innerhalb eines Funktionsrumpfs einbinden. "
"Bitte beachten Sie, dass der Shader-Editor wahrscheinlich Fehler für den "
"Code Ihres Shader-Includes melden wird, da er außerhalb des Kontextes, für "
"den er geschrieben wurde, nicht gültig sein könnte. Sie können diese Fehler "
"entweder ignorieren (der Shader wird trotzdem kompiliert), oder Sie können "
"das Include in einen ``#ifdef``-Block einbinden, der auf eine Definition des "
"Shaders prüft."

msgid ""
"``#include`` is useful for creating libraries of helper functions (or "
"macros) and reducing code duplication. When using ``#include``, be careful "
"about naming collisions, as redefining functions or macros is not allowed."
msgstr ""
"``#include`` ist nützlich, um Bibliotheken von Hilfsfunktionen (oder Makros) "
"zu erstellen und Code-Duplikation zu reduzieren. Bei der Verwendung von "
"``#include`` ist auf Namenskollisionen zu achten, da das Umdefinieren von "
"Funktionen oder Makros nicht erlaubt ist."

msgid "``#include`` is subject to several restrictions:"
msgstr "``#include`` unterliegt mehreren Einschränkungen:"

msgid ""
"Only shader include resources (ending with ``.gdshaderinc``) can be "
"included. ``.gdshader`` files cannot be included by another shader, but a ``."
"gdshaderinc`` file can include other ``.gdshaderinc`` files."
msgstr ""
"Nur Shader-Include-Ressourcen (mit der Endung ``.gdshaderinc``) können "
"eingebunden werden. ``.gdshader``-Dateien können nicht von einem anderen "
"Shader eingebunden werden, aber eine ``.gdshaderinc``-Datei kann andere ``."
"gdshaderinc``-Dateien einbinden."

msgid "Cyclic dependencies are **not** allowed and will result in an error."
msgstr ""
"Zyklische Abhängigkeiten sind **nicht** erlaubt und führen zu einem Fehler."

msgid "To avoid infinite recursion, include depth is limited to 25 steps."
msgstr ""
"Um eine unendliche Rekursion zu vermeiden, ist die Inklusionstiefe auf 25 "
"Schritte begrenzt."

msgid "Example shader include file:"
msgstr "Beispiel für eine Shader-Include-Datei:"

msgid "Example base shader (using the include file we created above):"
msgstr ""
"Beispiel für einen Basisshader (unter Verwendung der oben erstellten Include-"
"Datei):"

msgid "#pragma"
msgstr "#pragma"

msgid "**Syntax:** ``#pragma value``"
msgstr "**Syntax:** ``#pragma wert``"

msgid ""
"The ``#pragma`` directive provides additional information to the "
"preprocessor or compiler."
msgstr ""
"Die ``#pragma``-Direktive liefert zusätzliche Informationen an den "
"Präprozessor oder Compiler."

msgid ""
"Currently, it may have only one value: ``disable_preprocessor``. If you "
"don't need the preprocessor, use that directive to speed up shader "
"compilation by excluding the preprocessor step."
msgstr ""
"Derzeit kann sie nur einen Wert haben: ``disable_preprocessor``. Wenn Sie "
"den Präprozessor nicht benötigen, verwenden Sie diese Direktive, um die "
"Shader-Kompilierung zu beschleunigen, indem Sie den Präprozessorschritt "
"weglassen."

msgid "Translation status"
msgstr "Übersetzungsstatus"
