# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request workflow"
msgstr "Workflow eines Pull Requests"

msgid ""
"The so-called \"PR workflow\" used by Godot is common to many projects using "
"Git, and should be familiar to veteran free software contributors. The idea "
"is that only a small number (if any) commit directly to the *master* branch. "
"Instead, contributors *fork* the project (i.e. create a copy of it, which "
"they can modify as they wish), and then use the GitHub interface to request "
"a *pull* from one of their fork's branches to one branch of the original "
"(often named *upstream*) repository."
msgstr ""
"Der so genannte \"PR-Workflow\", der von Godot verwendet wird, ist bei "
"vielen Projekten, die Git verwenden, üblich und sollte erfahrenen "
"Mitwirkenden an freier Software bekannt sein. Die Idee ist, dass nur eine "
"kleine Anzahl von Personen (wenn überhaupt welche) direkt in den *master*-"
"Branch einchecken. Stattdessen *forken* die Mitwirkenden das Projekt (d.h. "
"sie erstellen eine Kopie davon, die sie nach Belieben verändern können), und "
"verwenden dann die GitHub-Benutzeroberfläche, um einen *Pull* von einem der "
"Branches ihres Forks in einen Branch des ursprünglichen (oft *upstream* "
"genannten) Repositorys zu beantragen."

msgid ""
"The resulting *pull request* (PR) can then be reviewed by other "
"contributors, which might approve it, reject it, or most often request that "
"modifications be done. Once approved, the PR can then be merged by one of "
"the core developers, and its commit(s) will become part of the target branch "
"(usually the *master* branch)."
msgstr ""
"Der daraus resultierende *Pull Request* (PR) kann dann von anderen "
"Mitwirkenden geprüft werden, die ihn genehmigen oder ablehnen können, oder "
"meistens Änderungen verlangen. Sobald der PR genehmigt ist, kann er von "
"einem der Kernentwickler gemergt werden, und seine Commits werden Teil des "
"Ziel-Branchs (üblicherweise der *master*-Branch)."

msgid ""
"We will go together through an example to show the typical workflow and "
"associated Git commands. But first, let's have a quick look at the "
"organization of Godot's Git repository."
msgstr ""
"Wir werden gemeinsam ein Beispiel durchgehen, um den typischen Workflow und "
"die zugehörigen Git-Befehle zu zeigen. Aber werfen wir zuerst einen kurzen "
"Blick auf die Organisation von Godots Git-Repository."

msgid "Git source repository"
msgstr "Git Quellcode-Repository"

msgid ""
"The `repository on GitHub <https://github.com/godotengine/godot>`_ is a `Git "
"<https://git-scm.com>`_ code repository together with an embedded issue "
"tracker and PR system."
msgstr ""
"Das `Repository auf GitHub <https://github.com/godotengine/godot>`_ ist ein "
"`Git <https://git-scm.com>`_ Code-Repository mit einem eingebetteten Issue-"
"Tracker und einem PR-System."

msgid ""
"If you are contributing to the documentation, its repository can be found "
"`here <https://github.com/godotengine/godot-docs>`_."
msgstr ""
"Wenn Sie einen Beitrag zur Dokumentation leisten möchten, finden Sie das "
"Repository `hier <https://github.com/godotengine/godot-docs>`_."

msgid ""
"The Git version control system is the tool used to keep track of successive "
"edits to the source code - to contribute efficiently to Godot, learning the "
"basics of the Git command line is *highly* recommended. There exist some "
"graphical interfaces for Git, but they usually encourage users to take bad "
"habits regarding the Git and PR workflow, and we therefore recommend not to "
"use them. In particular, we advise not to use GitHub's online editor for "
"code contributions (although it's tolerated for small fixes or documentation "
"changes) as it enforces one commit per file and per modification, which "
"quickly leads to PRs with an unreadable Git history (especially after peer "
"review)."
msgstr ""
"Das Git-Versionskontrollsystem ist das Tool, mit dem aufeinanderfolgende "
"Änderungen am Quellcode verfolgt werden. Um einen effizienten Beitrag zu "
"Godot zu leisten, wird *dringend* empfohlen, die Grundlagen der Git-"
"Kommandozeile zu erlernen. Es gibt einige grafische Oberflächen für Git, "
"aber sie ermutigen Benutzer normalerweise, schlechte Gewohnheiten in Bezug "
"auf den Git- und PR-Workflow anzunehmen. Wir empfehlen daher, diese nicht zu "
"verwenden. Insbesondere empfehlen wir, den Online-Editor von GitHub nicht "
"für Code-Beiträge zu verwenden (obwohl er für kleine Korrekturen oder "
"Dokumentationsänderungen toleriert wird), da er ein Commit pro Datei und pro "
"Änderung erzwingt, was schnell zu PRs mit einem unlesbaren Git-Verlauf führt "
"(insbesondere nach einem Peer-Review)."

msgid ""
"The first sections of Git's \"Book\" are a good introduction to the tool's "
"philosophy and the various commands you need to master in your daily "
"workflow. You can read them online on the `Git SCM <https://git-scm.com/book/"
"en/v2>`_ website. You can also try out `GitHub's interactive guide <https://"
"try.github.io/>`__."
msgstr ""
"Die ersten Abschnitte des Git-\"Buchs\" sind eine gute Einführung in die "
"Philosophie des Tools und die verschiedenen Befehle, die Sie in Ihrem "
"täglichen Arbeitsablauf beherrschen müssen. Sie können sie online auf der "
"Website von `Git SCM <https://git-scm.com/book/en/v2>`_ lesen. Sie können "
"auch die `interaktiven Anleitung von GitHub <https://try.github.io/>`__ "
"ausprobieren."

msgid "The branches on the Git repository are organized as follows:"
msgstr "Die Branches im Git-Repository sind wie folgt organisiert:"

msgid ""
"The ``master`` branch is where the development of the next major version "
"occurs. As a development branch, it can be unstable and is not meant for use "
"in production. This is where PRs should be done in priority."
msgstr ""
"Im ``master``-Branch findet die Entwicklung der nächsten Hauptversion statt. "
"Als Entwicklungsbranch kann er instabil sein und ist nicht für den Einsatz "
"in der Produktion vorgesehen. Hier sollten PRs vorrangig durchgeführt werden."

msgid ""
"The stable branches are named after their version, e.g. ``3.1`` and ``2.1``. "
"They are used to backport bugfixes and enhancements from the ``master`` "
"branch to the currently maintained stable release (e.g. 3.1.2 or 2.1.6). As "
"a rule of thumb, the last stable branch is maintained until the next minor "
"version (e.g. the ``3.0`` branch was maintained until the release of Godot "
"3.1). If you want to make PRs against a maintained stable branch, please "
"check first if your changes are also relevant for the ``master`` branch, and "
"if so make the PR for the ``master`` branch in priority. Release managers "
"can then cherry-pick the fix to a stable branch if relevant."
msgstr ""
"Die stable Branches sind nach ihrer Version benannt, z.B. ``3.1`` und "
"``2.1``. Sie werden verwendet, um Bugfixes und Verbesserungen aus dem "
"``master``-Branch in die aktuell gepflegte stable Version (z.B. 3.1.2 oder "
"2.1.6) zurückzuportieren. Als Faustregel gilt, dass der letzte stable Branch "
"bis zur nächsten Minor-Version gepflegt wird (z.B. wurde der ``3.0``-Branch "
"bis zur Veröffentlichung von Godot 3.1 gepflegt). Wenn Sie PRs gegen einen "
"gepflegten stable Branch machen wollen, prüfen Sie bitte zuerst, ob Ihre "
"Änderungen auch für den ``master``-Branch relevant sind, und wenn ja, geben "
"Sie dem PR für den ``master``-Branch höhere Priorität. Die Release-Manager "
"können dann die Korrektur für einen stable Branch cherry-picken, wenn dies "
"relevant ist."

msgid ""
"There might occasionally be feature branches, usually meant to be merged "
"into the ``master`` branch at some time."
msgstr ""
"Es kann gelegentlich Feature-Branches geben, die normalerweise zu einem "
"bestimmten Zeitpunkt in den ``master``-Branch integriert werden sollen."

msgid "Forking and cloning"
msgstr "Forking und Cloning"

msgid ""
"The first step is to *fork* the `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository on GitHub. To do so, you will need to have a "
"GitHub account and to be logged in. In the top right corner of the "
"repository's GitHub page, you should see the \"Fork\" button as shown below:"
msgstr ""
"Der erste Schritt besteht darin, das `godotengine/godot <https://github.com/"
"godotengine/godot>`_ repository auf GitHub *zu forken*. Dazu benötigen Sie "
"ein GitHub-Konto und müssen angemeldet sein. In der oberen rechten Ecke der "
"GitHub-Seite des Repositorys sollten Sie den \"Fork\"-Button wie unten "
"gezeigt sehen:"

msgid ""
"Click it, and after a while you should be redirected to your own fork of the "
"Godot repo, with your GitHub username as namespace:"
msgstr ""
"Klicken Sie darauf und nach einer Weile sollten Sie mit Ihrem GitHub-"
"Benutzernamen als Namespace zu Ihrem eigenen Fork des Godot-Repos "
"weitergeleitet werden:"

msgid ""
"You can then *clone* your fork, i.e. create a local copy of the online "
"repository (in Git speak, the *origin remote*). If you haven't already, "
"download Git from `its website <https://git-scm.com>`_ if you're using "
"Windows or macOS, or install it through your package manager if you're using "
"Linux."
msgstr ""
"Sie können dann Ihren Fork *klonen*, d.h. eine lokale Kopie des Online-"
"Repositorys erstellen (in Git-Sprache den *Origin Remote*). Wenn Sie dies "
"noch nicht getan haben, laden Sie Git von `der Website <https://git-scm."
"com>`_ herunter, wenn Sie Windows oder MacOS verwenden oder installieren Sie "
"es über Ihren Paketmanager, wenn Sie Linux verwenden."

msgid ""
"If you are on Windows, open Git Bash to type commands. macOS and Linux users "
"can use their respective terminals."
msgstr ""
"Wenn Sie unter Windows arbeiten, öffnen Sie Git Bash um Befehle einzugeben. "
"Benutzer von MacOS und Linux können ihre jeweiligen Terminals verwenden."

msgid "To clone your fork from GitHub, use the following command:"
msgstr ""
"Verwenden Sie den folgenden Befehl, um Ihren Fork von GitHub zu klonen:"

msgid ""
"In our examples, the \"$\" character denotes the command line prompt on "
"typical UNIX shells. It is not part of the command and should not be typed."
msgstr ""
"In unseren Beispielen kennzeichnet das Zeichen \"$\" die Eingabeaufforderung "
"in typischen UNIX-Shells. Es ist nicht Teil des Befehls und sollte nicht "
"eingegeben werden."

msgid ""
"After a little while, you should have a ``godot`` directory in your current "
"working directory. Move into it using the ``cd`` command:"
msgstr ""
"Nach einer Weile sollten Sie ein ``Godot``-Verzeichnis in Ihrem aktuellen "
"Arbeitsverzeichnis haben, in das Sie mit dem Befehl ``cd`` hineinwechseln "
"können:"

msgid ""
"We will start by setting up a reference to the original repository that we "
"forked:"
msgstr ""
"Wir beginnen mit der Einrichtung eines Verweises auf das ursprüngliche "
"Repository, das wir geforkt haben:"

msgid ""
"This will create a reference named ``upstream`` pointing to the original "
"``godotengine/godot`` repository. This will be useful when you want to pull "
"new commits from its ``master`` branch to update your fork. You have another "
"remote reference named ``origin``, which points to your fork (``USERNAME/"
"godot``)."
msgstr ""
"Dadurch wird eine Referenz mit dem Namen ``Upstream`` erstellt, die auf das "
"ursprüngliche ``Godotengine/Godot``-Repository verweist. Dies ist nützlich, "
"wenn Sie neue Commits aus dem ``master``-Branch ziehen möchten, um Ihren "
"Fork zu aktualisieren. Sie haben eine weitere Remote-Referenz namens "
"``origin``, die auf Ihren Fork zeigt (``USERNAME/godot``)."

msgid ""
"You only need to do the above steps once, as long as you keep that local "
"``godot`` folder (which you can move around if you want, the relevant "
"metadata is hidden in its ``.git`` subfolder)."
msgstr ""
"Sie müssen die obigen Schritte nur einmal ausführen, solange Sie den lokalen "
"``godot``-Ordner behalten (den Sie nach Belieben verschieben können; die "
"relevanten Metadaten sind in seinem ``.git``-Unterordner versteckt)."

msgid ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"
msgstr ""
"*Branch it, pull it, code it, stage it, commit, push it, rebase it... "
"technologic.*"

msgid ""
"This bad take on Daft Punk's *Technologic* shows the general conception Git "
"beginners have of its workflow: lots of strange commands to learn by copy "
"and paste, hoping they will work as expected. And that's actually not a bad "
"way to learn, as long as you're curious and don't hesitate to question your "
"search engine when lost, so we will give you the basic commands to know when "
"working in Git."
msgstr ""
"Diese schlechte Interpretation von Daft Punks *Technologic* zeigt die "
"allgemeine Vorstellung, die Git-Anfänger von seinem Workflow haben: viele "
"seltsame Befehle, die man durch Kopieren und Einfügen lernen muss, in der "
"Hoffnung, dass sie wie erwartet funktionieren werden. Und das ist eigentlich "
"keine schlechte Art zu lernen, solange man neugierig ist und nicht zögert, "
"seine Suchmaschine zu befragen, wenn man sich verirrt hat, also geben wir "
"Ihnen die grundlegenden Befehle, die man bei der Arbeit mit Git kennen "
"sollte."

msgid ""
"In the following, we will assume as an example that you want to implement a "
"feature in Godot's Project Manager, which is coded in the ``editor/"
"project_manager.cpp`` file."
msgstr ""
"Im Folgenden nehmen wir als Beispiel an, dass Sie ein Feature in Godots "
"Projektmanager implementieren wollen, die in der Datei ``editor/"
"project_manager.cpp`` programmiert ist."

msgid "Branching"
msgstr "Branches erzeugen"

msgid ""
"By default, the ``git clone`` should have put you on the ``master`` branch "
"of your fork (``origin``). To start your own feature development, we will "
"create a feature branch:"
msgstr ""
"Standardmäßig sollte ``git clone`` Sie auf den ``master``-Branch Ihres Forks "
"(``origin``) gebracht haben. Um mit der Entwicklung Ihrer eigenen Features "
"zu beginnen, werden wir einen Feature-Branch erstellen:"

msgid "This command is equivalent:"
msgstr "Dieser Befehl macht das gleiche wie oben:"

msgid "If you want to go back to the ``master`` branch, you'd use:"
msgstr "Wenn Sie zum ``master``-Branch zurückkehren möchten, verwenden Sie:"

msgid ""
"You can see which branch you are currently on with the ``git branch`` "
"command:"
msgstr ""
"Mit dem Befehl ``git branch`` können Sie sehen, auf welchem Branch Sie sich "
"gerade befinden:"

msgid ""
"Be sure to always go back to the ``master`` branch before creating a new "
"branch, as your current branch will be used as the base for the new one. "
"Alternatively, you can specify a custom base branch after the new branch's "
"name:"
msgstr ""
"Stellen Sie sicher, dass Sie immer zum ``master``-Branch zurückkehren, bevor "
"Sie einen neuen Branch erstellen, da Ihr aktueller Branch als Basis für den "
"neuen Branch verwendet wird. Alternativ können Sie nach dem Namen des neuen "
"Branchs einen benutzerdefinierten Basis-Branch angeben:"

msgid "Updating your branch"
msgstr "Ihren Branch aktualisieren"

msgid ""
"This would not be needed the first time (just after you forked the upstream "
"repository). However, the next time you want to work on something, you will "
"notice that your fork's ``master`` is several commits behind the upstream "
"``master`` branch: pull requests from other contributors would have been "
"merged in the meantime."
msgstr ""
"Das wäre beim ersten Mal (kurz nachdem Sie das Upstream-Repository geforkt "
"haben) nicht nötig. Wenn Sie jedoch das nächste Mal an etwas arbeiten "
"wollen, werden Sie feststellen, dass der ``master``-Branch Ihres Forks "
"mehrere Commits hinter dem ``master``-Branch des Upstreams liegt: Pull "
"Requests von anderen Mitwirkenden wären in der Zwischenzeit gemergt worden."

msgid ""
"To ensure there won't be conflicts between the feature you develop and the "
"current upstream ``master`` branch, you will have to update your branch by "
"*pulling* the upstream branch."
msgstr ""
"Um sicherzustellen, dass es keine Konflikte zwischen dem von Ihnen "
"entwickelten Feature und dem aktuellen Upstream ``master``-Branch gibt, "
"müssen Sie Ihren Branch aktualisieren, indem Sie den Upstream-Branch "
"*pullen*."

msgid ""
"The ``--rebase`` argument will ensure that any local changes that you "
"committed will be re-applied *on top* of the pulled branch, which is usually "
"what we want in our PR workflow. This way, when you open a pull request, "
"your own commits will be the only difference with the upstream ``master`` "
"branch."
msgstr ""
"Das Argument ``--rebase`` stellt sicher, dass alle lokalen Änderungen, die "
"Sie vorgenommen haben, *oben auf* den gepullten Branch angewendet werden, "
"was normalerweise das ist, was wir in unserem PR-Workflow wollen. Auf diese "
"Weise werden, wenn Sie einen Pull Request öffnen, Ihre eigenen Commits der "
"einzige Unterschied zum Upstream ``master``-Branch sein."

msgid ""
"While rebasing, conflicts may arise if your commits modified code that has "
"been changed in the upstream branch in the meantime. If that happens, Git "
"will stop at the conflicting commit and will ask you to resolve the "
"conflicts. You can do so with any text editor, then stage the changes (more "
"on that later), and proceed with ``git rebase --continue``. Repeat the "
"operation if later commits have conflicts too, until the rebase operation "
"completes."
msgstr ""
"Während des Rebasings können Konflikte auftreten, wenn Ihre Commits Code "
"ändern, der in der Zwischenzeit im Upstream-Branch geändert worden ist. In "
"diesem Fall hält Git bei dem Commit, der den Konflikt verursacht, an und "
"fordert Sie auf, die Konflikte zu lösen. Sie können dies mit einem "
"beliebigen Texteditor tun, dann die Änderungen stagen (mehr dazu später) und "
"mit ``git rebase --continue`` fortfahren. Wiederholen Sie den Vorgang, wenn "
"spätere Commits ebenfalls Konflikte aufweisen, bis der Rebase-Vorgang "
"abgeschlossen ist."

msgid ""
"If you're unsure about what is going on during a rebase and you panic (no "
"worry, we all do the first few times), you can abort the rebase with ``git "
"rebase --abort``. You will then be back to the original state of your branch "
"before calling ``git pull --rebase``."
msgstr ""
"Wenn Sie sich nicht sicher sind, was während eines rebase passiert und Sie "
"in Panik geraten (keine Sorge, das tun wir alle bei den ersten paar Malen), "
"können Sie den rebase mit ``git rebase --abort`` abbrechen. Sie sind dann "
"wieder in dem ursprünglichen Zustand Ihres Branches, bevor Sie ``git pull --"
"rebase`` aufgerufen haben."

msgid ""
"If you omit the ``--rebase`` argument, you will instead create a merge "
"commit which tells Git what to make of the two distinct branches. If any "
"conflicts arise, they would be resolved all at once via this merge commit."
msgstr ""
"Wenn Sie das Argument ``--rebase`` weglassen, erzeugen Sie stattdessen einen "
"Merge-Commit, der Git mitteilt, was es aus den beiden unterschiedlichen "
"Branches machen soll. Sollten Konflikte auftreten, würden sie durch diesen "
"Merge-Commit auf einmal aufgelöst werden."

msgid ""
"While this is a valid workflow and the default behavior of ``git pull``, "
"merge commits within PRs are frowned upon in our PR workflow. We only use "
"them when merging PRs into the upstream branch."
msgstr ""
"Während dies ein gültiger Workflow und das Standardverhalten von ``git "
"pull`` ist, sind Merge-Commits innerhalb von PRs in unserem PR-Workflow "
"verpönt. Wir verwenden sie nur beim Mergen von PRs in den Upstream-Branch."

msgid ""
"The philosophy is that a PR should represent the final stage of the changes "
"made to the codebase, and we are not interested in mistakes and fixes that "
"would have been done in intermediate stages before merging. Git gives us "
"great tools to \"rewrite the history\" and make it as if we got things right "
"the first time, and we're happy to use it to ensure that changes are easy to "
"review and understand long after they have been merged."
msgstr ""
"Die Philosophie ist, dass ein PR die letzte Stufe der Änderungen an der "
"Codebasis darstellen sollte, und wir sind nicht an Fehlern und Korrekturen "
"interessiert, die in Zwischenstufen vor dem Mergen gemacht worden wären. Git "
"gibt uns großartige Werkzeuge, um \"die Geschichte umzuschreiben\" und es so "
"aussehen zu lassen, als ob wir die Dinge beim ersten Mal richtig gemacht "
"hätten, und wir nutzen sie gerne, um sicherzustellen, dass Änderungen noch "
"lange nach dem Mergen einfach zu überprüfen und zu verstehen sind."

msgid ""
"If you have already created a merge commit without using ``rebase``, or have "
"made any other changes that have resulted in undesired history, the best "
"option is to use an *interactive rebase* on the upstream branch. See the :"
"ref:`dedicated section <doc_pr_workflow_rebase>` for instructions."
msgstr ""
"Wenn Sie bereits einen Merge-Commit erstellt haben, ohne ``rebase`` zu "
"verwenden, oder andere Änderungen vorgenommen haben, die zu einem "
"unerwünschten Verlauf geführt haben, ist die beste Option, ein *interaktives "
"Rebase* auf dem Upstream-Branch zu anzuwenden. Siehe den :ref:"
"`entsprechenden Abschnitt <doc_pr_workflow_rebase>` für Hinweise."

msgid ""
"If at any time you want to *reset* a local branch to a given commit or "
"branch, you can do so with ``git reset --hard <commit ID>`` or ``git reset --"
"hard <remote>/<branch>`` (e.g. ``git reset --hard upstream/master``)."
msgstr ""
"Wenn Sie zu irgendeinem Zeitpunkt einen lokalen Branch auf einen bestimmten "
"Commit oder Branch *zurücksetzen* wollen, können Sie dies mit ``git reset --"
"hard <commit ID>`` oder ``git reset --hard <remote>/<branch>`` (z.B. ``git "
"reset --hard upstream/master``) tun."

msgid ""
"Be warned that this will remove any changes that you might have committed in "
"this branch. If you ever lose commits by mistake, use the ``git reflog`` "
"command to find the commit ID of the previous state that you would like to "
"restore, and use it as argument of ``git reset --hard`` to go back to that "
"state."
msgstr ""
"Seien Sie gewarnt, dass dadurch alle Änderungen entfernt werden, die Sie in "
"diesem Branch möglicherweise vorgenommen haben. Sollten Sie jemals "
"versehentlich Commits verlieren, verwenden Sie den Befehl ``git reflog``, um "
"die Commit-ID des vorherigen Zustands zu finden, den Sie wiederherstellen "
"möchten, und verwenden Sie diese als Argument von ``git reset --hard``, um "
"zu diesem Zustand zurückzukehren."

msgid "Making changes"
msgstr "Änderungen vornehmen"

msgid ""
"You would then do your changes to our example's ``editor/project_manager."
"cpp`` file with your usual development environment (text editor, IDE, etc.)."
msgstr ""
"Sie würden dann Ihre Änderungen an unserer Beispieldatei ``editor/"
"project_manager.cpp`` mit Ihrer üblichen Entwicklungsumgebung (Texteditor, "
"IDE usw.) vornehmen."

msgid ""
"By default, those changes are *unstaged*. The staging area is a layer "
"between your working directory (where you make your modifications) and the "
"local Git repository (the commits and all the metadata in the ``.git`` "
"folder). To bring changes from the working directory to the Git repository, "
"you need to *stage* them with the ``git add`` command, and then to commit "
"them with the ``git commit`` command."
msgstr ""
"Standardmäßig sind diese Änderungen *unstaged*. Der Staging-Bereich ist eine "
"Schicht zwischen Ihrem Arbeitsverzeichnis (wo Sie Ihre Änderungen vornehmen) "
"und dem lokalen Git-Repository (die Commits und alle Metadaten im Ordner ``."
"git``). Um Änderungen aus dem Arbeitsverzeichnis in das Git-Repository zu "
"bringen, müssen Sie sie mit dem Befehl ``git add`` *stagen* und anschließend "
"mit dem Befehl ``git commit`` committen."

msgid ""
"There are various commands you should know to review your current work, "
"before staging it, while it is staged, and after it has been committed."
msgstr ""
"Es gibt verschiedene Befehle, die Sie kennen sollten, um Ihre aktuelle "
"Arbeit zu überprüfen, bevor sie gestaged wird, während sie gestaged wird und "
"nachdem sie commited wurde."

msgid ""
"``git diff`` will show you the current unstaged changes, i.e. the "
"differences between your working directory and the staging area."
msgstr ""
"``git diff`` zeigt Ihnen die aktuellen nicht gestageten Änderungen an, d.h. "
"die Unterschiede zwischen Ihrem Arbeitsverzeichnis und dem Staging-Bereich."

msgid ""
"``git checkout -- <files>`` will undo the unstaged changes to the given "
"files."
msgstr ""
"``git checkout -- <files>`` macht die nicht gestageten Änderungen an den "
"angegebenen Dateien rückgängig."

msgid "``git add <files>`` will *stage* the changes on the listed files."
msgstr ""
"``git add <files>`` *staget* die Änderungen an den aufgelisteten Dateien."

msgid ""
"``git diff --staged`` will show the current staged changes, i.e. the "
"differences between the staging area and the last commit."
msgstr ""
"``git diff --staged`` zeigt die aktuell gestageten Änderungen an, d.h. die "
"Unterschiede zwischen dem Staging-Bereich und dem letzten Commit."

msgid "``git reset HEAD <files>`` will *unstage* changes to the listed files."
msgstr ""
"``git reset HEAD <files>`` *nimmt das Stagen* von Änderungen an den "
"aufgelisteten Dateien *zurück*."

msgid ""
"``git status`` will show you what are the currently staged and unstaged "
"modifications."
msgstr ""
"``git status`` zeigt Ihnen die aktuell gestageten und nicht gestageten "
"Änderungen an."

msgid ""
"``git commit`` will commit the staged files. It will open a text editor (you "
"can define the one you want to use with the ``GIT_EDITOR`` environment "
"variable or the ``core.editor`` setting in your Git configuration) to let "
"you write a commit log. You can use ``git commit -m \"Cool commit log\"`` to "
"write the log directly."
msgstr ""
"``git commit`` *committet* die gestageten Dateien. Öffnet einen Texteditor "
"(Sie können den gewünschten Editor mit der Umgebungsvariablen ``GIT_EDITOR`` "
"oder der Einstellung ``core.editor`` in Ihrer Git-Konfiguration definieren), "
"damit Sie ein Commit-Log schreiben können. Sie können ``git commit -m "
"\"Cooles Commit-Log\"`` verwenden, um das Log direkt zu schreiben."

msgid ""
"``git commit --amend`` lets you amend the last commit with your currently "
"staged changes (added with ``git add``). This is the best option if you want "
"to fix a mistake in the last commit (bug, typo, style issue, etc.)."
msgstr ""
"Mit ``git commit --amend`` können Sie den letzten Commit mit Ihren aktuellen "
"Änderungen (hinzugefügt mit ``git add``) ergänzen. Dies ist die beste "
"Option, wenn Sie einen Fehler im letzten Commit beheben wollen (Bugs, "
"Tippfehler, Stilprobleme, etc.)."

msgid ""
"``git log`` will show you the last commits of your current branch. If you "
"did local commits, they should be shown at the top."
msgstr ""
"``git log`` zeigt Ihnen die letzten Commits Ihres aktuellen Branchs an. Wenn "
"Sie lokale Commits vorgenommen haben, müssten diese ganz oben angezeigt "
"werden."

msgid ""
"``git show`` will show you the changes of the last commit. You can also "
"specify a commit hash to see the changes for that commit."
msgstr ""
"``git show`` zeigt Ihnen die Änderungen des letzten Commits an. Sie können "
"auch einen Commit-Hash angeben, um die Änderungen für diesen Commit zu sehen."

msgid ""
"That's a lot to memorize! Don't worry, just check this cheat sheet when you "
"need to make changes, and learn by doing."
msgstr ""
"Das ist eine Menge zum Auswendiglernen! Keine Sorge, schauen Sie einfach auf "
"diesem Spickzettel nach, wenn Sie Änderungen vornehmen müssen, und prägen "
"Sie es sich durch wiederholtes Anwenden ein."

msgid "Here's how the shell history could look like on our example:"
msgstr "So könnte die Shell-Historie in unserem Beispiel aussehen:"

msgid ""
"With this, we should have two new commits in our ``better-project-manager`` "
"branch which were not in the ``master`` branch. They are still only local "
"though, the remote fork does not know about them, nor does the upstream repo."
msgstr ""
"Damit sollten wir zwei neue Commits in unserem ``better-project-manager``-"
"Branch haben, die nicht im ``master``-Branch waren. Sie sind aber immer noch "
"nur lokal - der entfernte Fork kennt sie nicht, ebenso wenig wie das "
"Upstream-Repository."

msgid "Pushing changes to a remote"
msgstr "Änderungen auf einen Remote-Rechner pushen"

msgid ""
"That's where ``git push`` will come into play. In Git, a commit is always "
"done in the local repository (unlike Subversion where a commit will modify "
"the remote repository directly). You need to *push* the new commits to a "
"remote branch to share them with the world. The syntax for this is:"
msgstr ""
"An dieser Stelle kommt ``git push`` ins Spiel. In Git wird ein Commit immer "
"im lokalen Repository durchgeführt (im Gegensatz zu Subversion, wo ein "
"Commit direkt das Remote-Repository verändert). Sie müssen die neuen Commits "
"in einen Remote-Branch *pushen*, um sie mit der Welt zu teilen. Die Syntax "
"dafür ist:"

msgid ""
"The part about the remote branch can be omitted if you want it to have the "
"same name as the local branch, which is our case in this example, so we will "
"do:"
msgstr ""
"Der Teil mit dem Remote-Branch kann weggelassen werden, wenn Sie möchten, "
"dass er denselben Namen wie der lokale Branch hat. Dies ist in diesem "
"Beispiel der Fall. Wir werden also Folgendes tun:"

msgid ""
"Git will ask you for your username and password. For your password, enter "
"your GitHub Personal Access Token (PAT). If you do not have a GitHub "
"Personal Access Token, or do not have one with the correct permissions for "
"your newly forked repository, you will need to create one. Follow this link "
"to create your Personal Access Token: `Creating a personal access token "
"<https://docs.github.com/en/authentication/keeping-your-account-and-data-"
"secure/creating-a-personal-access-token>`_."
msgstr ""
"Git fragt Sie nach Ihrem Benutzernamen und Passwort. Geben Sie für Ihr "
"Passwort Ihr GitHub Personal Access Token (PAT) ein. Wenn Sie kein GitHub "
"Personal Access Token haben oder keins mit den richtigen Berechtigungen für "
"Ihr neu geforktes Repository, müssen Sie eines erstellen. Folgen Sie diesem "
"Link, um Ihr persönliches Zugriffstoken zu erstellen: `Verwalten deiner "
"persönlichen Zugriffstoken <https://docs.github.com/de/authentication/"
"keeping-your-account-and-data-secure/creating-a-personal-access-token>`_."

msgid ""
"After you have successfully verified your account using your PAT, the "
"changes will be sent to your remote repository. If you check the fork's page "
"on GitHub, you should see a new branch with your added commits."
msgstr ""
"Git wird Sie nach Ihrem Benutzernamen und Kennwort fragen, und die "
"Änderungen werden an Ihr Remote-Repository gesendet. Wenn Sie die Seite des "
"Forks auf GitHub überprüfen, sollten Sie einen neuen Branch mit Ihren "
"hinzugefügten Commits sehen."

msgid "Issuing a pull request"
msgstr "Einen Pull Request aufsetzen"

msgid ""
"When you load your fork's branch on GitHub, you should see a line saying "
"*\"This branch is 2 commits ahead of godotengine:master.\"* (and potentially "
"some commits behind, if your ``master`` branch was out of sync with the "
"upstream ``master`` branch)."
msgstr ""
"Wenn Sie den Branch Ihres Forks auf GitHub laden, sollten Sie eine Zeile "
"sehen, die sagt *\"This branch is 2 commits ahead of godotengine:master.\"* "
"(und möglicherweise einige Commits dahinter, wenn Ihr ``master``-Branch "
"nicht mit dem Upstream-Branch ``master`` synchronisiert war)."

msgid ""
"On that line, there is a \"Pull request\" link. Clicking it will open a form "
"that will let you issue a pull request on the ``godotengine/godot`` upstream "
"repository. It should show you your two commits, and state \"Able to "
"merge\". If not (e.g. it has way more commits, or says there are merge "
"conflicts), don't create the PR yet, something went wrong. Go to our `Godot "
"Contributors Chat <https://chat.godotengine.org/>`_ and ask for support :)"
msgstr ""
"In dieser Zeile befindet sich ein \"Pull request\"-Link. Wenn Sie darauf "
"klicken, öffnet sich ein Formular, mit dem Sie einen Pull Request für das "
"``godotengine/godot`` Upstream-Repository erstellen können. Es sollte Ihnen "
"Ihre beiden Commits zeigen und \"Able to merge\" anzeigen. Wenn das nicht "
"der Fall ist (z.B. weil es viel mehr Commits hat oder weil es Merge-"
"Konflikte gibt), erstellen Sie den PR noch nicht, irgendetwas ist schief "
"gelaufen. Gehen Sie zu unserem `Godot-Mitwirkenden-Chat <https://chat."
"godotengine.org/>`_ und bitten Sie um Unterstützung :)"

msgid ""
"Use an explicit title for the PR and put the necessary details in the "
"comment area. You can drag and drop screenshots, GIFs or zipped projects if "
"relevant, to showcase what your work implements. Click \"Create a pull "
"request\", and tadaa!"
msgstr ""
"Verwenden Sie einen eindeutigen Titel für den PR und geben Sie die "
"notwendigen Details im Kommentarbereich an. Sie können Screenshots, GIFs "
"oder gezippte Projekte per Drag & Drop einfügen, um zu zeigen, was Ihr "
"Beitrag beinhaltet. Klicken Sie auf \"Create a pull request\" und tadaa!"

msgid "Modifying a pull request"
msgstr "Einen Pull Request verändern"

msgid ""
"While it is reviewed by other contributors, you will often need to make "
"changes to your yet-unmerged PR, either because contributors requested them, "
"or because you found issues yourself while testing."
msgstr ""
"Während er von anderen Mitwirkenden gereviewt wird, müssen Sie häufig "
"Änderungen an Ihrem noch nicht gemergten PR vornehmen, entweder weil die "
"Mitwirkenden darum gebeten haben oder weil Sie beim Testen selbst Probleme "
"festgestellt haben."

msgid ""
"The good news is that you can modify a pull request simply by acting on the "
"branch you made the pull request from. You can e.g. make a new commit on "
"that branch, push it to your fork, and the PR will be updated automatically:"
msgstr ""
"Die gute Nachricht ist, dass Sie einen Pull Request ändern können, indem Sie "
"einfach auf dem Branch arbeiten, von dem aus Sie den Pull Request gestellt "
"haben. Sie können z.B. einen neuen Commit für diesen Branch erstellen, ihn "
"auf Ihren Fork pushen, und der PR wird automatisch aktualisiert:"

msgid ""
"However, be aware that in our PR workflow, we favor commits that bring the "
"codebase from one functional state to another functional state, without "
"having intermediate commits fixing up bugs in your own code or style issues. "
"Most of the time, we will prefer a single commit in a given PR (unless "
"there's a good reason to keep the changes separate). Instead of authoring a "
"new commit, consider using ``git commit --amend`` to amend the previous "
"commit with your fixes. The above example would then become:"
msgstr ""
"Seien Sie sich jedoch bewusst, dass wir in unserem PR-Workflow Commits "
"bevorzugen, die unsere Codebasis von einem funktionalen Zustand in einen "
"anderen funktionalen Zustand bringen, ohne dass es Zwischen-Commits gibt, "
"die Bugs in Ihrem eigenen Code oder Stilprobleme beheben. In den meisten "
"Fällen bevorzugen wir einen einzigen Commit in einem bestimmten PR (es sei "
"denn, es gibt einen guten Grund, die Änderungen getrennt zu halten). Anstatt "
"einen neuen Commit zu erstellen, sollten Sie ``git commit --amend`` "
"verwenden, um den vorherigen Commit mit Ihren Korrekturen zu ergänzen. Das "
"obige Beispiel würde dann so aussehen:"

msgid "The interactive rebase"
msgstr "Das interaktive Rebase"

#, fuzzy
msgid ""
"If you didn't follow the above steps closely to *amend* changes into a "
"commit instead of creating fixup commits, or if you authored your changes "
"without being aware of our workflow and Git usage tips, reviewers might "
"request you to *rebase* your branch to *squash* some or all of the commits "
"into one."
msgstr ""
"Wenn Sie die obigen Schritte nicht genau befolgt haben, um Änderungen in "
"einen Commit per *amend* anzuhängen, anstatt Fixup-Commits zu erstellen, "
"oder wenn Sie Ihre Änderungen verfasst haben, ohne unsere Tipps zum Workflow "
"und zur Verwendung von Git zu kennen, könnten Reviewer von Ihnen verlangen, "
"Ihren Branch zu *rebasen*, um einige oder alle Commits in einen Commit zu "
"*squashen*."

msgid ""
"Indeed, if some commits have been made following reviews to fix bugs, typos, "
"etc. in the original commit, they are not relevant to a future changelog "
"reader who would want to know what happened in the Godot codebase, or when "
"and how a given file was last modified."
msgstr ""
"Wenn nämlich einige Commits nach Reviews vorgenommen wurden, um Bugs, "
"Tippfehler usw. im ursprünglichen Commit zu beheben, sind sie für einen "
"zukünftigen Leser des Change-Log, der wissen möchte, was in der Godot-"
"Codebasis geschehen ist, oder wann und wie eine bestimmte Datei zuletzt "
"geändert wurde, nicht relevant."

msgid ""
"To squash those extraneous commits into the main one, we will have to "
"*rewrite history*. Right, we have that power. You may read that it's a bad "
"practice, and it's true when it comes to branches of the upstream repo. But "
"in your fork, you can do whatever you want, and everything is allowed to get "
"neat PRs :)"
msgstr ""
"Um diese fremden Commits in die Haupt-Commits zu vereinen, müssen wir *die "
"Geschichte umschreiben*. Richtig, wir haben diese Macht. Sie haben "
"vielleicht schonmal gelesen, dass es eine schlechte Praxis sei, und das "
"stimmt auch, wenn es um Branches des Upstream-Repos geht. Aber in Ihrem Fork "
"können Sie machen was Sie wollen, und alles ist erlaubt, um ordentliche PRs "
"zu bekommen :)"

msgid ""
"We will use the *interactive rebase* ``git rebase -i`` to do this. This "
"command takes a commit ID or a branch name as argument, and will let you "
"modify all commits between that commit/branch and the last one in your "
"working branch, the so-called ``HEAD``."
msgstr ""
"Wir werden dazu das *interaktive Rebase* ``git rebase -i`` verwenden. Dieser "
"Befehl nimmt eine Commit-ID oder einen Branch-Namen als Argument und lässt "
"Sie alle Commits zwischen diesem Commit/Branch und dem letzten in Ihrem "
"Arbeits-Branch, dem sogenannten ``HEAD``, ändern."

msgid ""
"While you can give any commit ID to ``git rebase -i`` and review everything "
"in between, the most common and convenient workflow involves rebasing on the "
"upstream ``master`` branch, which you can do with:"
msgstr ""
"Sie können zwar eine beliebige Commit-ID an ``git rebase -i`` übergeben und "
"alles, was dazwischen liegt, reviewen, aber der gängigste und bequemste "
"Workflow beinhaltet das Rebasen auf den Upstream-Branch ``master``, was Sie "
"wie folgt machen können:"

msgid ""
"Referencing branches in Git is a bit tricky due to the distinction between "
"remote and local branches. Here, ``upstream/master`` (with a `/`) is a local "
"branch which has been pulled from the ``upstream`` remote's ``master`` "
"branch."
msgstr ""
"Das Referenzieren von Branches in Git ist ein wenig knifflig, wegen der "
"Unterscheidung zwischen Remote- und lokalen Branches. Hier ist ``upstream/"
"master`` (mit einem `/`) ein lokaler Branch, der aus dem ``master``-Branch "
"des Remote-``upstream`` gezogen wurde."

msgid ""
"Interactive rebases can only be done on local branches, so the `/` is "
"important here. As the upstream remote changes frequently, your local "
"``upstream/master`` branch may become outdated, so you can update it with "
"``git fetch upstream master``. Contrarily to ``git pull --rebase upstream "
"master`` which would update your currently checked out branch, ``fetch`` "
"will only update the ``upstream/master`` reference (which is distinct from "
"your local ``master`` branch... yes it's confusing, but you'll become "
"familiar with this little by little)."
msgstr ""
"Interaktive Rebases können nur auf lokalen Branches durchgeführt werden, "
"daher ist das `/` hier wichtig. Da sich der Upstream-Branch häufig ändert, "
"kann Ihr lokaler ``upstream/master``-Branch veraltet sein, so dass Sie ihn "
"mit ``git fetch upstream master`` aktualisieren können. Im Gegensatz zu "
"``git pull --rebase upstream master``, das Ihren aktuell ausgecheckten "
"Branch aktualisieren würde, wird ``fetch`` nur die ``upstream/master``-"
"Referenz aktualisieren (die sich von Ihrem lokalen ``master``-Branch "
"unterscheidet... ja, es ist verwirrend, aber Sie werden sich nach und nach "
"daran gewöhnen)."

msgid ""
"This will open a text editor (``vi`` by default, see `Git docs <https://git-"
"scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ to "
"configure your favorite one) with something which may look like this:"
msgstr ""
"Dies öffnet einen Texteditor (standardmäßig ``vi``, siehe `Git docs <https://"
"git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_core_editor>`_ um "
"Ihren Lieblingseditor zu konfigurieren) mit etwas, das so aussehen könnte:"

msgid ""
"The editor will also show instructions regarding how you can act on those "
"commits. In particular, it should tell you that \"pick\" means to use that "
"commit (do nothing), and that \"squash\" and \"fixup\" can be used to *meld* "
"the commit in its parent commit. The difference between \"squash\" and "
"\"fixup\" is that \"fixup\" will discard the commit log from the squashed "
"commit. In our example, we are not interested in keeping the log of the "
"\"Fix a typo\" commit, so we use:"
msgstr ""
"Der Editor zeigt auch Anweisungen an, wie Sie auf diese Commits reagieren "
"können. Insbesondere sollte er Ihnen sagen, dass \"pick\" bedeutet, diesen "
"Commit zu verwenden (nichts tun), und dass \"squash\" und \"fixup\" "
"verwendet werden können, um den Commit in seinen Parent-Commit *zu "
"verschmelzen*. Der Unterschied zwischen \"squash\" und \"fixup\" ist, dass "
"\"fixup\" das Commit-Log des gesquashten Commits verwirft. In unserem "
"Beispiel sind wir nicht daran interessiert, das Log des \"Fix a typo\"-"
"Commits zu behalten, also verwenden wir:"

msgid ""
"Upon saving and quitting the editor, the rebase will occur. The second "
"commit will be melded into the first one, and ``git log`` and ``git show`` "
"should now confirm that you have only one commit with the changes from both "
"previous commits."
msgstr ""
"Nach dem Speichern und Beenden des Editors wird der Rebase durchgeführt. Der "
"zweite Commit wird mit dem ersten verschmolzen, und ``git log`` und ``git "
"show`` sollten nun bestätigen, dass Sie nur einen Commit mit den Änderungen "
"der beiden vorherigen Commits haben."

msgid ""
"But! You rewrote the history, and now your local and remote branches have "
"diverged. Indeed, commit 1b4aad7 in the above example will have changed, and "
"therefore got a new commit hash. If you try to push to your remote branch, "
"it will raise an error:"
msgstr ""
"Aber! Sie haben die Historie umgeschrieben, und nun sind Ihr lokaler und der "
"Remote-Branch auseinandergeklafft. In der Tat hat sich Commit 1b4aad7 im "
"obigen Beispiel geändert und daher einen neuen Commit-Hash erhalten. Wenn "
"Sie versuchen, zu Ihrem Remote-Branch zu pushen, wird dies einen Fehler "
"auslösen:"

#, fuzzy
msgid ""
"This is reasonable behavior, Git will not let you push changes that would "
"override remote content. But that's actually what we want to do here, so we "
"will have to *force* it:"
msgstr ""
"Das ist ein gewünschtes Verhalten - Git wird Sie keine Änderungen pushen "
"lassen, die Remote-Inhalte überschreiben würden. Aber das ist eigentlich "
"das, was wir hier tun wollen, also müssen wir es mit *force* erzwingen:"

msgid ""
"And tadaa! Git will happily *replace* your remote branch with what you had "
"locally (so make sure that's what you wanted, using ``git log``). This will "
"also update the PR accordingly."
msgstr ""
"Und tadaa! Git wird fröhlich den Remote-Branch mit dem *ersetzen*, was Sie "
"lokal hatten (stellen Sie also sicher, dass es das ist, was Sie wollten, "
"indem Sie ``git log`` benutzen). Dies wird auch die PRs entsprechend "
"aktualisieren."

msgid "Rebasing onto another branch"
msgstr ""

msgid ""
"If you have accidentally opened your PR on the wrong branch, or need to "
"target another branch for some reason, you might need to filter out a lot of "
"commits that differ between the old branch (for example ``4.2``) and the new "
"branch (for example ``master``). This can make rebasing difficult and "
"tedious. Fortunately ``git`` has a command just for this situation, ``git "
"rebase --onto``."
msgstr ""

msgid ""
"If your PR was created from the ``4.2`` branch and you want to update it to "
"instead start at ``master`` the following steps *should* fix this in one "
"step:"
msgstr ""

msgid ""
"This will take all the commits on your branch *after* the ``4.2`` branch, "
"and then splice them on top of ``master``, ignoring any commits from the "
"``4.2`` branch not on the ``master`` branch. You may still need to do some "
"fixing, but this command should save you a lot of tedious work removing "
"commits."
msgstr ""

msgid ""
"Just like above for the interactive rebase you need to force push your "
"branch to handle the different changes:"
msgstr ""

msgid "Deleting a Git branch"
msgstr "Löschen eines Git-Branchs"

msgid ""
"After your pull request gets merged, there's one last thing you should do: "
"delete your Git branch for the PR. There won't be issues if you don't delete "
"your branch, but it's good practice to do so. You'll need to do this twice, "
"once for the local branch and another for the remote branch on GitHub."
msgstr ""
"Nachdem Ihr Pull Request gemergt wurde, sollten Sie noch etwas tun: Löschen "
"Sie Ihren Git-Branch für den PR. Es ist kein Problem, wenn Sie Ihren Branch "
"nicht löschen, aber es wird empfohlen, dies zu tun. Sie müssen dies zweimal "
"tun, einmal für den lokalen Branch und einmal für den Remote-Branch auf "
"GitHub."

msgid "To delete our better Project Manager branch locally, use this command:"
msgstr ""
"Um unseren better-project-manager-Branch lokal zu löschen, verwenden Sie "
"diesen Befehl:"

msgid ""
"Alternatively, if the branch hadn't been merged yet and we wanted to delete "
"it anyway, instead of ``-d`` you would use ``-D``."
msgstr ""
"Wenn der Branch noch nicht gemergt wurde und wir ihn trotzdem löschen "
"wollen, würden Sie ``-D`` statt ``-d`` verwenden."

msgid "Next, to delete the remote branch on GitHub use this command:"
msgstr ""
"Verwenden Sie als nächstes den folgenden Befehl, um den Remote-Branch auf "
"GitHub zu löschen:"

msgid ""
"You can also delete the remote branch from the GitHub PR itself, a button "
"should appear once it has been merged or closed."
msgstr ""
"Sie können den Remote-Branch auch aus dem GitHub PR selbst löschen. Nach dem "
"Mergen oder Schließen sollte dort ein Button angezeigt werden."

msgid "Translation status"
msgstr "Übersetzungsstatus"
