# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making main screen plugins"
msgstr "制作主螢幕外掛程式"

msgid "What this tutorial covers"
msgstr "本教學涵蓋的內容"

msgid ""
"Main screen plugins allow you to create new UIs in the central part of the "
"editor, which appear next to the \"2D\", \"3D\", \"Script\", and "
"\"AssetLib\" buttons. Such editor plugins are referred as \"Main screen "
"plugins\"."
msgstr ""
"正如在 :ref:`doc_making_plugins` 頁面中所看到的, 製作一個擴充編輯器的基本外掛"
"程式是相當容易的. 主螢幕外掛程式允許你在編輯器的中心部分建立新的使用者介面, "
"它們出現在 \"2D\" , \"3D\" , \"腳本\" 和 \"AssetLib\" 按鈕旁邊. 這種編輯器外"
"掛程式被稱為 \"主場景外掛程式\"."

msgid ""
"This tutorial leads you through the creation of a basic main screen plugin. "
"For the sake of simplicity, our main screen plugin will contain a single "
"button that prints text to the console."
msgstr ""
"本教學將帶領你建立一個基本的主場景外掛程式. 為了簡單起見, 主場景外掛程式將包"
"含一個列印文字到控制台的單個按鈕."

msgid "Initializing the plugin"
msgstr "初始化外掛程式"

msgid ""
"First create a new plugin from the Plugins menu. For this tutorial, we'll "
"put it in a folder called ``main_screen``, but you can use any name you'd "
"like."
msgstr ""
"首先從Plugins功能表中建立一個新外掛程式. 在本教學中, 我們將把它放在一個名為 "
"``main_screen`` 的資料夾中, 但你可以使用任何你喜歡的名字."

msgid ""
"The plugin script will come with ``_enter_tree()`` and ``_exit_tree()`` "
"methods, but for a main screen plugin we need to add a few extra methods. "
"Add five extra methods such that the script looks like this:"
msgstr ""
"外掛程式腳本會自帶 ``_enter_tree()`` 和 ``_exit_tree()`` 方法, 但對於主場景外"
"掛程式來說, 我們需要新增一些額外的方法. 增加五個額外的方法, 腳本就像這樣:"

msgid ""
"The important part in this script is the ``_has_main_screen()`` function, "
"which is overloaded so it returns ``true``. This function is automatically "
"called by the editor on plugin activation, to tell it that this plugin adds "
"a new center view to the editor. For now, we'll leave this script as-is and "
"we'll come back to it later."
msgstr ""
"這個腳本中重要的部分是 ``has_main_screen()`` 函式, 這個函式是重載的, 所以它返"
"回 ``true`` . 這個函式會在外掛程式啟動時被編輯器自動呼叫, 告訴它這個外掛程式"
"給編輯器增加了一個新的中心視圖. 現在, 我們暫且把這個腳本保持原樣, 以後再來討"
"論它."

msgid "Main screen scene"
msgstr "主畫面場景"

msgid ""
"Create a new scene with a root node derived from ``Control`` (for this "
"example plugin, we'll make the root node a ``CenterContainer``). Select this "
"root node, and in the viewport, click the ``Layout`` menu and select ``Full "
"Rect``. You also need to enable the ``Expand`` vertical size flag in the "
"inspector. The panel now uses all the space available in the main viewport."
msgstr ""
"建立一個新的場景，其根節點由 ``Control`` 衍生而來（在這個範例外掛程式中，我們"
"將使根節點為 ``CenterContainer``）。選擇這個根節點，在視口中，點擊 ``佈局`` "
"功能表，選擇 ``整個矩形``。你還需要在屬性面板中啟用 ``Expand`` 垂直尺寸旗標。"
"面板現在使用主視口中的所有可用空間。"

msgid ""
"Next, let's add a button to our example main screen plugin. Add a ``Button`` "
"node, and set the text to \"Print Hello\" or similar. Add a script to the "
"button like this:"
msgstr ""
"接下來, 讓我們為我們的主螢幕外掛程式範例新增一個按鈕. 新增一個 ``Button`` 節"
"點, 並將文字設定為 \"Print Hello \"或類似的內容. 給按鈕新增一個腳本, 像這樣:"

msgid ""
"Then connect the \"pressed\" signal to itself. If you need help with "
"signals, see the :ref:`doc_signals` article."
msgstr ""
"然後將 \"按下\" 訊號連接到自身. 如果你需要訊號方面的説明, 請參考 :ref:"
"`doc_signals` 一文."

msgid ""
"We are done with the main screen panel. Save the scene as ``main_panel."
"tscn``."
msgstr "我們完成了主螢幕面板. 將場景保存為 ``main_panel.tscn``."

msgid "Update the plugin script"
msgstr "更新外掛程式腳本"

msgid ""
"We need to update the ``main_screen_plugin.gd`` script so the plugin "
"instances our main panel scene and places it where it needs to be. Here is "
"the full plugin script:"
msgstr ""
"我們需要更新 ``main_screen_plugin.gd`` 腳本，讓外掛程式產生實體我們的主面板場"
"景，並將其放置在需要的位置。這是完整的外掛程式腳本："

msgid ""
"A couple of specific lines were added. ``MainPanel`` is a constant that "
"holds a reference to the scene, and we instance it into "
"`main_panel_instance`."
msgstr ""
"增加了幾行具體的內容. ``MainPanel`` 是一個常數, 持有對場景的引用, 我們將其產"
"生實體為 `main_panel_instance`."

#, fuzzy
msgid ""
"The ``_enter_tree()`` function is called before ``_ready()``. This is where "
"we instance the main panel scene, and add them as children of specific parts "
"of the editor. We use ``EditorInterface.get_editor_main_screen()`` to obtain "
"the main editor screen and add our main panel instance as a child to it. We "
"call the ``_make_visible(false)`` function to hide the main panel so it "
"doesn't compete for space when first activating the plugin."
msgstr ""
"``_enter_tree()`` 函式在 ``_ready()`` 之前被呼叫. 這是產生實體主面板場景的地"
"方, 並將其新增為編輯器特定部分的子節點. 使用 ``get_editor_interface()."
"get_editor_viewport()`` 來獲取視口, 並將主面板實例作為子節點加入其中. 呼叫 "
"``make_visible(false)`` 函式來隱藏主面板, 這樣在第一次啟動外掛程式時就不會佔"
"用空間."

msgid ""
"The ``_exit_tree()`` function is called when the plugin is deactivated. If "
"the main screen still exists, we call ``queue_free()`` to free the instance "
"and remove it from memory."
msgstr ""
"當外掛程式停用時, 呼叫 ``_exit_tree()`` 函式. 如果主螢幕仍然存在, 我們呼叫 "
"``queue_free()`` 來釋放實例, 並將其從記憶體中移除."

msgid ""
"The ``_make_visible()`` function is overridden to hide or show the main "
"panel as needed. This function is automatically called by the editor when "
"the user clicks on the main viewport buttons at the top of the editor."
msgstr ""
"``make_visible()`` 函式被重寫, 以根據需要隱藏或顯示主面板. 當使用者點擊編輯器"
"頂部的主視口按鈕時, 編輯器會自動呼叫該函式."

msgid ""
"The ``_get_plugin_name()`` and ``_get_plugin_icon()`` functions control the "
"displayed name and icon for the plugin's main viewport button."
msgstr ""
"``get_plugin_name()`` 和 ``get_plugin_icon()`` 函式控制外掛程式主視口按鈕的顯"
"示名稱和圖示."

msgid ""
"Another function you can add is the ``handles()`` function, which allows you "
"to handle a node type, automatically focusing the main screen when the type "
"is selected. This is similar to how clicking on a 3D node will automatically "
"switch to the 3D viewport."
msgstr ""
"另一個你可以新增的函式是 ``handles()`` 函式, 它允許你處理一個節點型別, 當選擇"
"該型別時自動聚焦主螢幕. 這類似於點擊一個3D節點會自動切換到3D視口."

msgid "Try the plugin"
msgstr "試試這個外掛程式"

msgid ""
"Activate the plugin in the Project Settings. You'll observe a new button "
"next to 2D, 3D, Script above the main viewport. Clicking it will take you to "
"your new main screen plugin, and the button in the middle will print text."
msgstr ""
"在專案設定中啟動外掛程式. 你會觀察到主視口上方的2D, 3D, 腳本旁邊有一個新的按"
"鈕. 點擊它將帶你進入新的主螢幕外掛程式, 中間的按鈕將列印文字."

msgid ""
"If you would like to try a finished version of this plugin, check out the "
"plugin demos here: https://github.com/godotengine/godot-demo-projects/tree/"
"master/plugins"
msgstr ""
"如果你想試試這個外掛程式的完成版, 請在這裡查看外掛程式演示:https://github."
"com/godotengine/godot-demo-projects/tree/master/plugins"

msgid ""
"If you would like to see a more complete example of what main screen plugins "
"are capable of, check out the 2.5D demo projects here: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/2.5d"
msgstr ""
"如果你想看一個更完整的例子, 瞭解主螢幕外掛程式的能力, 請看這裡的2.5D演示專案:"
"https://github.com/godotengine/godot-demo-projects/tree/master/misc/2.5d"

msgid "Translation status"
msgstr "翻譯狀態"
