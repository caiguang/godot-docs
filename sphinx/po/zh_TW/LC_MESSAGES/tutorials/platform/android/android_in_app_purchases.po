# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Android in-app purchases"
msgstr "Android 應用內購買"

#, fuzzy
msgid ""
"Godot offers a first-party ``GodotGooglePlayBilling`` Android plugin "
"compatible with Godot 4 which uses the `Google Play Billing library <https://"
"developer.android.com/google/play/billing>`_."
msgstr ""
"自 Godot 3.2.2 以來，Godot提供了一個第一方的 ``GodotGooglePlayBilling`` "
"Android 外掛程式。新外掛程式使用 `Google Play Billing 庫 <https://developer."
"android.com/google/play/billing>`__，而不是現在已經廢棄的 AIDL IAP 實作。"

msgid "Usage"
msgstr "使用量"

msgid "Getting started"
msgstr "入門"

#, fuzzy
msgid ""
"Make sure you have enabled and successfully set up :ref:`Android Gradle "
"Builds <doc_android_gradle_build>`. Follow the compiling instructions on the "
"``GodotGooglePlayBilling`` `github page <https://github.com/godotengine/"
"godot-google-play-billing>`__."
msgstr ""
"如果還沒有完成, 請確保你已經啟用並成功設定 :ref:`Android Custom Builds "
"<doc_android_custom_build>`. 從 `releases page <https://github.com/"
"godotengine/godot-google-play-billing/releases>`__\"中抓取 "
"``GodotGooglePlayBilling`` 外掛程式二進位檔案和設定檔, 並將兩者放入 `res://"
"android/plugins` 中. 現在該外掛程式應該出現在Android匯出設定中, 你可以啟用它."

msgid ""
"Then put the files `./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` and `./GodotGooglePlayBilling.gdap` "
"into your project in the `res://android/plugins` folder."
msgstr ""
"然後將檔案`./godot-google-play-billing/build/outputs/aar/"
"GodotGooglePlayBilling.***.release.aar` 和`./GodotGooglePlayBilling.gdap` 放"
"入您的專案中的`res:// android /plugins` 資料夾。"

msgid ""
"The plugin should now show up in the Android export settings, where you can "
"enable it."
msgstr "該外掛程式現在應該顯示在 Android 匯出設定中，您可以在其中啟用它。"

msgid "Initialize the plugin"
msgstr "初始化外掛"

msgid "To use the ``GodotGooglePlayBilling`` API:"
msgstr "要使用“GodotGooglePlayBilling” API："

msgid "Obtain a reference to the ``GodotGooglePlayBilling`` singleton"
msgstr "取得``GodotGooglePlayBilling``單例的引用"

msgid "Connect handlers for the plugin signals"
msgstr "連接插件訊號的處理程式"

msgid "Call ``startConnection``"
msgstr "Call ``startConnection``"

msgid "Initialization example:"
msgstr "在下方範例中："

msgid ""
"The API must be in a connected state prior to use. The ``connected`` signal "
"is sent when the connection process succeeds. You can also use ``isReady()`` "
"to determine if the plugin is ready for use. The ``getConnectionState()`` "
"function returns the current connection state of the plugin."
msgstr ""
"API 在使用前必須處於連線狀態。當連線過程成功時，將發送“connected”訊號。您也可"
"以使用“isReady()”來確定插件是否可以使用。 getConnectionState() 函式傳回外掛程"
"式的目前連線狀態。"

msgid "Return values for ``getConnectionState()``:"
msgstr "getConnectionState() 的回傳值："

msgid "Query available items"
msgstr "有六種搜尋模式："

msgid ""
"Once the API has connected, query SKUs using ``querySkuDetails()``. You must "
"successfully complete a SKU query before calling the ``purchase()`` or "
"``queryPurchases()`` functions, or they will return an error. "
"``querySkuDetails()`` takes two parameters: an array of SKU name strings, "
"and a string specifying the type of SKU being queried. The SKU type string "
"should be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The name strings in the array should match the SKU product "
"ids defined in the Google Play Console entry for your app."
msgstr ""
"API 連線後，使用「querySkuDetails()」查詢 SKU。在呼叫 ``purchase()`` 或 "
"``queryPurchases()`` 函式之前，您必須成功完成 SKU 查詢，否則它們將傳回錯誤。 "
"``querySkuDetails()`` 有兩個參數：一個 SKU 名稱字串陣列，以及一個指定要查詢"
"的 SKU 型別的字串。對於正常的應用程式內購買，SKU 型別字串應為 "
"``\"inapp\"`` ，對於訂閱，應為 ``\"subs\"`` 。陣列中的名稱字串應與您的應用程"
"式的 Google Play Console 條目中定義的 SKU 產品 ID 相符。"

msgid "Example use of ``querySkuDetails()``:"
msgstr "``querySkuDetails()`` 的範例用法："

msgid "Query user purchases"
msgstr "查詢使用者購買記錄"

msgid ""
"To retrieve a user's purchases, call the ``queryPurchases()`` function "
"passing a string with the type of SKU to query. The SKU type string should "
"be ``\"inapp\"`` for normal in-app purchases or ``\"subs\"`` for "
"subscriptions. The ``query_purchases_response`` signal is sent with the "
"result. The signal has a single parameter: a :ref:`Dictionary "
"<class_Dictionary>` with a status code and either an array of purchases or "
"an error message. Only active subscriptions and non-consumed one-time "
"purchases are included in the purchase array."
msgstr ""
"要獲得所有的購買，請呼叫 ``queryPurchases``。與大多數其他函式不同的是，"
"``queryPurchases`` 是一個同步操作，會返回一個 :ref:`Dictionary "
"<class_Dictionary>`，其中包含狀態碼和一個購買陣列或一個錯誤資訊。只會返回處於"
"活躍狀態的訂閱和尚未消耗的一次性購買。"

msgid "Example use of ``queryPurchases()``:"
msgstr "``queryPurchases()`` 的範例用法："

msgid ""
"You should query purchases during startup after successfully retrieving SKU "
"details. Since the user may make a purchase or resolve a pending transaction "
"from outside your app, you should recheck for purchases when resuming from "
"the background. To accomplish this, you can use the ``billing_resume`` "
"signal."
msgstr ""
"成功檢索 SKU 詳細資訊後，您應該在啟動期間查詢購買情況。由於使用者可能會從您的"
"應用程式外部進行購買或解決待處理的交易，因此您應該在從後台恢復時重新檢查購買"
"情況。為了實作這一點，您可以使用「billing_resume」訊號。"

msgid "Example use of ``billing_resume``:"
msgstr "``billing_resume`` 的範例用法："

msgid ""
"For more information on processing the purchase items returned by "
"``queryPurchases()``, see `Processing a purchase item`_"
msgstr ""
"有關處理“queryPurchases()”返回的購買商品的更多信息，請參閱“處理購買商品”_"

msgid "Purchase an item"
msgstr "購買專案"

msgid ""
"To initiate the purchase flow for an item, call ``purchase()`` passing the "
"product id string of the SKU you wish to purchase. Reminder: you **must** "
"query the SKU details for an item before you can pass it to ``purchase()``."
msgstr ""
"要啟動一個專案的購買流程，請呼叫 ``purchase``。在啟動購買流程之前，你**必須**"
"查詢該專案的 SKU 詳情。"

msgid "Example use of ``purchase()``:"
msgstr "``purchase()`` 的範例用法："

msgid ""
"The payment flow will send a ``purchases_updated`` signal on success or a "
"``purchase_error`` signal on failure."
msgstr ""
"支付流程將在成功時發送“purchases_updated”訊號，在失敗時發送“purchase_error”訊"
"號。"

msgid "Processing a purchase item"
msgstr "建立內容"

msgid ""
"The ``query_purchases_response`` and ``purchases_updated`` signals provide "
"an array of purchases in :ref:`Dictionary <class_Dictionary>` format. The "
"purchase Dictionary includes keys that map to values of the Google Play "
"Billing `Purchase <https://developer.android.com/reference/com/android/"
"billingclient/api/Purchase>`_ class."
msgstr ""
"“query_purchases_response” 和 “purchases_updated” 訊號以 Dictionary "
"<class_Dictionary> 格式提供一系列購買。購買字典包含對應到 Google Play "
"Billing `Purchase <https://developer.android.com/reference/com/android/"
"billingclient/api/Purchase>`_ 類別的值的鍵。"

msgid "Purchase fields:"
msgstr "購買專案："

msgid "Check purchase state"
msgstr "檢查購買狀態"

msgid ""
"Check the ``purchase_state`` value of a purchase to determine if a purchase "
"was completed or is still pending."
msgstr "檢查購買的“purchase_state”值以確定購買是否已完成或仍待處理。"

msgid "PurchaseState values:"
msgstr "PurchaseState 取值："

msgid ""
"If a purchase is in a ``PENDING`` state, you should not award the contents "
"of the purchase or do any further processing of the purchase until it "
"reaches the ``PURCHASED`` state. If you have a store interface, you may wish "
"to display information about pending purchases needing to be completed in "
"the Google Play Store. For more details on pending purchases, see `Handling "
"pending transactions <https://developer.android.com/google/play/billing/"
"integrate#pending>`_ in the Google Play Billing Library documentation."
msgstr ""
"如果購買處於「待處理」狀態，則在達到「已購買」狀態之前，您不應授予購買的內容"
"或對購買進行任何進一步處理。如果您有商店介面，您可能想要顯示有關需要在 "
"Google Play 商店中完成的待處理購買的資訊。有關待處理購買的更多詳細信息，請參"
"閱 Google Play 結算庫文件中的“處理待處理交易 <https://developer.android.com/"
"google/play/billing/integrate#pending>”。"

msgid "Consumables"
msgstr "常數"

msgid ""
"If your in-app item is not a one-time purchase but a consumable item (e.g. "
"coins) which can be purchased multiple times, you can consume an item by "
"calling ``consumePurchase()`` passing the ``purchase_token`` value from the "
"purchase dictionary. Calling ``consumePurchase()`` automatically "
"acknowledges a purchase. Consuming a product allows the user to purchase it "
"again, it will no longer appear in subsequent ``queryPurchases()`` calls "
"unless it is repurchased."
msgstr ""
"如果你的應用內物品不是一次性購買，而是可以多次購買的消耗品（如硬幣），你可以"
"用購買權杖呼叫 ``consumePurchase`` 來消耗物品。呼叫 ``queryPurchases`` 來獲取"
"購買權杖。呼叫 ``consumePurchase`` 會自動確認購買。消耗產品後，使用者就可以再"
"一次進行購買，同時也會將其從後續 ``queryPurchases`` 的返回中移除。"

msgid "Example use of ``consumePurchase()``:"
msgstr "``consumePurchase()`` 的範例用法："

msgid "Acknowledging purchases"
msgstr "確認購買"

msgid ""
"If your in-app item is a one-time purchase, you must acknowledge the "
"purchase by calling the ``acknowledgePurchase()`` function, passing the "
"``purchase_token`` value from the purchase dictionary. If you do not "
"acknowledge a purchase within three days, the user automatically receives a "
"refund, and Google Play revokes the purchase. If you are calling "
"``comsumePurchase()`` it automatically acknowledges the purchase and you do "
"not need to call ``acknowledgePurchase()``."
msgstr ""
"如果您的應用程式內商品是一次性購買，則必須透過呼叫「acknowledgePurchase()」函"
"式並傳遞購買字典中的「purchase_token」值來確認購買。如果您在三天內未確認購"
"買，使用者將自動收到退款，並且 Google Play 會撤銷購買。如果您呼"
"叫“comsumePurchase()”，它會自動確認購買，您無需呼叫“acknowledgePurchase()”。"

msgid "Example use of ``acknowledgePurchase()``:"
msgstr "``acknowledgePurchase()`` 的範例用法："

msgid "Subscriptions"
msgstr "說明"

msgid ""
"Subscriptions work mostly like regular in-app items. Use ``\"subs\"`` as the "
"second argument to ``querySkuDetails()`` to get subscription details. Pass "
"``\"subs\"`` to ``queryPurchases()`` to get subscription purchase details."
msgstr ""
"訂閱的工作原理和普通的應用內專案沒有太大區別. 只要使用 ``\"subs\"`` 作為 "
"``querySkuDetails()`` 的第二個參數, 就可以得到訂閱的詳細資訊. 在 "
"``queryPurchases()`` 的結果中檢查 ``is_auto_renewing`` 來查看使用者是否取消了"
"自動更新的訂閱。"

msgid ""
"You can check ``is_auto_renewing`` in the a subscription purchase returned "
"from ``queryPurchases()`` to see if a user has cancelled an auto-renewing "
"subscription."
msgstr ""
"您可以在從“queryPurchases()”返回的訂閱購買中檢查“is_auto_renewing”，以查看使"
"用者是否取消了自動續訂訂閱。"

msgid ""
"You need to acknowledge new subscription purchases, but not automatic "
"subscription renewals."
msgstr "您需要確認新的訂閱購買，但不需要確認自動訂閱續訂。"

msgid ""
"If you support upgrading or downgrading between different subscription "
"levels, you should use ``updateSubscription()`` to use the subscription "
"update flow to change an active subscription. Like ``purchase()``, results "
"are returned by the ``purchases_updated`` and ``purchase_error`` signals. "
"There are three parameters to ``updateSubscription()``:"
msgstr ""
"如果您支援在不同訂閱等級之間升級或降級，則應使用 updateSubscription() 來使用"
"訂閱更新流程來變更活動訂閱。與“purchase()”一樣，結果"
"由“purchases_updated”和“purchase_error”訊號傳回。 updateSubscription() 有三個"
"參數："

msgid "The purchase token of the currently active subscription"
msgstr "目前有效訂閱的購買令牌"

msgid "The product id string of the subscription SKU to change to"
msgstr "要變更為的訂閱 SKU 的產品 ID 字串"

msgid "The proration mode to apply to the subscription."
msgstr "適用於訂閱的按比例分配模式。"

msgid "The proration values are defined as:"
msgstr "比例值定義為："

msgid "Default behavior is ``IMMEDIATE_WITH_TIME_PRORATION``."
msgstr "預設行為是“IMMEDIATE_WITH_TIME_PRORATION”。"

msgid "Example use of ``updateSubscription``:"
msgstr "``StaticBody2D`` 的範例用法："

msgid ""
"The ``confirmPriceChange()`` function can be used to launch price change "
"confirmation flow for a subscription. Pass the product id of the "
"subscription SKU subject to the price change. The result will be sent by the "
"``price_change_acknowledged`` signal."
msgstr ""
"``confirmPriceChange()`` 函式可用於啟動訂閱的價格變更確認流程。傳遞價格變動的"
"訂閱 SKU 的產品 ID。結果將透過「price_change_acknowledged」訊號發送。"

msgid "Example use of ``confirmPriceChange()``:"
msgstr "“confirmPriceChange()”的使用範例："

msgid "Translation status"
msgstr "翻譯狀態"
