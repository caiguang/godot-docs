# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom HTML page for Web export"
msgstr "匯出自訂 HTML 頁面"

msgid ""
"While Web export templates provide a default HTML page fully capable of "
"launching the project without any further customization, it may be "
"beneficial to create a custom HTML page. While the game itself cannot easily "
"be directly controlled from the outside yet, such page allows to customize "
"the initialization process for the engine."
msgstr ""
"雖然 Web 匯出範本提供了一個預設的 HTML 頁面，完全能夠在沒有任何進一步定制的情"
"況下啟動專案，但建立自訂 HTML 頁面可能是有益的。雖然遊戲本身還不能輕易地從外"
"部直接控制，但這樣的頁面允許自訂引擎的初始化過程。"

msgid "Some use-cases where customizing the default page is useful include:"
msgstr "自訂預設頁面在某些情況下非常有用，包括："

msgid "Loading files from a different directory than the page;"
msgstr "讀取與該頁面不同目錄下的檔;"

msgid "Loading a ``.zip`` file instead of a ``.pck`` file as the main pack;"
msgstr "載入 ``.zip`` 檔而不是 ``.pck`` 檔案作為主資源包;"

msgid "Loading the engine from a different directory than the main pack file;"
msgstr "從主資源包檔以外的目錄中載入引擎檔;"

msgid ""
"Adding a click-to-play button so that games can be started in the fullscreen "
"mode;"
msgstr "新增“點擊開始”按鈕，使遊戲可以在全螢幕模式下啟動;"

msgid ""
"Loading some extra files before the engine starts, making them available in "
"the project file system as soon as possible;"
msgstr "在引擎啟動之前載入一些額外的檔，以便稍後在檔案系統中可用;"

msgid ""
"Passing custom command line arguments, e.g. ``-s`` to start a ``MainLoop`` "
"script."
msgstr "傳遞自訂 \"命令列\" 參數, 例如 ``-s`` 啟動 ``MainLoop`` 腳本."

msgid ""
"The default HTML page is available in the Godot Engine repository at `/misc/"
"dist/html/full-size.html <https://github.com/godotengine/godot/blob/master/"
"misc/dist/html/full-size.html>`__ but the following template can be used as "
"a much simpler example:"
msgstr ""
"預設的HTML頁面可在Godot引擎倉庫 `/misc/dist/html/full-size.html <https://"
"github.com/godotengine/godot/blob/master/misc/dist/html/full-size.html>`__ 中"
"找到, 但以下範本可作為一個更簡單的例子:"

msgid "Setup"
msgstr "設定"

msgid ""
"As shown by the example above, it is mostly a regular HTML document, with "
"few placeholders which needs to be replaced during export, an html "
"``<canvas>`` element, and some simple JavaScript code that calls the :js:"
"class:`Engine` class."
msgstr ""
"如上面的例子所示，它主要是一個普通的HTML文件，有幾個預留位置需要在匯出時替"
"換，一個html ``<canvas>`` 元素，和一些簡單的JavaScript程式碼，呼叫 :js:class:"
"`Engine` 類。"

msgid "The only required placeholders are:"
msgstr "型別預留位置"

msgid ""
"``$GODOT_URL``: The name of the main JavaScript file, which provides the :js:"
"class:`Engine` class required to start the engine and that must be included "
"in the HTML as a ``<script>``. The name is generated from the *Export Path* "
"during the export process."
msgstr ""
"``$GODOT_URL`` : 主JavaScript檔的名稱，它提供了啟動引擎所需的 :js:class:"
"`Engine` 類，必須作為 ``<script>`` 包含在HTML中。這個名字是在匯出過程中從*匯"
"出路徑Export Path* 生成的。"

msgid ""
"``$GODOT_CONFIG``: A JavaScript object, containing the export options and "
"can be later overridden. See :js:attr:`EngineConfig` for the full list of "
"overrides."
msgstr ""
"``$GODOT_CONFIG`` : 一個JavaScript物件，包含匯出選項，以後可以被重寫。參見 :"
"js:attr:`EngineConfig` 獲取完整的重寫列表。"

msgid ""
"The following optional placeholders will enable some extra features in your "
"custom HTML template."
msgstr "以下可選的預留位置將在你的自訂 HTML 範本中實作一些額外的功能。"

msgid ""
"``$GODOT_PROJECT_NAME``: The project name as defined in the Project "
"Settings. It is a good idea to use it as a ``<title>`` in your template."
msgstr ""
"``$GODOT_PROJECT_NAME``: 在專案設定中定義的專案名稱。在你的範本中使用它作為 "
"``<title>`` 是一個好主意。"

msgid ""
"``$GODOT_HEAD_INCLUDE``: A custom string to include in the HTML document "
"just before the end of the ``<head>`` tag. It is customized in the export "
"options under the *Html / Head Include* section. While you fully control the "
"HTML page you create, this variable can be useful for configuring parts of "
"the HTML ``head`` element from the Godot Editor, e.g. for different Web "
"export presets."
msgstr ""
"``$GODOT_HEAD_INCLUDE``. 在HTML檔中, 在 ``<head>`` 標籤結尾前包含的一個自訂字"
"串. 它是在*Html / Head Include*部分的匯出選項中自訂的. 雖然你可以完全控制你所"
"建立的HTML頁面, 但這個變數對於從Godot Editor中配置HTML``head`` 元素的部分內容"
"很有用, 例如, 對於不同的Web匯出預設."

msgid ""
"When the custom page is ready, it can be selected in the export options "
"under the *Html / Custom Html Shell* section."
msgstr ""
"當自訂頁面準備好後, 可以在 *Html / Custom Html Shell* 部分的匯出選項中選擇."

msgid "Starting the project"
msgstr "建立內容"

msgid ""
"To be able to start the game, you need to write a script that initializes "
"the engine — the control code. This process consists of three steps, but as "
"shown here, most of them can be skipped depending on how much customization "
"is needed."
msgstr ""
"為了能夠啟動遊戲，你需要寫一個腳本來初始化引擎 — 控制程式碼。這個過程包括三個"
"步驟，不過如圖所示，其中大部分步驟可以跳過，這取決於需要多少定制化的內容，或"
"者留給預設行為。"

msgid ""
"See the :ref:`HTML5 shell class reference <doc_html5_shell_classref>`, for "
"the full list of methods and options available."
msgstr ""
"參見 :ref:`HTML5 shell 類參考 <doc_html5_shell_classref>`，以獲得可用方法和選"
"項的完整列表。"

msgid ""
"First, the engine must be loaded, then it needs to be initialized, and after "
"this the project can finally be started. You can perform every of these "
"steps manually and with great control. However, in the simplest case all you "
"need to do is to create an instance of the :js:class:`Engine` class with the "
"exported configuration, and then call the :js:meth:`engine.startGame <Engine."
"prototype.startGame>` method optionally overriding any :js:attr:"
"`EngineConfig` parameters."
msgstr ""
"首先，引擎必須被載入，然後需要被初始化，在這之後，專案最終可以被啟動。你可以"
"手動執行這些步驟中的每一步，而且控制得很好。然而，在最簡單的情況下，你需要做"
"的是用匯出的配置建立一個 :js:class:`Engine` 類的實例，然後呼叫 :js:meth:"
"`engine.startGame <Engine.prototype.startGame>` 方法，可選擇重寫任何 :js:"
"attr:`EngineConfig` 參數。"

msgid ""
"This snippet of code automatically loads and initializes the engine before "
"starting the game. It uses the given configuration to load the engine. The :"
"js:meth:`engine.startGame <Engine.prototype.startGame>` method is "
"asynchronous and returns a ``Promise``. This allows your control code to "
"track if the game was loaded correctly without blocking execution or relying "
"on polling."
msgstr ""
"這段程式碼在啟動遊戲前自動載入和初始化引擎。它使用給定的配置來載入引擎。:js:"
"meth:`engine.startGame <Engine.prototype.startGame>` 方法是非同步的，返回一"
"個 ``Promise``。這允許你的控制程式碼追蹤遊戲是否被正確載入，而無需阻塞執行或"
"依賴輪詢。"

msgid ""
"In case your project needs to have special control over the start arguments "
"and dependency files, the :js:meth:`engine.start <Engine.prototype.start>` "
"method can be used instead. Note, that this method do not automatically "
"preload the ``pck`` file, so you will probably want to manually preload it "
"(and any other extra file) via the :js:meth:`engine.preloadFile <Engine."
"prototype.preloadFile>` method."
msgstr ""
"如果你的專案需要對啟動參數和依賴檔進行特別控制，可以使用 :js:meth:`engine."
"start <Engine.prototype.start>` 方法來代替。注意，這個方法不會自動預載入 "
"``pck`` 檔，所以你可能要通過 :js:meth:`engine.preloadFile <Engine.prototype."
"preloadFile>` 方法手動預載入它和任何其他額外的檔案。"

msgid ""
"Optionally, you can also manually :js:meth:`engine.init <Engine.prototype."
"init>` to perform specific actions after the module initialization, but "
"before the engine starts."
msgstr ""
"另外，你也可以手動 :js:meth:`engine.init <Engine.prototype.init>` 在模組初始"
"化之後，但在引擎啟動之前，執行特定的動作。"

msgid ""
"This process is a bit more complex, but gives you full control over the "
"engine startup process."
msgstr "這個過程有點複雜，但可以讓你完全控制引擎的啟動過程。"

msgid ""
"To load the engine manually the :js:meth:`Engine.load` static method must be "
"called. As this method is static, multiple engine instances can be spawned "
"if the share the same ``wasm``."
msgstr ""
"要手動載入引擎，必須呼叫 :js:meth:`Engine.load` 靜態方法。由於這個方法是靜態"
"的，如果多個引擎實例共用相同的 ``wasm`` ，就可以產生多個引擎實例。"

msgid ""
"Multiple instances cannot be spawned by default, as the engine is "
"immediately unloaded after it is initialized. To prevent this from happening "
"see the :js:attr:`unloadAfterInit` override option. It is still possible to "
"unload the engine manually afterwards by calling the :js:meth:`Engine."
"unload` static method. Unloading the engine frees browser memory by "
"unloading files that are no longer needed once the instance is initialized."
msgstr ""
"預設情況下不能生成多個實例，因為引擎被初始化後會立即解除安裝。為了防止這種情"
"況發生，請看 :js:attr:`unloadAfterInit` 覆蓋選項。之後仍然可以通過呼叫 :js:"
"meth:`Engine.unload` 靜態方法來手動解除安裝引擎。解除安裝引擎可以通過解除安裝"
"實例初始化後不再需要的檔來釋放瀏覽器記憶體。"

msgid "Customizing the behavior"
msgstr "自訂行為"

msgid ""
"In the Web environment several methods can be used to guarantee that the "
"game will work as intended."
msgstr "在 Web 環境下，可以使用幾種方法來保證遊戲能夠按照預期的方式運作。"

msgid ""
"If you target a specific version of WebGL, or just want to check if WebGL is "
"available at all, you can call the :js:meth:`Engine.isWebGLAvailable` "
"method. It optionally takes an argument that allows to test for a specific "
"major version of WebGL."
msgstr ""
"如果您的目標是 WebGL 的特定版本，或者只是想檢查 WebGL 是否可用，您可以呼叫 :"
"js:meth:`Engine.isWebGLAvailable` 方法。它可以選擇接受一個參數，允許測試 "
"WebGL 的特定主要版本。"

msgid ""
"As the real executable file does not exist in the Web environment, the "
"engine only stores a virtual filename formed from the base name of loaded "
"engine files. This value affects the output of the :ref:`OS."
"get_executable_path() <class_OS_method_get_executable_path>` method and "
"defines the name of the automatically started main pack. The :js:attr:"
"`executable` override option can be used to override this value."
msgstr ""
"由於真正的可執行檔不存在於 Web 環境中，引擎只儲存一個由載入的引擎檔的基本名稱"
"形成的虛擬檔案名。這個值會影響 :ref:`OS.get_executable_path() "
"<class_OS_method_get_executable_path>` 方法的輸出，並定義自動啟動的主包的名"
"稱。:js:attr:`executable` 選項可以用來重寫這個值。"

msgid "Customizing the presentation"
msgstr "自訂展現形式"

msgid ""
"Several configuration options can be used to further customize the look and "
"behavior of the game on your page."
msgstr "有幾個配置選項可以用來進一步定制你頁面上遊戲的外觀和行為。"

msgid ""
"By default, the first canvas element on the page is used for rendering. To "
"use a different canvas element the :js:attr:`canvas` override option can be "
"used. It requires a reference to the DOM element itself."
msgstr ""
"預設情況下會使用頁面上的第一個 canvas 元素來算繪。要使用其他 canvas 元素，可"
"以使用 :js:attr:`canvas` 選項重寫。它需要一個對 DOM 元素本身的引用。"

msgid ""
"The way the engine resize the canvas can be configured via the :js:attr:"
"`canvasResizePolicy` override option."
msgstr ""
"引擎調整畫布大小的方式可以通過 :js:attr:`canvasResizePolicy` 覆蓋選項進行配"
"置。"

msgid ""
"If your game takes some time to load, it may be useful to display a custom "
"loading UI which tracks the progress. This can be achieved with the :js:attr:"
"`onProgress` callback option, which allows to set up a callback function "
"that will be called regularly as the engine loads new bytes."
msgstr ""
"如果你的遊戲需要一些時間來載入，顯示一個追蹤進度的自訂載入UI可能是有用的。這"
"可以通過 :js:attr:`onProgress` 回呼函式選項來實作，它允許設定一個回呼函式，當"
"引擎載入新位元組時，該函式將被定期呼叫。"

msgid ""
"Be aware that in some cases ``total`` can be ``0``. This means that it "
"cannot be calculated."
msgstr "請注意，在某些情況下 ``total`` 可能是 ``0``。這意味著無法計算。"

msgid ""
"If your game supports multiple languages, the :js:attr:`locale` override "
"option can be used to force a specific locale, provided you have a valid "
"language code string. It may be good to use server-side logic to determine "
"which languages a user may prefer. This way the language code can be taken "
"from the ``Accept-Language`` HTTP header, or determined by a GeoIP service."
msgstr ""
"如果你的遊戲支援多種語言， :js:attr:`locale` 覆蓋選項可以用來強制使用一個特定"
"的語言，只要你有一個有效的語言程式碼字串。使用伺服器端的邏輯來確定使用者可能"
"喜歡哪種語言可能較好。這樣，語言程式碼可以從 ``Accept-Language`` HTTP頭中獲"
"取，或者由GeoIP服務決定。"

msgid "Debugging"
msgstr "除錯"

msgid ""
"To debug exported projects, it may be useful to read the standard output and "
"error streams generated by the engine. This is similar to the output shown "
"in the editor console window. By default, standard ``console.log`` and "
"``console.warn`` are used for the output and error streams respectively. "
"This behavior can be customized by setting your own functions to handle "
"messages."
msgstr ""
"要除錯匯出的專案, 可能需要讀取引擎生成的標準輸出和錯誤流. 這與編輯器控制台視"
"窗中顯示的輸出類似. 預設情況下, 標準的 ``console.log`` 和 ``console."
"warning`` 分別用於輸出和錯誤流. 這種行為可以通過設定自己的函式來處理消息來定"
"制."

msgid ""
"Use the :js:attr:`onPrint` override option to set a callback function for "
"the output stream, and the :js:attr:`onPrintError` override option to set a "
"callback function for the error stream."
msgstr ""
"使用 :js:attr:`onPrint` 覆蓋選項為輸出流設定一個回呼函式，以及 :js:attr:"
"`onPrintError` 覆蓋選項為錯誤流設定一個回呼函式。"

msgid ""
"When handling the engine output, keep in mind that it may not be desirable "
"to print it out in the finished product."
msgstr "在處理引擎輸出時，請記住，在成品中列印出來可能是不可取的。"

msgid "Translation status"
msgstr "翻譯狀態"
