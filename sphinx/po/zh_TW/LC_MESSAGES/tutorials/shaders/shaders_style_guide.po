# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Shaders style guide"
msgstr "編輯器風格指南"

msgid ""
"This style guide lists conventions to write elegant shaders. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"本風格指南列出了編寫優雅著色器的規範。其目的是鼓勵編寫乾淨、可讀的程式碼，並"
"促進各專案、討論和教學的一致性。希望這也能支援自動格式化工具的發展。"

msgid ""
"Since the Godot shader language is close to C-style languages and GLSL, this "
"guide is inspired by Godot's own GLSL formatting. You can view an example of "
"a GLSL file in Godot's source code `here <https://github.com/godotengine/"
"godot/blob/master/drivers/gles3/shaders/copy.glsl>`__."
msgstr ""
"由於 Godot 的著色器語言與 C 風格語言和 GLSL 很接近，所以本指南的靈感來自於 "
"Godot 自己的 GLSL 格式。你可以在 Godot 的原始程式碼中查看 GLSL 檔的`例子 "
"<https://github.com/godotengine/godot/blob/master/drivers/gles2/shaders/copy."
"glsl>`__。"

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"風格指南並不是一種強制規範。有時候可能會無法符合下列的某些準則，這是則需要自"
"行判斷最佳方法，或是詢問其他開發者的意見。"

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"一般來說，在專案中或是在團隊成員間保持程式碼風格的一致性比嚴格遵守本指南還要"
"重要。"

msgid ""
"Godot's built-in shader editor uses a lot of these conventions by default. "
"Let it help you."
msgstr "Godot的內建著色器編輯器預設使用了很多這樣的約定. 讓它來幫助你."

msgid "Here is a complete shader example based on these guidelines:"
msgstr "下面是基於這些規範的完整著色器的例子："

msgid "Formatting"
msgstr "格式"

msgid "Encoding and special characters"
msgstr "編碼與特殊字元"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用 **LF** 換行字元來換行，而不是 CRLF 或 CR。 *(編輯器預設值)*"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr "每個檔案都以 LF 換行字元來結束。 *(編輯器預設值)*"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不帶 `BOM <https://zh.wikipedia.org/wiki/"
"%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F>`_ 的 "
"**UTF-8** 。 *(編輯器預設值)*"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用 **Tab** 字元來縮排而不是空白字元。 *(編輯器預設值)*"

msgid "Indentation"
msgstr "縮排"

msgid ""
"Each indent level should be one tab greater than the block containing it."
msgstr "每個縮進級別應比包含它的區塊多一個定位字元."

msgid "**Good**:"
msgstr "**正確例** :"

msgid "**Bad**:"
msgstr "**錯誤例** :"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用兩個縮排等級來區分連續行與一般的程式碼區塊。"

msgid "Line breaks and blank lines"
msgstr "斷行與空行"

msgid ""
"For a general indentation rule, follow `the \"1TBS Style\" <https://en."
"wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)>`_ which "
"recommends placing the brace associated with a control statement on the same "
"line. Always use braces for statements, even if they only span one line. "
"This makes them easier to refactor and avoids mistakes when adding more "
"lines to an ``if`` statement or similar."
msgstr ""
"常規的縮進規則是遵循`“1TBS 樣式” <https://en.wikipedia.org/wiki/"
"Indentation_style#Variant:_1TBS_(OTBS)>`_，建議將與控制敘述關聯的大括弧放在同"
"一行上。始終對敘述使用大括弧，即使只占一行。這樣更易於重構，並且能夠避免在向 "
"``if`` 等類似敘述中新增更多行時出錯。"

msgid "Blank lines"
msgstr "空行"

msgid "Surround function definitions with one (and only one) blank line:"
msgstr "用一個(而且只有一個)空行圍繞著函式定義:"

msgid ""
"Use one (and only one) blank line inside functions to separate logical "
"sections."
msgstr "在函式中使用一個(而且只有一個)空行來分隔邏輯部分."

msgid "Line length"
msgstr "每行字數限制"

msgid "Keep individual lines of code under 100 characters."
msgstr "將每行程式碼控制在 100 個字元內。"

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two shaders opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"如果可以的話, 儘量將行數保持在80個字元以下. 這有助於在小顯示器上和在外部文字"
"編輯器中並排打開的兩個著色器上閱讀程式碼. 例如, 在查看差異修改時."

msgid "One statement per line"
msgstr "一行一個陳述式"

msgid "Never combine multiple statements on a single line."
msgstr "切勿在一行中合併多個敘述."

msgid "The only exception to that rule is the ternary operator:"
msgstr "唯一的例外是三元運算子："

msgid "Comment spacing"
msgstr "註釋中的空白"

msgid ""
"Regular comments should start with a space, but not code that you comment "
"out. This helps differentiate text comments from disabled code."
msgstr ""
"一般的註釋應該以空白開始，但註解掉的程式碼則不用。這樣一來比較能區分文字註解"
"與停用掉的程式碼。"

msgid ""
"Don't use multiline comment syntax if your comment can fit on a single line:"
msgstr "如果你的注釋可以容納在單行上, 就不要使用多行注釋語法:"

msgid ""
"In the shader editor, to make the selected code a comment (or uncomment it), "
"press :kbd:`Ctrl + K`. This feature adds or removes ``//`` at the start of "
"the selected lines."
msgstr ""
"在著色器編輯器中, 要使選定的程式碼成為注釋或取消注釋, 按 :kbd:`Ctrl + K` . 該"
"功能在所選行的開頭新增或刪除 ``//`` ."

msgid "Whitespace"
msgstr "空格"

msgid ""
"Always use one space around operators and after commas. Also, avoid "
"extraneous spaces in function calls."
msgstr ""
"在運算子周圍和逗號後面總是使用一個空格. 另外, 避免在函式呼叫中使用多餘的空格."

msgid "Don't use spaces to align expressions vertically:"
msgstr "不要使用空白來垂直對齊運算式："

msgid "Floating-point numbers"
msgstr "浮點數字"

msgid ""
"Always specify at least one digit for both the integer and fractional part. "
"This makes it easier to distinguish floating-point numbers from integers, as "
"well as distinguishing numbers greater than 1 from those lower than 1."
msgstr ""
"在整數和小數部分請始終指定至少一個數字, 這樣可以更容易區分浮點和整數, 以及區"
"分大於1和小於1的數位. 這樣可以更容易區分浮點數和整數, 以及區分大於1和小於1的"
"數位."

msgid "Accessing vector members"
msgstr "存取向量成員"

msgid ""
"Use ``r``, ``g``, ``b``, and ``a`` when accessing a vector's members if it "
"contains a color. If the vector contains anything else than a color, use "
"``x``, ``y``, ``z``, and ``w``. This allows those reading your code to "
"better understand what the underlying data represents."
msgstr ""
"如果向量包含顏色, 在存取向量成員時使用 ``r`` , ``g`` , ``b`` 和 ``a`` . 如果"
"向量中不包含顏色, 則使用 ``x`` , ``y`` , ``z`` 和 ``w`` . 這可以讓那些閱讀你"
"的程式碼的人更好地理解基礎資料的含義."

msgid "Naming conventions"
msgstr "命名公約"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"下列命名公約遵守 Godot Engine 風格。若不遵守這些規則會讓程式碼與內建的命名規"
"範衝突，進而讓程式碼不一致。"

msgid "Functions and variables"
msgstr "函式與變數"

msgid "Use snake\\_case to name functions and variables:"
msgstr "函式名稱與變數使用 snake\\_case："

msgid "Constants"
msgstr "常數"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr "常數使用 CONSTANT\\_CASE，每個字母都大寫，使用底線 (\\_) 來區分單詞："

msgid "Preprocessor directives"
msgstr "定義前置處理器"

msgid ""
":ref:`doc_shader_preprocessor` directives should be written in "
"CONSTANT__CASE. Directives should be written without any indentation before "
"them, even if nested within a function."
msgstr ""
":ref:`doc_shader_preprocessor` 指令應以 CONSTANT__CASE 編寫。即使巢狀在函式"
"中，指令前面也應該沒有任何縮排。"

msgid ""
"To preserve the natural flow of indentation when shader errors are printed "
"to the console, extra indentation should **not** be added within ``#if``, "
"``#ifdef`` or ``#ifndef`` blocks:"
msgstr ""
"為了在著色器錯誤列印到控制台時保持縮排的自然流程，不應在「#if」、「#ifdef」或"
"「#ifndef」區塊中新增額外的縮排："

msgid "Code order"
msgstr "程式碼順序"

msgid "We suggest to organize shader code this way:"
msgstr "我們建議以這種方式組織著色器程式碼:"

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"我們最佳化了順序，來讓程式碼從上到下閱讀時比較容易，也幫助首次閱讀程式碼的開"
"發者能瞭解程式如何運作的，並避免因變數宣告順序導致的錯誤。"

msgid "This code order follows two rules of thumb:"
msgstr "此程式碼順序遵循兩個經驗法則:"

msgid "Metadata and properties first, followed by methods."
msgstr "先是中繼資料和屬性, 然後是方法."

msgid ""
"\"Public\" comes before \"private\". In a shader language's context, "
"\"public\" refers to what's easily adjustable by the user (uniforms)."
msgstr ""
"“公共”在“私有”之前。在著色器語言的語境中，“公共”指的是使用者可以輕易調整的東"
"西（uniform）。"

msgid "Local variables"
msgstr "區域變數"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"儘量在首次使用變數前定義區域變數。這樣一來在讀程式碼的時候就比較容易理解，而"
"不需要為了找變數在哪裡定義的而往前翻太多。"

msgid "Translation status"
msgstr "翻譯狀態"
