# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Your first 2D shader"
msgstr "第一個遊戲"

msgid "Introduction"
msgstr "前言"

msgid ""
"Shaders are special programs that execute on the GPU and are used for "
"rendering graphics. All modern rendering is done with shaders. For a more "
"detailed description of what shaders are please see :ref:`What are shaders "
"<doc_introduction_to_shaders>`."
msgstr ""
"著色器是在 GPU 上運作，用來算繪圖像的一種特殊程式。現代算繪都是通過著色器實作"
"的。若想瞭解關於著色器更詳細的說明，請查看:ref:`著色器是什麼 "
"<doc_introduction_to_shaders>`。"

msgid ""
"This tutorial will focus on the practical aspects of writing shader programs "
"by walking you through the process of writing a shader with both vertex and "
"fragment functions. This tutorial targets absolute beginners to shaders."
msgstr ""
"本教學將重點介紹實際編寫著色器程式的各個方面, 引導您走過使用頂點和片段函式編"
"寫著色器的整個流程. 本教學面向著色器."

msgid ""
"If you have experience writing shaders and are just looking for an overview "
"of how shaders work in Godot, see the :ref:`Shading Reference <toc-shading-"
"reference>`."
msgstr ""
"如果你在著色器方面有一定的經驗，只是想知道著色器在 Godot 中是如何運作的，請參"
"閱:ref:`著色器參考 <toc-shading-reference>`。"

msgid "Setup"
msgstr "設定"

msgid ""
":ref:`CanvasItem shaders <doc_canvas_item_shader>` are used to draw all 2D "
"objects in Godot, while :ref:`Spatial <doc_spatial_shader>` shaders are used "
"to draw all 3D objects."
msgstr ""
"對象，而 :ref:`Spatial <doc_spatial_shader>` 著色器則用於繪製所有 3D 物件。"

msgid ""
"In order to use a shader it must be attached inside a :ref:`Material "
"<class_Material>` which must be attached to an object. Materials are a type "
"of :ref:`Resource <doc_resources>`. To draw multiple objects with the same "
"material, the material must be attached to each object."
msgstr ""
"要使用著色器，它必須要被附加到一個 :ref:`Material <class_material>`（材質）"
"上，而這個材質也必須附加在一個物件上。材質是一種 :ref:`Resource "
"<doc_resources>`。若要使用同一材質繪製多個物件，該材質必須附加到每個物件上。"

msgid ""
"All objects derived from a :ref:`CanvasItem <class_CanvasItem>` have a "
"material property. This includes all :ref:`GUI elements <class_Control>`, :"
"ref:`Sprite2Ds <class_Sprite2D>`, :ref:`TileMaps <class_Tilemap>`, :ref:"
"`MeshInstance2Ds <class_MeshInstance2D>` etc. They also have an option to "
"inherit their parent's material. This can be useful if you have a large "
"number of nodes that you want to use the same material."
msgstr ""
"所有繼承自 :ref:`CanvasItem <class_canvasitem>` 的物件都有一個材質屬性, 這包"
"含所有的 :ref:`GUI 元素 <class_Control>`, :ref:`精靈 <class_sprite>`, :ref:`"
"方塊地圖 <class_tilemap>`, :ref:`2D 網格實例 <class_meshinstance2d>` 等等. 它"
"們同時也可以選擇性地繼承其父類的材質. 如果你有要使用同一材質的很多節點, 這個"
"功能就可以派上用場."

msgid ""
"To begin, create a Sprite2D node. :ref:`You can use any CanvasItem "
"<doc_custom_drawing_in_2d>`, so long as it is drawing to the canvas, so for "
"this tutorial we will use a Sprite2D, as it is the easiest CanvasItem to "
"start drawing with."
msgstr ""
"首先，建立一個 Sprite2D 節點。 :ref:`您可以使用任何 CanvasItem "
"<doc_custom_drawing_in_2d>`，只要它繪製到畫布上即可，因此在本教學中我們將使"
"用 Sprite2D，因為它是最容易開始繪製的 CanvasItem。"

#, fuzzy
msgid ""
"In the Inspector, click beside \"Texture\" where it says \"[empty]\" and "
"select \"Load\", then select \"icon.svg\". For new projects, this is the "
"Godot icon. You should now see the icon in the viewport."
msgstr ""
"在“屬性面板”中，點擊“Texture”旁邊寫著“[空]”的地方然後選擇“載入”，再選擇“Icon."
"png”。對於新的專案，這個就是 Godot 的圖示。你現在就會在視口中看到這個圖示。"

msgid ""
"Next, look down in the Inspector, under the CanvasItem section, click beside "
"\"Material\" and select \"New ShaderMaterial\". This creates a new Material "
"resource. Click on the sphere that appears. Godot currently doesn't know "
"whether you are writing a CanvasItem Shader or a Spatial Shader and it "
"previews the output of spatial shaders. So what you are seeing is the output "
"of the default Spatial Shader."
msgstr ""
"接下來，在“屬性面板”下的 CanvasItem 部分中，在“Material”旁點擊並選擇“新建 "
"ShaderMaterial”。這會建立一個新的材質資源。然後點擊新出現的球體。Godot 目前還"
"不知道你是要寫 CanvasItem 著色器還是 Spatial 著色器，它顯示 Spatial 著色器的"
"輸出預覽，所以你看到的是預設的 Spatial 著色器的輸出。"

msgid ""
"Click beside \"Shader\" and select \"New Shader\". Finally, click on the "
"shader you just created and the shader editor will open. You are now ready "
"to begin writing your first shader."
msgstr ""
"點擊“Shader”旁邊的位置並選擇“新建 Shader”。最後，點擊新建立的著色器資源，就會"
"打開著色器編輯器。你現在就已經準備好開始寫你的第一個著色器了。"

msgid "Your first CanvasItem shader"
msgstr "你的第一個 CanvasItem 著色器"

msgid ""
"In Godot, all shaders start with a line specifying what type of shader they "
"are. It uses the following format:"
msgstr "在Godot中, 所有的著色器第一行都是指定著色器型別的, 格式如下:"

msgid ""
"Because we are writing a CanvasItem shader, we specify ``canvas_item`` in "
"the first line. All our code will go beneath this declaration."
msgstr ""
"因為我們正在編寫CanvasItem著色器, 所以我們在第一行中指定了 ``canvas_item``. "
"我們所有的程式碼都會在這個宣告下面."

msgid ""
"This line tells the engine which built-in variables and functionality to "
"supply you with."
msgstr "這一行告訴遊戲引擎要提供你哪些內建變數以及函式."

msgid ""
"In Godot you can override three functions to control how the shader "
"operates; ``vertex``, ``fragment``, and ``light``. This tutorial will walk "
"you through writing a shader with both vertex and fragment functions. Light "
"functions are significantly more complex than vertex and fragment functions "
"and so will not be covered here."
msgstr ""
"在Godot中, 你可以重寫三個函式來控制著色器的運作, 它們是 ``vertex`` (頂點函"
"式), ``fragment`` (片段函式)和 ``light`` (光照函式). 本教學會引導你寫出一個包"
"含頂點和片段函式的著色器. 因為光照函式比另外兩個函式要複雜非常多, 所以在這裡"
"不會進行講解."

msgid "Your first fragment function"
msgstr "你的第一個片段函式"

msgid ""
"The fragment function runs for every pixel in a Sprite2D and determines what "
"color that pixel should be."
msgstr "片段函式對精靈中的每個像素進行操作, 並且決定這個像素應該是什麼顏色的."

msgid ""
"They are restricted to the pixels covered by the Sprite2D, that means you "
"cannot use one to, for example, create an outline around a Sprite2D."
msgstr ""
"它們限制在精靈覆蓋的那些像素中, 這也就意味著, 你無法用片段函式來實作例如在精"
"靈周圍加邊框的事情."

msgid ""
"The most basic fragment function does nothing except assign a single color "
"to every pixel."
msgstr "最基礎的片段函式僅僅給每個像素賦予一個顏色."

msgid ""
"We do so by writing a ``vec4`` to the built-in variable ``COLOR``. ``vec4`` "
"is shorthand for constructing a vector with 4 numbers. For more information "
"about vectors see the :ref:`Vector math tutorial <doc_vector_math>`. "
"``COLOR`` is both an input variable to the fragment function and the final "
"output from it."
msgstr ""
"我們向內建變數 ``COLOR`` 中寫入一個 ``vec4`` 來做到這點. ``vec4`` 是建立一個"
"四維向量的簡寫形式. 若想進一步瞭解向量, 請參閱 :ref:`向量數學教學 "
"<doc_vector_math>`. ``COLOR`` 變數既是片段函式的一個輸入, 同時也是它的最終輸"
"出."

msgid ""
"Congratulations! You're done. You have successfully written your first "
"shader in Godot."
msgstr "恭喜你！你成功在 Godot 中寫出了你的第一個著色器。"

msgid "Now let's make things more complex."
msgstr "接著, 我們來討論更複雜的事情."

msgid ""
"There are many inputs to the fragment function that you can use for "
"calculating ``COLOR``. ``UV`` is one of them. UV coordinates are specified "
"in your Sprite2D (without you knowing it!) and they tell the shader where to "
"read from textures for each part of the mesh."
msgstr ""
"你可以使用片段函式中的很多輸入來計算 ``COLOR``, ``UV`` 就是其中的一個. 你的精"
"靈指定了UV座標(在你不知情的情況下！), 而它們告訴著色器, 對於網格的每個部分從"
"紋理的何處讀取資訊."

msgid ""
"In the fragment function you can only read from ``UV``, but you can use it "
"in other functions or to assign values to ``COLOR`` directly."
msgstr ""
"在片段函式中你只能從 ``UV`` 中讀取, 但是你可以在其他函式中使用, 或者直接對 "
"``COLOR`` 賦值."

msgid "``UV`` varies between 0-1 from left-right and from top-bottom."
msgstr "``UV`` 取值在0-1之間, 從左到右, 由上到下."

msgid "Using ``TEXTURE`` built-in"
msgstr "使用內建變數 ``TEXTURE``"

msgid ""
"The default fragment function reads from the set Sprite2D texture and "
"displays it."
msgstr ""

#, fuzzy
msgid ""
"When you want to adjust a color in a Sprite2D you can adjust the color from "
"the texture manually like in the code below."
msgstr ""
"當你想調整 Sprite 中的顏色時，你不能像下面的程式碼那樣手動修改紋理中的顏色。"

msgid ""
"Certain nodes, like Sprite2Ds, have a dedicated texture variable that can be "
"accessed in the shader using ``TEXTURE``. If you want to use the Sprite2D "
"texture to combine with other colors, you can use the ``UV`` with the "
"``texture`` function to access this variable. Use them to redraw the "
"Sprite2D with the texture."
msgstr ""

msgid "Uniform input"
msgstr "Uniform 輸入"

msgid ""
"Uniform input is used to pass data into a shader that will be the same "
"across the entire shader."
msgstr ""
"Uniform 輸入是用來向著色器傳遞資料的，這些資料在整個著色器中都是一致的。"

msgid ""
"You can use uniforms by defining them at the top of your shader like so:"
msgstr "你可以像這樣通過在著色器頂部定義來使用 Uniform 值："

msgid ""
"For more information about usage see the :ref:`Shading Language doc "
"<doc_shading_language>`."
msgstr "用法的更多詳情請參見:ref:`著色語言文件 <doc_shading_language>`。"

msgid "Add a uniform to change the amount of blue in our Sprite2D."
msgstr "新增一個 Uniform 值來改變 Sprite 中藍色量。"

msgid ""
"Now you can change the amount of blue in the Sprite2D from the editor. Look "
"back at the Inspector under where you created your shader. You should see a "
"section called \"Shader Param\". Unfold that section and you will see the "
"uniform you just declared. If you change the value in the editor, it will "
"overwrite the default value you provided in the shader."
msgstr ""
"現在你可以在編輯器中改變Sprite的藍色量. 回頭看看你建立著色器的地方的屬性面"
"板. 你應該看到一個叫做 \"Shader Param\" 的部分. 展開這個部分, 你會看到你剛剛"
"宣告的Uniform. 如果你在編輯器中改變這個值, 它將覆蓋你在著色器中提供的預設值."

msgid "Interacting with shaders from code"
msgstr "程式碼與著色器的互動"

msgid ""
"You can change uniforms from code using the function "
"``set_shader_parameter()`` which is called on the node's material resource. "
"With a Sprite2D node, the following code can be used to set the ``blue`` "
"uniform."
msgstr ""
"你可以使用在節點的材質資源上呼叫的函式 ``set_shader_param()`` , 從程式碼中改"
"變Uniform. 對於一個Sprite節點, 可以使用下面的程式碼來設定 ``blue`` Uniform."

msgid ""
"Note that the name of the uniform is a string. The string must match exactly "
"with how it is written in the shader, including spelling and case."
msgstr ""
"注意,uniform值的名稱是一個字串. 字串必須與它在著色器中的書寫方式完全配對, 包"
"括拼寫和大小寫."

msgid "Your first vertex function"
msgstr "你的第一個頂點函式"

msgid "Now that we have a fragment function, let's write a vertex function."
msgstr "現在我們有了一個片段函式, 我們再寫一個頂點函式."

msgid ""
"Use the vertex function to calculate where on the screen each vertex should "
"end up."
msgstr "使用頂點函式計算螢幕上每個頂點的結束位置."

msgid ""
"The most important variable in the vertex function is ``VERTEX``. Initially, "
"it specifies the vertex coordinates in your model, but you also write to it "
"to determine where to actually draw those vertices. ``VERTEX`` is a ``vec2`` "
"that is initially presented in local-space (i.e. not relative to the camera, "
"viewport, or parent nodes)."
msgstr ""
"頂點函式中最重要的變數是 ``VERTEX``。它最初指定的是模型中的頂點座標，但你也會"
"通過往裡面寫值來決定把這些頂點畫到哪裡。``VERTEX`` 是一個 ``vec2``，最初使用"
"的是局部空間（即與相機、視口、父節點無關）。"

msgid "You can offset the vertices by directly adding to ``VERTEX``."
msgstr "您可以通過直接調整 ``VERTEX`` 來偏移頂點。"

msgid ""
"Combined with the ``TIME`` built-in variable, this can be used for basic "
"animation."
msgstr "與內建變數 ``TIME`` 相結合，可用於簡單的動畫。"

msgid "Conclusion"
msgstr "結論"

msgid ""
"At their core, shaders do what you have seen so far, they compute ``VERTEX`` "
"and ``COLOR``. It is up to you to dream up more complex mathematical "
"strategies for assigning values to those variables."
msgstr ""
"著色器的核心, 如你所見, 是計算 ``VERTEX`` 和 ``COLOR``. 你可以制定更複雜的數"
"學策略來給這些變數賦值."

msgid ""
"For inspiration, take a look at some of the more advanced shader tutorials, "
"and look at other sites like `Shadertoy <https://www.shadertoy.com/results?"
"query=&sort=popular&from=10&num=4>`_ and `The Book of Shaders <https://"
"thebookofshaders.com>`_."
msgstr ""
"一些更高級的著色器教學可以給你啟發, 如 `Shadertoy <https://www.shadertoy.com/"
"results?query=&sort=popular&from=10&num=4>`_ 和 `著色器之書 <https://"
"thebookofshaders.com/?lan=ch>`_ ."

msgid "Translation status"
msgstr "翻譯狀態"
