# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making HTTP requests"
msgstr "發出 HTTP 請求"

msgid "Why use HTTP?"
msgstr "為什麼使用 HTTP？"

msgid ""
"`HTTP requests <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_ are "
"useful to communicate with web servers and other non-Godot programs."
msgstr ""
"`HTTP 請求 <https://developer.mozilla.org/en-US/docs/Web/HTTP>`_可以用來與 "
"Web 伺服器以及其他非 Godot 程式通信。"

msgid ""
"Compared to Godot's other networking features (like :ref:`High-level "
"multiplayer <doc_high_level_multiplayer>`), HTTP requests have more overhead "
"and take more time to get going, so they aren't suited for real-time "
"communication, and aren't great to send lots of small updates as is common "
"for multiplayer gameplay."
msgstr ""
"與 Godot 的其他網路功能（例如:ref:`高階多人遊戲 "
"<doc_high_level_multiplayer>`）相比，HTTP 請求的額外開銷更大，起步也更慢，所"
"以並不適合即時通信，也不善於進行多人遊戲中常見的大量較小更新的發送。"

#, fuzzy
msgid ""
"HTTP, however, offers interoperability with external web resources and is "
"great at sending and receiving large amounts of data, for example to "
"transfer files like game assets. These assets can then be loaded using :ref:"
"`runtime file loading and saving <doc_runtime_loading_and_saving>`."
msgstr ""
"然而 HTTP 能夠與外部 Web 資源進行互動，善於進行較大資料的發送和接收，例如傳送"
"遊戲素材等檔。"

msgid ""
"So HTTP may be useful for your game's login system, lobby browser, to "
"retrieve some information from the web or to download game assets."
msgstr ""
"所以 HTTP 可以用在遊戲的登錄系統、大廳瀏覽器，可以從 Web 獲取資訊，也可以下載"
"遊戲素材。"

msgid ""
"This tutorial assumes some familiarity with Godot and the Godot Editor. "
"Refer to the :ref:`Introduction <toc-learn-introduction>` and the :ref:`Step "
"by step <toc-learn-step_by_step>` tutorial, especially its :ref:`Nodes and "
"Scenes <doc_nodes_and_scenes>` and :ref:`Creating your first script "
"<doc_scripting_first_script>` pages if needed."
msgstr ""
"本教學假設您對 Godot 和 Godot 編輯器有一定的了解。請參閱 :ref:`簡介 <toc-"
"learn-introduction>` 和 :ref:`逐步 <toc-learn-step_by_step>` 教學課程，特別是"
"其 :ref:`節點和場景 <doc_nodes_and_scenes>` 和：參考： `如果需要，建立您的第"
"一個腳本<doc_scripting_first_script>` 頁面。"

msgid "HTTP requests in Godot"
msgstr "Godot 中的 HTTP 請求"

msgid ""
"The :ref:`HTTPRequest <class_HTTPRequest>` node is the easiest way to make "
"HTTP requests in Godot. It is backed by the more low-level :ref:`HTTPClient "
"<class_HTTPClient>`, for which a tutorial is available :ref:`here "
"<doc_http_client_class>`."
msgstr ""
"在Godot中, 用 :ref:`HTTPRequest <class_HTTPRequest>` 節點發出HTTP請求是最簡單"
"的方法. 它繼承自更低級別的 :ref:`HTTPClient <class_HTTPClient>` , 相關的教學"
"見 :ref:`here <doc_http_client_class>`."

msgid ""
"For this example, we will make an HTTP request to GitHub to retrieve the "
"name of the latest Godot release."
msgstr ""
"對於此範例，我們將向 GitHub 發出 HTTP 請求以檢索最新 Godot 版本的名稱。"

msgid ""
"When exporting to **Android**, make sure to enable the **Internet** "
"permission in the Android export preset before exporting the project or "
"using one-click deploy. Otherwise, network communication of any kind will be "
"blocked by the Android OS."
msgstr ""
"當匯出到 Android 時，在匯出專案或使用一鍵部署之前，確保在 Android 匯出預設中"
"啟用 ``INTERNET`` 許可權。否則，任何形式的網路通信都會被 Android 系統阻止。"

msgid "Preparing the scene"
msgstr "準備 SDK"

msgid ""
"Create a new empty scene, add a root :ref:`Node <class_Node>` and add a "
"script to it. Then add a :ref:`HTTPRequest <class_HTTPRequest>` node as a "
"child."
msgstr ""
"建立一個新的空場景，新增一個根節點 <class_Node>` 並向其新增腳本。然後加入一"
"個 HTTPRequest <class_HTTPRequest>` 節點作為子節點。"

msgid "Scripting the request"
msgstr "建立內容"

msgid ""
"When the project is started (so in ``_ready()``), we're going to send an "
"HTTP request to Github using our :ref:`HTTPRequest <class_HTTPRequest>` "
"node, and once the request completes, we're going to parse the returned JSON "
"data, look for the ``name`` field and print that to console."
msgstr ""
"當專案啟動時（所以在 _ready() 中），我們將使用 HTTPRequest "
"<class_HTTPRequest> 節點向 Github 發送 HTTP 請求，一旦請求完成，我們就將解析"
"傳回的JSON 資料，搜尋「name」欄位並將其列印到控制台。"

msgid ""
"Save the script and the scene, and run the project. The name of the most "
"recent Godot release on Github should be printed to the output log. For more "
"information on parsing JSON, see the class references for :ref:`JSON "
"<class_JSON>`."
msgstr ""
"儲存腳本和場景，然後執行專案。 Github 上最新的 Godot 版本的名稱應列印到輸出紀"
"錄中。有關解析 JSON 的更多信息，請參閱 JSON <class_JSON>` 的類別參考。"

msgid ""
"Note that you may want to check whether the ``result`` equals "
"``RESULT_SUCCESS`` and whether a JSON parsing error occurred, see the JSON "
"class reference and :ref:`HTTPRequest <class_HTTPRequest>` for more."
msgstr ""
"請注意, 您可能需要檢查 ``result`` 是否等於 ``RESULT_SUCCESS`` 以及JSON解析錯"
"誤是否發生, 要瞭解更多資訊, 請參閱JSON型別參考和 :ref:`HTTPRequest "
"<class_HTTPRequest>` ."

msgid ""
"You have to wait for a request to finish before sending another one. Making "
"multiple request at once requires you to have one node per request. A common "
"strategy is to create and delete HTTPRequest nodes at runtime as necessary."
msgstr ""
"請記住, 在發送另一個請求之前, 您必須等待請求完成. 一次發出多個請求需要每個請"
"求有一個節點. 常見的策略是在運作時根據需要建立和刪除HTTPRequest節點."

msgid "Sending data to the server"
msgstr "建立 Godot 伺服器"

msgid ""
"Until now, we have limited ourselves to requesting data from a server. But "
"what if you need to send data to the server? Here is a common way of doing "
"it:"
msgstr ""
"到目前為止, 我們僅限於從伺服器上請求資料. 但如果你需要向伺服器發送資料呢？這"
"裡有一個常見的方法:"

msgid "Setting custom HTTP headers"
msgstr "建立內容"

msgid ""
"Of course, you can also set custom HTTP headers. These are given as a string "
"array, with each string containing a header in the format ``\"header: "
"value\"``. For example, to set a custom user agent (the HTTP ``User-Agent`` "
"header) you could use the following:"
msgstr ""
"當然, 您也可以設定自訂的HTTP頭部. 它們以字串陣列的形式給出, 每個字串都包含一"
"個格式為 ``\"header: value\"`` 的頭部. 例如, 要設定自訂使用者代理(HTTP的 "
"``user-agent`` 頭部部分), 您可以像這樣使用:"

msgid ""
"Be aware that someone might analyse and decompile your released application "
"and thus may gain access to any embedded authorization information like "
"tokens, usernames or passwords. That means it is usually not a good idea to "
"embed things such as database access credentials inside your game. Avoid "
"providing information useful to an attacker whenever possible."
msgstr ""
"此外, 在使用授權呼叫API時, 請注意有人可能會分析和反編譯已發行的應用程式, 因此"
"可能會存取到任何嵌入程式的授權資訊, 如權杖, 使用者名或密碼等. 這意味著在遊戲"
"中嵌入諸如資料庫存取憑證之類的東西通常不是一個好主意. 盡可能避免提供對攻擊者"
"有用的資訊."

msgid "Translation status"
msgstr "翻譯狀態"
