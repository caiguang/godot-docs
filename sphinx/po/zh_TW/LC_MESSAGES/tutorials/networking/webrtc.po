# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "WebRTC"
msgstr "WebRTC"

msgid "HTML5, WebSocket, WebRTC"
msgstr "HTML5、WebSocket、WebRTC"

msgid ""
"One of Godot's great features is its ability to export to the HTML5/"
"WebAssembly platform, allowing your game to run directly in the browser when "
"a user visit your webpage."
msgstr ""
"Godot的一大特點是它能夠匯出到HTML5/WebAssembly平臺, 當使用者存取您的網頁時, "
"您的遊戲可以直接在瀏覽器中運作."

msgid ""
"This is a great opportunity for both demos and full games, but used to come "
"with some limitations. In the area of networking, browsers used to support "
"only HTTPRequests until recently, when first WebSocket and then WebRTC were "
"proposed as standards."
msgstr ""
"這對於演示和完整的遊戲來說都是一個很好的機會, 但過去有一些限制, 在網路領域, "
"瀏覽器過去只支援HTTPRequests, 直到最近, 首先是WebSocket, 然後是WebRTC被提出為"
"標準."

msgid "WebSocket"
msgstr "WebSocket"

msgid ""
"When the WebSocket protocol was standardized in December 2011, it allowed "
"browsers to create stable and bidirectional connections to a WebSocket "
"server. The protocol is a very powerful tool to send push notifications to "
"browsers, and has been used to implement chats, turn-based games, etc."
msgstr ""
"當WebSocket協定在2011年12月被標準化後, 它允許瀏覽器與WebSocket伺服器建立穩定"
"的雙向連接. 該協議相當簡單, 但卻是一個非常強大的向瀏覽器發送推送通知的工具, "
"並已被用於實作聊天, 回合制遊戲等."

msgid ""
"WebSockets, though, still use a TCP connection, which is good for "
"reliability but not for latency, so not good for real-time applications like "
"VoIP and fast-paced games."
msgstr ""
"不過,WebSockets仍然使用TCP連接, 這對可靠性有好處, 但對減少延遲沒有好處, 所以"
"不適合即時應用, 比如VoIP和快節奏的遊戲."

msgid ""
"For this reason, since 2010, Google started working on a new technology "
"called WebRTC, which later on, in 2017, became a W3C candidate "
"recommendation. WebRTC is a much more complex set of specifications, and "
"relies on many other technologies behind the scenes (ICE, DTLS, SDP) to "
"provide fast, real-time, and secure communication between two peers."
msgstr ""
"為此, 從2010年開始, 穀歌開始研究一項名為WebRTC的新技術, 後來在2017年, 這項技"
"術成為W3C候選推薦.WebRTC是一套複雜得集合規範, 並且在後臺依靠許多其他技術"
"(ICE, DTLS, SDP)來提供兩個對等體之間快速, 即時, 安全的通信."

msgid ""
"The idea is to find the fastest route between the two peers and establish "
"whenever possible a direct communication (i.e. try to avoid a relaying "
"server)."
msgstr ""
"其想法是找到兩個對等體之間最快的路線, 並盡可能建立直接通信(儘量避開中繼伺服"
"器)."

msgid ""
"However, this comes at a price, which is that some media information must be "
"exchanged between the two peers before the communication can start (in the "
"form of Session Description Protocol - SDP strings). This usually takes the "
"form of a so-called WebRTC Signaling Server."
msgstr ""
"然而, 這是有代價的, 那就是在通信開始之前, 兩個對等體之間必須交換一些媒介資訊"
"(以工作階段描述通訊協定--SDP字串的形式). 這通常採取所謂的WebRTC訊號伺服器的形"
"式."

msgid ""
"Peers connect to a signaling server (for example a WebSocket server) and "
"send their media information. The server then relays this information to "
"other peers, allowing them to establish the desired direct communication. "
"Once this step is done, peers can disconnect from the signaling server and "
"keep the direct Peer-to-Peer (P2P) connection open."
msgstr ""
"對等體連接到訊號伺服器(例如 WebSocket 伺服器)並行送其媒介資訊. 然後, 伺服器將"
"此資訊轉發到其他對等體, 允許它們建立所需的直接通信. 這一步完成後, 對等體可以"
"斷開與訊號伺服器的連接, 並保持直接的點對點(P2P)連接打開狀態."

msgid "Using WebRTC in Godot"
msgstr "在 Godot 中使用 WebRTC"

msgid ""
"WebRTC is implemented in Godot via two main classes :ref:"
"`WebRTCPeerConnection <class_WebRTCPeerConnection>` and :ref:"
"`WebRTCDataChannel <class_WebRTCDataChannel>`, plus the multiplayer API "
"implementation :ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`. "
"See section on :ref:`high-level multiplayer <doc_high_level_multiplayer>` "
"for more details."
msgstr ""
"在Godot中,WebRTC是通過兩個主要的類來實作的 :ref:`WebRTCPeerConnection "
"<class_WebRTCPeerConnection>` 和 :ref:`WebRTCDataChannel "
"<class_WebRTCDataChannel>`, 加上多人遊戲API實作 :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>`. 更多細節請參見 :ref:`high-level multiplayer "
"<doc_high_level_multiplayer>` 章節."

msgid ""
"These classes are available automatically in HTML5, but **require an "
"external GDExtension plugin on native (non-HTML5) platforms**. Check out the "
"`webrtc-native plugin repository <https://github.com/godotengine/webrtc-"
"native>`__ for instructions and to get the latest `release <https://github."
"com/godotengine/webrtc-native/releases>`__."
msgstr ""
"這些類在HTML5中自動可用, 但 **需要在本地(非HTML5)平臺上使用外部GDNative外掛程"
"式** . 查看 `webrtc-native 外掛程式庫 <https://github.com/godotengine/webrtc-"
"native>`__ , 以獲取說明和最新的 `發行 <https://github.com/godotengine/webrtc-"
"native/releases>`__ ."

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""
"當匯出到 Android 時，在匯出專案或使用一鍵部署之前，確保在 Android 匯出預設中"
"啟用 ``INTERNET`` 許可權。否則，任何形式的網路通信都會被 Android 系統阻止。"

msgid "Minimal connection example"
msgstr "最小連接範例"

msgid ""
"This example will show you how to create a WebRTC connection between two "
"peers in the same application. This is not very useful in real life, but "
"will give you a good overview of how a WebRTC connection is set up."
msgstr ""
"這個例子將向您展示如何在同一應用程式中的兩個對等體之間建立WebRTC連接. 這在現"
"實場景中並不是很有用, 但會讓你對如何設定WebRTC連接有一個很好的概覽."

msgid "This will print:"
msgstr "這將列印:"

msgid "Local signaling example"
msgstr "本地訊號範例"

msgid ""
"This example expands on the previous one, separating the peers in two "
"different scenes, and using a :ref:`singleton <doc_singletons_autoload>` as "
"a signaling server."
msgstr ""
"這個例子在上一個例子的基礎上進行了擴充, 將對等體分離在兩個不同的場景中, 並使"
"用 :ref:`singleton <doc_singletons_autoload>` 作為訊號伺服器."

msgid "And now for the local signaling server:"
msgstr "現在是本地訊號伺服器:"

msgid ""
"This local signaling server is supposed to be used as a :ref:`singleton "
"<doc_singletons_autoload>` to connect two peers in the same scene."
msgstr ""
"這個本地訊號伺服器應該是作為一個 :ref:`singleton <doc_singletons_autoload>` "
"來連接同一場景中的兩個對等體."

msgid "Then you can use it like this:"
msgstr "然後, 您可以這樣使用它:"

msgid "This will print something similar to this:"
msgstr "將列印出類似這樣的內容:"

msgid "Remote signaling with WebSocket"
msgstr "使用 WebSocket 進行遠端訊號傳輸"

msgid ""
"A more advanced demo using WebSocket for signaling peers and :ref:"
"`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>` is available in the "
"`godot demo projects <https://github.com/godotengine/godot-demo-projects>`_ "
"under `networking/webrtc_signaling`."
msgstr ""
"一個更高級的演示，使用 WebSocket 作為訊號對等體和 :ref:`WebRTCMultiplayer "
"<class_WebRTCMultiplayer>` 在 `godot 演示專案 <https://github.com/"
"godotengine/godot-demo-projects>`_ `networking/webrtc_signaling` 下提供。"

msgid "Translation status"
msgstr "翻譯狀態"
