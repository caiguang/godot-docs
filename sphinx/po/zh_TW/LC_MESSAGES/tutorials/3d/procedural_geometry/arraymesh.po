# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using the ArrayMesh"
msgstr "使用 ArrayMesh"

msgid ""
"This tutorial will present the basics of using an :ref:`ArrayMesh "
"<class_arraymesh>`."
msgstr "本教學將介紹使用 :ref:`ArrayMesh <class_arraymesh>` 的基礎知識。"

msgid ""
"To do so, we will use the function :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>`, which takes up to five "
"parameters. The first two are required, while the last three are optional."
msgstr ""
"為此, 我們將使用函式 :ref:`add_surface_from_arrays() "
"<class_ArrayMesh_method_add_surface_from_arrays>` , 它最多需要四個參數. 前兩"
"個參數是必須的, 後兩個參數是可選的."

msgid ""
"The first parameter is the ``PrimitiveType``, an OpenGL concept that "
"instructs the GPU how to arrange the primitive based on the vertices given, "
"i.e. whether they represent triangles, lines, points, etc. See :ref:`Mesh."
"PrimitiveType <enum_Mesh_PrimitiveType>` for the options available."
msgstr ""
"第一個參數是 ``PrimitiveType``（像素型別），這是 OpenGL 中的概念，用於指示 "
"GPU 如何根據給定的頂點來安排像素，即它們表示的是三角形、線、還是點等等。可選"
"項見 :ref:`Mesh.PrimitiveType <enum_Mesh_PrimitiveType>`。"

msgid ""
"The second parameter, ``arrays``, is the actual Array that stores the mesh "
"information. The array is a normal Godot array that is constructed with "
"empty brackets ``[]``. It stores a ``Packed**Array`` (e.g. "
"PackedVector3Array, PackedInt32Array, etc.) for each type of information "
"that will be used to build the surface."
msgstr ""
"第二各參數 ``arrays`` 是儲存網格資訊的實際 Array。該陣列是一個普通的 Godot 陣"
"列，用空括弧 ``[]`` 建構。它為每一種型別的資訊儲存一個 ``Pool**Array``（如 "
"PoolVector3Array、PoolIntArray 等），用於建構表面。"

msgid ""
"Common elements of ``arrays`` are listed below, together with the position "
"they must have within ``arrays``. See :ref:`Mesh.ArrayType "
"<enum_Mesh_ArrayType>` for a full list."
msgstr ""
"``arrays`` 可能包含下列元素，另外還必須在 ``arrays`` 中包含位置資訊。另請參"
"閱 :ref:`Mesh.ArrayType <enum_Mesh_ArrayType>`。"

msgid "Index"
msgstr "索引"

msgid "Mesh.ArrayType Enum"
msgstr "Mesh.ArrayType 列舉"

msgid "Array type"
msgstr "陣列"

msgid "0"
msgstr "0"

msgid "``ARRAY_VERTEX``"
msgstr "``ARRAY_VERTEX``"

msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>` or :ref:"
"`PackedVector2Array <class_PackedVector2Array>`"
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>` ： :ref:`Vector2 "
"<class_Vector2>` 物件的陣列。"

msgid "1"
msgstr "1"

msgid "``ARRAY_NORMAL``"
msgstr "``ARRAY_NORMAL``"

msgid ":ref:`PackedVector3Array <class_PackedVector3Array>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

msgid "2"
msgstr "2"

msgid "``ARRAY_TANGENT``"
msgstr "``ARRAY_TANGENT``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. The "
"first 3 floats determine the tangent, and the last float the binormal "
"direction as -1 or 1."
msgstr ""
"4 個浮點數一組的 :ref:`PoolRealArray <class_PoolRealArray>`。前 3 個浮點數決"
"定切線，最後一個決定雙法線方向，為 -1 或 1。"

msgid "3"
msgstr "3"

msgid "``ARRAY_COLOR``"
msgstr "``ARRAY_COLOR``"

msgid ":ref:`PackedColorArray <class_PackedColorArray>`"
msgstr ":ref:`Array <class_Array>`"

msgid "4"
msgstr "4"

msgid "``ARRAY_TEX_UV``"
msgstr "``ARRAY_TEX_UV``"

msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>` or :ref:"
"`PackedVector3Array <class_PackedVector3Array>`"
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>` ： :ref:`Vector2 "
"<class_Vector2>` 物件的陣列。"

msgid "5"
msgstr "5"

msgid "``ARRAY_TEX_UV2``"
msgstr "``ARRAY_TEX_UV2``"

msgid "10"
msgstr "10"

msgid "``ARRAY_BONES``"
msgstr "``ARRAY_BONES``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` of groups of 4 floats "
"or :ref:`PackedInt32Array <class_PackedInt32Array>` of groups of 4 ints. "
"Each group lists indexes of 4 bones that affects a given vertex."
msgstr ""
"4 個 float 一組的 :ref:`PoolRealArray <class_PoolRealArray>` 或 4 個 int 一組"
"的 :ref:`PoolIntArray <class_PoolIntArray>`。每一組都列出了影響某個特定頂點"
"的 4 根骨骼。"

msgid "11"
msgstr "11"

msgid "``ARRAY_WEIGHTS``"
msgstr "``ARRAY_WEIGHTS``"

msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>` or :ref:"
"`PackedFloat64Array <class_PackedFloat64Array>` of groups of 4 floats. Each "
"float lists the amount of weight the corresponding bone in ``ARRAY_BONES`` "
"has on a given vertex."
msgstr ""
"4 個 float 一組的 :ref:`PoolRealArray <class_PoolRealArray>`。每個 float 都列"
"出了給定頂點對 ``ARRAY_BONES`` 中特定骨骼的權重。"

msgid "12"
msgstr "12"

msgid "``ARRAY_INDEX``"
msgstr "``ARRAY_INDEX``"

msgid ":ref:`PackedInt32Array <class_PackedInt32Array>`"
msgstr ":ref:`Array <class_Array>`"

msgid ""
"In most cases when creating a mesh, we define it by its vertex positions. So "
"usually, the array of vertices (at index 0) is required, while the index "
"array (at index 12) is optional and will only be used if included. It is "
"also possible to create a mesh with only the index array and no vertex "
"array, but that's beyond the scope of this tutorial. In fact, we won't use "
"the index array at all."
msgstr ""
"在大多數情況下，在建立網格時，我們透過其頂點位置來定義它。因此，通常情況下，"
"頂點陣列（索引 0 處）是必需的，而索參陣列（索引 12 處）是可選的，只有在包含時"
"才會使用。也可以建立僅包含索引陣列而沒有頂點陣列的網格，但這超出了本教學的範"
"圍。事實上，我們根本不會使用索參陣列。"

msgid ""
"All the other arrays carry information about the vertices. They are optional "
"and will only be used if included. Some of these arrays (e.g. "
"``ARRAY_COLOR``) use one entry per vertex to provide extra information about "
"vertices. They must have the same size as the vertex array. Other arrays (e."
"g. ``ARRAY_TANGENT``) use four entries to describe a single vertex. These "
"must be exactly four times larger than the vertex array."
msgstr ""
"其他所有陣列包含的都是關於頂點的資訊。他們也是可選的，包含時才會用到。有些陣"
"列（例如 `ARRAY_COLOR``）用每個頂點一個元素的形式來提供額外的頂點資訊。他們的"
"大小必須與頂點陣列一致。另一些陣列（例如 ``ARRAY_TANGENT``）用四個元素來描述"
"一個頂點。他們必須正好是頂點陣列的四倍大小。"

msgid ""
"For normal usage, the last three parameters in :ref:"
"`add_surface_from_arrays() <class_arraymesh_method_add_surface_from_arrays>` "
"are typically left empty."
msgstr ""
"正常的使用場景下，:ref:`add_surface_from_arrays() "
"<class_arraymesh_method_add_surface_from_arrays>` 的最後兩個參數通常都是留空"
"的。"

msgid "Setting up the ArrayMesh"
msgstr "設定遊戲區域"

msgid ""
"In the editor, create a :ref:`MeshInstance3D <class_meshinstance3d>` and add "
"an :ref:`ArrayMesh <class_arraymesh>` to it in the Inspector. Normally, "
"adding an ArrayMesh in the editor is not useful, but in this case it allows "
"us to access the ArrayMesh from code without creating one."
msgstr ""
"在編輯器中，建立一個 :ref:`MeshInstance <class_meshinstance>` 並在屬性面板中"
"為其新增一個 :ref:`ArrayMesh <class_arraymesh>`。通常，在編輯器裡新增 "
"ArrayMesh 沒什麼用，但這裡可以讓我們免去用程式碼建立的麻煩，直接使用這個 "
"ArrayMesh。"

msgid "Next, add a script to the MeshInstance3D."
msgstr "將腳本附加到節點。"

msgid "Under ``_ready()``, create a new Array."
msgstr "在 ``_ready()`` 下建立一個新的陣列。"

msgid ""
"This will be the array that we keep our surface information in - it will "
"hold all the arrays of data that the surface needs. Godot will expect it to "
"be of size ``Mesh.ARRAY_MAX``, so resize it accordingly."
msgstr ""
"這將是保存表面資訊的陣列——將保存表面需要的所有資料陣列。Godot 希望它的大小是 "
"``Mesh.ARRAY_MAX``，所以要相應地調整。"

msgid "Next create the arrays for each data type you will use."
msgstr "接下來, 為您將使用的每種資料型別建立陣列."

msgid ""
"Once you have filled your data arrays with your geometry you can create a "
"mesh by adding each array to ``surface_array`` and then committing to the "
"mesh."
msgstr ""
"一旦你用幾何體填充了你的資料陣列, 就可以通過將每個陣列新增到 "
"``surface_array`` , 然後提交到網格中來建立網格."

msgid ""
"In this example, we used ``Mesh.PRIMITIVE_TRIANGLES``, but you can use any "
"primitive type available from mesh."
msgstr ""
"在這個例子中，使用了 ``Mesh.PRIMITIVE_TRIANGLES``，但你也可以使用網格所提供的"
"任何像素型別。"

msgid "Put together, the full code looks like:"
msgstr "把這些放到一起，完整的程式碼是這樣的："

msgid ""
"The code that goes in the middle can be whatever you want. Below we will "
"present some example code for generating a sphere."
msgstr ""
"中間可以放你想要的任何程式碼。下面我們會給出一些範例程式碼，用於生成球體。"

msgid "Generating geometry"
msgstr "建立內容"

msgid ""
"Here is sample code for generating a sphere. Although the code is presented "
"in GDScript, there is nothing Godot specific about the approach to "
"generating it. This implementation has nothing in particular to do with "
"ArrayMeshes and is just a generic approach to generating a sphere. If you "
"are having trouble understanding it or want to learn more about procedural "
"geometry in general, you can use any tutorial that you find online."
msgstr ""
"這是生成球體的範例程式碼。儘管程式碼是用 GDScript 編寫的，但是 Godot 並沒有指"
"定用特定的方式來實作它。這種實作方式與 ArrayMesh 無關，僅僅是一種通用的生成球"
"體的方式。如果您覺得這比較難以理解，或者想更全面地瞭解程式式幾何體，可以在網"
"上尋找相關的教學進行學習。"

msgid "Saving"
msgstr "保存"

msgid ""
"Finally, we can use the :ref:`ResourceSaver <class_resourcesaver>` class to "
"save the ArrayMesh. This is useful when you want to generate a mesh and then "
"use it later without having to re-generate it."
msgstr ""
"最後，我們可以使用 :ref:`ResourceSaver <class_resourcesaver>` 類來保存該 "
"ArrayMesh。當你想生成一個網格，然後在以後使用它而不需要重新生成時，這個方法很"
"有用。"

msgid "Translation status"
msgstr "翻譯狀態"
