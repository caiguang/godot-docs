# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Particle systems (3D)"
msgstr "粒子系統（3D）"

msgid ""
"This section of the tutorial covers (3D) GPU-accelerated particle systems. "
"Most of the things discussed here apply to CPU particles as well."
msgstr ""
"本教學的這一部分介紹 (3D) GPU 加速的粒子系統。這裡討論的大部分內容也適用於 "
"CPU 顆粒。"

msgid "Introduction"
msgstr "前言"

msgid ""
"You can use particle systems to simulate complex physical effects like fire, "
"sparks, smoke, magical effects, and many more. They are very well suited for "
"creating dynamic and organic behavior and adding \"life\" to your scenes."
msgstr ""
"您可以使用粒子系統來模擬複雜的物理效果，例如火焰、火花、煙霧、魔法效果等等。"
"它們非常適合建立動態和有機的行為，並為您的場景新增“生命”。"

msgid ""
"The idea is that a particle is emitted at a fixed interval and with a fixed "
"lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the others and creates the "
"organic look is the randomness that you can add to most of its parameters "
"and behaviors."
msgstr ""
"這個想法是以固定的間隔發射具有固定的壽命的 \"粒子\". 在其生命週期中, 每個粒子"
"都具有相同的基本行為. 讓每個粒子變得不同並提供整體更加 \"有機\" 外觀的是與各"
"個參數相關的 \"隨機性\". 實質上, 建立粒子系統意味著設定基本物理參數, 然後為它"
"們新增隨機性."

msgid ""
"Every particle system you create in Godot consists of two main parts: "
"particles and emitters."
msgstr "您在 Godot 中建立的每個粒子系統都包含兩個主要部分：粒子和發射器。"

msgid "Particles"
msgstr "粒子"

msgid ""
"A particle is the visible part of a particle system. It's what you see on "
"the screen when a particle system is active: The tiny specks of dust, the "
"flames of a fire, the glowing orbs of a magical effect. You can have "
"anywhere between a couple hundred and tens of thousands of particles in a "
"single system. You can randomize a particle's size, its speed and movement "
"direction, and change its color over the course of its lifetime. When you "
"think of a fire, you can think of all the little embers flying away from it "
"as individual particles."
msgstr ""
"粒子是粒子系統的可見部分。這就是當粒子系統處於活動狀態時您在螢幕上看到的內"
"容：微小的塵埃、火焰、魔法效果的發光球體。單一系統中可以有幾百到數萬個粒子。"
"您可以隨機化粒子的大小、速度和運動方向，並在其生命週期中改變其顏色。當你想到"
"火時，你可以把所有從火中飛走的小餘燼想像成單一粒子。"

msgid "Emitters"
msgstr "抖動"

msgid ""
"An emitter is what's creating the particles. Emitters are usually not "
"visible, but they can have a shape. That shape controls where and how "
"particles are spawned, for example whether they should fill a room like dust "
"or shoot away from a single point like a fountain. Going back to the fire "
"example, an emitter would be the heat at the center of the fire that creates "
"the embers and the flames."
msgstr ""
"發射器是產生粒子的東西。發射器通常不可見，但它們可以具有形狀。該形狀控製粒子"
"產生的位置和方式，例如它們是否應該像灰塵一樣充滿房間，或者像噴泉一樣從單點射"
"出。回到火的例子，發射器是火中心的熱量，產生餘燼和火焰。"

msgid "Node overview"
msgstr "節點屬性"

msgid "A list of nodes related to 3D particles"
msgstr "在群組中的節點列表"

msgid "All 3D particle nodes available in Godot"
msgstr "Godot 中可用的所有 3D 粒子節點"

msgid ""
"There are two types of 3D particle systems in Godot: :ref:"
"`class_GPUParticles3D`, which are processed on the GPU, and :ref:"
"`class_CPUParticles3D`, which are processed on the CPU."
msgstr ""
"Godot 中有兩種型別的 3D 粒子系統：在 GPU 上處理的 class_GPUParticles3D 和在 "
"CPU 上處理的 class_CPUParticles3D 。"

#, fuzzy
msgid ""
"CPU particle systems are less flexible than their GPU counterpart, but they "
"work on a wider range of hardware and provide better support for older "
"devices and mobile phones. Because they are processed on the CPU, they are "
"not as performant as GPU particle systems and can't render as many "
"individual particles. In addition they currently do not have all the "
"available options GPU particles have for control."
msgstr ""
"CPU 粒子系統的靈活性不如 GPU 粒子系統，但它們可以在更廣泛的硬體上工作，並為舊"
"裝置和行動電話提供更好的支援。由於它們是在 CPU 上處理的，因此它們的性能不如 "
"GPU 粒子系統，並且無法算繪盡可能多的單個粒子。"

msgid ""
"GPU particle systems run on the GPU and can render hundreds of thousands of "
"particles on modern hardware. You can write custom particle shaders for "
"them, which makes them very flexible. You can also make them interact with "
"the environment by using attractor and collision nodes."
msgstr ""
"GPU 粒子系統在 GPU 上運作，可在現代硬體上算繪數十萬個粒子。您可以為它們編寫自"
"訂粒子著色器，這使得它們非常靈活。您還可以使用吸引器和碰撞節點使它們與環境互"
"動。"

msgid ""
"There are three particle attractor nodes: :ref:"
"`class_GPUParticlesAttractorBox3D`, :ref:"
"`class_GPUParticlesAttractorSphere3D`, and :ref:"
"`class_GPUParticlesAttractorVectorField3D`. An attractor node applies a "
"force to all particles in its reach and pulls them closer or pushes them "
"away based on the direction of that force."
msgstr ""
"共有三個粒子吸引器節點：class_GPUParticlesAttractorBox3D、"
"class_GPUParticlesAttractorSphere3D 和 "
"class_GPUParticlesAttractorVectorField3D。吸引子節點向其範圍內的所有粒子施加"
"力，並根據該力的方向將它們拉近或推開。"

msgid ""
"There are several particle collision nodes. :ref:"
"`class_GPUParticlesCollisionBox3D` and :ref:"
"`class_GPUParticlesCollisionSphere3D` are the simple ones. You can use them "
"to create basic shapes like boxes, a floor, or a wall that particles collide "
"with. The other two nodes provide more complex collision behavior. The :ref:"
"`class_GPUParticlesCollisionSDF3D` is useful when you want indoor scenes to "
"collide with particles without having to create all the individual box and "
"sphere colliders by hand. If you want particles to collide with large "
"outdoor scenes, you would use the :ref:"
"`class_GPUParticlesCollisionHeightField3D` node. It creates a heightmap of "
"your world and the objects in it and uses that for large-scale particle "
"collisions."
msgstr ""
"有多個粒子碰撞節點。 :ref:`class_GPUParticlesCollisionBox3D` 和 :ref:"
"`class_GPUParticlesCollisionSphere3D` 是簡單的。您可以使用它們來建立粒子碰撞"
"的基本形狀，例如盒子、地板或牆壁。另外兩個節點提供更複雜的碰撞行為。當您希望"
"室內場景與粒子碰撞而無需手動建立所有單獨的盒子和球體碰撞器時，"
"class_GPUParticlesCollisionSDF3D 非常有用。如果您希望粒子與大型室外場景發生碰"
"撞，您可以使用 class_GPUParticlesCollisionHeightField3D 節點。它建立您的世界"
"及其中的物件的高度圖，並將其用於大規模粒子碰撞。"

msgid "Basic usage"
msgstr "基本使用"

msgid "Advanced topics"
msgstr "進階匯出"

msgid "Translation status"
msgstr "翻譯狀態"
