# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D text"
msgstr "3D 文字"

msgid "Introduction"
msgstr "前言"

msgid ""
"In a project, there may be times when text needs to be created as part of a "
"3D scene and not just in the HUD. Godot provides 2 methods to do this: the "
"Label3D node and the TextMesh *resource* for a MeshInstance3D node."
msgstr ""
"專案中不僅會要在 HUD 中使用文字，有時也會需要把文字作為 3D 場景的一部分。"
"Godot 為此提供了兩種方法。Label3D 節點以及 MeshInstance 節點的文字網格。"

msgid ""
"Additionally, Godot makes it possible to position Control nodes according to "
"a 3D point's position on the camera. This can be used as an alternative to "
"\"true\" 3D text in situations where Label3D and TextMesh aren't flexible "
"enough."
msgstr ""
"此外，Godot 還可以根據相機上 3D 點的位置來定位控制節點。在Label3D 和 "
"TextMesh 不夠靈活的情況下，這可以用作「真正」3D 文字的替代方案。"

msgid ""
"You can see 3D text in action using the `3D Labels and Texts demo project "
"<https://github.com/godotengine/godot-demo-projects/tree/master/3d/"
"labels_and_texts>`__."
msgstr ""
"除了這份說明文件，你可能也會想看看 `Godot Demo 專案 <https://github.com/"
"godotengine/godot-demo-projects>`_ 。"

msgid ""
"This page does **not** cover how to display a GUI scene within a 3D "
"environment. For information on how to achieve that, see the `GUI in 3D "
"<https://github.com/godotengine/godot-demo-projects/tree/master/viewport/"
"gui_in_3d>`__ demo project."
msgstr ""
"若欲檢視範例專案，請參考作業系統示範專案： https://github.com/godotengine/"
"godot-demo-projects/tree/master/misc/os_test"

msgid "Label3D"
msgstr "Label (標齊)"

msgid ""
"Label3D behaves like a Label node, but in 3D space. Unlike the Label node, "
"this Label3D node does **not** inherit properties of a GUI theme. However, "
"its look remains customizable and uses the same font subresource as Control "
"nodes (including support for :abbr:`MSDF (Multi-channel Signed Distance "
"Font)` font rendering)."
msgstr ""
"Label3D 與標籤節點行為類似，只不過是換到了 3D 空間中。與標籤節點不同，它是不"
"會繼承 GUI 主題屬性的。不過，還是可以自訂外觀的，使用的也是和控制項節點同樣"
"的 DynamicFont 和 BitmapFont 子資源。"

msgid "Advantages"
msgstr "優勢"

msgid ""
"Label3D is faster to generate than TextMesh. While both use a caching "
"mechanism to only render new glyphs once, Label3D will still be faster to "
"(re)generate, especially for long text. This can avoid stuttering during "
"gameplay on low-end CPUs or mobile."
msgstr ""
"Label3D 的產生速度比 TextMesh 更快。雖然兩者都使用快取機制僅算繪一次新字形，"
"但 Label3D 的（重新）產生速度仍然更快，尤其是對於長文字。這可以避免在低階 "
"CPU 或行動裝置上玩遊戲時出現卡頓。"

msgid ""
"Label3D can use bitmap fonts and dynamic fonts (with and without :abbr:`MSDF "
"(Multi-channel Signed Distance Font)` or mipmaps). This makes it more "
"flexible on that aspect compared to TextMesh, especially for rendering fonts "
"with self-intersecting outlines."
msgstr ""
"Label3D 可以使用點陣字形和動態字型（有或沒有 MSDF（多通道符號距離字型）或 "
"mipmap）。與 TextMesh 相比，這使得它在這方面更加靈活，特別是對於算繪具有自相"
"交輪廓的字形。"

msgid ""
"See :ref:`doc_gui_using_fonts` for guidelines on configuring font imports."
msgstr "請參閱 doc_gui_using_fonts 以了解設定字型匯入的指南。"

msgid "Limitations"
msgstr "限制"

msgid ""
"By default, Label3D has limited interaction with a 3D environment. It can be "
"occluded by geometry and lit by light sources if the **Shaded** flag is "
"enabled. However, it will not cast shadows even if **Cast Shadow** is set to "
"**On** in the Label3D's GeometryInstance3D properties. This is because the "
"node internally generates a quad mesh (one glyph per quad) with transparent "
"textures and has the same limitations as Sprite3D. Transparency sorting "
"issues can also become apparent when several Label3Ds overlap, especially if "
"they have outlines."
msgstr ""
"Label3D 和 3D 環境的互動很少，著色旗標啟用時能夠接受光照、被光源著色，但即便 "
"GeometryInstance3D 節點打開了陰影投射，它也不會投射陰影。這是因為該節點是一個"
"帶透明紋理的四邊形網格（每個四邊形一個字形），有著和 Sprite3D 一樣的限制。詳"
"情請參閱:ref:`這個頁面 <doc_3d_rendering_limitations_transparency_sorting>`。"

msgid ""
"This can be mitigated by setting the Label3D's transparency mode to **Alpha "
"Cut**, at the cost of less smooth text rendering. The **Opaque Pre-Pass** "
"transparency mode can preserve text smoothness while allowing the Label3D to "
"cast shadows, but some transparency sorting issues will remain."
msgstr ""
"這可以透過將 Label3D 的透明度模式設為 **Alpha Cut** 來緩解，但代價是文字算繪"
"不太流暢。 **Opaque Pre-Pass** 透明度模式可以保持文字平滑度，同時允許 "
"Label3D 投射陰影，但一些透明度排序問題仍然存在。"

msgid ""
"See :ref:`Transparency sorting "
"<doc_3d_rendering_limitations_transparency_sorting>` section in the 3D "
"rendering limitations page for more information."
msgstr ""
"有關詳細信息，請參閱 3D 算繪限制頁面中的透明度排序 "
"<doc_3d_rendering_limitations_transparency_sorting>` 部分。"

msgid "TextMesh"
msgstr "下一步"

msgid ""
"The TextMesh resource has similarities to Label3D. They both display text in "
"a 3D scene, and will use the same font subresource. However, instead of "
"generating transparent quads, TextMesh generates 3D geometry that represents "
"the glyphs' contours and has the properties of a mesh. As a result, a "
"TextMesh is shaded by default and automatically casts shadows onto the "
"environment. A TextMesh can also have a material applied to it (including "
"custom shaders)."
msgstr ""
"TextMesh（文字網格）資源和 Label3D 類似，都能夠在 3D 場景中顯示文字，使用的是"
"相同的字形子資源。但 TextMesh 生成的不是透明四邊形，而是代表字形輪廓的 3D 網"
"格，具有和網格一樣的屬性。因此，TextMesh 預設是開啟著色的，會自動在環境中投射"
"陰影。TextMesh 也可以設定材質（包括自訂著色器）。"

msgid ""
"Here is an example of a texture and how it's applied to the mesh. You can "
"use the texture below as a reference for the generated mesh's UV map:"
msgstr ""
"這是為網格應用紋理的範例。你可以使用下面的紋理作為生成網格 UV 貼圖的參考："

msgid "TextMesh has a few advantages over Label3D:"
msgstr "相對於 Label3D 而言，TextMesh 有以下優點："

msgid "TextMesh can use a texture to modify text color on a per-side basis."
msgstr "TextMesh 可以使用紋理來修改文字各個面的顏色。"

msgid "TextMesh geometry can have actual depth to it, giving glyphs a 3D look."
msgstr "TextMesh 幾何體具有深度，字形看上去是 3D 的。"

msgid "TextMesh can use custom shaders, unlike Label3D."
msgstr "TextMesh 可以使用自訂的著色器，而 Label3D 無法使用。"

msgid "There are some limitations to TextMesh:"
msgstr "有幾點需要注意："

msgid ""
"No built-in outline support, unlike Label3D. This can be simulated using "
"custom shaders though."
msgstr "沒有內建的輪廓支援，而 Label3D 支援。但是可以使用自訂著色器模擬。"

msgid ""
"Only dynamic fonts are supported (``.ttf``, ``.otf``, ``.woff``, ``."
"woff2``). Bitmap fonts in the ``.fnt`` or ``.font`` formats are **not** "
"supported."
msgstr ""
"僅支援動態字形（``.ttf``、``.otf``、``.woff``、``.woff2``）。**不支援** ``."
"fnt`` 和 ``.font`` 格式的點陣字型。"

msgid ""
"Fonts with self-intersecting outlines will not render correctly. If you "
"notice rendering issues on fonts downloaded from websites such as Google "
"Fonts, try downloading the font from the font author's official website "
"instead."
msgstr ""
"無法正確算繪輪廓自相交的字形。如果使用從 Google Fonts 等處下載到的字形時出現"
"算繪問題，請嘗試改為從作者的官方網站下載。"

msgid "Projected Label node (or any other Control)"
msgstr "投影 Label 節點（或者其他 Control 節點）"

msgid ""
"There is a last solution that is more complex to set up, but provides the "
"most flexibility: projecting a 2D node onto 3D space. This can be achieved "
"using the return value of :ref:"
"`unproject_position<class_Camera3D_method_unproject_position>` method on a "
"Camera3D node in a script's ``_process()`` function. This return value "
"should then be used to set the ``position`` property of a Control node."
msgstr ""
"還有最後一種設定起來更麻煩的解決方案，但是靈活性更高：將 2D 節點投影到 3D 空"
"間中。做法是在腳本的 ``_process()`` 函式中使用 Camera3D 節點的 :ref:"
"`unproject_position<class_Camera3D_method_unproject_position>` 的返回值。使用"
"這個返回值來設定 Control 節點的 ``position`` 屬性。"

msgid ""
"See the `3D waypoints <https://github.com/godotengine/godot-demo-projects/"
"tree/master/3d/waypoints>`__ demo for an example of this."
msgstr ""
"若欲檢視範例專案，請參考作業系統示範專案： https://github.com/godotengine/"
"godot-demo-projects/tree/master/misc/os_test"

msgid ""
"Any Control node can be used, including Label, RichTextLabel or even nodes "
"such as Button. This allows for powerful formatting and GUI interaction."
msgstr ""
"Label、RichTextLabel 等任何 Control 節點，甚至 Button 這樣的節點都可以用這種"
"方法。這樣就能夠實作強大的格式和 GUI 互動。"

msgid ""
"The script-based approach allows for complete freedom in positioning. For "
"example, this makes it considerably easier to pin Controls to the screen's "
"edges when they go off-screen (for in-game 3D markers)."
msgstr ""
"基於腳本的做法能夠在定位方面做到最大的自由度。例如，這樣就能夠在超出螢幕範圍"
"後將 Control 吸附到螢幕的邊緣（用於在遊戲中實作 3D 標記）。"

msgid ""
"Control theming is obeyed. This allows for easier customization that "
"globally applies to the project."
msgstr "Control 主題仍然有效。這樣實作自訂專案全域的設定就更方便。"

msgid ""
"Projected Controls cannot be occluded by 3D geometry in any way. You can use "
"a RayCast to fully hide the control if its target position is occluded by a "
"collider, but this doesn't allow for partially hiding the control behind a "
"wall."
msgstr ""
"投影的 Control 無法以任何形式被 3D 幾何體遮擋。目標位置被遮擋時，你可以借助 "
"RayCast 將該控制項完全隱藏，但是無法實作位於牆壁後面時只隱藏部分區域的效果。"

msgid ""
"Changing text size depending on distance by adjusting the Control's "
"``scale`` property is possible, but it needs to be done manually. Label3D "
"and TextMesh automatically take care of this, at the cost of less "
"flexibility (can't set a minimum/maximum text size in pixels)."
msgstr ""
"可以根據距離調整 Control 的 ``scale`` 屬性，從而調整文字的大小，但是需要手動"
"縮放。Label3D 和 TextMesh 會自動處理，但是靈活性不足（無法設定最小/最大的文字"
"像素大小）。"

msgid ""
"Handling resolution and aspect ratio changes must be taken into account in "
"the script, which can be challenging."
msgstr "腳本中必須考慮處理解析度和寬高比的變化，這可能具有挑戰性。"

msgid "Should I use Label3D, TextMesh or a projected Control?"
msgstr "我應該使用 Label3D、TextMesh 還是投影控制？"

msgid ""
"In most scenarios, Label3D is recommended as it's easier to set up and "
"provides higher rendering quality (especially if 3D antialiasing is "
"disabled)."
msgstr ""
"在大多數情況下，建議使用 Label3D，因為它更易於設定並提供更高的算繪品質（特別"
"是在禁用 3D 抗鋸齒功能的情況下）。"

msgid ""
"For advanced use cases, TextMesh is more flexible as it allows styling the "
"text with custom shaders. Custom shaders allow for modifying the final "
"geometry, such as curving the text along a surface. Since the text is actual "
"3D geometry, the text can optionally have depth to it and can also "
"contribute to global illumination."
msgstr ""
"對於進階用例，TextMesh 更加靈活，因為它允許使用自訂著色器來設定文字樣式。自訂"
"著色器允許修改最終的幾何形狀，例如沿著表面彎曲文字。由於文字是實際的 3D 幾何"
"體，因此文字可以選擇具有深度，並且還可以有助於全局照明。"

msgid ""
"If you need features such as BBCode or Control theming support, then using a "
"projected RichTextLabel node is the only way to go."
msgstr ""
"如果您需要 BBCode 或 Control 主題支援等功能，那麼使用投影的 RichTextLabel 節"
"點是唯一的方法。"

msgid "Translation status"
msgstr "翻譯狀態"
