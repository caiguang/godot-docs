# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Model export considerations"
msgstr "其他建議"

msgid ""
"Before exporting a 3D model from a 3D modeling application, such as Blender, "
"there are some considerations that should be taken into account to ensure "
"that the model follows the conventions and best practices for Godot."
msgstr ""

msgid "3D asset direction conventions"
msgstr "命名公約"

msgid ""
"Godot uses a right-handed, Y-is-up coordinate system, with the -Z axis as "
"the camera's forward direction. This is the same as OpenGL. This implies "
"that +Z is back, +X is right, and -X is left for a camera."
msgstr ""
"Godot 使用 Y 朝上的右手坐標系，-Z 軸是相機的前方。這是與 OpenGL 一致的。即對"
"於相機而言，+Z 為後方、+X 為右側、-X 為左側。"

msgid ""
"The convention for 3D assets is to face the opposite direction as the "
"camera, so that characters and other assets are facing the camera by "
"default. This convention is extremely common in 3D modeling applications, "
"and is `codified in glTF as part of the glTF 2.0 specification <https://"
"registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-"
"units>`__. This means that for oriented 3D assets (such as characters), the "
"+Z axis is the direction of the front, so -Z is the rear, +X is the left "
"side, and -X is the right side for a 3D asset. In Blender, this means that "
"+Y is rear and -Y is front for an asset."
msgstr ""
"傳統上，3D 素材的朝向與相機相對，所以角色和其他素材預設應該面朝相機。這種約定"
"在 3D 建模軟體中極其常見，`在 glTF 2.0 規範中對 glTF 有相關成文的規定 "
"<https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-"
"and-units>`__。這意味著確定 3D 素材（例如角色）朝向時，3D 素材的 +Z 軸是前"
"方、-Z 軸是後方、+X 為左側、-X 為右側。在 Blender 中，也就是 +Y 為角色後方、-"
"Y 為角色前方。"

msgid ""
"When rotating an oriented 3D asset in Godot, use the ``use_model_front`` "
"option on the ``look_at`` functions, and use the ``Vector3.MODEL_*`` "
"constants to perform calculations in the oriented asset's local space."
msgstr ""
"在 Godot 中旋轉 3D 素材時，請為 ``look_at`` 函式指定 ``use_model_front`` 選"
"項，使用 ``Vector3.MODEL_*`` 常數在素材的局部空間中進行計算。"

msgid ""
"For assets without an intrinsic front side or forward direction, such as a "
"game map or terrain, take note of the cardinal directions instead. The "
"convention in Godot and the vast majority of other applications is that +X "
"is east and -X is west. Due to Godot's right-handed Y-is-up coordinate "
"system, this implies that +Z is south and -Z is north. In Blender, this "
"means that +Y is north and -Y is south."
msgstr ""
"對於地圖、地形等沒有正反、前後概念的素材，請改用東南西北等基本方向。Godot 和"
"大多數其他程式都約定 +X 為東、-X 為西。由於 Godot 使用的是 Y 朝上的右手坐標"
"系，所以 +Z 為南、-Z 為北。在 Blender 中，這意味著 +Y 為北、-Y 為南。"

msgid "Exporting textures separately"
msgstr "匯入紋理"

msgid ""
"While textures can be exported with a model in certain file formats, such as "
"glTF 2.0, you can also export them separately. Godot uses PBR (physically "
"based rendering) for its materials, so if a texturing program can export PBR "
"textures they can work in Godot. This includes the `Substance suite <https://"
"www.substance3d.com/>`__, `ArmorPaint (open source) <https://armorpaint.org/"
">`__, and `Material Maker (open source) <https://github.com/RodZill4/"
"material-maker>`__."
msgstr ""
"雖然紋理可以和模型一起以某些檔案格式匯出, 如glTF 2.0, 但您也可以單獨匯出它們."
"Godot的材質使用PBR(基於物理的算繪), 所以如果一個紋理程式可以匯出PBR紋理, 它們"
"就可以在Godot中工作. 這包括 `Substance suite <https://www.substance3d.com/"
">`__ , `ArmorPaint (開源) <https://armorpaint.org/>`__ , `Material Maker (開"
"源) <https://github.com/RodZill4/material-maker>`__ ."

msgid ""
"For more information on Godot's materials, see :ref:"
"`doc_standard_material_3d`."
msgstr "更多有關光照烘焙的資訊，請參考 :ref:`doc_baked_lightmaps` 。"

msgid "Exporting considerations"
msgstr "其他建議"

msgid ""
"Since GPUs can only render triangles, meshes that contain quads or N-gons "
"have to be *triangulated* before they can be rendered. Godot can triangulate "
"meshes on import, but results may be unpredictable or incorrect, especially "
"with N-gons. Regardless of the target application, triangulating *before* "
"exporting the scene will lead to more consistent results and should be done "
"whenever possible."
msgstr ""
"由於 GPU 只能算繪三角形，所以包含四邊形或 N 邊形的網格必須在算繪前進行*三角剖"
"分*。Godot 可以在匯入時對網格進行三角剖分，但結果可能無法預測或不正確，特別是"
"對於 N 邊形。無論目標應用是什麼，在匯出場景之前進行三角剖分會得到更一致的結"
"果，因此應該盡可能地進行三角剖分。"

msgid ""
"To avoid issues with incorrect triangulation after importing in Godot, it is "
"recommended to make the 3D modeling software triangulate objects on its own. "
"In Blender, this can be done by adding a Triangulate modifier to your "
"objects and making sure **Apply Modifiers** is checked in the export dialog. "
"Alternatively, depending on the exporter, you may be able to find and enable "
"a **Triangulate Faces** option in the export dialog."
msgstr ""
"為了避免在Godot中匯入後出現三角剖分不正確的問題, 建議讓3D DCC自行對物件進行三"
"角剖分. 在Blender中, 可以通過向物件新增三角剖分修改器, 並確保在匯出對話方塊中"
"勾選 **應用修改器** 來實作. 另外, 根據匯出工具的不同, 您可以在匯出對話方塊中"
"找到並啟用 **Triangulate Faces** 選項."

msgid ""
"To avoid issues with 3D selection in the editor, it is recommended to apply "
"the object transform in the 3D modeling software before exporting the scene."
msgstr ""
"為了避免在編輯器中出現3D選擇的問題, 建議在匯出場景前在3D DCC中應用物件變換."

msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""
"有一點很重要的是，匯入後的網格並不會被骨骼變形。請確保在匯入前以您慣用的 3D "
"編輯器將骨骼重設至 T-Pose 或預設靜止姿勢。"

msgid "Lighting considerations"
msgstr "其他建議"

msgid ""
"While it's possible to import lights from a 3D scene using the glTF, ``."
"blend`` or Collada formats, it's generally advised to design the scene's "
"lighting in the Godot editor after importing the scene."
msgstr ""
"雖然可以使用 glTF、``.blend`` 或 Collada 格式從 3D 場景匯入燈光，但通常建議在"
"匯入場景後在 Godot 編輯器中設計場景的燈光。"

msgid ""
"This allows you to get a more accurate feel for the final result, as "
"different engines will render lights in a different manner. This also avoids "
"any issues with lights appearing excessively strong or faint as a result of "
"the import process."
msgstr ""
"這可以讓您對最終結果有更準確的感覺，因為不同的引擎將以不同的方式算繪燈光。這"
"也可以避免因匯入過程而導致燈光顯得過強或過弱的任何問題。"

msgid "Translation status"
msgstr "翻譯狀態"
