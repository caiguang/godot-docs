# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using NavigationServer"
msgstr "使用 NavigationServer"

msgid ""
"2D and 3D version of the NavigationServer are available as :ref:"
"`NavigationServer2D<class_NavigationServer2D>` and :ref:"
"`NavigationServer3D<class_NavigationServer3D>` respectively."
msgstr ""
"NavigationServer 即導覽伺服器。2D 和 3D 版本的 NavigationServer 分別為 :ref:"
"`NavigationServer2D<class_NavigationServer2D>` 和 :ref:"
"`NavigationServer3D<class_NavigationServer3D>`。"

msgid ""
"Both 2D and 3D use the same NavigationServer with NavigationServer3D being "
"the primary server. The NavigationServer2D is a frontend that converts 2D "
"positions into 3D positions and back. Hence it is entirely possible (if not "
"a little cumbersome) to exclusively use the NavigationServer3D API for 2D "
"navigation."
msgstr ""
"2D 和 3D 使用的 NavigationServer 是一樣的，NavigationServer3D 是主要伺服器。"
"NavigationServer2D 只是一個前端，會進行 2D 位置和 3D 位置的相互轉換。因此，完"
"全可以只用 NavigationServer3D 的 API 來實作 2D 導覽（就是會有點繁瑣）。"

msgid "Communicating with the NavigationServer"
msgstr "與其他腳本語言溝通"

#, fuzzy
msgid ""
"To work with the NavigationServer means to prepare parameters for a "
"**query** that can be sent to the NavigationServer for updates or requesting "
"data."
msgstr ""
"要使用 NavigationServer 首先就需要為 ``query``（請求）準備參數，這個請求會被"
"發送給 NavigationServer，用來進行更新和資料的請求。"

#, fuzzy
msgid ""
"To reference the internal NavigationServer objects like maps, regions and "
"agents RIDs are used as identification numbers. Every navigation related "
"node in the scene tree has a function that returns the RID for this node."
msgstr ""
"地圖、區塊、代理等 NavigationServer 內部的物件使用 RID 來進行引用，這是一種用"
"作識別字的數字。場景樹中每個導覽相關的節點都提供了返回該節點 RID 的函式。"

msgid "Threading and Synchronization"
msgstr "建立內容"

#, fuzzy
msgid ""
"The NavigationServer does not update every change immediately but waits "
"until the end of the **physics frame** to synchronize all the changes "
"together."
msgstr ""
"NavigationServer 不會立即為所有更改執行更新，而是會等到 ``physics_frame`` 的"
"結尾再同步所有更改。"

#, fuzzy
msgid ""
"Waiting for synchronization is required to apply changes to all maps, "
"regions and agents. Synchronization is done because some updates like a "
"recalculation of the entire navigation map are very expensive and require "
"updated data from all other objects. Also the NavigationServer uses a "
"**threadpool** by default for some functionality like avoidance calculation "
"between agents."
msgstr ""
"對地圖、區塊、代理進行更改都需要等待同步。之所以要進行同步，是因為部分更新的"
"開銷非常大，並且需要所有其他物件更新後的資料，例如重新計算整個導覽地圖。另外 "
"NavigationServer 的部分功能預設會使用 ``threadpool``（執行緒池），例如代理之"
"間的避障計算。"

#, fuzzy
msgid ""
"Waiting is not required for most ``get()`` functions that only request data "
"from the NavigationServer without making changes. Note that not all data "
"will account for changes made in the same frame. E.g. if an avoidance agent "
"changed the navigation map this frame the ``agent_get_map()`` function will "
"still return the old map before the synchronization. The exception to this "
"are nodes that store their values internally before sending the update to "
"the NavigationServer. When a getter on a node is used for a value that was "
"updated in the same frame it will return the already updated value stored on "
"the node."
msgstr ""
"大多數 ``get()`` 函式都不需要等待，因為這些函式只會從 NavigationServer 請求資"
"料，不會進行修改。請注意，並不是所有資料都會考慮到同一影格裡做出的更改。例"
"如，如果避障 ``agent``（代理）在目前影格更改了導覽 ``map``（地圖），那麼 "
"``agent_get_map()`` 函式在同步之前就仍然會返回舊的地圖。部分節點會在向 "
"NavigationServer 發送更新前在內部儲存對應的值，所以這些節點屬於例外。在這種節"
"點上使用某個值的 getter 時，如果同一影格存在更新，那麼返回的就是儲存在該節點"
"上的更新後的值。"

#, fuzzy
msgid ""
"The NavigationServer is **thread-safe** as it places all API calls that want "
"to make changes in a queue to be executed in the synchronization phase. "
"Synchronization for the NavigationServer happens in the middle of the "
"physics frame after scene input from scripts and nodes are all done."
msgstr ""
"NavigationServer 是 ``thread-safe``（執行緒安全）的，因為它會把所有進行更改"
"的 API 呼叫放在佇列中，在同步階段再執行。NavigationServer 的同步發生在物理影"
"格，在腳本以及節點的場景輸入之後。"

#, fuzzy
msgid ""
"The important takeaway is that most NavigationServer changes take effect "
"after the next physics frame and not immediately. This includes all changes "
"made by navigation related nodes in the scene tree or through scripts."
msgstr ""
"劃重點：大多數對 NavigationServer 的更改都會在下一個物理影格之後生效，不會立"
"即生效。包括場景樹中導覽相關節點做出的更改，以及腳本做出的更改。"

msgid ""
"The following functions will be executed in the synchronization phase only:"
msgstr "以下函式只會在同步階段執行："

#, fuzzy
msgid "``map_set_active()``"
msgstr "map_set_active()"

#, fuzzy
msgid "``map_set_up()``"
msgstr "map_set_up()"

#, fuzzy
msgid "``map_set_cell_size()``"
msgstr "map_set_cell_size()"

#, fuzzy
msgid "``map_set_edge_connection_margin()``"
msgstr "map_set_edge_connection_margin()"

#, fuzzy
msgid "``region_set_map()``"
msgstr "region_set_map()"

#, fuzzy
msgid "``region_set_transform()``"
msgstr "拉伸變換"

#, fuzzy
msgid "``region_set_enter_cost()``"
msgstr "region_set_enter_cost()"

#, fuzzy
msgid "``region_set_travel_cost()``"
msgstr "region_set_travel_cost()"

#, fuzzy
msgid "``region_set_navigation_layers()``"
msgstr "region_set_navigation_layers()"

#, fuzzy
msgid "``region_set_navigation_mesh()``"
msgstr "建立導覽 (-navmesh)"

#, fuzzy
msgid "``agent_set_map()``"
msgstr "agent_set_map()"

#, fuzzy
msgid "``agent_set_neighbor_dist()``"
msgstr "agent_set_neighbor_dist()"

#, fuzzy
msgid "``agent_set_max_neighbors()``"
msgstr "agent_set_max_neighbors()"

#, fuzzy
msgid "``agent_set_time_horizon()``"
msgstr "agent_set_time_horizon()"

#, fuzzy
msgid "``agent_set_radius()``"
msgstr "agent_set_radius()"

#, fuzzy
msgid "``agent_set_max_speed()``"
msgstr "agent_set_max_speed()"

#, fuzzy
msgid "``agent_set_velocity()``"
msgstr "agent_set_velocity()"

#, fuzzy
msgid "``agent_set_target_velocity()``"
msgstr "agent_set_target_velocity()"

#, fuzzy
msgid "``agent_set_position()``"
msgstr "agent_set_position()"

#, fuzzy
msgid "``agent_set_ignore_y()``"
msgstr "agent_set_ignore_y()"

#, fuzzy
msgid "``agent_set_callback()``"
msgstr "agent_set_callback()"

#, fuzzy
msgid "``free()``"
msgstr "free()"

msgid "2D and 3D NavigationServer differences"
msgstr "2D 和 3D NavigationServer 的區別"

msgid ""
"NavigationServer2D and NavigationServer3D are equivalent in functionality "
"for their dimension and both use the same NavigationServer behind the scene."
msgstr ""
"NavigationServer2D 和 NavigationServer3D 在各自維度中的功能是等價的，底層使用"
"的相同的 NavigationServer。"

#, fuzzy
msgid ""
"Strictly technical a NavigationServer2D is a myth. The NavigationServer2D is "
"a frontend to facilitate conversions of ``Vector2(x, y)`` to ``Vector3(x, "
"0.0, z)`` and back for the NavigationServer3D API. 2D uses a flat 3D mesh "
"pathfinding and the NavigationServer2D facilitates the conversions. When a "
"guide uses just NavigationServer without the 2D or 3D suffix it usually "
"works for both servers by exchange ``Vector2(x, y)`` with ``Vector3(x, 0.0, "
"z)`` or reverse."
msgstr ""
"從嚴格的技術角度來說，NavigationServer2D 是一個神話。 NavigationServer2D 是一"
"個前端，用來幫助 NavigationServer3D API 實作 Vector2(x, y) 與 Vector3(x, "
"0.0, z) 之間的相互轉換。 2D 使用平面 3D 網格尋路，NavigationServer2D 有助於轉"
"換。當指南僅使用不含 2D 或 3D 字尾的 NavigationServer 時，它通常透過交換 "
"Vector2(x, y) 與 Vector3(x, 0.0, z) 或相反的方式適用於兩個伺服器。"

#, fuzzy
msgid ""
"Technically it is possible to use the tools for creating navigation meshes "
"in one dimension for the other dimension, e.g. baking a 2D navigation mesh "
"with the 3D NavigationMesh when using flat 3D source geometry or creating 3D "
"flat navigation meshes with the polygon outline draw tools of "
"NavigationRegion2D and NavigationPolygons."
msgstr ""
"從技術上講，可以使用工具為其他維度建立導覽網格，例如使用平面 3D 源幾何時，使"
"用 3D 導覽網格烘焙 2D 導覽網格，或使用 NavigationRegion2D 和 "
"NavigationPolygons 的多邊形輪廓繪製工具建立 3D 平面導覽網格。"

msgid ""
"Any RID created with the NavigationServer2D API works on the "
"NavigationServer3D API as well and both 2D and 3D avoidance agents can exist "
"on the same map."
msgstr ""
"使用 NavigationServer2D API 建立的任何 RID 也適用於 NavigationServer3D API，"
"而 2D 和 3D 迴避代理可以存在於同一地圖上。"

#, fuzzy
msgid ""
"Regions created in 2D and 3D will merge their navigation meshes when placed "
"on the same map and merge conditions apply. The NavigationServer does not "
"discriminate between NavigationRegion2D and NavigationRegion3D nodes as both "
"are regions on the server. By default those nodes register on different "
"navigation maps so this merge can only happen when maps are changed manually "
"e.g. with scripts."
msgstr ""
"在 2D 和 3D 中建立的區域在放置在同一地圖上時將合併其導覽網格，並且適用合併條"
"件。 NavigationServer 不會區分 NavigationRegion2D 和 NavigationRegion3D 節"
"點，因為兩者都是伺服器上的區域。預設情況下，這些節點註冊在不同的導覽地圖上，"
"因此只有在手動更改地圖（例如使用腳本）時才會發生這種合併。"

msgid ""
"Actors with avoidance enabled will avoid both 2D and 3D avoidance agents "
"when placed on the same map."
msgstr "啟用迴避的 Actor 在放置在同一張地圖上時將同時迴避 2D 和 3D 迴避代理。"

msgid ""
"It is not possible to use NavigationServer2D while disabling 3D on a Godot "
"custom build."
msgstr "在 Godot 自訂建置上停用 3D 時，無法使用 NavigationServer2D。"

msgid "Waiting for synchronization"
msgstr "撰寫自定說明文件"

msgid ""
"At the start of the game, a new scene or procedural navigation changes any "
"path query to a NavigationServer will return empty or wrong."
msgstr ""
"在遊戲開始時，新場景或程式導覽發生變化，對導覽伺服器的任何路徑查詢都將傳回空"
"或錯誤。"

#, fuzzy
msgid ""
"The navigation map is still empty or not updated at this point. All nodes "
"from the scene tree need to first upload their navigation related data to "
"the NavigationServer. Each added or changed map, region or agent need to be "
"registered with the NavigationServer. Afterward the NavigationServer "
"requires a **physics frame** for synchronization to update the maps, regions "
"and agents."
msgstr ""
"此時導覽地圖仍為空或未更新。 SceneTree 中的所有節點都需要先將其導覽相關資料上"
"傳至 NavigationServer。每個新增或變更的地圖、區域或代理程式都需要向導覽伺服器"
"註冊。之後，導覽伺服器需要一個「physical_frame」來進行同步，以更新地圖、區域"
"和代理程式。"

#, fuzzy
msgid ""
"One workaround is to make a deferred call to a custom setup function (so all "
"nodes are ready). The setup function makes all the navigation changes, e.g. "
"adding procedural stuff. Afterwards the function waits for the next physics "
"frame before continuing with path queries."
msgstr ""
"一種解決方法是延遲呼叫自訂設定函式（以便所有節點都準備就緒）。設定函式進行所"
"有導覽更改，例如新增程式內容。然後，函式在繼續路徑查詢之前等待下一個物理影"
"格。"

msgid "Server Avoidance Callbacks"
msgstr "伺服器迴避回調"

#, fuzzy
msgid ""
"If RVO avoidance agents are registered for avoidance callbacks the "
"NavigationServer dispatches their ``velocity_computed`` signals just before "
"the PhysicsServer synchronization."
msgstr ""
"如果 RVO 迴避代理程式註冊為迴避回調，則導覽伺服器會在實體伺服器同步之前調度其"
"「safe_velocity」訊號。"

msgid ""
"To learn more about NavigationAgents see :ref:"
"`doc_navigation_using_navigationagents`."
msgstr "GDScript 亦支援 :ref:`doc_gdscript_printf` 。"

msgid ""
"The simplified order of execution for NavigationAgents that use avoidance:"
msgstr "使用迴避的導覽代理的簡化執行順序："

msgid "physics frame starts."
msgstr "物理屬性"

#, fuzzy
msgid "``_physics_process(delta)``."
msgstr "物理過程處理。"

#, fuzzy
msgid "``set_velocity()`` on NavigationAgent Node."
msgstr "NavigationAgent 節點上的 set_velocity()。"

msgid "Agent sends velocity and position to NavigationServer."
msgstr "代理將速度和位置傳送到導覽伺服器。"

msgid "NavigationServer waits for synchronization."
msgstr "導覽伺服器等待同步。"

msgid ""
"NavigationServer synchronizes and computes avoidance velocities for all "
"registered avoidance agents."
msgstr "導覽伺服器同步並計算所有註冊迴避代理的迴避速度。"

#, fuzzy
msgid ""
"NavigationServer sends safe velocity vector with signals for each registered "
"avoidance agents."
msgstr ""
"NavigationServer 會向每個註冊的迴避代理程式發送包含訊號的 safe_velocity 向"
"量。"

#, fuzzy
msgid ""
"Agents receive the signal and move their parent e.g. with ``move_and_slide`` "
"or ``linear_velocity``."
msgstr ""
"代理程式接收訊號並移動其父級，例如使用 move_and_slide 或 Linear_velocity。"

msgid "PhysicsServer synchronizes."
msgstr "實體伺服器同步。"

msgid "physics frame ends."
msgstr "物理框架結束。"

#, fuzzy
msgid ""
"Therefore moving a physicsbody actor in the callback function with the safe "
"velocity is perfectly thread- and physics-safe as all happens inside the "
"same physics frame before the PhysicsServer commits to changes and does its "
"own calculations."
msgstr ""
"因此，使用 safe_velocity 在回調函式中移動物理主體 actor 是完全線程和物理安全"
"的，因為在實體伺服器提交更改並進行自己的計算之前，所有操作都發生在同一個物理"
"影格內。"

msgid "Translation status"
msgstr "翻譯狀態"
