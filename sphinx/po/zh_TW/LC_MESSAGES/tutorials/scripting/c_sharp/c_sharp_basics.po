# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 基礎"

msgid "Introduction"
msgstr "前言"

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"本頁提供了 C# 的簡介，包含 C# 為何以及如何在 Godot 中使用。之後，建議您也閱"
"讀 :ref:`如何使用特定功能 <doc_c_sharp_features>` 、:ref:`C# 與 GDScript API "
"的比較 <doc_c_sharp_differences>` 以及 (再次) 閱讀按部就班教學中的 :ref:`腳本"
"段落 <doc_scripting>` 。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""
"C# 是由 Microsoft 開發的高級程式設計語言。在 Godot 中，它是使用 .NET 6.0 實作"
"的。"

#, fuzzy
msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""
"使用 Godot 4 以 C# 編寫的專案目前無法匯出到 Web。若要在 Web 平台上使用 C#，請"
"改用 Godot 3。"

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"本教學 **不是** 完整的 C# 語言教學。若您不熟悉 C# 的語法與功能，請參考 "
"`Microsoft C# 指南 <https://docs.microsoft.com/zh-tw/dotnet/csharp/index>`_ "
"或尋找其它合適的介紹。"

msgid "Prerequisites"
msgstr "先決條件"

msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot 捆綁了運作已經編譯好的遊戲所需的 .NET 部分，但 Godot 不包括建構和編譯遊"
"戲所需的 MSBuild 和 C# 編譯器等工具。這些工具包含在 .NET SDK 中，需要單獨安"
"裝。"

msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr ""
"總之就是必須安裝 Visual Studio 或 Mono (依據作業系統而異) **並且** 安裝有啟"
"用 Mono 版本的 Godot。"

msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"從 `.NET 下載頁面 <https://dotnet.microsoft.com/download>`__ 下載並安裝SDK的"
"最新穩定版本。"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr "如果您使用 64 位版本的 Godot，請務必安裝 64 位版本的 SDK。"

msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"必須使用有啟用 Mono 支援的 Godot 版本，請確保下載 **Mono 版** 的 Godot。若是"
"從原始碼建置 Godot，請確保遵守 :ref:`doc_compiling_with_mono` 頁面中的步驟來"
"啟用 Mono 支援。"

msgid "Configuring an external editor"
msgstr "設定外部編輯器"

msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot 中的腳本編輯器僅對 C# 有最小限度的支援。建議使用外部 IDE 或編輯器，如 "
"`Visual Studio Code <https://code.visualstudio.com/>`_ 或 MonoDevelop。這些編"
"輯器有提供自動補全、除錯以及其他對 C# 實用的功能。要在 Godot 中選擇外部編輯"
"器，請點擊 **[編輯器] → [編輯器設定]** 並向下滾動到 **Mono** 。在 **Mono** 中"
"點擊 **Editor** 並選擇要使用的外部編輯器。Godot 目前支援下列外部編輯器："

msgid "Visual Studio 2022"
msgstr "Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Mac 版 Visual Studio"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "關於如何配置外部編輯器，請參見以下章節："

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"閱讀完 \"預備知識\" 部分，就可以下載安裝 `JetBrains Rider <https://www."
"jetbrains.com/rider/download>`__ 。"

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "在 Godot 的編輯器設定中："

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr "將 **Mono External Editor** 設為 **JetBrains Rider** 。"

msgid "In Rider:"
msgstr "Rider 中："

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "設定 **MSBuild version** 為 **.NET Core** 。"

msgid "Install the **Godot support** plugin."
msgstr "安裝 **Godot support** 外掛。"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"看完 \"預備知識\" 部分，就可以下載安裝 `Visual Studio Code <https://code."
"visualstudio.com/download>`__ （又名 VS Code）。"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr "將 **Mono External Editor** 設為 **JetBrains Rider** 。"

msgid "In Visual Studio Code:"
msgstr "Visual Studio Code"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"安裝 `VSMonoDebugger 擴充套件 <https://marketplace.visualstudio.com/items?"
"itemName=GordianDotNet.VSMonoDebugger0d62>`_ 。"

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"如果你使用的是 Linux，需要安裝 `Mono SDK <https://www.mono-project.com/"
"download/stable/#download-lin>`__ 才能使用 C# 工具外掛程式。"

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""
"為了配置一個用於除錯的專案，你需要在 ``.vscode`` 資料夾中擁有一個 ``tasks."
"json`` 和 ``launch.json`` 檔，並進行必要的配置。一個範例配置可以在 `這裡 "
"<https://github.com/godotengine/godot-csharp-vscode/"
"issues/43#issuecomment-1258321229>`__ 找到。在 ``launch.json`` 檔中，請確保相"
"關配置中的 ``program`` 參數指向你的 Godot 可執行檔，你可以通過將它更改為可執"
"行檔的路徑或定義一個指向可執行檔的 ``GODOT4`` 環境變數來實作。現在，當你在 "
"Visual Studio Code 中啟動除錯器時，你的 Godot 專案將會運作。"

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio 或 VS Code"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"下載並安裝最新版本的 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__ 。如果你選擇了正確的工作負載，Visual Studio 將包含所需的 SDK，"
"所以你不需要手動安裝 \"預先告知\" 部分列出的內容。"

msgid "While installing Visual Studio, select this workload:"
msgstr "Visual Studio 安裝須知"

msgid ".NET desktop development"
msgstr "編輯器開發"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr "將 **Mono External Editor** 設為 **JetBrains Rider** 。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"如果你看到了類似“Unable to find package Godot.NET.Sdk”的錯誤，你的 NuGet 配置"
"可能有問題，需要進行修復。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"修復 NuGet 設定檔的簡單方法就是重新生成一個。在檔案瀏覽器視窗中前往 "
"''%AppData%\\NuGet''\\ 。將 ''NuGet.Config'' 檔案重命名或刪除。重新建立 "
"Godot 專案時，就會自動用預設值建立該檔。"

msgid "Creating a C# script"
msgstr "建立 C# 腳本"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"成功為 Godot 設定好 C# 後，應該可以在從場景中節點右鍵選單中選擇 **[附加腳"
"本]** 時看到下列選項："

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"請注意，雖然某些功能不同，但使用 C# 撰寫腳本時大部分概念都一樣。若還不熟悉 "
"Godot，則建議您先閱讀 :ref:`doc_scripting` 中的教學。雖然文件中的某些部分還沒"
"有 C# 範例，但大部分概念都很容易從 GDScript 轉過來。"

msgid "Project setup and workflow"
msgstr "專案設定與工作流程"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"建立第一個 C# 腳本後，Godot 會為目前的 Godot 專案初始化 C# 專案檔。包含產生 "
"C# 解決方案 (``.sln``) 與專案檔 (``.csproj``)、以及一些公用檔案與資料夾 (``."
"mono`` 與 ``Properties/AssemblyInfo.cs``)。這些檔案除了 ``.mono`` 之外都很重"
"要，且應該被認可 (Commit) 至版本控制系統中。``.mono`` 可以安全地新增到 VCS 中"
"的忽略列表內，有時候可能會需要刪除 ``.mono`` 資料夾並讓 Godot 重新產生。"

msgid "Example"
msgstr "範例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "下列為一個空白的 C# 腳本，包含了一些說明如何運作的註解。"

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"就像這樣，在 GDScript 中通常在全域的函式，如 Godot 的 ``print`` 函式，都在 "
"``Godot`` 命名空間中的 ``GD`` 類別內。要取得 ``GD`` 類別中所有方法的列表，請"
"參考類別參照頁面中的 :ref:`@GDScript <class_@gdscript>` 與 :ref:"
"`@GlobalScope <class_@globalscope>` 。"

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"請記得，要附加到節點上的類別必須與 ``.cs`` 檔案的檔名相同。否則會得到下列錯誤"
"且無法執行場景： **「Cannot find class XXX for script res://XXX.cs」**"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr "*\"Cannot find class XXX for script res://XXX.cs\"*"

msgid "General differences between C# and GDScript"
msgstr "C# 與 GDScript 間的一般差異"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# API 使用 ``PascalCase`` 而不是 GDScript/C++ 的 ``snake_case`` 。欄位、"
"Getter、Setter 都儘量轉換成屬性。一般來說，C# Godot API 都在合理情況下儘量保"
"持其習慣。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "更多資訊請參考 :ref:`doc_c_sharp_differences` 一頁。"

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"使用 C# 時，若要看到新匯出的變數或訊號，就需要建置或重新建置專案。要重新建置"
"專案可以手動點擊編輯器視窗底部的 [Mono] 文字來打開 Mono 面板，然後點擊 [建置"
"專案] 按鈕。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr "接著還需要重新建置專案組建，以套用「工具」腳本中的改動。"

msgid "Current gotchas and known issues"
msgstr "目前狀況與已知問題"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"由於 Godot 中的 C# 支援還很新，所以還有一些需要解決的問題。下表為在 Godot 中"
"使用 C# 需要注意的幾個最重要的問題，另外也請參考一下官方的 `Mono 問題追蹤器 "
"<https://github.com/godotengine/godot/labels/topic%3Amono>`_ 。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "雖然還是可以寫編輯器外掛，但目前很複雜。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "除了匯出的變數以外，熱重載時狀態不會保存並重新載入。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加 C# 腳本時參照的類別名稱必須與檔名一致。"

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"有些方法，如 ``Get()``/``Set()``, ``Call()``/``CallDeferred()`` 與訊號連接方"
"法 ``Connect()`` 都還依賴 Godot 的 ``snake_case`` API 命名規範。所以使用如 "
"``CallDeferred(\"AddChild\")`` 時，無法正常使用 ``AddChild`` ，因為 API 預期"
"使用原本 ``snake_case`` 版的 ``add_child`` 。但依然可以使用自定屬性與方法而不"
"受此限。"

msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"自 Godot 3.2.2 版起，匯出 Mono 專案支援桌面平台 (Linux, Windows 與 macOS), "
"Android, HTML5 與 iOS。唯一還不支援的平台為 UWP。"

msgid "Common pitfalls"
msgstr "註解"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""
"你可能會在嘗試修改 Godot 物件中的一些值時遇到以下錯誤，例如在嘗試改變一個 "
"``Node2D`` 的 X 座標時："

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""
"這是完全正常的。C# 中的結構體（在這個例子中，是一個 ``Vector2`` ）在賦值時會"
"被複製，意味著當你從一個屬性或索引子中獲取這樣一個物件時，你得到的是它的一個"
"副本，而不是它本身。修改這個副本而不重新賦值是沒有任何效果的。"

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""
"解決方法很簡單：獲取整個結構體，修改你想要修改的值，然後重新賦值給屬性。"

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""
"自 C# 10 起，還可以在結構體上使用 `with 運算式 <https://learn.microsoft.com/"
"zh-cn/dotnet/csharp/language-reference/operators/with-expression>`_ ，讓你只"
"需一行實作相同的效果。"

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""
"你可以在 `C# 語言參考 <https://learn.microsoft.com/zh-cn/dotnet/csharp/"
"language-reference/compiler-messages/cs1612>`_ 中瞭解更多關於這個錯誤的資訊。"

msgid "Performance of C# in Godot"
msgstr "Godot 中的 C# 效能"

msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"根據一些初步的 `效能評定 <https://github.com/cart/godot3-bunnymark>`_ ，在一"
"般情況下，Godot 中的 C# 效能比起一些單純的 GDScript 情況還要快上 **～ 4 倍"
"** 。C++ 依然稍微快一點。實際情況還是依據使用方式而異。GDScript 一般來說對於"
"普通的程式編寫來說已經夠快了，而 C# 雖然更快，但與 Godot 通訊時則需要耗費許多"
"吃效能的封送處理。"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""
"大多數基於 ``GodotObject`` 的 Godot C# 物件（例如任何像 ``Control`` 這樣的 "
"``Node`` 或 ``Camera3D`` 這樣的 ``Node3D`` ）的屬性，需要使用本地（互動操作）"
"呼叫，因為它們與 Godot 的 C++ 核心進行通信。如果你需要在單個程式碼位置多次修"
"改或讀取這些屬性的值，請考慮將其分配給本地變數："

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""
"將原始陣列（例如 ``byte[]`` ）或 ``string`` 傳遞給 Godot 的 C# API 需要進行資"
"料封裝，這在性能上相對較昂貴。"

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""
"將 ``string`` 隱式轉換為 ``NodePath`` 或 ``StringName`` 會產生本地互動操作和"
"資料封裝的成本，因為必須將 ``string`` 封裝並傳遞到相應的本地建構子。"

msgid "Using NuGet packages in Godot"
msgstr "在 Godot 中使用 NuGet 套件"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"可以在 Godot 中配合任意 C# 專案安裝與使用 `NuGet <https://www.nuget.org/>`_ "
"套件。許多 IDE 都支援直接新增套件，這些套件也可以通過在專案根目錄的 ``."
"csproj`` 檔內加上套件參照來手動新增："

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"從 Godot 3.2.3 開始，Godot 在下次建構專案時自動下載並設定新新增的 NuGet 包。"

msgid "Profiling your C# code"
msgstr "對 C# 程式進行程式碼剖析"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr "以下工具可用於對託管程式碼進行性能和記憶體分析："

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr "JetBrains Rider 配合 dotTrace/dotMemory 外掛程式。"

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr "獨立版的 JetBrains dotTrace/dotMemory。"

msgid "Visual Studio."
msgstr "Visual Studio"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""
"使用 JetBrains tools 和 Visual Studio 可以同時對託管和非託管程式碼進行分析，"
"但僅限於 Windows。"

msgid "Translation status"
msgstr "翻譯狀態"
