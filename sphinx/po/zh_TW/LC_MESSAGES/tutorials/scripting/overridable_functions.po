# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Overridable functions"
msgstr "可複寫函式"

msgid ""
"Godot's Node class provides virtual functions you can override to update "
"nodes every frame or on specific events, like when they enter the scene tree."
msgstr ""
"Godot 的 Node 類提供了虛函式，你可以通過覆蓋虛函式來在每影格或發生特定事件時"
"更新節點，比如進入場景樹時。"

msgid "This document presents the ones you'll use most often."
msgstr "本文件中會展示你會經常用到的那些。"

msgid ""
"Under the hood, these functions rely on Godot's low-level notifications "
"system. To learn more about it, see :ref:`doc_godot_notifications`."
msgstr ""
"這些函式在引擎內部會依賴 Godot 的底層通知系統。要瞭解相關學習，請參閱 :ref:"
"`doc_godot_notifications`。"

#, fuzzy
msgid ""
"Two functions allow you to initialize and get nodes besides the class's "
"constructor: ``_enter_tree()`` and ``_ready()``."
msgstr ""
"除了類的建構子之外，還有兩個函式可以用來初始化並獲取節點：``_enter_tree()`` "
"和 ``_ready()``。"

msgid ""
"When the node enters the Scene Tree, it becomes active and the engine calls "
"its ``_enter_tree()`` method. That node's children may not be part of the "
"active scene yet. As you can remove and re-add nodes to the scene tree, this "
"function may be called multiple times throughout a node's lifetime."
msgstr ""
"節點進入場景樹時就會被啟動，引擎會呼叫其 ``_enter_tree()`` 方法。該節點的子項"
"可能還不是活動場景的一部分。因為你可以從場景樹中移除節點然後重新新增，在一個"
"節點的生命期中，這個函式可能會被呼叫多次。"

#, fuzzy
msgid ""
"Most of the time, you'll use ``_ready()`` instead. This function is called "
"only once in a node's lifetime, after ``_enter_tree()``. ``_ready()`` "
"ensures that all children have entered the scene tree first, so you can "
"safely call ``get_node()`` on them."
msgstr ""
"你在大多數時候用的其實是 ``_ready()``。這個函式只會在節點的生命期中被呼叫一"
"次，在 ``_enter_tree()`` 之後。``_ready()`` 可以保證所有子項都已經進入了場景"
"樹，所以你可以安全地去呼叫 ``get_node()``。"

msgid ""
"To learn more about getting node references, read :ref:"
"`doc_nodes_and_scene_instances`."
msgstr ""
"要學習更多關於節點引用的知識，請閱讀 :ref:`doc_nodes_and_scene_instances`。"

#, fuzzy
msgid ""
"Another related callback is ``_exit_tree()``, which the engine calls every "
"time a node is about to exit the scene tree. This can be when you call :ref:"
"`Node.remove_child() <class_Node_method_remove_child>` or when you free a "
"node."
msgstr ""
"另一個有關的回呼函式是 ``_exit_tree()``，引擎會在節點退出場景樹時呼叫。既可以"
"是你呼叫 :ref:`Node.remove_child() <class_Node_method_remove_child>` 時，也可"
"以是你釋放這個節點時。"

msgid ""
"The two virtual methods ``_process()`` and ``_physics_process()`` allow you "
"to update the node, every frame and every physics frame respectively. For "
"more information, read the dedicated documentation: :ref:"
"`doc_idle_and_physics_processing`."
msgstr ""
"虛函式 ``_process()`` 和 ``_physics_process()`` 可以分別用來對節點進行每影格"
"和每物理影格的更新。要瞭解更多資訊，請閱讀專門的文件：:ref:"
"`doc_idle_and_physics_processing`。"

#, fuzzy
msgid ""
"Two more essential built-in node callback functions are :ref:`Node."
"_unhandled_input() <class_Node_private_method__unhandled_input>` and :ref:"
"`Node._input() <class_Node_private_method__input>`, which you use to both "
"receive and process individual input events. The ``_unhandled_input()`` "
"method receives every key press, mouse click, etc. that have not been "
"handled already in an ``_input()`` callback or in a user interface "
"component. You want to use it for gameplay input in general. The "
"``_input()`` callback allows you to intercept and process input events "
"before ``_unhandled_input()`` gets them."
msgstr ""
"還有兩個關鍵的內建節點回呼函式 :ref:`Node._input() "
"<class_Node_method__input>` 和 :ref:`Node._unhandled_input() "
"<class_Node_method__unhandled_input>`。兩者都可以用來接收並處理單獨的輸入事"
"件。如果按鍵、滑鼠點擊等事件沒有被 ``_input()`` 回呼函式或使用者介面元件處"
"理，``_unhandled_input()`` 方法才會收到這個事件。遊戲中的輸入通常是使用後者處"
"理的。``_input()`` 回呼函式可以用來在 ``_unhandled_input()`` 獲取前攔截並處理"
"輸入事件。"

msgid ""
"To learn more about inputs in Godot, see the :ref:`Input section <toc-learn-"
"features-inputs>`."
msgstr ""
"要學習更多關於 Godot 中輸入的內容，請參閱:ref:`輸入章節 <toc-learn-features-"
"inputs>`。"

#, fuzzy
msgid ""
"There are some more overridable functions like :ref:`Node."
"_get_configuration_warnings() "
"<class_Node_private_method__get_configuration_warnings>`. Specialized node "
"types provide more callbacks like :ref:`CanvasItem._draw() "
"<class_CanvasItem_private_method__draw>` to draw programmatically or :ref:"
"`Control._gui_input() <class_Control_private_method__gui_input>` to handle "
"clicks and input on UI elements."
msgstr ""
"還有 :ref:`Node._get_configuration_warning() "
"<class_Node_method__get_configuration_warning>` 等更多的可覆蓋函式。特定的節"
"點型別也會提供很多回呼函式，比如 :ref:`CanvasItem._draw() "
"<class_CanvasItem_method__draw>` 可以用程式來繪圖，:ref:`Control."
"_gui_input() <class_Control_method__gui_input>` 可以處理 UI 元素上的點擊和輸"
"入。"

msgid "Translation status"
msgstr "翻譯狀態"
