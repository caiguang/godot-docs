# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "GDExtension C++ 範例"

msgid "Introduction"
msgstr "前言"

msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"GDNative的C++綁定建構在NativeScript GDNative API之上, 並提供了一種使用C++在"
"Godot中 \"擴充\" 節點的更好方法. 這相當於在GDScript中編寫腳本, 而是在C++中編"
"寫腳本."

msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"在這份文件之外，你可能也會想看看 `Godot 的 demo 專案 <https://github.com/"
"godotengine/godot-demo-projects>`_。"

msgid "Setting up the project"
msgstr "設定專案"

msgid "There are a few prerequisites you'll need:"
msgstr "您需要一些先決條件："

msgid "a Godot 4 executable,"
msgstr "Godot 4 可執行檔，"

msgid "a C++ compiler,"
msgstr "C++ 編譯器，"

msgid "SCons as a build tool,"
msgstr "SCons 作為建構工具，"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"在這份文件之外，你可能也會想看看 `Godot 的 demo 專案 <https://github.com/"
"godotengine/godot-demo-projects>`_。"

msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""
"另請參閱:ref:`《編譯》 <toc-devel-compiling>`，因為建構工具與從原始程式碼編"
"譯 Godot 所需的建構工具相同。"

msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"您可以從 GitHub 下載這些倉庫，或讓 Git 為您完成這些工作。請注意，這些倉庫現在"
"對於不同版本的 Godot 具有不同的分支。為早期版本的 Godot 編寫的 GDNative 模組"
"可以在較新版本中運作（除了 3.0 和 3.1 之間的 ARVR 介面的一次重大更改），但反"
"之則不行，因此請確保下載正確的分支。還要注意，您用於生成 ``api.json`` 的 "
"Godot 版本將成為最低版本。"

msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch, which is what is shown through out this tutorial."
msgstr ""
"`GDExtension <https://godotengine.org/article/introducing-gd-extensions>`__ "
"已經被合併到 godot-cpp 的 ``master`` 分支中，但它只與即將推出的 Godot 4.0 相"
"容。因此，您需要使用 GDNative ，需使用 godot-cpp 的 ``3.x`` 分支，並按照此範"
"例進行操作。"

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""
"「master」分支是開發分支，它會定期更新以與 Godot 的「master」分支配合使用。"

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.2 should work just fine in Godot 4.3, but one "
"targeting Godot 4.3 won't work in Godot 4.2."
msgstr ""
"我們的長期目標是針對早期版本 Godot 的 GDExtensions 將在以後的次要版本中工作，"
"但反之則不然。例如，針對 Godot 4.2 的 GDExtension 在 Godot 4.3 中應該可以正常"
"運作，但針對 Godot 4.3 的 GDExtension 在 Godot 4.2 中則無法運作。"

msgid ""
"However, GDExtension is currently *experimental*, which means that we may "
"break compatibility in order to fix major bugs or include critical features. "
"For example, GDExtensions created for Godot 4.0 aren't compatible with Godot "
"4.1 (see :ref:`updating_your_gdextension_for_godot_4_1`)."
msgstr ""
"然而，GDExtension 目前處於*實驗階段*，這意味著我們可能會破壞相容性以修復主要"
"錯誤或包含關鍵功能。例如，為 Godot 4.0 建立的 GDExtension 與 Godot 4.1 不相容"
"（請參閱:ref:`updating_your_gdextension_for_godot_4_1`）。"

msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr "如果您使用 Git 對專案進行版本控制，最好將它們新增為 Git 子模組："

msgid "Alternatively, you can also clone it to the project folder:"
msgstr "或者，您也可以將其克隆到專案資料夾："

msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"如果您決定只下載倉庫或將它們克隆到專案檔案夾中，請確保資料夾佈局與此處描述的"
"相同，因為我們將在此處展示的程式碼假定專案遵循此佈局。"

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"如果從介紹中指定的連結克隆範例, 子模組不會自動初始化. 您需要執行以下命令:"

msgid "This will initialize the repository in your project folder."
msgstr "這會將這兩個倉庫克隆到您的專案檔案夾中。"

msgid "Building the C++ bindings"
msgstr "建構 C++ 綁定"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr "現在我們已經下載了我們的先決條件, 現在是建構C++綁定的時候了."

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""
"倉庫包含目前 Godot 版本的中繼資料副本，但如果您需要為較新版本的 Godot 建構這"
"些綁定，只需呼叫 Godot 可執行檔："

#, fuzzy
msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"將生成的 ``api.json`` 檔案放在專案檔案夾中, 並將 ``use_custom_api_file = yes "
"custom_api_file = .. / api.json`` 新增到下面的scons命令中."

msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"要生成和編譯綁定, 使用這個命令(根據你的作業系統, 用 ``windows`` , ``linux`` "
"或 ``osx`` 代替 ``<platform>`` ):"

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"這一步將需要一段時間. 完成後, 您應該有一個靜態程式庫, 可以編譯到您的專案中, "
"儲存在 ``godot-cpp / bin /`` 中."

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr "您可能需要在 Windows 或 Linux 的命令列中新增 ``bits=64``。"

msgid "Creating a simple plugin"
msgstr "建立一個簡單的外掛程式"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"現在是建構實際外掛程式的時候了. 我們首先建立一個空的Godot專案, 我們將在其中放"
"置一些檔."

msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"打開Godot並建立一個新專案. 對於這個範例, 我們將它放在我們的GDNative模組的資料"
"夾結構中名為 ``demo`` 的資料夾中."

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"在我們的演示專案中, 我們將建立一個包含名為 \"Main\" 的節點的場景, 我們將其保"
"存為 ``main.tscn`` . 我們稍後再回過頭來看看."

msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"回到頂級GDNative模組資料夾, 我們還將建立一個名為 ``src`` 的子資料夾, 我們將在"
"其中放置原始檔案."

msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"您現在應該在您的GDNative模組中有 ``demo`` , ``godot-cpp``, ``godot_headers`` "
"和 ``src`` 目錄."

msgid "Your folder structure should now look like this:"
msgstr "現在場景看起來會這樣："

msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"在 ``src`` 資料夾中, 我們將首先為我們將要建立的GDNative節點建立標頭檔. 我們將"
"它命名為 ``gdexample.h`` :"

msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"以上有一些注意事項. 我們包括 ``Godot.hpp`` , 其中包含我們所有的基本定義. 之"
"後, 我們包含 ``Sprite.hpp`` , 它包含對Sprite類的綁定. 我們將在我們的模組中擴"
"充這個類."

msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"我們使用命名空間 ``godot`` , 因為GDNative中的所有內容都在此命名空間中定義."

msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"然後我們有了我們的類定義, 它通過容器類從我們的Sprite繼承. 我們稍後會看到一些"
"副作用. 這也是NativeScript 1.1中將要改進的主要部分. ``GODOT_CLASS`` 宏為我們"
"設定了一些內部事物."

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr "之後, 我們宣告一個名為 ``time_passed`` 的成員變數."

msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"在下一個塊中我們定義了我們的方法, 我們顯然已經定義了建構子和解構函式, 但是還"
"有其他兩個函式可能看起來很熟悉."

msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"第一個是 ``_register_methods`` , 這是一個靜態函式,Godot將呼叫它來找出可以在我"
"們的NativeScript上呼叫哪些方法以及它暴露的屬性. 第二個是我們的 ``_process`` "
"函式, 它與您在GDScript中習慣的 ``_process`` 函式完全相同. 第三個是我們的 "
"``_init`` 函式, 它是在Godot正確設定我們的物件之後呼叫的. 即使您沒有在其中放置"
"任何程式碼, 它也必須存在."

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "所以, 讓我們通過建立 ``gdexample.cpp`` 檔來實作我們的函式:"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr "這一點應該很簡單。我們正在實作我們在頭檔案中定義的類別的每個方法。"

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""
"注意我們的“_process”函式，它追蹤已經過去了多少時間，並使用正弦和餘弦函式計算"
"精靈的新位置。"

msgid ""
"There is one more C++ file we need; we'll name it ``register_types.cpp``. "
"Our GDExtension plugin can contain multiple classes, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the classes in "
"our GDExtension plugin."
msgstr ""
"還有一個我們需要的C++檔; 我們將它命名為 ``gdlibrary.cpp`` . 我們的GDNative外"
"掛程式可以包含多個NativeScripts, 每個都有自己的標頭檔和原始檔案, 就像我們在上"
"面實作了 ``GDExample`` 一樣. 我們現在需要的是一小段程式碼, 告訴Godot我們的"
"GDNative外掛程式中的所有NativeScripts."

msgid ""
"The ``initialize_example_module`` and ``uninitialize_example_module`` "
"functions get called respectively when Godot loads our plugin and when it "
"unloads it. All we're doing here is parse through the functions in our "
"bindings module to initialize them, but you might have to set up more things "
"depending on your needs. We call the function ``register_class`` for each of "
"our classes in our library."
msgstr ""
"當Godot載入我們的外掛程式並解除安裝它時, 分別呼叫 ``godot_gdnative_init`` 和 "
"``godot_gdnative_terminate`` 函式. 我們在這裡所做的只是解析我們的綁定模組中的"
"函式來初始化它們, 但您可能需要根據需要設定更多內容."

#, fuzzy
msgid ""
"The important function is the third function called "
"``example_library_init``. We first call a function in our bindings library "
"that creates an initialization object. This object registers the "
"initialization and termination functions of the GDExtension. Furthermore, it "
"sets the level of initialization (core, servers, scene, editor, level)."
msgstr ""
"重要的功能是第三個函式叫做 ``godot_nativescript_init`` . 我們首先在我們的綁定"
"庫中呼叫一個函式來執行它常用的東西. 之後, 我們為庫中的每個類呼叫函式 "
"``register_class`` ."

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr "最後，我們需要名為「register_types.h」的「register_types.cpp」頭檔。"

msgid "Compiling the plugin"
msgstr "編譯外掛程式"

msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""
"手工編寫 SCons 用於建構的 ``SConstruct`` 檔案並不容易。出於這個範例的目的，只"
"需使用我們已經準備好的:download:`這個硬編碼的 SConstruct 檔 <files/"
"cpp_example/SConstruct>`。我們將在後續教學中介紹如何使用這些建構檔的更可定制"
"的詳細範例。"

msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.0 documentation."
msgstr ""
"這個 ``SConstruct`` 檔被編寫為與最新的godot-cpp master分支一起使用, 您可能需"
"要使用舊版本進行小的更改, 或者參考Godot 3.0文件中的 ``SConstruct`` 檔."

msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"一旦你下載了 ``SConstruct`` 檔案，把它放在你的GDNative模組資料夾中，除了 "
"``godot-cpp`` 、 ``godot-headers`` 和 ``demo`` 之外，然後運作:"

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "您現在應該能夠在 ``demo / bin / <platform>`` 中找到該模組."

msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"在這裡, 我們編譯了godot-cpp和我們的gdexample庫作為除錯版本. 對於優化的建構, "
"您應該使用 ``target = release`` 開關編譯它們."

msgid "Using the GDExtension module"
msgstr "使用模組"

msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr ""
"在我們跳回Godot之前, 我們需要在 ``demo / bin /`` 中再建立兩個檔. 兩者都可以使"
"用Godot編輯器建立, 但直接建立它們可能會更快."

msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called ``gdexample."
"gdextension``."
msgstr ""
"第一個是一個檔, 讓Godot知道應該為每個平臺載入什麼動態庫, 並稱為 ``gdexample."
"gdnlib`` ."

msgid ""
"This file contains a ``configuration`` section that controls the entry "
"function of the module. You should also set the minimum compatible Godot "
"version with ``compatability_minimum``, which prevents older version of "
"Godot from trying to load your extension."
msgstr ""
"該檔案包含一個「configuration」部分，用於控制模組的入口函式。您還應該使"
"用“compatability_minimum”設定最低相容的 Godot 版本，這可以防止舊版本的 Godot "
"嘗試載入您的擴充功能。"

msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"``entry`` 部分是重要的一點: 它告訴Godot每個支援平臺的專案檔案系統中動態庫的位"
"置. 匯出專案時, 這也將導致 *僅* 匯出該檔, 這意味著封包不會包含與目標平臺不相"
"容的庫."

msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"最後, ``dependencies`` 部分允許您命名應包含的其他動態庫. 當您的GDNative外掛程"
"式實作其他人的庫並要求您為專案提供協力廠商動態庫時, 這一點非常重要."

msgid "Here is another overview to check the correct file structure:"
msgstr "這是檢查正確檔案結構的另一個概述："

msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a newly available GDExample node to the scene:"
msgstr ""
"是時候跳回Godot了. 我們在開始時載入我們建立的主場景, 現在為場景新增一個"
"Sprite:"

msgid ""
"We're going to assign the Godot logo to this node as our texture, disable "
"the ``centered`` property:"
msgstr ""
"我們要將Godot徽標指定給這個精靈作為我們的紋理, 禁用 ``centered`` 屬性並將我們"
"的 ``gdexample.gdns`` 檔拖到精靈的 ``script`` 屬性中:"

msgid "We're finally ready to run the project:"
msgstr "我們終於準備好運作這個專案了:"

msgid "Custom editor icon"
msgstr "新增自定編輯器圖示"

msgid ""
"By default, Godot uses the node icon in the scene dock for GDExtension "
"nodes. The custom icon can be added via the ``gdextension`` file. The node's "
"icon is set by reference to its name and resource path of an SVG file."
msgstr ""
"預設情況下，Godot 使用場景停靠列中的節點圖示作為 GDExtension 節點。自訂圖示可"
"以透過「gdextension」檔案新增。節點的圖示是透過引用其名稱和 SVG 檔案的資源路"
"徑來設定的。"

msgid "For example:"
msgstr "如："

msgid ""
"The path should point to a 16 by 16 pixel SVG image. Read the guide for :ref:"
"`creating icons <doc_editor_icons>` for more information."
msgstr ""
"該路徑應指向 16 x 16 像素的 SVG 影像。閱讀建立圖示 <doc_editor_icons> 指南以"
"取得更多資訊。"

msgid "Adding properties"
msgstr "新增屬性"

msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDExtension you have to register the properties with a getter "
"and setter function or directly implement the ``_get_property_list``, "
"``_get`` and ``_set`` methods of an object (but that goes far beyond the "
"scope of this tutorial)."
msgstr ""
"還有第三種選擇, 就像在GDScript中一樣, 您可以直接實作一個物件的 "
"``_get_property_list`` , ``_get`` 和 ``_set`` 方法, 但這遠遠超出了本教學的範"
"圍."

msgid ""
"Lets add a property that allows us to control the amplitude of our wave."
msgstr ""
"我們將從直接綁定開始檢查兩者. 讓我們新增一個允許我們控制波浪幅度的屬性."

msgid ""
"In our ``gdexample.h`` file we need to add a member variable and getter and "
"setter functions:"
msgstr "在我們的 ``gdexample.h`` 檔中, 我們只需新增一個成員變數, 如下所示:"

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"在我們的 ``gdexample.cpp`` 檔中, 我們需要進行一些更改, 我們只會顯示我們最終更"
"改的方法, 不要刪除我們省略的行:"

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"使用這些更改編譯模組後，就會看到介面上加入了一個屬性。您現在可以更改此屬性，"
"當您運作專案時，您將看到我們的 Godot 圖示沿著更大的數位移動。"

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"讓我們做同樣的事情但是為了我們動畫的速度並使用 setter 和 getter 函式。我們的 "
"``gdexample.h`` 標頭檔再次只需要幾行程式碼："

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"這需要對我們的 ``gdexample.cpp`` 檔進行一些更改, 同樣我們只顯示已更改的方法, "
"所以不要刪除我們忽略的任何內容:"

msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower. Furthermore, "
"we added a property range which describes in which range the value can be. "
"The first two arguments are the minimum and maximum value and the third is "
"the step size."
msgstr ""
"編譯完專案後，我們就會看到另一個名為 speed 的屬性。更改其值將使動畫更快或更"
"慢。"

msgid ""
"For simplicity, we've only used the hint_range of the property method. There "
"are a lot more options to choose from. These can be used to further "
"configure how properties are displayed and set on the Godot side."
msgstr ""
"為簡單起見，我們在 register_property<class, type> 方法呼叫中省略了可選的參"
"數。這些參數有 ``rpc_mode``、``usage``、``hint``、``hint_string``。這些可用於"
"進一步配置屬性在 Godot 方面的顯示和設定方式。"

msgid "Signals"
msgstr "訊號"

msgid ""
"Last but not least, signals fully work in GDExtension as well. Having your "
"extension react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""
"最後但同樣重要的是, 訊號也完全適用於GDNative. 讓模組對另一個物件發出的訊號作"
"出反應, 需要在該物件上呼叫 ``connect`` . 我們想不出一個擺動Godot圖示的好範"
"例, 我們需要展示一個更完整的範例."

msgid "This is the required syntax:"
msgstr "這是必需的語法："

msgid ""
"To connect our signal ``the_signal`` from some other node with our method "
"``my_method``, we need to provide the ``connect`` method with the name of "
"the signal and a ``Callable``. The ``Callable`` holds information about an "
"object on which a method can be called. In our case, it associates our "
"current object instance ``this`` with the method ``my_method`` of the "
"object. Then the ``connect`` method will add this to the observers of "
"``the_signal``. Whenever ``the_signal`` is now emitted, Godot knows which "
"method of which object it needs to call."
msgstr ""

#, fuzzy
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"請注意, 如果您之前在 ``_register_methods`` 方法中註冊了它, 則只能呼叫 "
"``my_method`` ."

msgid ""
"To learn more about ``Callable``, check out the class reference here: :ref:"
"`Callable <class_Callable>`."
msgstr ""

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"讓物件發出訊號更為常見。對於我們搖擺不定的 Godot 圖示，我們會做一些愚蠢的事情"
"來展示它是如何工作的。每過一秒鐘我們就會發出一個訊號並傳遞新的位置。"

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""
"在我們的 ``gdexample.h`` 標頭檔中，我們需要定義一個新成員 ``time_emit``："

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"``gdexample.cpp`` 這次的修改有點複雜。首先，你需要在我們的 ``_init`` 方法或建"
"構子中設定 ``time_emit = 0.0``。另外兩個修改我們將逐一查看。"

msgid ""
"In our ``_bind_methods`` method, we need to declare our signal. This is done "
"as follows:"
msgstr ""
"在我們的 ``_register_methods`` 方法中，我們需要宣告我們的訊號。按如下方式實"
"作："

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""
"在這裡，我們的“ADD_SIGNAL”巨集可以是帶有“MethodInfo”參數的單一呼叫。 "
"「MethodInfo」的第一個參數將是訊號的名稱，其其餘參數是「PropertyInfo」型別，"
"描述每個方法參數的要點。 「PropertyInfo」 參數是使用參數的資料型別以及預設參"
"數的名稱來定義的。"

#, fuzzy
msgid ""
"So here, we add a signal, with a ``MethodInfo`` which names the signal "
"\"position_changed\". The ``PropertyInfo`` parameters describe two essential "
"arguments, one of type ``Object``, the other of type ``Vector2``, "
"respectively named \"node\" and \"new_pos\"."
msgstr ""
"因此，在這裡，我們新增一個訊號，其中包含將訊號命名為「position_changed」的"
"「MethodInfo」。 「PropertyInfo」參數描述了兩個基本參數，一個是「Object」型"
"別，另一個是「Vector2」型別，分別命名為「node」和「new_pos」。"

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "接下來我們需要修改我們的 ``_process`` 方法："

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"經過一秒鐘後， 我們發出訊號並重設我們的計數器。我們可以將參數值直接新增給 "
"``emit_signal``。"

msgid ""
"Once the GDExtension library is compiled, we can go into Godot and select "
"our sprite node. In the **Node** dock, we can find our new signal and link "
"it up by pressing the **Connect** button or double-clicking the signal. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""
"完成 GDNative 庫的編譯後，我們可以進入 Godot 並選擇我們的精靈節點。在**節點**"
"面板上，我們可以找到我們新建的訊號，並通過點按**連接**按鈕或按兩下訊號將其連"
"結起來。我們在主節點上新增了一個腳本並實作了這樣的訊號："

msgid "Every second, we output our position to the console."
msgstr "每一秒，我們都會將我們的位置輸出到控制台。"

msgid "Next steps"
msgstr "下一步"

msgid ""
"We hope the above example showed you the basics. You can build upon this "
"example to create full-fledged scripts to control nodes in Godot using C++."
msgstr ""
"以上只是一個簡單的範例, 但我們希望它向您展示基礎知識. 您可以在此範例的基礎上"
"建構完整的腳本, 以使用C++控制Godot中的節點."

msgid "Translation status"
msgstr "翻譯狀態"
