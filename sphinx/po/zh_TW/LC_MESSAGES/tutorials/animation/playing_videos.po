# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Playing videos"
msgstr "播放影片"

msgid ""
"Godot supports video playback with the :ref:`class_VideoStreamPlayer` node."
msgstr "Godot 通過 :ref:`class_VideoPlayer` 節點支援影片的播放。"

msgid "Supported playback formats"
msgstr "支援所有平台。"

msgid ""
"The only supported format in core is **Ogg Theora** (not to be confused with "
"Ogg Vorbis audio). It's possible for extensions to bring support for "
"additional formats, but no such extensions exist yet as of July 2022."
msgstr ""
"核心中僅支援 **Ogg Theora** 格式（請勿與 Ogg Vorbis 音訊混淆）。擴充可以支援"
"額外的格式，但是截止到 2022 年 7 月，還沒有這種擴充存在。"

msgid ""
"H.264 and H.265 cannot be supported in core Godot, as they are both "
"encumbered by software patents. AV1 is royalty-free, but it remains slow to "
"decode on the CPU and hardware decoding support isn't readily available on "
"all GPUs in use yet."
msgstr ""
"Godot 核心無法支援 H.264 和 H.265，因為它們都被軟體專利所限。AV1 不需要授權，"
"但 CPU 解碼仍然很慢，也不是所有 GPU 都已支援硬體解碼。"

msgid ""
"WebM was supported in core in Godot 3.x, but support for it was removed in "
"4.0 as it was too buggy and difficult to maintain."
msgstr ""
"Godot 3.x 核心中支援 WebM，但是會在 4.0 中移除支援，因為 bug 很多難以維護。因"
"此**不推薦使用 WebM**。"

msgid ""
"You may find videos with an ``.ogg`` or ``.ogx`` extensions, which are "
"generic extensions for data within an Ogg container."
msgstr ""
"你的影片可能使用的是 ``.ogg`` 或者 ``.ogx`` 副檔名，這是帶有資料的 Ogg 容器的"
"通用副檔名。"

msgid ""
"Renaming these file extensions to ``.ogv`` *may* allow the videos to be "
"imported in Godot. However, not all files with ``.ogg`` or ``.ogx`` "
"extensions are videos - some of them may only contain audio."
msgstr ""
"將這些檔副檔名修改為 ``.ogv``*可能*可以讓影片在 Godot 中匯入。不過，並不是所"
"有 ``.ogg`` 或 ``.ogx`` 副檔名的檔都是影片——有些可能只包含音訊。"

msgid "Setting up VideoStreamPlayer"
msgstr "設定 Godot"

msgid "Create a VideoStreamPlayer node using the Create New Node dialog."
msgstr "該簡介是「建立新節點」對話框中唯一的描述。"

msgid ""
"Select the VideoStreamPlayer node in the scene tree dock, go to the "
"inspector and load an ``.ogv`` file in the Stream property."
msgstr ""
"在場景樹面板上選中 VideoStreamPlayer 節點，到屬性面板中為 Stream 屬性載入 ``."
"ogv`` 檔案。"

msgid ""
"If you don't have your video in Ogg Theora format yet, jump to :ref:"
"`doc_playing_videos_recommended_theora_encoding_settings`."
msgstr ""
"如果你還沒有把你的影片轉為 Ogg Theora 格式，請跳轉到 :ref:"
"`doc_playing_videos_recommended_theora_encoding_settings`。"

msgid ""
"If you want the video to play as soon as the scene is loaded, check "
"**Autoplay** in the inspector. If not, leave **Autoplay** disabled and call "
"``play()`` on the VideoStreamPlayer node in a script to start playback when "
"desired."
msgstr ""
"如果你希望在場景載入時立即播放影片，請在屬性面板中勾選 **Autoplay**。否則，請"
"保持 **Autoplay** 關閉，並在需要時在腳本中呼叫 VideoPlayer 節點的 ``play()`` "
"開始播放。"

msgid "Handling resizing and different aspect ratios"
msgstr "處理大小變化及不同的縱橫比"

msgid ""
"By default in Godot 4.0, the VideoStreamPlayer will automatically be resized "
"to match the video's resolution. You can make it follow usual :ref:"
"`class_Control` sizing by enabling **Expand** on the VideoStreamPlayer node."
msgstr ""
"Godot 4.0 中在預設情況下，VideoPlayer 會自動調整到與影片解析度相配對的大小。"
"你可以讓它遵循普通的 :ref:`class_Control` 大小規則，啟用 VideoPlayer 節點的 "
"**Expand** 即可。"

msgid ""
"To adjust how the VideoStreamPlayer node resizes depending on window size, "
"adjust the anchors using the **Layout** menu at the top of the 2D editor "
"viewport. However, this setup may not be powerful enough to handle all use "
"cases, such as playing fullscreen videos without distorting the video (but "
"with empty space on the edges instead). For more control, you can use an :"
"ref:`class_AspectRatioContainer` node, which is designed to handle this kind "
"of use case:"
msgstr ""
"要調整 VideoPlayer 節點的大小隨視窗大小改變的方式，請通過 2D 編輯器視口頂部的"
"**佈局**按鈕調整錨點。不過，這種設定可能不足以處理所有可能的情況，例如全屏播"
"放影片但不造成形變（需要在邊界處留白）。要進行精確的控制，你可以使用專為處理"
"這種情況設計的 :ref:`class_AspectRatioContainer` 節點："

msgid ""
"Add an AspectRatioContainer node. Make sure it is not a child of any other "
"container node. Select the AspectRatioContainer node, then set its "
"**Layout** at the top of the 2D editor to **Full Rect**. Set **Ratio** in "
"the AspectRatioContainer node to match your video's aspect ratio. You can "
"use math formulas in the inspector to help yourself. Remember to make one of "
"the operands a float. Otherwise, the division's result will always be an "
"integer."
msgstr ""
"新增一個 AspectRatioContainer 節點。請確保它不是任何其他容器節點的子節點。選"
"中該 AspectRatioContainer 節點，然後在 2D 編輯器的頂部將**佈局**設定為**整個"
"矩形**。將 AspectRatioContainer 節點的 **Ratio（比例）**設定為與你的影片的長"
"寬比配對的比例。你可以在屬性面板裡直接輸入數學公式。請記住要將其中的一個運算"
"元寫成浮點形式，否則會得到整數的商。"

msgid ""
"AspectRatioContainer's Ratio property being modified in the editor inspector"
msgstr "在編輯器屬性面板中修改 AspectRatioContainer 的 Ratio 屬性"

msgid "This will evaluate to (approximately) 1.777778"
msgstr "求值會得到（大約）1.777778"

msgid ""
"Once you've configured the AspectRatioContainer, reparent your "
"VideoStreamPlayer node to be a child of the AspectRatioContainer node. Make "
"sure **Expand** is enabled on the VideoStreamPlayer. Your video should now "
"scale automatically to fit the whole screen while avoiding distortion."
msgstr ""
"配置好 AspectRatioContainer 之後，請將你的 VideoPlayer 節點調整為該 "
"AspectRatioContainer 節點的子節點。請確保禁用了該 VideoPlayer 的 **Expand**。"
"你的影片現在應該就會自動適應到全屏的大小，不產生變形。"

msgid ""
"See :ref:`doc_multiple_resolutions` for more tips on supporting multiple "
"aspect ratios in your project."
msgstr ""
"更多在專案中支援不同的長寬比的技巧，請參閱 :ref:`doc_multiple_resolutions`。"

msgid "Displaying a video on a 3D surface"
msgstr "在 3D 表面上顯示影片"

msgid ""
"Using a VideoStreamPlayer node as a child of a :ref:`class_SubViewport` "
"node, it's possible to display any 2D node on a 3D surface. For example, "
"this can be used to display animated billboards when frame-by-frame "
"animation would require too much memory."
msgstr ""
"使用 VideoPlayer 節點作為 :ref:`class_Viewport` 節點的子節點，就可以在 3D 表"
"面上顯示任何 2D 節點。例如，可以用於顯示動態的廣告板，影格動畫可能花費太多的"
"記憶體。"

msgid "This can be done with the following steps:"
msgstr "填寫下列設定："

msgid ""
"Create a :ref:`class_SubViewport` node. Set its size to match your video's "
"size in pixels."
msgstr ""
"建立一個 :ref:`class_Viewport` 節點。將其設定為與你的影片大小相配對的像素大"
"小。"

msgid ""
"Create a VideoStreamPlayer node *as a child of the SubViewport node* and "
"specify a video path in it. Make sure **Expand** is disabled, and enable "
"**Autoplay** if needed."
msgstr ""
"建立一個 VideoPlayer 節點*作為該 Viewport 節點的子節點*，並為其指定一個影片的"
"路徑。請確保禁用了 **Expand**，需要時啟用 **Autoplay**。"

msgid ""
"Create a MeshInstance3D node with a PlaneMesh or QuadMesh resource in its "
"Mesh property. Resize the mesh to match the video's aspect ratio (otherwise, "
"it will appear distorted)."
msgstr ""
"建立一個 MeshInstance 節點，將其 Mesh 屬性設為 PlaneMesh 或 QuadMesh。將該網"
"格的大小調整到與影片的長寬比一致（否則看上去就會變形）。"

msgid ""
"Create a new StandardMaterial3D resource in the **Material Override** "
"property in the GeometryInstance3D section."
msgstr ""
"在 GeometryInstance 部分的 **Material Override** 屬性中新建一個 "
"SpatialMaterial 資源。"

msgid ""
"Enable **Local To Scene** in the StandardMaterial3D's Resource section (at "
"the bottom). This is *required* before you can use a ViewportTexture in its "
"Albedo Texture property."
msgstr ""
"在該 SpatialMaterial（底部）的 Resource 部分啟用 **Local To Scene**。這是在 "
"Albedo Texture 屬性中使用 ViewportTexture 所*必須的*。"

msgid ""
"In the StandardMaterial3D, set the **Albedo > Texture** property to **New "
"ViewportTexture**. Edit the new resource by clicking it, then specify the "
"path to the SubViewport node in the **Viewport Path** property."
msgstr ""
"在該 SpatialMaterial 中，將 **Albedo > Texture** 屬性設定為**新建 "
"ViewportTexture**。點擊編輯這個新的資源，在 **Viewport Path** 屬性中指定指向 "
"Viewport 節點的路徑。"

msgid ""
"Enable **Albedo Texture Force sRGB** in the StandardMaterial3D to prevent "
"colors from being washed out."
msgstr "在該 SpatialMaterial 中啟用 **Albedo Tex Force sRGB**，防止顏色變化。"

msgid ""
"If the billboard is supposed to emit its own light, set **Shading Mode** to "
"**Unshaded** to improve rendering performance."
msgstr "如果廣告板應該自發光，請啟用 **Flags > Unshaded** 提升算繪性能。"

msgid ""
"See :ref:`doc_viewports` and the `GUI in 3D demo <https://github.com/"
"godotengine/godot-demo-projects/tree/master/viewport/gui_in_3d>`__ for more "
"information on setting this up."
msgstr ""
"若欲檢視範例專案，請參考作業系統示範專案： https://github.com/godotengine/"
"godot-demo-projects/tree/master/misc/os_test"

#, fuzzy
msgid "Looping a video"
msgstr "原型設計"

msgid ""
"For looping a video, the **Loop** property can be enabled. This will "
"seamlessly restart the video when it reaches its end."
msgstr ""

msgid ""
"Note that setting the project setting **Video Delay Compensation** to a non-"
"zero value might cause your loop to not be seamless, because the "
"synchronization of audio and video takes place at the start of each loop "
"causing occasional missed frames. Set **Video Delay Compensation** in your "
"project settings to **0** to avoid frame drop issues."
msgstr ""

msgid "Video decoding conditions and recommended resolutions"
msgstr "影片解碼條件及推薦解析度"

msgid ""
"Video decoding is performed on the CPU, as GPUs don't have hardware "
"acceleration for decoding Theora videos. Modern desktop CPUs can decode Ogg "
"Theora videos at 1440p @ 60 FPS or more, but low-end mobile CPUs will likely "
"struggle with high-resolution videos."
msgstr ""
"由於 GPU 在解碼 Theora 影片時沒有硬體加速，所以影片解碼是在 CPU 上執行的。現"
"代的桌面 CPU 可以以 1440p @ 60 FPS 或更高的速度解碼 Ogg Theora 格式的影片，但"
"低端移動 CPU 處理高解析度影片可能會比較吃力。"

msgid "To ensure your videos decode smoothly on varied hardware:"
msgstr "為了確保影片在各種硬體上都能夠順利解碼："

msgid ""
"When developing games for desktop platforms, it's recommended to encode in "
"1080p at most (preferably at 30 FPS). Most people are still using 1080p or "
"lower resolution displays, so encoding higher-resolution videos may not be "
"worth the increased file size and CPU requirements."
msgstr ""
"為桌面平臺開發遊戲時，建議最多編碼為 1080p（最好是 30 FPS）。大多數人還在使"
"用 1080p 或者更低解析度的顯示器，所以編碼為更高解析度的影片可能不值那些增大的"
"檔大小和 CPU 需求。"

msgid ""
"When developing games for mobile or web platforms, it's recommended to "
"encode in 720p at most (preferably at 30 FPS or even lower). The visual "
"difference between 720p and 1080p videos on a mobile device is usually not "
"that noticeable."
msgstr ""
"為移動和 Web 平臺開發遊戲時，建議最多編碼為 720p（最好是 30 FPS 或更低）。移"
"動裝置上 720p 和 1080p 的影片通常很難看出區別。"

msgid "Playback limitations"
msgstr "限制"

msgid ""
"There are several limitations with the current implementation of video "
"playback in Godot:"
msgstr "Godot 沒有使用限制"

msgid "Seeking a video to a certain point is not supported."
msgstr "不支援將影片跳躍到特定的時間點。"

msgid ""
"Changing playback speed is not supported. VideoStreamPlayer also won't "
"follow :ref:`Engine.time_scale<class_Engine_property_time_scale>`."
msgstr ""
"不支援修改播放速度。VideoPlayer 也不會遵循 :ref:`Engine."
"time_scale<class_Engine_property_time_scale>`。"

msgid "Streaming a video from a URL is not supported."
msgstr "不支援從 URL 播放影片流。"

msgid "Recommended Theora encoding settings"
msgstr "推薦 Theora 編碼設定"

msgid ""
"A word of advice is to **avoid relying on built-in Ogg Theora exporters** "
"(most of the time). There are 2 reasons you may want to favor using an "
"external program to encode your video:"
msgstr ""
"建議是（在大多數情況下）**避免依賴內建的 Ogg Theora 匯出器**。你可能想要優先"
"使用外部程式編碼影片的原因有 2 個："

msgid ""
"Some programs such as Blender can render to Ogg Theora. However, the default "
"quality presets are usually very low by today's standards. You may be able "
"to increase the quality options in the software you're using, but you may "
"find the output quality to remain less than ideal (given the increased file "
"size). This usually means that the software only supports encoding to "
"constant bit rate (CBR), instead of variable bit rate (VBR). VBR encoding "
"should be preferred in most scenarios as it provides a better quality to "
"file size ratio."
msgstr ""
"Blender 等程式可以算繪 Ogg Theora。然而，預設的品質預設就如今的標準而言通常是"
"非常低的。你可能可以在軟體裡提高品質選項，但輸出的品質可能仍然不理想（提升了"
"檔大小）。這通常意味著那個軟體只支援按照固定位元速率（CBR）去進行編碼，不支援"
"變數位元速率（VBR）。大多數場合應該都優先使用 VBR 編碼，因為在相同的檔大小下"
"能夠提供更好的品質。"

msgid "Some other programs can't render to Ogg Theora at all."
msgstr "有些其他的程式根本無法算繪 Ogg Theora。"

msgid ""
"In this case, you can **render the video to an intermediate high-quality "
"format** (such as a high-bitrate H.264 video) then re-encode it to Ogg "
"Theora. Ideally, you should use a lossless or uncompressed format as an "
"intermediate format to maximize the quality of the output Ogg Theora video, "
"but this can require a lot of disk space."
msgstr ""
"在這種情況下，你可以**將影片使用高品質格式算繪作為仲介**（例如高位元速率 "
"H.264 影片），然後再重新編碼成 Ogg Theora。理想情況下，你應該使用無損或者未壓"
"縮格式作為仲介格式，最大化輸出 Ogg Theora 影片的品質，不過這樣做會需要大量的"
"磁碟空間。"

msgid ""
"`HandBrake <https://handbrake.fr/>`__ (GUI) and `FFmpeg <https://ffmpeg.org/"
">`__ (CLI) are popular open source tools for this purpose. FFmpeg has a "
"steeper learning curve, but it's more powerful."
msgstr ""
"`HandBrake <https://handbrake.fr/>`__（GUI）和 `FFmpeg <https://ffmpeg.org/"
">`__（CLI）都是這方面非常流行的開源工具。FFmpeg 的學習曲線相對陡峭，但功能也"
"更強大。"

msgid ""
"Here are example FFmpeg commands to convert a MP4 video to Ogg Theora. Since "
"FFmpeg supports a lot of input formats, you should be able to use the "
"commands below with almost any input video format (AVI, MOV, WebM, …)."
msgstr ""
"這是將 MP4 視訊轉換為 Ogg Theora 的 FFmpeg 命令範例。因為 FFmpeg 支援很多輸入"
"格式，幾乎任何輸入影片格式（AVI、MOV、WebM……）應該都可以使用下面的命令。"

msgid ""
"Make sure your copy of FFmpeg is compiled with libtheora and libvorbis "
"support. You can check this by running ``ffmpeg`` without any arguments, "
"then looking at the ``configuration:`` line in the command output."
msgstr ""
"請確保你的 FFmpeg 副本是啟用 libtheora 和 libvorbis 編譯的。檢查方法是不帶任"
"何參數執行 ``ffmpeg``，然後查看命令輸出中的 ``configuration:`` 一行。"

msgid "Balancing quality and file size"
msgstr "平衡品質與檔大小"

msgid ""
"The **video quality** level (``-q:v``) must be between ``1`` and ``10``. "
"Quality ``6`` is a good compromise between quality and file size. If "
"encoding at a high resolution (such as 1440p or 4K), you will probably want "
"to decrease ``-q:v`` to ``5`` to keep file sizes reasonable. Since pixel "
"density is higher on a 1440p or 4K video, lower quality presets at higher "
"resolutions will look as good or better compared to low-resolution videos."
msgstr ""
"**影片品質**等級（``-q:v``）必須在 ``1`` 和 ``10`` 之間。將品質設為 ``6`` 是"
"在品質和檔大小之間的一個不錯的妥協。如果要編碼較高的解析度（例如 1440p 或者 "
"4K），你可能想要把 ``-q:v`` 降為 ``5``，把檔大小控制在合理的範圍內。因為 "
"1440p 和 4K 影片的像素密度更高，相較於低解析度的影片，較低的品質預設看上去的"
"效果是一樣甚至更好的。"

msgid ""
"The **audio quality** level (``-q:a``) must be between ``-1`` and ``10``. "
"Quality ``6`` provides a good compromise between quality and file size. In "
"contrast to video quality, increasing audio quality doesn't increase the "
"output file size nearly as much. Therefore, if you want the cleanest audio "
"possible, you can increase this to ``9`` to get *perceptually lossless* "
"audio. This is especially valuable if your input file already uses lossy "
"audio compression. Higher quality audio does increase the CPU usage of the "
"decoder, so it might lead to audio dropouts in case of high system load. See "
"`this page <https://wiki.hydrogenaud.io/index.php?"
"title=Recommended_Ogg_Vorbis#Recommended_Encoder_Settings>`__ for a table "
"listing Ogg Vorbis audio quality presets and their respective variable "
"bitrates."
msgstr ""
"** 音訊品質**等級（``-q:a``）必須在 ``1`` 和 ``10`` 之間。將品質設為 ``6`` 是"
"在品質和檔大小之間的一個不錯的妥協。與影片品質不同，提升音訊品質並不會顯著增"
"加輸出檔的大小。因此，如果你想要盡可能清晰的音訊，可以將其設為 ``9``，達到*感"
"知上無損*的音訊。在你的輸入檔使用的已經是無損音訊壓縮時尤其有用。Ogg Vorbis "
"音訊品質預設及其對應的變數位元速率表見`這個頁面 <https://wiki.hydrogenaud.io/"
"index.php?title=Recommended_Ogg_Vorbis#Recommended_Encoder_Settings>`__。"

msgid "FFmpeg: Convert while preserving original video resolution"
msgstr "FFmpeg：轉換時保持原始影片解析度"

msgid ""
"The following command converts the video while keeping its original "
"resolution. The video and audio's bitrate will be variable to maximize "
"quality while saving space in parts of the video/audio that don't require a "
"high bitrate (such as static scenes)."
msgstr ""
"以下命令會在保持原始解析度的前提下對影片進行轉換。影片和音訊的位元速率會被設"
"為可變，在最大化品質的同時在不需要高位元速率影片/音訊的時候節省空間（例如靜態"
"場景）。"

msgid "FFmpeg: Resize the video then convert it"
msgstr "FFmpeg：調整影片大小並轉換"

msgid ""
"The following command resizes a video to be 720 pixels tall (720p), while "
"preserving its existing aspect ratio. This helps decrease the file size "
"significantly if the source is recorded at a higher resolution than 720p:"
msgstr ""
"以下命令會在保持現有長寬比的前提下將影片調整到 720 像素高（720p）。如果原始檔"
"解析度是大於 720p 的，就能夠顯著降低檔大小："

msgid "Chroma Key Videos"
msgstr ""

msgid ""
"Chroma key, commonly known as the \"green screen\" or \"blue screen\" "
"effect, allows you to remove a specific color from an image or video and "
"replace it with another background. This effect is widely used in video "
"production to composite different elements together seamlessly."
msgstr ""

msgid ""
"We will achieve the chroma key effect by writing a custom shader in GDScript "
"and using a `VideoStreamPlayer` node to display the video content."
msgstr ""

#, fuzzy
msgid "Scene Setup"
msgstr "場景設定"

msgid ""
"Ensure that the scene contains a `VideoStreamPlayer` node to play the video "
"and a `Control` node to hold the UI elements for controlling the chroma key "
"effect."
msgstr ""

#, fuzzy
msgid "Writing the Custom Shader"
msgstr "改進著色器"

msgid "To implement the chroma key effect, follow these steps:"
msgstr ""

msgid ""
"Select the `VideoStreamPlayer` node in the scene and go to its properties. "
"Under `CanvasItem > Material`, create a new shader named \"ChromaKeyShader."
"gdshader.\""
msgstr ""

msgid ""
"In the \"ChromaKeyShader.gdshader\" file, write the custom shader code as "
"shown below:"
msgstr ""

msgid ""
"The shader uses the distance calculation to identify pixels close to the "
"chroma key color and discards them, effectively removing the selected color. "
"Pixels that are slightly further away from the chroma key color are faded "
"based on the fade_factor, blending them smoothly with the surrounding "
"colors. This process creates the desired chroma key effect, making it appear "
"as if the background has been replaced with another image or video."
msgstr ""

msgid ""
"The code above represents a simple demonstration of the Chroma Key shader, "
"and users can customize it according to their specific requirements."
msgstr ""

#, fuzzy
msgid "UI Controls"
msgstr "Control"

msgid ""
"To allow users to manipulate the chroma key effect in real-time, we created "
"sliders in the `Control` node. The `Control` node's script contains the "
"following functions:"
msgstr ""

msgid ""
"also make sure that the range of the sliders are appropriate, our settings "
"are :"
msgstr ""

#, fuzzy
msgid "Signal Handling"
msgstr "輸入"

msgid ""
"Connect the appropriate signal from the UI elements to the `Control` node's "
"script. you created in the `Control` node's script to control the chroma key "
"effect. These signal handlers will update the shader's uniform variables in "
"response to user input."
msgstr ""

msgid ""
"Save and run the scene to see the chroma key effect in action! With the "
"provided UI controls, you can now adjust the chroma key color, pickup range, "
"and fade amount in real-time, achieving the desired chroma key functionality "
"for your video content."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
