# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Advanced vector math"
msgstr "高等向量數學"

msgid "Planes"
msgstr "平面"

msgid ""
"The dot product has another interesting property with unit vectors. Imagine "
"that perpendicular to that vector (and through the origin) passes a plane. "
"Planes divide the entire space into positive (over the plane) and negative "
"(under the plane), and (contrary to popular belief) you can also use their "
"math in 2D:"
msgstr ""
"單位向量的點積還有一個有趣的性質。請想像垂直於這個向量（通過原點）經過一個平"
"面。平面將整個空間劃分為正（在平面上）和負（在平面下），而（與普遍的看法相"
"反）您也可以在 2D 中進行這樣的數學運算："

msgid ""
"Unit vectors that are perpendicular to a surface (so, they describe the "
"orientation of the surface) are called **unit normal vectors**. Though, "
"usually they are just abbreviated as *normals*. Normals appear in planes, 3D "
"geometry (to determine where each face or vertex is siding), etc. A "
"**normal** *is* a **unit vector**, but it's called *normal* because of its "
"usage. (Just like we call (0,0) the Origin!)."
msgstr ""
"垂直於表面的單位向量稱為**單位法向量**（因此，它們描述的是表面的朝向）。不"
"過，通常會把它們縮寫為*法線*。平面、3D 幾何體等場合中都會用到法線（用來確定各"
"個面或頂點的側邊）。**法線**是一種**單位向量**，因為用途才被稱為*法線*。（就"
"像我們說座標 (0,0) 是“原點”一樣！）。"

msgid ""
"The plane passes by the origin and the surface of it is perpendicular to the "
"unit vector (or *normal*). The side towards the vector points to is the "
"positive half-space, while the other side is the negative half-space. In 3D "
"this is exactly the same, except that the plane is an infinite surface "
"(imagine an infinite, flat sheet of paper that you can orient and is pinned "
"to the origin) instead of a line."
msgstr ""
"它就像看起來那樣簡單. 平面經過原點, 它的表面垂直於單位向量(或 *法線* ). 指向"
"向量的一邊是正半空間, 而另一邊是負半空間. 在3維空間中, 這完全相同, 除了平面是"
"一個無限的表面(想像一張無限伸展的平坦紙張, 它固定在原點)而不是直線."

msgid "Distance to plane"
msgstr "到平面的距離"

msgid ""
"Now that it's clear what a plane is, let's go back to the dot product. The "
"dot product between a **unit vector** and any **point in space** (yes, this "
"time we do dot product between vector and position), returns the **distance "
"from the point to the plane**:"
msgstr ""
"現在平面是什麼就很清楚了，讓我們再回到點積上。**單位向量**和任何**空間點**之"
"間的點積（是的，這次我們在向量和位置之間進行點乘），將返回**從該點到平面的距"
"離**："

msgid ""
"But not just the absolute distance, if the point is in the negative half "
"space the distance will be negative, too:"
msgstr "但不僅僅是絕對距離, 如果點在負半空間中, 距離也是負的:"

msgid "This allows us to tell which side of the plane a point is."
msgstr "這使我們能夠知道點在平面的哪一側."

msgid "Away from the origin"
msgstr "遠離原點"

msgid ""
"I know what you are thinking! So far this is nice, but *real* planes are "
"everywhere in space, not only passing through the origin. You want real "
"*plane* action and you want it *now*."
msgstr ""
"我知道您在想什麼！到目前為止, 這還不錯, 但 *真正的* 平面在空間中無處不在, 而"
"不僅僅是通過原點的平面. 您想要真正的 *平面* , 您 *現在* 就想行動起來."

msgid ""
"Remember that planes not only split space in two, but they also have "
"*polarity*. This means that it is possible to have perfectly overlapping "
"planes, but their negative and positive half-spaces are swapped."
msgstr ""
"記住, 平面不僅把空間分成兩半, 而且它們還有 *極性* . 這意味著有可能有完全重疊"
"的平面, 但是它們的負半空間和正半空間是相反的."

msgid ""
"With this in mind, let's describe a full plane as a **normal** *N* and a "
"**distance from the origin** scalar *D*. Thus, our plane is represented by N "
"and D. For example:"
msgstr ""
"記住這一點, 讓我們將整個平面描述為 **法線** *N* 和 **距原點的距離** 標量 "
"*D* . 因此, 我們的平面將由N和D表示, 例如:"

msgid ""
"For 3D math, Godot provides a :ref:`Plane <class_Plane>` built-in type that "
"handles this."
msgstr ""
"對於3維的情況,Godot提供了一個 :ref:`Plane <class_Plane>` 內建型別來處理這個問"
"題."

msgid ""
"Basically, N and D can represent any plane in space, be it for 2D or 3D "
"(depending on the amount of dimensions of N) and the math is the same for "
"both. It's the same as before, but D is the distance from the origin to the "
"plane, travelling in N direction. As an example, imagine you want to reach a "
"point in the plane, you will just do:"
msgstr ""
"基本上,N和D可以表示空間中的任何平面, 無論是對於2D還是3D(取決於變數N的維數), "
"數學上對於兩者都是一樣的. 和以前差不多, 但D是原點沿N方向移動到平面的距離. 例"
"如, 想像一下您想在到達平面上的一個點, 您會這樣做:"

msgid ""
"This will stretch (resize) the normal vector and make it touch the plane. "
"This math might seem confusing, but it's actually much simpler than it "
"seems. If we want to tell, again, the distance from the point to the plane, "
"we do the same but adjusting for distance:"
msgstr ""
"這將拉伸(調整大小)法線向量並使其接觸平面. 這個數學可能看起來很疑惑, 但實際上"
"比看起來簡單得多. 如果我們想再說一遍, 從點到平面的距離, 我們也會這樣做, 但是"
"要調整距離:"

msgid "The same thing, using a built-in function:"
msgstr "使用內建函式做同樣的事情:"

msgid "This will, again, return either a positive or negative distance."
msgstr "這將再次返回一個正或負的距離."

msgid ""
"Flipping the polarity of the plane can be done by negating both N and D. "
"This will result in a plane in the same position, but with inverted negative "
"and positive half spaces:"
msgstr ""
"翻轉平面的極性可以通過同時對N和D取負來完成. 這將導致平面處於相同的位置, 但是"
"具有反轉的負半空間和正半空間:"

msgid ""
"Godot also implements this operator in :ref:`Plane <class_Plane>`. So, using "
"the format below will work as expected:"
msgstr "當然,Godot也在 :ref:`Plane <class_Plane>` 中實作這個操作, 像這樣:"

msgid ""
"So, remember, the plane's main practical use is that we can calculate the "
"distance to it. So, when is it useful to calculate the distance from a point "
"to a plane? Let's see some examples."
msgstr ""
"所以, 記住, 平面就是這樣, 它的主要用途就是計算到它的距離. 那麼, 為什麼計算一"
"個點到一個平面的距離是有用的呢？非常有用！讓我們來看一些簡單範例."

msgid "Constructing a plane in 2D"
msgstr "在二維空間中建構平面"

msgid ""
"Planes clearly don't come out of nowhere, so they must be built. "
"Constructing them in 2D is easy, this can be done from either a normal (unit "
"vector) and a point, or from two points in space."
msgstr ""
"平面顯然不是從哪兒冒出來的, 所以必須建構. 在2D中建構它們很簡單, 這可以從法線"
"(單位向量)和點, 或者用2維空間中的兩個點來完成."

msgid ""
"In the case of a normal and a point, most of the work is done, as the normal "
"is already computed, so calculate D from the dot product of the normal and "
"the point."
msgstr ""
"針對法線和點的情況，大部分工作已經完成，因為當法線已經計算出來時，只需從法線"
"和點的點積得到 D。"

msgid ""
"For two points in space, there are actually two planes that pass through "
"them, sharing the same space but with normal pointing to the opposite "
"directions. To compute the normal from the two points, the direction vector "
"must be obtained first, and then it needs to be rotated 90° degrees to "
"either side:"
msgstr ""
"對於空間中的兩個點, 實際上會有兩個平面同時經過它們, 它們共用相同的空間, 但是"
"法線方向相反. 為了從這兩個點計算面的法線, 必須首先獲得方向向量, 然後將向任何"
"一邊旋轉90°:"

msgid ""
"The rest is the same as the previous example. Either point_a or point_b will "
"work, as they are in the same plane:"
msgstr ""
"其餘的與前面的範例相同,point_a或point_b都可以工作, 因為它們在相同的平面中:"

msgid ""
"Doing the same in 3D is a little more complex and is explained further down."
msgstr "在3D中做同樣的操作稍微複雜一些, 下面將進一步解釋."

msgid "Some examples of planes"
msgstr "平面的一些範例"

msgid ""
"Here is an example of what planes are useful for. Imagine you have a `convex "
"<https://www.mathsisfun.com/definitions/convex.html>`__ polygon. For "
"example, a rectangle, a trapezoid, a triangle, or just any polygon where no "
"faces bend inwards."
msgstr ""
"這裡有一個簡單的範例, 說明平面的用途. 假設您有一個 `凸 <https://www."
"mathsisfun.com/definitions/convex.html>`__ 多邊形. 例如, 矩形, 梯形, 三角形或"
"任何沒有向內彎曲的多邊形."

msgid ""
"For every segment of the polygon, we compute the plane that passes by that "
"segment. Once we have the list of planes, we can do neat things, for example "
"checking if a point is inside the polygon."
msgstr ""
"對多邊形的每個部分, 我們計算出經過該部分的平面. 一旦我們有了平面的列表, 我們"
"就可以做些分類的事情, 例如檢查一個點是否在多邊形內部."

msgid ""
"We go through all planes, if we can find a plane where the distance to the "
"point is positive, then the point is outside the polygon. If we can't, then "
"the point is inside."
msgstr ""
"我們走訪所有平面, 如果我們能找到使得點到平面的距離為正的平面, 那麼點在多邊形"
"之外. 如果我們不能, 那麼這一點就在多邊形內部."

msgid "Code should be something like this:"
msgstr "程式碼應該是這樣的:"

msgid ""
"Pretty cool, huh? But this gets much better! With a little more effort, "
"similar logic will let us know when two convex polygons are overlapping too. "
"This is called the Separating Axis Theorem (or SAT) and most physics engines "
"use this to detect collision."
msgstr ""
"很酷, 是吧？但這可以變得更好！稍加努力, 類似的邏輯將讓我們知道兩個凸多邊形是"
"否重疊. 這叫做分離軸定理(或SAT), 大多數物理引擎都用這個來偵測碰撞."

msgid ""
"With a point, just checking if a plane returns a positive distance is enough "
"to tell if the point is outside. With another polygon, we must find a plane "
"where *all* *the* *other* *polygon* *points* return a positive distance to "
"it. This check is performed with the planes of A against the points of B, "
"and then with the planes of B against the points of A:"
msgstr ""
"對於一個點, 僅僅檢查一個平面是否返回正距離就足以判斷該點是否在外面. 對於一個"
"多邊形, 我們必須找到一個平面, 使得另一個多邊形上的所有點到它的距離為正. 這種"
"可以用A平面對B點進行檢查, 然後用B平面對A點進行檢查:"

msgid ""
"As you can see, planes are quite useful, and this is the tip of the iceberg. "
"You might be wondering what happens with non convex polygons. This is "
"usually just handled by splitting the concave polygon into smaller convex "
"polygons, or using a technique such as BSP (which is not used much nowadays)."
msgstr ""
"正如您所看到的, 平面是非常有用的, 然而這只是冰山一角. 您可能想知道非凸多邊形"
"會發生什麼. 這通常只是通過將凹多邊形分割成較小的凸多邊形來處理, 或者使用諸如"
"BSP(現在使用得不多)之類的技術."

msgid "Collision detection in 3D"
msgstr "三維碰撞偵測"

msgid ""
"This is another bonus bit, a reward for being patient and keeping up with "
"this long tutorial. Here is another piece of wisdom. This might not be "
"something with a direct use case (Godot already does collision detection "
"pretty well) but it's used by almost all physics engines and collision "
"detection libraries :)"
msgstr ""
"這是另一個獎勵, 是對耐心並跟上這個漫長的教學的獎勵. 這是另一條錦囊妙計. 這可"
"能不能直接拿來使用(Godot已經可以進行了相當棒的碰撞偵測了), 但是幾乎所有的物理"
"引擎和碰撞偵測庫都使用它的原理:)"

msgid ""
"Remember that converting a convex shape in 2D to an array of 2D planes was "
"useful for collision detection? You could detect if a point was inside any "
"convex shape, or if two 2D convex shapes were overlapping."
msgstr ""
"還記得把2D中的凸形轉換成2D平面陣列對碰撞偵測有用嗎？您可以偵測一個點是否在任"
"何凸形狀內, 或者兩個2D凸形狀是否重疊."

msgid ""
"Well, this works in 3D too, if two 3D polyhedral shapes are colliding, you "
"won't be able to find a separating plane. If a separating plane is found, "
"then the shapes are definitely not colliding."
msgstr ""
"嗯, 這在3D中也適用, 如果兩個3D多面體形狀碰撞, 您將無法找到分離平面. 如果發現"
"一個分離平面, 那麼形狀肯定不會發生碰撞."

msgid ""
"To refresh a bit a separating plane means that all vertices of polygon A are "
"in one side of the plane, and all vertices of polygon B are in the other "
"side. This plane is always one of the face-planes of either polygon A or "
"polygon B."
msgstr ""
"要得到分離平面意味著多邊形A的所有頂點都在平面的一側, 而多邊形B的所有頂點都在"
"另一側. 該平面始終是多邊形A或多邊形B的面向平面之一."

msgid ""
"In 3D though, there is a problem to this approach, because it is possible "
"that, in some cases a separating plane can't be found. This is an example of "
"such situation:"
msgstr ""
"然而在3D中, 這種方法存在一個問題, 因為在某些情況下可能找不到分離平面. 下面就"
"是這種情況的一個範例:"

msgid ""
"To avoid it, some extra planes need to be tested as separators, these planes "
"are the cross product between the edges of polygon A and the edges of "
"polygon B"
msgstr ""
"為了避免這種情況，一些額外的平面需要作為分隔器被測試，這些平面是多邊形 A 的邊"
"和多邊形 B 的邊的外積"

msgid "So the final algorithm is something like:"
msgstr "所以最後的演算法是這樣的:"

msgid "More information"
msgstr "更多資訊"

msgid ""
"For more information on using vector math in Godot, see the following "
"article:"
msgstr "關於在Godot中使用向量數學的更多資訊, 請參見以下文章:"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video series \"Essence of Linear Algebra\": https://www.youtube."
"com/watch?v=fNk_zzaMoSs&list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab"
msgstr ""
"如果你需要進一步的解釋，你可以看看 3Blue1Brown 的絕佳的系列影片《線性代數的本"
"質》：http://www.bilibili.com/video/BV1ys411472E?p=2"

msgid "Translation status"
msgstr "翻譯狀態"
