# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Matrices and transforms"
msgstr "矩陣與變換"

msgid "Introduction"
msgstr "前言"

msgid ""
"Before reading this tutorial, we recommend that you thoroughly read and "
"understand the :ref:`doc_vector_math` tutorial, as this tutorial requires a "
"knowledge of vectors."
msgstr ""
"在閱讀本教學之前，我們推薦你從頭到尾閱讀並且理解 :ref:`doc_vector_math` 教"
"學，因為本教學需要一點向量的知識。"

msgid ""
"This tutorial is about *transformations* and how we represent them in Godot "
"using matrices. It is not a full in-depth guide to matrices. Transformations "
"are most of the time applied as translation, rotation, and scale, so we will "
"focus on how to represent those with matrices."
msgstr ""
"這個教學介紹的是*變換*以及我們如何在 Godot 中使用矩陣表示它。這不是完整深入的"
"矩陣指南。變換大多數時候被應用為平移、旋轉、縮放，所以我們將會關注如何用矩陣"
"表示這些變換。"

msgid ""
"Most of this guide focuses on 2D, using :ref:`class_Transform2D` and :ref:"
"`class_Vector2`, but the way things work in 3D is very similar."
msgstr ""
"雖然這個指南主要關注於 2D，使用 :ref:`class_Transform2D` 和 :ref:"
"`class_Vector2`，但是 3D 中的工作方式也十分相似。"

msgid ""
"As mentioned in the previous tutorial, it is important to remember that in "
"Godot, the Y axis points *down* in 2D. This is the opposite of how most "
"schools teach linear algebra, with the Y axis pointing up."
msgstr ""
"正如之前的教學中提到的，要記住在 Godot 中，2D 的 Y 軸是*向下*的。這與學校裡教"
"的線性代數正好相反，在那裡 Y 軸是向上的。"

msgid ""
"The convention is that the X axis is red, the Y axis is green, and the Z "
"axis is blue. This tutorial is color-coded to match these conventions, but "
"we will also represent the origin vector with a blue color."
msgstr ""
"這裡的慣例是 X 軸用紅色、Y 軸用綠色、Z 軸用藍色。本教學中的顏色都遵循這個慣"
"例，不過我們也在原點向量上使用藍色。"

msgid "Matrix components and the Identity matrix"
msgstr "矩陣分量和單位矩陣"

msgid ""
"The identity matrix represents a transform with no translation, no rotation, "
"and no scale. Let's start by looking at the identity matrix and how its "
"components relate to how it visually appears."
msgstr ""
"單位矩陣代表一個沒有平移、沒有旋轉、沒有縮放的變換。讓我們開始看看單位矩陣以"
"及它的分量如何與它的視覺表現相聯繫吧。"

msgid ""
"Matrices have rows and columns, and a transformation matrix has specific "
"conventions on what each does."
msgstr "矩陣有行和列，變換矩陣對它們有特定的約定。"

msgid ""
"In the image above, we can see that the red X vector is represented by the "
"first column of the matrix, and the green Y vector is likewise represented "
"by the second column. A change to the columns will change these vectors. We "
"will see how they can be manipulated in the next few examples."
msgstr ""
"在上圖中，我們可以看到紅色的 X 向量由矩陣的第一列表示，綠色的 Y 向量則由第二"
"列表示。改變列就會改變這些向量。我們將在接下來的幾個例子中看到如何操作它們。"

msgid ""
"You should not worry about manipulating rows directly, as we usually work "
"with columns. However, you can think of the rows of the matrix as showing "
"which vectors contribute to moving in a given direction."
msgstr ""
"您不必擔心直接操作行, 因為我們通常使用列. 然而, 你可以把矩陣的行看作是表示哪"
"些向量有助於在給定的方向上移動."

msgid ""
"When we refer to a value such as ``t.x.y``, that's the Y component of the X "
"column vector. In other words, the bottom-left of the matrix. Similarly, ``t."
"x.x`` is top-left, ``t.y.x`` is top-right, and ``t.y.y`` is bottom-right, "
"where ``t`` is the Transform2D."
msgstr ""
"當我們指定一個值例如 `t.x.y` , 這是X列向量的Y分量. 換句話說, 是這個矩陣的左下"
"角. 類似地, `t.x.x` 是左上角, `t.y.x` 是右上角, 然後 `t.y.y` 是右下角, 在這"
"裡 `t` 是一個 Transform2D."

msgid "Scaling the transformation matrix"
msgstr "縮放變換矩陣"

msgid ""
"Applying a scale is one of the easiest operations to understand. Let's start "
"by placing the Godot logo underneath our vectors so that we can visually see "
"the effects on an object:"
msgstr ""
"應用一個縮放是最容易理解的操作之一. 讓我們開始吧, 把Godot logo放置於我們的向"
"量之下, 這樣我們可以直觀得看出應用於這些物件上的效果:"

msgid ""
"Now, to scale the matrix, all we need to do is multiply each component by "
"the scale we want. Let's scale it up by 2. 1 times 2 becomes 2, and 0 times "
"2 becomes 0, so we end up with this:"
msgstr ""
"現在, 為了縮放矩陣, 我們唯一需要做的就是將每個矩陣分量乘以我們想要的縮放比"
"例. 來將它縮放兩倍吧,1乘以2變成了2,0乘以2變成了0, 所以我們最後得到了這個:"

msgid "To do this in code, we multiply each of the vectors:"
msgstr "要在程式碼中做到這件事. 我們可以簡單地乘上每個向量:"

msgid ""
"If we wanted to return it to its original scale, we can multiply each "
"component by 0.5. That's pretty much all there is to scaling a "
"transformation matrix."
msgstr ""
"如果我們想要回到它原來的尺度, 我們可以對每個分量乘以0.5. 這幾乎就是縮放一個變"
"換矩陣的全部了."

msgid ""
"To calculate the object's scale from an existing transformation matrix, you "
"can use ``length()`` on each of the column vectors."
msgstr ""
"要從一個已經存在的變換矩陣中計算物件的縮放尺度, 你可以對每個列向量使用 "
"`length()` 方法."

msgid ""
"In actual projects, you can use the ``scaled()`` method to perform scaling."
msgstr "在實際的專案中, 你可以使用 `scaled()` 方法去執行縮放."

msgid "Rotating the transformation matrix"
msgstr "建立內容"

msgid ""
"We'll start the same way as earlier, with the Godot logo underneath the "
"identity matrix:"
msgstr "我們將以與前面相同的方式開始, 在標識矩陣下使用Godot徽標:"

msgid ""
"As an example, let's say we want to rotate our Godot logo clockwise by 90 "
"degrees. Right now the X axis points right and the Y axis points down. If we "
"rotate these in our head, we would logically see that the new X axis should "
"point down and the new Y axis should point left."
msgstr ""
"舉個例子，假設我們想順時針旋轉 Godot 旗標 90 度。現在，X 軸指向右邊，Y 軸向"
"下。如果我們在頭腦中旋轉這些，我們就會在邏輯上看到，新的 X 軸應該向下，新的 "
"Y 軸應該指向左邊。"

msgid ""
"You can imagine that you grab both the Godot logo and its vectors, and then "
"spin it around the center. Wherever you finish spinning, the orientation of "
"the vectors determines what the matrix is."
msgstr ""
"你可以想像, 你抓住了godot的圖示和它的向量, 然後旋轉它的中心. 無論你在哪裡完成"
"旋轉, 向量的方向決定了矩陣是什麼."

msgid ""
"We need to represent \"down\" and \"left\" in normal coordinates, so means "
"we'll set X to (0, 1) and Y to (-1, 0). These are also the values of "
"``Vector2.DOWN`` and ``Vector2.LEFT``. When we do this, we get the desired "
"result of rotating the object:"
msgstr ""
"我們需要在法線座標中表示“下”和“左”，因此我們將 X 設為 (0, 1)，將 Y 設為 (-1, "
"0)。這些也正是 Vector2.DOWN 和 Vector2.LEFT 的值，當我們這樣做時，就會得到旋"
"轉物件想要的結果："

msgid ""
"If you have trouble understanding the above, try this exercise: Cut a square "
"of paper, draw X and Y vectors on top of it, place it on graph paper, then "
"rotate it and note the endpoints."
msgstr ""
"如果你很難理解上面的內容, 那就試試這個練習: 剪一個正方形的紙, 在上面畫X和Y向"
"量, 把它放在圖表紙上, 然後旋轉它並記下端點."

msgid ""
"To perform rotation in code, we need to be able to calculate the values "
"programmatically. This image shows the formulas needed to calculate the "
"transformation matrix from a rotation angle. Don't worry if this part seems "
"complicated, I promise it's the hardest thing you need to know."
msgstr ""
"要在程式碼中執行旋轉, 我們需要能夠以程式設計方式計算值. 這幅圖像顯示了從旋轉"
"角度計算變換矩陣所需的公式. 如果這部分看起來很複雜, 別擔心, 我保證這是你需要"
"知道的最難的事情."

msgid ""
"Godot represents all rotations with radians, not degrees. A full turn is "
"`TAU` or `PI*2` radians, and a quarter turn of 90 degrees is `TAU/4` or "
"`PI/2` radians. Working with `TAU` usually results in more readable code."
msgstr ""
"Godot 用弧度表示所有的旋轉，不用角度。完整轉一圈是 `TAU` 或 `PI*2` 弧度，90 "
"度的四分之一圈是 `TAU/4` 或 `PI/2` 弧度。使用 `TAU` 通常會讓程式碼更易讀。"

msgid ""
"Fun fact: In addition to Y being *down* in Godot, rotation is represented "
"clockwise. This means that all the math and trig functions behave the same "
"as a Y-is-up CCW system, since these differences \"cancel out\". You can "
"think of rotations in both systems being \"from X to Y\"."
msgstr ""
"有趣的事實：在 Godot 中，不僅 Y 是*朝下*的，旋轉也是順時針的。這意味著所有的"
"數學和三角函式的行為都與 Y 朝上的 CCW 坐標系相同，因為這些差異“相互抵消”了。"
"你可以認為在這兩個坐標系中的旋轉都是“從 X 到 Y”。"

msgid ""
"In order to perform a rotation of 0.5 radians (about 28.65 degrees), we plug "
"in a value of 0.5 to the formula above and evaluate to find what the actual "
"values should be:"
msgstr ""
"為了執行 0.5 弧度的旋轉（約 28.65 度），我們只需將 0.5 代入上面的公式中，然後"
"計算出實際值應該是什麼："

msgid "Here's how that would be done in code (place the script on a Node2D):"
msgstr "這是在程式碼中完成的方法（將腳本放在 Node2D 上）："

msgid ""
"To calculate the object's rotation from an existing transformation matrix, "
"you can use ``atan2(t.x.y, t.x.x)``, where t is the Transform2D."
msgstr ""
"要從現有的變換矩陣中計算物件的旋轉，可以使用 `atan2(t.x.y, t.x.x)`，其中 t "
"是 Transform2D。"

msgid ""
"In actual projects, you can use the ``rotated()`` method to perform "
"rotations."
msgstr "在實際專案中，可以使用 `rotated()` 方法進行旋轉。"

msgid "Basis of the transformation matrix"
msgstr "變換矩陣的基"

msgid ""
"So far we have only been working with the ``x`` and ``y``, vectors, which "
"are in charge of representing rotation, scale, and/or shearing (advanced, "
"covered at the end). The X and Y vectors are together called the *basis* of "
"the transformation matrix. The terms \"basis\" and \"basis vectors\" are "
"important to know."
msgstr ""
"到目前為止，我們只使用 `x` 和 `y` 向量，它們負責表示旋轉、縮放和/或剪切（高"
"級，會在文末提及）。X 和 Y 向量合稱變換矩陣的*基*（Basis）。“基”和“基向量”都"
"是非常重要的術語。"

msgid ""
"You might have noticed that :ref:`class_Transform2D` actually has three :ref:"
"`class_Vector2` values: ``x``, ``y``, and ``origin``. The ``origin`` value "
"is not part of the basis, but it is part of the transform, and we need it to "
"represent position. From now on we'll keep track of the origin vector in all "
"examples. You can think of origin as another column, but it's often better "
"to think of it as completely separate."
msgstr ""
"你可能已經注意到 :ref:`class_Transform2D` 實際上有三個 :ref:`class_Vector2` "
"值：`x`、`y`、`origin`。其中 `origin` 值不是基的一部分，而是變換的一部分，我"
"們需要用它來表示位置。從現在開始，我們將在所有例子中記錄原點向量。您可以將原"
"點看作另一列，但把它認為是完全獨立的通常更好。"

msgid ""
"Note that in 3D, Godot has a separate :ref:`class_Basis` structure for "
"holding the three :ref:`class_Vector3` values of the basis, since the code "
"can get complex and it makes sense to separate it from :ref:"
"`class_Transform3D` (which is composed of one :ref:`class_Basis` and one "
"extra :ref:`class_Vector3` for the origin)."
msgstr ""
"請注意在 3D 中，Godot 有一個單獨的 :ref:`class_Basis` 結構，裡面包含矩陣基的"
"三個 :ref:`class_Vector3` 的值。因為程式碼可能變得複雜，因此將它們從 :ref:"
"`class_Transform`（由一個 :ref:`class_Basis` 和一個額外的原點 :ref:"
"`class_Vector3` 組成）中拆分出來是值得的。"

msgid "Translating the transformation matrix"
msgstr "變換矩陣的平移"

msgid ""
"Changing the ``origin`` vector is called *translating* the transformation "
"matrix. Translating is basically a technical term for \"moving\" the object, "
"but it explicitly does not involve any rotation."
msgstr ""
"對 `origin` 向量的修改稱為對變換矩陣的*平移*。平移其實上是“移動”物件的一個技"
"術術語，但它不會包含任何旋轉。"

msgid ""
"Let's work through an example to help understand this. We will start with "
"the identity transform like last time, except we will keep track of the "
"origin vector this time."
msgstr ""
"讓我們通過一個例子來幫助理解這一點。我們將像上次一樣從恒等變換開始，但這次我"
"們將記錄原點向量。"

msgid ""
"If we want to move the object to a position of (1, 2), we need to set its "
"``origin`` vector to (1, 2):"
msgstr ""
"如果希望物件移動到 (1, 2) 的位置，只需將其 `origin` 向量設定為 (1, 2)："

msgid ""
"There is also a ``translated()`` method, which performs a different "
"operation to adding or changing ``origin`` directly. The ``translated()`` "
"method will translate the object *relative to its own rotation*. For "
"example, an object rotated 90 degrees clockwise will move to the right when "
"``translated()`` with ``Vector2.UP``."
msgstr ""
"還有一個 `translated()` 方法，它執行的是與直接增加或更改 `origin` 不同的操"
"作。這個 `translated()` 方法將讓該物件相對於它自己的旋轉進行平移。例如，順時"
"針旋轉了 90 度的物件如果用 `Vector2.UP` 呼叫了 `translated()`，那麼它就會向右"
"移動。"

msgid ""
"Godot's 2D uses coordinates based on pixels, so in actual projects you will "
"want to translate by hundreds of units."
msgstr ""
"Godot 的 2D 使用基於像素的座標，所以在實際專案中，你會想要轉換成數百個單位。"

msgid "Putting it all together"
msgstr "融會貫通"

msgid ""
"We're going to apply everything we mentioned so far onto one transform. To "
"follow along, create a project with a Sprite2D node and use the Godot logo "
"for the texture resource."
msgstr ""
"我們將把到目前為止提到的所有內容都應用到一個變換上。接下來，使用 Sprite 節點"
"建立一個簡單的專案，並使用 Godot 徽標作為其紋理資源。"

msgid ""
"Let's set the translation to (350, 150), rotate by -0.5 rad, and scale by 3. "
"I've posted a screenshot, and the code to reproduce it, but I encourage you "
"to try and reproduce the screenshot without looking at the code!"
msgstr ""
"讓我們將平移設定為 (350, 150)，旋轉設為 -0.5 rad，縮放設為 3。我把螢幕截圖和"
"重現程式碼都發出來了，但我鼓勵您不看程式碼來嘗試重現螢幕截圖！"

msgid "Shearing the transformation matrix (advanced)"
msgstr "剪切變換矩陣（高級）"

msgid ""
"If you are only looking for how to *use* transformation matrices, feel free "
"to skip this section of the tutorial. This section explores an uncommonly "
"used aspect of transformation matrices for the purpose of building an "
"understanding of them."
msgstr ""
"如果您只想瞭解如何*使用*變換矩陣，請隨意跳過本教學的這一節。本節探討變換矩陣"
"的一個不常用的方面，目的是為了你建立對它們的理解。"

msgid "Node2D provides a shearing property out of the box."
msgstr "Node2D 提供了開箱即用的剪切屬性。"

msgid ""
"You may have noticed that a transform has more degrees of freedom than the "
"combination of the above actions. The basis of a 2D transformation matrix "
"has four total numbers in two :ref:`class_Vector2` values, while a rotation "
"value and a Vector2 for scale only has 3 numbers. The high-level concept for "
"the missing degree of freedom is called *shearing*."
msgstr ""
"您可能已經注意到，變換的自由度比上述操作的組合要多。2D 變換矩陣的基在兩個 :"
"ref:`class_Vector2` 值中總共有四個數，而旋轉值和縮放的 Vector2 只有三個數字。"
"缺失自由度的高級概念稱為*剪切*（Shearing）。"

msgid ""
"Normally, you will always have the basis vectors perpendicular to each "
"other. However, shearing can be useful in some situations, and understanding "
"shearing helps you understand how transforms work."
msgstr ""
"通常，您將始終擁有彼此垂直的基向量。但是，剪切在某些情況下可能很有用，瞭解剪"
"切可以幫助您理解變換的工作原理。"

msgid ""
"To show you visually how it will look, let's overlay a grid onto the Godot "
"logo:"
msgstr "為了直觀地向您展示它的外觀, 讓我們在Godot徽標上疊加一個網格:"

msgid ""
"Each point on this grid is obtained by adding the basis vectors together. "
"The bottom-right corner is X + Y, while the top-right corner is X - Y. If we "
"change the basis vectors, the entire grid moves with it, as the grid is "
"composed of the basis vectors. All lines on the grid that are currently "
"parallel will remain parallel no matter what changes we make to the basis "
"vectors."
msgstr ""
"此網格上的每個點都是通過將基向量相加而獲得的。右下角是 X + Y，而右上角是 X - "
"Y。如果我們更改基向量，整個柵格也會隨之移動，因為柵格是由基向量組成的。無論我"
"們對基向量做什麼更改，柵格上目前平行的所有直線都將保持平行。"

msgid "As an example, let's set Y to (1, 1):"
msgstr "例如, 讓我們將Y設定為(1,1):"

msgid ""
"You can't set the raw values of a Transform2D in the editor, so you *must* "
"use code if you want to shear the object."
msgstr ""
"不能在編輯器中設定Transform2D的原始值, 所以想要剪切物件, 必須使用程式碼."

msgid ""
"Due to the vectors no longer being perpendicular, the object has been "
"sheared. The bottom-center of the grid, which is (0, 1) relative to itself, "
"is now located at a world position of (1, 1)."
msgstr ""
"由於向量不再垂直, 因此物件已被剪切. 柵格的底部中心(相對於自身為(0,1))現在位於"
"世界位置(1,1)."

msgid ""
"The intra-object coordinates are called UV coordinates in textures, so let's "
"borrow that terminology for here. To find the world position from a relative "
"position, the formula is U * X + V * Y, where U and V are numbers and X and "
"Y are the basis vectors."
msgstr ""
"物件內部座標在紋理中稱為UV座標, 因此我們借用此處的術語. 要從相對位置找到世界"
"位置, 公式為U*X+V*Y, 其中U和V是數字,X和Y是基向量."

msgid ""
"The bottom-right corner of the grid, which is always at the UV position of "
"(1, 1), is at the world position of (2, 1), which is calculated from X*1 + "
"Y*1, which is (1, 0) + (1, 1), or (1 + 1, 0 + 1), or (2, 1). This matches up "
"with our observation of where the bottom-right corner of the image is."
msgstr ""
"柵格的右下角始終位於UV位置(1,1), 位於世界位置(2,1), 該位置是從X*1+Y*1(即"
"(1,0)+(1,1)或(1+1,0+1)或(2,1)計算得出的. 這與我們觀察到的圖像右下角的位置相吻"
"合."

msgid ""
"Similarly, the top-right corner of the grid, which is always at the UV "
"position of (1, -1), is at the world position of (0, -1), which is "
"calculated from X*1 + Y*-1, which is (1, 0) - (1, 1), or (1 - 1, 0 - 1), or "
"(0, -1). This matches up with our observation of where the top-right corner "
"of the image is."
msgstr ""
"同樣, 柵格的右上角始終位於UV位置(1, -1), 位於世界位置(0, -1), 該位置是從"
"X*1+Y*-1計算得出的,X*1+Y*-1是(1,0)-(1,1)或(1-1,0-1)或(0, -1). 這與我們觀察到"
"的圖像右上角的位置相吻合."

msgid ""
"Hopefully you now fully understand the how a transformation matrix affects "
"the object, and the relationship between the basis vectors and how the "
"object's \"UV\" or \"intra-coordinates\" have their world position changed."
msgstr ""
"希望您現在完全瞭解變換矩陣如何影響物件，以及基向量之間的關係以及物件"
"的“UV”或“內部座標”如何更改其世界位置。"

msgid ""
"In Godot, all transform math is done relative to the parent node. When we "
"refer to \"world position\", that would be relative to the node's parent "
"instead, if the node had a parent."
msgstr ""
"在Godot中, 所有變換數學運算都是相對於父節點完成的. 當我們提到 \"世界位置\" "
"時, 如果節點有父節點, 那麼它將相對於節點的父位置."

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about linear transformations: https://www.youtube.com/watch?"
"v=kYB8IZa5AuE"
msgstr ""
"如果你想要更多的解釋，你可以查看 3Blue1Brown 關於線性變換的精彩影片：http://"
"www.bilibili.com/video/BV1ys411472E?p=4"

msgid "Practical applications of transforms"
msgstr "變換的實際應用"

msgid ""
"In actual projects, you will usually be working with transforms inside "
"transforms by having multiple :ref:`class_Node2D` or :ref:`class_Node3D` "
"nodes parented to each other."
msgstr ""
"在實際專案中，您通常會通過將多個 :ref:`class_Node2D` 或 :ref:`class_Spatial` "
"節點設定為彼此的父級來處理變換中的變換。"

msgid ""
"However, it's useful to understand how to manually calculate the values we "
"need. We will go over how you could use :ref:`class_Transform2D` or :ref:"
"`class_Transform3D` to manually calculate transforms of nodes."
msgstr ""
"但是, 有時手動計算我們需要的值非常有用. 我們將介紹如何使用 :ref:"
"`CLASS_Transform2D` 或 :ref:`CLASS_Transform` 手動計算節點轉換."

msgid "Converting positions between transforms"
msgstr "在變換之間轉換位置"

msgid ""
"There are many cases where you'd want to convert a position in and out of a "
"transform. For example, if you have a position relative to the player and "
"would like to find the world (parent-relative) position, or if you have a "
"world position and want to know where it is relative to the player."
msgstr ""
"在許多情況下，您可能需要將某個位置轉換為變換前或者變換後的位置。例如，如果您"
"有一個相對於玩家的位置並想要搜尋世界（相對於玩家來說是父級）位置，或者如果您"
"有一個世界位置並想知道它相對於玩家的位置。"

msgid ""
"We can find what a vector relative to the player would be defined in world "
"space as using the ``*`` operator:"
msgstr ""
"通過“xform”方法，我們可以找到相對於玩家的向量如果定義在世界空間中的話應該是什"
"麼："

msgid ""
"And we can use the ``*`` operator in the opposite order to find a what world "
"space position would be if it was defined relative to the player:"
msgstr ""
"我們可以使用 \"xform_inv\" 方法來搜尋世界空間位置(如果它是相對於玩家定義的):"

msgid ""
"If you know in advance that the transform is positioned at (0, 0), you can "
"use the \"basis_xform\" or \"basis_xform_inv\" methods instead, which skip "
"dealing with translation."
msgstr ""
"如果您事先知道變換位於 (0, 0) 處，則可以改"
"用“basis_xform”或“basis_xform_inv”方法，這將跳過處理平移的過程。"

msgid "Moving an object relative to itself"
msgstr "相對於物件本身移動物件"

msgid ""
"A common operation, especially in 3D games, is to move an object relative to "
"itself. For example, in first-person shooter games, you would want the "
"character to move forward (-Z axis) when you press :kbd:`W`."
msgstr ""
"一種常見的操作，尤其是在 3D 遊戲中，是相對於自身移動對象。例如，在第一人稱射"
"擊遊戲中，當您按下 :kbd:`W` 鍵時，您希望角色向前移動（-Z 軸）。"

msgid ""
"Since the basis vectors are the orientation relative to the parent, and the "
"origin vector is the position relative to the parent, we can add multiples "
"of the basis vectors to move an object relative to itself."
msgstr ""
"由於基向量是相對於父物件的方向，而原點向量是相對於父物件的位置，因此我們可以"
"簡單地將基向量的倍數相加，以相對於物件本身移動物件。"

msgid "This code moves an object 100 units to its own right:"
msgstr "此程式碼會讓物件向它自己的右邊移動 100 個單位："

msgid "For moving in 3D, you would need to replace \"x\" with \"basis.x\"."
msgstr "要在 3D 中移動，需要將“x”替換為“basis.x”。"

msgid ""
"In actual projects, you can use ``translate_object_local`` in 3D or "
"``move_local_x`` and ``move_local_y`` in 2D to do this."
msgstr ""
"在實際工程中，您可以使用 3D 中的 `translate_object_local` 或者 2D 中的 "
"`move_local_x` 和 `move_local_y` 來實作。"

msgid "Applying transforms onto transforms"
msgstr "將變換應用於變換"

msgid ""
"One of the most important things to know about transforms is how you can use "
"several of them together. A parent node's transform affects all of its "
"children. Let's dissect an example."
msgstr ""
"關於轉換, 需要瞭解的最重要的事情之一是如何將幾個轉換一起使用. 父節點的變換會"
"影響其所有子節點. 讓我們來剖析一個例子."

msgid ""
"In this image, the child node has a \"2\" after the component names to "
"distinguish them from the parent node. It might look a bit overwhelming with "
"so many numbers, but remember that each number is displayed twice (next to "
"the arrows and also in the matrices), and that almost half of the numbers "
"are zero."
msgstr ""
"在此圖像中, 子節點的元件名稱後面有一個 \"2\", 以將其與父節點區分開來. 這麼多"
"數字可能看起來有點令人不知所措, 但請記住, 每個數位都會顯示兩次(在箭頭旁邊和矩"
"陣中), 而且幾乎一半的數字都是零."

msgid ""
"The only transformations going on here are that the parent node has been "
"given a scale of (2, 1), the child has been given a scale of (0.5, 0.5), and "
"both nodes have been given positions."
msgstr ""
"這裡進行的唯一轉換是父節點的比例為(2,1), 子節點的比例為(0.5,0.5), 兩個節點都"
"指定了位置."

msgid ""
"All child transformations are affected by the parent transformations. The "
"child has a scale of (0.5, 0.5), so you would expect it to be a 1:1 ratio "
"square, and it is, but only relative to the parent. The child's X vector "
"ends up being (1, 0) in world space, because it is scaled by the parent's "
"basis vectors. Similarly, the child node's ``origin`` vector is set to (1, "
"1), but this actually moves it (2, 1) in world space, due to the parent "
"node's basis vectors."
msgstr ""
"所有子變換都受父變換的影響。子物件的比例為 (0.5, 0.5)，因此您會認為它是 1:1 "
"的比例正方形，確實如此，但僅相對於父物件。子物件的 X 向量最終在世界空間中為 "
"(1, 0)，因為它是由父物件的基礎向量縮放的。類似地，子節點的 `origin` 向量被設"
"定為(1,1)，但由於父節點的基向量，這實際上會在世界空間中移動 (2, 1)。"

msgid ""
"To calculate a child transform's world space transform manually, this is the "
"code we would use:"
msgstr "要手動計算子變換的世界空間變換, 我們將使用以下程式碼:"

msgid ""
"In actual projects, we can find the world transform of the child by applying "
"one transform onto another using the ``*`` operator:"
msgstr ""
"在實際工程中, 我們可以通過 `*` 運算子將一個變換應用到另一個變換中, 從而找到孩"
"子的世界變換:"

msgid "When multiplying matrices, order matters! Don't mix them up."
msgstr "當矩陣相乘時, 順序很重要！別把它們弄混了."

msgid "Lastly, applying the identity transform will always do nothing."
msgstr "最後, 應用身份變換始終不起任何作用."

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about matrix composition: https://www.youtube.com/watch?"
"v=XkY2DOUCWMU"
msgstr ""
"如果您想瞭解更多資訊，可以查看 3Blue1Brown 關於矩陣組成的精彩影片：http://"
"www.bilibili.com/video/BV1ys411472E?p=5"

msgid "Inverting a transformation matrix"
msgstr "求逆變換矩陣"

msgid ""
"The \"affine_inverse\" function returns a transform that \"undoes\" the "
"previous transform. This can be useful in some situations. Let's take a look "
"at a few examples."
msgstr ""
"affine_inverse 函式返回一個 \"撤銷\" 前一個轉換的轉換. 這在某些情況下可能很有"
"用, 但只提供幾個範例會更容易."

msgid ""
"Multiplying an inverse transform by the normal transform undoes all "
"transformations:"
msgstr "將反變換乘以法線變換將撤銷所有變換:"

msgid ""
"Transforming a position by a transform and its inverse results in the same "
"position:"
msgstr "通過轉換轉換位置及其反轉會導致相同的位置(與 \"xform_inv\" 相同):"

msgid "How does it all work in 3D?"
msgstr "這一切是如何在 3D 模式下工作的？"

msgid ""
"One of the great things about transformation matrices is that they work very "
"similarly between 2D and 3D transformations. All the code and formulas used "
"above for 2D work the same in 3D, with 3 exceptions: the addition of a third "
"axis, that each axis is of type :ref:`class_Vector3`, and also that Godot "
"stores the :ref:`class_Basis` separately from the :ref:`class_Transform3D`, "
"since the math can get complex and it makes sense to separate it."
msgstr ""
"變換矩陣的一個偉大之處在於, 它們在2D和3D變換之間的工作方式非常相似. 上面用於"
"2D的所有程式碼和公式在3D中的工作方式都相同, 只有3個不同之處: 增加了第三個軸, "
"每個軸的型別為 :ref:`CLASS_Vector3`, 並且Godot將 :ref:`CLASS_Basis` 與 :ref:"
"`CLASS_Transform` 分開儲存, 因為數學運算可能會很複雜, 因此將其分開是有意義的."

msgid ""
"All of the concepts for how translation, rotation, scale, and shearing work "
"in 3D are all the same compared to 2D. To scale, we take each component and "
"multiply it; to rotate, we change where each basis vector is pointing; to "
"translate, we manipulate the origin; and to shear, we change the basis "
"vectors to be non-perpendicular."
msgstr ""
"與二維相比, 有關平移, 旋轉, 縮放和剪切在三維中的工作方式的所有概念都是相同"
"的. 要縮放, 我們取每個分量並將其相乘；要旋轉, 我們更改每個基向量指向的位置；"
"要平移, 我們操縱原點；要剪切, 我們將基向量更改為不垂直."

msgid ""
"If you would like, it's a good idea to play around with transforms to get an "
"understanding of how they work. Godot allows you to edit 3D transform "
"matrices directly from the inspector. You can download this project which "
"has colored lines and cubes to help visualize the :ref:`class_Basis` vectors "
"and the origin in both 2D and 3D: https://github.com/godotengine/godot-demo-"
"projects/tree/master/misc/matrix_transform"
msgstr ""
"如果您願意, 最好嘗試一下轉換, 以瞭解它們是如何工作的. Godot 允許您直接從屬性"
"面板編輯 3D 變換矩陣. 您可以下載此專案, 其中包含彩色線條和立方體, 以幫助在 "
"2D 和 3D 中視覺化 :ref:`class_Basis` 向量和原點: https://github.com/"
"godotengine/godot-demo-projects/tree/master/misc/matrix_transform"

msgid ""
"You cannot edit Node2D's transform matrix directly in Godot 4.0's inspector. "
"This may be changed in a future release of Godot."
msgstr ""
"不能在Godot 3.2的屬性面板中直接編輯Node2D的變換矩陣. 在Godot的未來版本中, 這"
"一點可能會有所改變."

msgid ""
"If you would like additional explanation, you should check out 3Blue1Brown's "
"excellent video about 3D linear transformations: https://www.youtube.com/"
"watch?v=rHLEWRxRGiM"
msgstr ""
"如果你想要更多的解釋，你可以查看 3Blue1Brown 關於 3D 線性變換的精彩影片："
"http://www.bilibili.com/video/BV1ys411472E?p=6"

msgid "Representing rotation in 3D (advanced)"
msgstr "表示 3D 中的旋轉（高級）"

msgid ""
"The biggest difference between 2D and 3D transformation matrices is how you "
"represent rotation by itself without the basis vectors."
msgstr ""
"2D 和 3D 變換矩陣之間最大的區別在於您如何在沒有基向量的情況下自行表示旋轉。"

msgid ""
"With 2D, we have an easy way (atan2) to switch between a transformation "
"matrix and an angle. In 3D, rotation is too complex to represent as one "
"number. There is something called Euler angles, which can represent "
"rotations as a set of 3 numbers, however, they are limited and not very "
"useful, except for trivial cases."
msgstr ""
"對於2D, 我們有一個在變換矩陣和角度之間切換的簡單方法(Atan2). 在3D中, 我們不能"
"簡單地將旋轉表示為一個數字. 有一種叫做歐拉角的東西, 它可以將旋轉表示為一組3個"
"數位, 但它們是有限的, 除了微不足道的情況外, 它們並不是很有用."

msgid ""
"In 3D we do not typically use angles, we either use a transformation basis "
"(used pretty much everywhere in Godot), or we use quaternions. Godot can "
"represent quaternions using the :ref:`class_Quaternion` struct. My "
"suggestion to you is to completely ignore how they work under-the-hood, "
"because they are very complicated and unintuitive."
msgstr ""
"在 3D 中，我們通常不使用角度，我們要麼使用變換的基（在 Godot 中幾乎到處都使"
"用），要麼使用四元數。Godot 可以使用 :ref:`class_Quat` 結構表示四元數。我給你"
"的建議是完全忽略它們是如何在幕後工作的，因為它們非常複雜和不直觀。"

msgid ""
"However, if you really must know how it works, here are some great "
"resources, which you can follow in order:"
msgstr ""
"然而, 如果你真的想知道它是如何工作的, 這裡有一些很棒的參考資料, 你可以按順序"
"跟隨它們:"

msgid "https://www.youtube.com/watch?v=mvmuCPvRoWQ"
msgstr "https://www.youtube.com/watch?v=mvmuCPvRoWQ"

msgid "https://www.youtube.com/watch?v=d4EgbgTm0Bg"
msgstr "https://www.youtube.com/watch?v=d4EgbgTm0Bg"

msgid "https://eater.net/quaternions"
msgstr "https://eater.net/quaternions"

msgid "Translation status"
msgstr "翻譯狀態"
