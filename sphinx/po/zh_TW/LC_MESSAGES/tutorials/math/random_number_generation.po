# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Random number generation"
msgstr "亂數產生"

msgid ""
"Many games rely on randomness to implement core game mechanics. This page "
"guides you through common types of randomness and how to implement them in "
"Godot."
msgstr ""
"許多遊戲依靠隨機性來實作核心遊戲機制. 本頁將指導你瞭解常見的隨機性型別, 以及"
"如何在Godot中實作它們."

#, fuzzy
msgid ""
"After giving you a brief overview of useful functions that generate random "
"numbers, you will learn how to get random elements from arrays, "
"dictionaries, and how to use a noise generator in GDScript. Lastly, we'll "
"take a look at cryptographically secure random number generation and how it "
"differs from typical random number generation."
msgstr ""
"在簡要概述生成亂數的實用函式之後, 你將學習如何從陣列或字典中獲取隨機元素, 以"
"及如何在GDScript中使用雜訊生成器."

msgid ""
"Computers cannot generate \"true\" random numbers. Instead, they rely on "
"`pseudorandom number generators <https://en.wikipedia.org/wiki/"
"Pseudorandom_number_generator>`__ (PRNGs)."
msgstr ""
"電腦不能產生“真正的”亂數。相反，它們依賴`偽亂數產生器 <https://en.wikipedia."
"org/wiki/Pseudorandom_number_generator>`__（PRNG）。"

msgid ""
"Godot internally uses the `PCG Family <https://www.pcg-random.org/>`__ of "
"pseudorandom number generators."
msgstr ""

msgid "Global scope versus RandomNumberGenerator class"
msgstr "全域作用域 vs RandomNumberGenerator 類"

msgid ""
"Godot exposes two ways to generate random numbers: via *global scope* "
"methods or using the :ref:`class_RandomNumberGenerator` class."
msgstr ""
"Godot 提供了兩種生成亂數的方式：通過*全域作用域*方法或使用 :ref:"
"`class_RandomNumberGenerator` 類。"

msgid ""
"Global scope methods are easier to set up, but they don't offer as much "
"control."
msgstr "全域作用域方法更容易設定，但不能提供太多控制。"

msgid ""
"RandomNumberGenerator requires more code to use, but allows creating "
"multiple instances, each with their own seed and state."
msgstr ""
"RandomNumberGenerator 需要使用更多程式碼，但允許建立多個實例，每個實例都有自"
"己的種子和狀態。"

msgid ""
"This tutorial uses global scope methods, except when the method only exists "
"in the RandomNumberGenerator class."
msgstr "本教學使用全域作用域方法, 只存在於RandomNumberGenerator類中的方法除外."

msgid "The randomize() method"
msgstr "randomize() 方法"

msgid ""
"Since Godot 4.0, the random seed is automatically set to a random value when "
"the project starts. This means you don't need to call ``randomize()`` in "
"``_ready()`` anymore to ensure that results are random across project runs. "
"However, you can still use ``randomize()`` if you want to use a specific "
"seed number, or generate it using a different method."
msgstr ""

msgid ""
"In global scope, you can find a :ref:`randomize() "
"<class_@GlobalScope_method_randomize>` method. **This method should be "
"called only once when your project starts to initialize the random seed.** "
"Calling it multiple times is unnecessary and may impact performance "
"negatively."
msgstr ""
"在全域作用域內, 你可以找到一個 :ref:`randomize() "
"<class_@GDScript_method_randomize>` 方法. **這個方法只需要在你的專案開始初始"
"化隨機種子的時候呼叫一次** , 多次呼叫是多餘的, 並且有可能影響性能."

msgid ""
"Putting it in your main scene script's ``_ready()`` method is a good choice:"
msgstr "把它放在你的主場景腳本的 ``_ready()`` 方法中是個不錯的選擇："

msgid ""
"You can also set a fixed random seed instead using :ref:`seed() "
"<class_@GlobalScope_method_seed>`. Doing so will give you *deterministic* "
"results across runs:"
msgstr ""
"您也可以使用 :ref:`seed() <class_@GDScript_method_seed>` 設定固定的隨機種子。"
"這樣能在運作中獲得*確定性*的結果："

msgid ""
"When using the RandomNumberGenerator class, you should call ``randomize()`` "
"on the instance since it has its own seed:"
msgstr ""
"當使用RandomNumberGenerator類時，應該在實例上呼叫 ``randomize()`` ，因為它有"
"自己的種子:"

msgid "Getting a random number"
msgstr "設定主要場景"

msgid ""
"Let's look at some of the most commonly used functions and methods to "
"generate random numbers in Godot."
msgstr "讓我們來看看Godot中最常用的一些生成亂數的函式和方法."

msgid ""
"The function :ref:`randi() <class_@GlobalScope_method_randi>` returns a "
"random number between 0 and 2^32-1. Since the maximum value is huge, you "
"most likely want to use the modulo operator (``%``) to bound the result "
"between 0 and the denominator:"
msgstr ""
"函式 :ref:`randi() <class_@GDScript_method_randi>` 返回 0 到 2^32-1 之間的亂"
"數。由於最大值很大，您很可能希望使用模運算子 (``%``) 將結果限制在 0 和分母之"
"間："

msgid ""
":ref:`randf() <class_@GlobalScope_method_randf>` returns a random floating-"
"point number between 0 and 1. This is useful to implement a :ref:"
"`doc_random_number_generation_weighted_random_probability` system, among "
"other things."
msgstr ""
":ref:`randf() <class_@GDScript_method_randf>` 返回一個0到1之間的隨機浮點數. "
"在實作 :ref:`doc_random_number_generation_weighted_random_probability` 系統等"
"時非常有用."

msgid ""
":ref:`randfn() <class_RandomNumberGenerator_method_randfn>` returns a random "
"floating-point number following a `normal distribution <https://en.wikipedia."
"org/wiki/Normal_distribution>`__. This means the returned value is more "
"likely to be around the mean (0.0 by default), varying by the deviation (1.0 "
"by default):"
msgstr ""
":ref:`randfn() <class_RandomNumberGenerator_method_randfn>` 返回遵循 `正態分"
"佈 <https://en.wikipedia.org/wiki/Normal_distribution>`__ 的隨機浮點數。這意"
"味著返回值更有可能在平均值附近（預設為 0.0），隨偏差變化（預設為 1.0）:"

msgid ""
":ref:`randf_range() <class_@GlobalScope_method_randf_range>` takes two "
"arguments ``from`` and ``to``, and returns a random floating-point number "
"between ``from`` and ``to``:"
msgstr ""
":ref:`rand_range() <class_@GDScript_method_rand_range>` 接受兩個參數 "
"``from`` 和 ``to`` ，並返回一個介於 ``from`` 和 ``to`` 之間的隨機浮點數:"

msgid ""
":ref:`RandomNumberGenerator.randi_range() "
"<class_RandomNumberGenerator_method_randi_range>` takes two arguments "
"``from`` and ``to``, and returns a random integer between ``from`` and "
"``to``:"
msgstr ""
":ref:`RandomNumberGenerator.randi_range() "
"<class_RandomNumberGenerator_method_randi_range>` 接受兩個參數 ``from`` 和 "
"``to`` ，並返回一個介於 ``from`` 和 ``to`` 之間的隨機整數："

msgid "Get a random array element"
msgstr "獲取一個亂陣列元素"

msgid ""
"We can use random integer generation to get a random element from an array:"
msgstr "我們可以使用隨機整數生成來從陣列中獲得一個隨機元素:"

msgid ""
"To prevent the same fruit from being picked more than once in a row, we can "
"add more logic to this method:"
msgstr "為了防止連續多次採摘相同的水果，我們可以給這個方法新增更多的邏輯:"

msgid ""
"This approach can be useful to make random number generation feel less "
"repetitive. Still, it doesn't prevent results from \"ping-ponging\" between "
"a limited set of values. To prevent this, use the :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` pattern instead."
msgstr ""
"這種方法可以讓亂數產生的感覺不那麼重複. 不過, 它仍然不能防止結果在有限的一組"
"值之間 \"乒乓反復\". 為了防止這種情況, 請使用 :ref:`shuffle bag "
"<doc_random_number_generation_shuffle_bags>` 模式來代替."

msgid "Get a random dictionary value"
msgstr "獲取一個隨機字典值"

msgid "We can apply similar logic from arrays to dictionaries as well:"
msgstr "我們也可以將陣列的類似邏輯應用於字典:"

msgid "Weighted random probability"
msgstr "加權隨機概率"

msgid ""
"The :ref:`randf() <class_@GlobalScope_method_randf>` method returns a "
"floating-point number between 0.0 and 1.0. We can use this to create a "
"\"weighted\" probability where different outcomes have different likelihoods:"
msgstr ""
":ref:`randf() <class_@GDScript_method_randf>` 方法返回一個介於 0.0 和 1.0 之"
"間的浮點數。我們可以使用它來建立“加權”概率，其中不同的結果具有不同的可能性："

msgid "\"Better\" randomness using shuffle bags"
msgstr "使用 shuffle bag 達到“更好”隨機性"

msgid ""
"Taking the same example as above, we would like to pick fruits at random. "
"However, relying on random number generation every time a fruit is selected "
"can lead to a less *uniform* distribution. If the player is lucky (or "
"unlucky), they could get the same fruit three or more times in a row."
msgstr ""
"以上面同樣的例子為例, 我們希望隨機挑選水果. 然而, 每次選擇水果時依靠亂數產生"
"會導致分佈不那麼 *均勻* . 如果玩家足夠幸運(或不幸), 他們可能會連續三次或更多"
"次得到相同的水果."

msgid ""
"You can accomplish this using the *shuffle bag* pattern. It works by "
"removing an element from the array after choosing it. After multiple "
"selections, the array ends up empty. When that happens, you reinitialize it "
"to its default value::"
msgstr ""
"你可以使用 *shuffle bag* 模式來實作。它的工作原理是在選擇陣列後從陣列中刪除一"
"個元素。多次選擇之後，陣列會被清空。當這種情況發生時，就將陣列重新初始化為預"
"設值： ::"

msgid ""
"When running the above code, there is a chance to get the same fruit twice "
"in a row. Once we picked a fruit, it will no longer be a possible return "
"value unless the array is now empty. When the array is empty, we reset it "
"back to its default value, making it possible to have the same fruit again, "
"but only once."
msgstr ""
"在運作上面的程式碼時, 仍有可能連續兩次得到同一個水果. 我們摘下一個水果時, 它"
"將不再是一個可能的返回值, 但除非陣列現在是空的. 當陣列為空時, 此時我們將其重"
"設回預設值, 這樣就導致了能再次獲得相同的水果, 但只有這一次."

msgid "Random noise"
msgstr "隨機數函式"

msgid ""
"The random number generation shown above can show its limits when you need a "
"value that *slowly* changes depending on the input. The input can be a "
"position, time, or anything else."
msgstr ""
"當你需要一個 *緩慢* 根據輸入而變化的值時, 上面顯示的亂數產生方式就顯示出了它"
"們的局限性. 這裡的輸入可以是位置, 時間或其他任何東西."

msgid ""
"To achieve this, you can use random *noise* functions. Noise functions are "
"especially popular in procedural generation to generate realistic-looking "
"terrain. Godot provides :ref:`class_fastnoiselite` for this, which supports "
"1D, 2D and 3D noise. Here's an example with 1D noise:"
msgstr ""
"為此，您可以使用隨機*雜訊*函式。雜訊函式在程式式生成中特別受歡迎，可以生成逼"
"真的地形。 Godot 為此提供了 :ref:`class_opensimplexnoise`，它支援 1D、2D、3D "
"和 4D 雜訊。這是一個 1D 雜訊的例子："

msgid "Cryptographically secure pseudorandom number generation"
msgstr ""

msgid ""
"So far, the approaches mentioned above are **not** suitable for "
"*cryptographically secure* pseudorandom number generation (CSPRNG). This is "
"fine for games, but this is not sufficient for scenarios where encryption, "
"authentication or signing is involved."
msgstr ""

msgid ""
"Godot offers a :ref:`class_Crypto` class for this. This class can perform "
"asymmetric key encryption/decryption, signing/verification, while also "
"generating cryptographically secure random bytes, RSA keys, HMAC digests, "
"and self-signed :ref:`class_X509Certificate`\\ s."
msgstr ""

msgid ""
"The downside of :abbr:`CSPRNG (Cryptographically secure pseudorandom number "
"generation)` is that it's much slower than standard pseudorandom number "
"generation. Its API is also less convenient to use. As a result, :abbr:"
"`CSPRNG (Cryptographically secure pseudorandom number generation)` should be "
"avoided for gameplay elements."
msgstr ""

msgid ""
"Example of using the Crypto class to generate 2 random integers between "
"``0`` and ``2^32 - 1`` (inclusive):"
msgstr ""

msgid ""
"See :ref:`class_PackedByteArray`'s documentation for other methods you can "
"use to decode the generated bytes into various types of data, such as "
"integers or floats."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
