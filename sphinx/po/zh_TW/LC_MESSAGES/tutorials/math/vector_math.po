# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Vector math"
msgstr "向量數學"

msgid "Introduction"
msgstr "前言"

msgid ""
"This tutorial is a short and practical introduction to linear algebra as it "
"applies to game development. Linear algebra is the study of vectors and "
"their uses. Vectors have many applications in both 2D and 3D development and "
"Godot uses them extensively. Developing a good understanding of vector math "
"is essential to becoming a strong game developer."
msgstr ""
"本教學是一個簡短而實用的線性代數介紹，因為它適用於遊戲開發。線性代數是研究向"
"量及其用途的學科。向量在 2D 和 3D 開發中都有許多應用，Godot 對它們的應用也非"
"常廣泛。要成為一名優秀的遊戲開發者，對向量數學的理解是必不可少的。"

msgid ""
"This tutorial is **not** a formal textbook on linear algebra. We will only "
"be looking at how it is applied to game development. For a broader look at "
"the mathematics, see https://www.khanacademy.org/math/linear-algebra"
msgstr ""
"本教學**不是**線性代數的正式教科書。我們將只關注它如何應用於遊戲開發。要更全"
"面地瞭解數學，請參見 https://www.khanacademy.org/math/linear-algebra"

msgid "Coordinate systems (2D)"
msgstr "坐標系（2D）"

msgid ""
"In 2D space, coordinates are defined using a horizontal axis (``x``) and a "
"vertical axis (``y``). A particular position in 2D space is written as a "
"pair of values such as ``(4, 3)``."
msgstr ""
"在 2D 空間中，使用水平軸（``x``）和垂直軸（``y``）定義座標。2D 空間中的特定位"
"置會被寫成一對值，如 ``(4, 3)``。"

msgid ""
"If you're new to computer graphics, it might seem odd that the positive "
"``y`` axis points **downwards** instead of upwards, as you probably learned "
"in math class. However, this is common in most computer graphics "
"applications."
msgstr ""
"如果您是電腦圖形學的新手，可能會覺得很奇怪，``y`` 軸的正方向**朝下**而不是向"
"上（您在數學課上學到的就像那樣）。然而，這在大多數電腦圖形應用程式中是常見"
"的。"

msgid ""
"Any position in the 2D plane can be identified by a pair of numbers in this "
"way. However, we can also think of the position ``(4, 3)`` as an **offset** "
"from the ``(0, 0)`` point, or **origin**. Draw an arrow pointing from the "
"origin to the point:"
msgstr ""
"2D 平面上的任何位置都可以用一對數字來表示。然而，我們也可以將位置 ``(4, 3)`` "
"看作是從 ``(0, 0)`` 點或**原點**出發的**偏移**。畫一個箭頭從原點指向點："

msgid ""
"This is a **vector**. A vector represents a lot of useful information. As "
"well as telling us that the point is at ``(4, 3)``, we can also think of it "
"as an angle ``θ`` (theta) and a length (or magnitude) ``m``. In this case, "
"the arrow is a **position vector** - it denotes a position in space, "
"relative to the origin."
msgstr ""
"這是一個**向量**。向量表示許多有用的資訊。除了告訴我們點在 ``(4, 3)`` 之外，"
"我們還可以把它看成角度 ``θ`` 和長度（或幅度）``m``。在這種情況下，箭頭是一個"
"**位置向量**——它表示空間中相對於原點的位置。"

msgid ""
"A very important point to consider about vectors is that they only represent "
"**relative** direction and magnitude. There is no concept of a vector's "
"position. The following two vectors are identical:"
msgstr ""
"關於向量, 需要考慮的一個重要點是它們僅表示 **相對** 方向和大小. 沒有一個向量"
"的位置的概念. 以下兩個向量相同:"

msgid ""
"Both vectors represent a point 4 units to the right and 3 units below some "
"starting point. It does not matter where on the plane you draw the vector, "
"it always represents a relative direction and magnitude."
msgstr ""
"這兩個向量都表示向右4個單位, 在某個起始點以下3個單位. 不管您在平面上畫哪個向"
"量, 它總是代表一個相對的方向和大小."

msgid "Vector operations"
msgstr "向量運算"

msgid ""
"You can use either method (x and y coordinates or angle and magnitude) to "
"refer to a vector, but for convenience, programmers typically use the "
"coordinate notation. For example, in Godot, the origin is the top-left "
"corner of the screen, so to place a 2D node named ``Node2D`` 400 pixels to "
"the right and 300 pixels down, use the following code:"
msgstr ""
"您可以使用任意一種方法,x和y座標或角度和大小, 來引用向量, 但是為了方便起見, 程"
"式師通常使用座標標記法. 例如, 在Godot中, 原點是螢幕左上角, 因此要將一個名為 "
"``Node2D`` 的2D節點向右400像素, 向下300像素, 請使用以下程式碼:"

msgid ""
"Godot supports both :ref:`Vector2 <class_Vector2>` and :ref:`Vector3 "
"<class_Vector3>` for 2D and 3D usage, respectively. The same mathematical "
"rules discussed in this article apply to both types, and wherever we link to "
"``Vector2`` methods in the class reference, you can also check out their "
"``Vector3`` counterparts."
msgstr ""
"Godot支援 :ref:`Vector2 <class_Vector2>` 和 :ref:`Vector3 <class_Vector3>` 分"
"別用於2D和3D. 本文討論的數學規則同樣適用於這兩種型別."

msgid "Member access"
msgstr "成員存取"

msgid ""
"The individual components of the vector can be accessed directly by name."
msgstr "向量的各個組成部分可以直接通過名稱存取."

msgid "Adding vectors"
msgstr "向量加法"

msgid ""
"When adding or subtracting two vectors, the corresponding components are "
"added:"
msgstr "當兩個向量相加或相減時, 相應的分量相加:"

msgid ""
"We can also see this visually by adding the second vector at the end of the "
"first:"
msgstr "我們也可以通過在第一個向量的末尾加上第二個向量來直觀地看到這一點:"

msgid "Note that adding ``a + b`` gives the same result as ``b + a``."
msgstr "注意，做 ``a + b`` 的加法和 ``b + a`` 得到的結果是一樣的。"

msgid "Scalar multiplication"
msgstr "標量乘法"

msgid ""
"Vectors represent both direction and magnitude. A value representing only "
"magnitude is called a **scalar**. Scalars use the :ref:`class_float` type in "
"Godot."
msgstr "向量表示方向和幅度。僅表示幅值的值稱為**標量**。"

msgid "A vector can be multiplied by a **scalar**:"
msgstr "向量可以乘以**標量**："

msgid ""
"Multiplying a vector by a positive scalar does not change its direction, "
"only its magnitude. Multiplying with a negative scalar results in a vector "
"in the opposite direction. This is how you **scale** a vector."
msgstr ""
"向量乘以標量不會改變它的方向，只會改變它的幅值。這就是**縮放**向量的方法。"

msgid "Practical applications"
msgstr "實際應用"

msgid "Let's look at two common uses for vector addition and subtraction."
msgstr "讓我們看看向量加法和減法的兩種常見用法."

msgid "Movement"
msgstr "移動"

msgid ""
"A vector can represent **any** quantity with a magnitude and direction. "
"Typical examples are: position, velocity, acceleration, and force. In this "
"image, the spaceship at step 1 has a position vector of ``(1, 3)`` and a "
"velocity vector of ``(2, 1)``. The velocity vector represents how far the "
"ship moves each step. We can find the position for step 2 by adding the "
"velocity to the current position."
msgstr ""
"向量可以表示具有大小和方向的**任何**量。典型的例子有：位置、速度、加速度、"
"力。在這幅圖像中，在第 1 步的飛船的位置向量為 ``(1,3)``，速度向量為 "
"``(2,1)``。速度向量表示船舶每一步移動的距離。通過將速度加到目前位置，我們可以"
"求出第 2 步的位置。"

msgid ""
"Velocity measures the **change** in position per unit of time. The new "
"position is found by adding the velocity multiplied by the elapsed time "
"(here assumed to be one unit, e.g. 1 s) to the previous position."
msgstr ""
"速度測量單位時間內位置的**變化**。新的位置是通過在前一個位置上增加速度來找到"
"的。"

#, fuzzy
msgid ""
"In a typical 2D game scenario, you would have a velocity in pixels per "
"second, and multiply it by the ``delta`` parameter (time elapsed since the "
"previous frame) from the :ref:`_process() "
"<class_Node_private_method__process>` or :ref:`_physics_process() "
"<class_Node_private_method__physics_process>` callbacks."
msgstr ""
"在典型的2D 遊戲場景中，您將獲得以每秒像素為單位的速度，並將其乘以:ref:"
"`_process() <class_Node_method__process>` 中的``delta`` 參數（自上一影格以來"
"經過的時間）或:ref:`_physical_process() "
"<class_Node_method__physical_process>` 回呼。"

msgid "Pointing toward a target"
msgstr "指向目標"

msgid ""
"In this scenario, you have a tank that wishes to point its turret at a "
"robot. Subtracting the tank's position from the robot's position gives the "
"vector pointing from the tank to the robot."
msgstr ""
"在這個場景中，您有一輛坦克，坦克希望讓炮塔指向機器人。把機器人的位置減去坦克"
"的位置就得到了從坦克指向機器人的向量。"

msgid "To find a vector pointing from ``A`` to ``B``, use ``B - A``."
msgstr "要找到從 ``A`` 指向 ``B`` 的向量，請使用 ``B - A``。"

msgid "Unit vectors"
msgstr "單位向量"

msgid ""
"A vector with **magnitude** of ``1`` is called a **unit vector**. They are "
"also sometimes referred to as **direction vectors** or **normals**. Unit "
"vectors are helpful when you need to keep track of a direction."
msgstr ""
"**大小**為 ``1`` 的向量稱為**單位向量**，有時也被稱為**方向向量**或**法線**。"
"當您需要記錄方向時就可以使用單位向量。"

msgid "Normalization"
msgstr "正規化"

msgid ""
"**Normalizing** a vector means reducing its length to ``1`` while preserving "
"its direction. This is done by dividing each of its components by its "
"magnitude. Because this is such a common operation, Godot provides a "
"dedicated :ref:`normalized() <class_Vector2_method_normalized>` method for "
"this:"
msgstr ""
"**正規化** 一個向量意味著將其長度縮減到 ``1`` , 並保留其方向. 其方法是將每個"
"分量除以其幅度. 由於這是一個很常見的操作, ``Vector2`` 和 ``Vector3`` 提供了正"
"規化的方法:"

msgid ""
"Because normalization involves dividing by the vector's length, you cannot "
"normalize a vector of length ``0``. Attempting to do so would normally "
"result in an error. In GDScript though, trying to call the ``normalized()`` "
"method on a vector of length 0 leaves the value untouched and avoids the "
"error for you."
msgstr ""
"因為正規化需要除以向量的長度, 所以不能對長度為 ``0`` 的向量進行正規化. 試圖這"
"樣做會導致錯誤."

msgid "Reflection"
msgstr "反射"

msgid ""
"A common use of unit vectors is to indicate **normals**. Normal vectors are "
"unit vectors aligned perpendicularly to a surface, defining its direction. "
"They are commonly used for lighting, collisions, and other operations "
"involving surfaces."
msgstr ""
"單位向量的一種常見用法是表示**法線**。法向量是垂直於表面的單位向量，定義了表"
"面的方向。它們通常用於照明、碰撞和涉及表面的其他操作。"

msgid ""
"For example, imagine we have a moving ball that we want to bounce off a wall "
"or other object:"
msgstr "例如, 假設我們有一個移動的球, 我們想從牆上或其他物體上彈回來:"

msgid ""
"The surface normal has a value of ``(0, -1)`` because this is a horizontal "
"surface. When the ball collides, we take its remaining motion (the amount "
"left over when it hits the surface) and reflect it using the normal. In "
"Godot, there is a :ref:`bounce() <class_Vector2_method_bounce>` method to "
"handle this. Here is a code example of the above diagram using a :ref:"
"`CharacterBody2D <class_CharacterBody2D>`:"
msgstr ""
"因為這是一個水平曲面，所以曲面法線的值為 ``(0, -1)`` . 當球碰撞時，我們取它的"
"原運動方向(當它撞到表面時剩餘的量), 以法線為角平分線反射它。在Godot中， :ref:"
"`Vector2 <class_Vector2>` 類有一個 ``bounce()`` 方法來處理這個問題。這是上圖"
"的 GDScript 範例，使用 :ref:`KinematicBody2D <class_KinematicBody2D>`："

msgid "Dot product"
msgstr "點積"

msgid ""
"The **dot product** is one of the most important concepts in vector math, "
"but is often misunderstood. Dot product is an operation on two vectors that "
"returns a **scalar**. Unlike a vector, which contains both magnitude and "
"direction, a scalar value has only magnitude."
msgstr ""
"**點積**是向量數學中最重要的概念之一，但經常被誤解。點積是對兩個向量的操作，"
"返回一個**標量**。與同時包含大小和方向的向量不同，標量值只有大小。"

msgid "The formula for dot product takes two common forms:"
msgstr "點積公式有兩種常見形式："

msgid "and"
msgstr "與"

msgid ""
"The mathematical notation *||A||* represents the magnitude of vector ``A``, "
"and *A*\\ :sub:`x` means the ``x`` component of vector ``A``."
msgstr ""
"數學符號 *||A||* 表示向量 ''A' 的大小，*A*\\ ：sub：'x' 表示向量 ''A'' 的 "
"'x' 分量。"

msgid ""
"However, in most cases it is easiest to use the built-in :ref:`dot() "
"<class_Vector2_method_dot>` method. Note that the order of the two vectors "
"does not matter:"
msgstr ""
"然而, 在大多數情況下, 使用內建方法是最容易的. 注意, 兩個向量的順序並不重要:"

msgid ""
"The dot product is most useful when used with unit vectors, making the first "
"formula reduce to just ``cos(θ)``. This means we can use the dot product to "
"tell us something about the angle between two vectors:"
msgstr ""
"當與單位向量一起使用時，點積是最有用的，使得第一個公式減少到僅有 ``cosθ``。這"
"意味著我們可以使用點積來告訴我們關於兩個向量之間的角度的一些資訊："

msgid ""
"When using unit vectors, the result will always be between ``-1`` (180°) and "
"``1`` (0°)."
msgstr "當使用單位向量, 結果總是會在 ``-1`` (180°) 和 ``1`` (0°) 之間."

msgid "Facing"
msgstr "面向問題"

msgid ""
"We can use this fact to detect whether an object is facing toward another "
"object. In the diagram below, the player ``P`` is trying to avoid the "
"zombies ``A`` and ``B``. Assuming a zombie's field of view is **180°**, can "
"they see the player?"
msgstr ""
"我們可以利用這個事實來偵測一個物體是否面向另一個物體. 在下圖中, 遊戲角色 "
"``P`` 試圖避開喪屍 ``A`` 和 ``B`` . 假設一個喪屍的視野是 **180°** , 他們能看"
"到遊戲角色嗎?"

msgid ""
"The green arrows ``fA`` and ``fB`` are **unit vectors** representing the "
"zombie's facing direction and the blue semicircle represents its field of "
"view. For zombie ``A``, we find the direction vector ``AP`` pointing to the "
"player using ``P - A`` and normalize it, however, Godot has a helper method "
"to do this called :ref:`direction_to() <class_Vector2_method_direction_to>`. "
"If the angle between this vector and the facing vector is less than 90°, "
"then the zombie can see the player."
msgstr ""
"綠色箭頭 ``fA`` 和 ``fB`` 是 **單位向量** , 代表僵屍的朝向, 藍色半圓代表其視"
"野. 對於僵屍 ``A`` , 我們用 ``P - A`` 找到指向玩家的方向向量 ``AP`` , 並進行"
"正規化處理, 不過,Godot有一個輔助方法可以做到這一點, 叫做 ``direction_to`` . "
"如果這個向量和面對的向量之間的角度小於90°, 那麼僵屍就可以看到玩家."

msgid "In code it would look like this:"
msgstr "在程式碼中是這樣的:"

msgid "Cross product"
msgstr "外積"

msgid ""
"Like the dot product, the **cross product** is an operation on two vectors. "
"However, the result of the cross product is a vector with a direction that "
"is perpendicular to both. Its magnitude depends on their relative angle. If "
"two vectors are parallel, the result of their cross product will be a null "
"vector."
msgstr ""
"和點積一樣，**外積**也是對兩個向量的運算。但是，叉乘積的結果是一個方向與兩個"
"向量垂直的向量。它的大小取決於相對角度，如果兩個向量是平行的，那麼外積的結果"
"將是一個空向量。"

msgid "The cross product is calculated like this:"
msgstr "外積是這樣計算的："

msgid ""
"With Godot, you can use the built-in :ref:`Vector3.cross() "
"<class_Vector3_method_cross>` method:"
msgstr "使用 Godot，您可以使用內建的方法："

msgid ""
"The cross product is not mathematically defined in 2D. The :ref:`Vector2."
"cross() <class_Vector2_method_cross>` method is a commonly used analog of "
"the 3D cross product for 2D vectors."
msgstr ""
"外積沒有在二維中以數學方式定義。 Vector2.cross() "
"<class_Vector2_method_cross>` 方法是2D 向量 3D 外積的常用模擬。"

msgid ""
"In the cross product, order matters. ``a.cross(b)`` does not give the same "
"result as ``b.cross(a)``. The resulting vectors point in **opposite** "
"directions."
msgstr ""
"在外積中，順序很重要。``a.cross(b)`` 和 ``b.cross(a)`` 的結果不一樣，會得到指"
"向相反的向量。"

msgid "Calculating normals"
msgstr "法線計算"

msgid ""
"One common use of cross products is to find the surface normal of a plane or "
"surface in 3D space. If we have the triangle ``ABC`` we can use vector "
"subtraction to find two edges ``AB`` and ``AC``. Using the cross product, "
"``AB × AC`` produces a vector perpendicular to both: the surface normal."
msgstr ""
"外積的一種常用方法是在 3D 空間中求平面或曲面的表面法向量。如果有三角形 "
"``ABC``，我們可以用向量減法找到兩條邊 ``AB`` 和 ``AC``。通過叉乘，``AB x "
"AC`` 得到一個垂直於這兩個向量的向量：表面法向量。"

msgid "Here is a function to calculate a triangle's normal:"
msgstr "下面是一個計算三角形法線的函式:"

msgid "Pointing to a target"
msgstr "指向目標"

msgid ""
"In the dot product section above, we saw how it could be used to find the "
"angle between two vectors. However, in 3D, this is not enough information. "
"We also need to know what axis to rotate around. We can find that by "
"calculating the cross product of the current facing direction and the target "
"direction. The resulting perpendicular vector is the axis of rotation."
msgstr ""
"在上面的點積部分，我們看到如何用它來搜尋兩個向量之間的角度。然而在 3D 中，這"
"些資訊還不夠。我們還需要知道在圍繞什麼軸旋轉。我們可以通過計算目前面對的方向"
"和目標方向的外積來搜尋。由此得到的垂直向量就是旋轉軸。"

msgid "More information"
msgstr "更多資訊"

msgid ""
"For more information on using vector math in Godot, see the following "
"articles:"
msgstr "有關在Godot中使用向量數學的更多資訊, 請參閱以下文章:"

msgid ":ref:`doc_vectors_advanced`"
msgstr ":ref:`doc_vectors_advanced`"

msgid ":ref:`doc_matrices_and_transforms`"
msgstr ":ref:`doc_matrices_and_transforms`"

msgid "Translation status"
msgstr "翻譯狀態"
