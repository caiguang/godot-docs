# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D sprite animation"
msgstr "Sprite 動畫"

msgid "Introduction"
msgstr "前言"

msgid ""
"In this tutorial, you'll learn how to create 2D animated characters with the "
"AnimatedSprite2D class and the AnimationPlayer. Typically, when you create "
"or download an animated character, it will come in one of two ways: as "
"individual images or as a single sprite sheet containing all the animation's "
"frames. Both can be animated in Godot with the AnimatedSprite2D class."
msgstr ""
"在本教學中，你將學習如何使用 AnimatedSprite（動畫精靈）類和 AnimationPlayer "
"來建立 2D 動畫角色。無論是自己繪製還是直接下載現成的，拿到的動畫角色素材一般"
"就是兩種形式：一系列單獨的圖片，或者一張包含所有動畫影格的精靈表（Sprite "
"Sheet）。兩者都可以使用 Godot 的 AnimatedSprite 類進行動畫。"

msgid ""
"First, we'll use :ref:`AnimatedSprite2D <class_AnimatedSprite2D>` to animate "
"a collection of individual images. Then we will animate a sprite sheet using "
"this class. Finally, we will learn another way to animate a sprite sheet "
"with :ref:`AnimationPlayer <class_AnimationPlayer>` and the *Animation* "
"property of :ref:`Sprite2D <class_Sprite2D>`."
msgstr ""
"我們首先會用 :ref:`AnimatedSprite <class_AnimatedSprite>` 來把一系列單獨的圖"
"片做成動畫，然後我們再會這個類來把精靈表做成動畫，最後我們還會學習使用 :ref:"
"`AnimationPlayer <class_AnimationPlayer>` 和 :ref:`Sprite <class_Sprite>` 的 "
"*Animation*（動畫）屬性來把精靈表做成動畫。"

msgid ""
"Art for the following examples by https://opengameart.org/users/ansimuz and "
"tgfcoder."
msgstr ""
"以下範例的美術素材由 https://opengameart.org/users/ansimuz 和 https://"
"opengameart.org/users/tgfcoder 共同提供。"

msgid "Individual images with AnimatedSprite2D"
msgstr "AnimateSprite 與若干單獨的圖片"

msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""
"在這個情況下, 你有一組圖像, 每一個都包含你角色的動畫的一影格. 對於這個例子, "
"我們將使用以下動畫:"

msgid ""
"You can download the images here: `2d_sprite_animation_assets.zip <https://"
"github.com/godotengine/godot-docs-project-starters/releases/download/"
"latest-4.x/2d_sprite_animation_assets.zip>`_"
msgstr ""
"你可以在這裡下載圖片：`2d_sprite_animation_assets.zip <https://github.com/"
"godotengine/godot-docs-project-starters/releases/download/latest-4."
"x/2d_sprite_animation_assets.zip>`_"

msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr "解壓縮這些圖像並將它們放在專案檔案夾中. 使用以下節點佈置場景樹:"

msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""
"根節點也可以是 :ref:`Area2D <class_Area2D>` 或 :ref:`RigidBody2D "
"<class_RigidBody2D>`。動畫仍然會以同樣的方式製作。一旦動畫完成，你就可以為 "
"CollisionShape2D 形狀分配一個形狀。更多資訊請參見:ref:`物理介紹 "
"<doc_physics_introduction>`。"

msgid ""
"Now select the ``AnimatedSprite2D`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"現在選中 ``AnimatedSprite``，並在它的 *SpriteFrames* 屬性中，選擇“新建 "
"SpriteFrames”。"

msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr ""
"點擊新的 SpriteFrames 資源，你會看到一個新的面板出現在編輯器視窗的底部："

msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""
"將這 8 張獨立的圖片從左邊的“檔案系統”面板拖放到“動畫影格”面板的中間部分。在左"
"邊，將動畫名稱從“default”更改為“run”。"

msgid ""
"Use the \"Play\" buttons on the top-right of the *Filter Animations* input "
"to preview the animation. You should now see the animation playing in the "
"viewport. However, it is a bit slow. To fix this, change the *Speed (FPS)* "
"setting in the SpriteFrames panel to 10."
msgstr ""
"回到“屬性面板”，勾選 *Playing* 屬性。您現在應該可以看到在視口中播放的動畫。然"
"而，它有點慢。為了解決這個問題，請將“動畫影格”面板中的*速度（FPS）*改為 10。"

msgid ""
"You can add additional animations by clicking the \"Add Animation\" button "
"and adding additional images."
msgstr "你可以通過點擊“新建動畫”按鈕並新增其他的圖像，來添其他的動畫。"

msgid "Controlling the animation"
msgstr "建立內容"

msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"動畫完成後, 你可以通過程式碼中的 ``play()`` 和 ``stop()`` 方法控制動畫. 這裡"
"有一個簡單的例子, 按住右方向鍵播放動畫, 鬆開後就停下."

msgid "Sprite sheet with AnimatedSprite2D"
msgstr "AnimateSprite 與精靈表"

msgid ""
"You can also easily animate from a sprite sheet with the class "
"``AnimatedSprite2D``. We will use this public domain sprite sheet:"
msgstr ""
"你還可以很方便地使用 ``AnimatedSprite`` 把精靈表做成動畫。我們會用到這張公共"
"領域的精靈表："

msgid ""
"Right-click the image and choose \"Save Image As\" to download it, and then "
"copy the image into your project folder."
msgstr "按右鍵圖片，選擇“圖片另存為”來下載圖片，然後將圖片複製到專案檔案夾中。"

msgid ""
"Set up your scene tree the same way you did previously when using individual "
"images. Select the ``AnimatedSprite2D`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"設定場景樹的方法與之前使用單獨圖片的時候相同。選中 ``AnimatedSprite`` 後在 "
"*SpriteFrames* 屬性裡選擇“新建 SpriteFrames”。"

msgid ""
"Click on the new SpriteFrames resource. This time, when the bottom panel "
"appears, select \"Add frames from a Sprite Sheet\"."
msgstr ""
"點擊建立出來的 SpriteFrames 資源。底部面板出現後，這次我們選擇“從精靈表中新增"
"影格”。"

msgid "You will be prompted to open a file. Select your sprite sheet."
msgstr "在彈出的打開檔案對話方塊中，選擇你的精靈表。"

msgid ""
"A new window will open, showing your sprite sheet. The first thing you will "
"need to do is to change the number of vertical and horizontal images in your "
"sprite sheet. In this sprite sheet, we have four images horizontally and two "
"images vertically."
msgstr ""
"接下來會打開一個新的視窗，裡面會顯示剛才的精靈表。你首先需要修改精靈表中縱向"
"和橫向的圖片數量，我們的這張精靈表裡橫向有四張圖片、縱向有兩張。"

msgid ""
"Next, select the frames from the sprite sheet that you want to include in "
"your animation. We will select the top four, then click \"Add 4 frames\" to "
"create the animation."
msgstr ""
"然後，在精靈表中選擇動畫中想要包含的影格。這裡我們選中上面的四個，然後點擊“新"
"增 4 影格”來建立動畫。"

msgid ""
"You will now see your animation under the list of animations in the bottom "
"panel. Double click on default to change the name of the animation to jump."
msgstr ""
"現在你就可以看到在底部面板的動畫列表裡看到這個動畫了。按兩下 default（預"
"設），然後把動畫的名稱改成 jump（跳躍）。"

msgid ""
"Finally, check the play button on the SpriteFrames editor to see your frog "
"jump!"
msgstr ""
"最後，在屬性面板中勾選 AnimatedSprite 的 Playing（播放）就可以看到青蛙跳起來"
"了！"

msgid "Sprite sheet with AnimationPlayer"
msgstr "AnimationPlayer 與精靈表"

msgid ""
"Another way that you can animate when using a sprite sheet is to use a "
"standard :ref:`Sprite2D <class_Sprite2D>` node to display the texture, and "
"then animating the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""
"在使用精靈表時，另一種方法是使用標準的 :ref:`Sprite <class_Sprite>` 節點來顯"
"示紋理，然後用 :ref:`AnimationPlayer <class_AnimationPlayer>` 來實作從紋理到"
"紋理的動畫變化。"

msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr "考慮一下這個包含 6 影格動畫的精靈表："

msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr "按右鍵圖片，選擇“圖片另存為”下載圖片，然後將圖片複製到專案檔案夾中。"

msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr "我們的目的是, 迴圈著一個接一個地顯示這些圖像. 首先佈置你的場景樹:"

msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""
"將精靈表拖拽到 Sprite 的 *Texture* 屬性裡，你會看到整個列表顯示在螢幕上。要把"
"它分割成單獨的影格，請在“屬性面板”中展開 *Animation* 部分，將 *Hframes* 設定"
"為 ``6``。*Hframes* 和 *Vframes* 是精靈表中水平和垂直影格的數量。"

msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite2D changes "
"accordingly. This is the property we'll be animating."
msgstr ""
"現在嘗試更改 *Frame* 屬性的值. 你可以看到它的範圍從 ``0`` 到 ``5`` ,Sprite 所"
"顯示的圖像也隨之改變. 這就是我們想要動畫化的屬性."

msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""
"選中 ``AnimationPlayer`` , 然後點擊 \"動畫\" 按鈕, 然後點擊 \"新建\" 按鈕. 將"
"新動畫命名為 \"walk\". 將動畫長度設定為 ``0.6`` , 點擊 \"Loop\" 按鈕, 讓動畫"
"重複播放."

msgid ""
"Now select the ``Sprite2D`` node and click the key icon to add a new track."
msgstr "現在選中 ``Sprite`` 節點，然後按一下鑰匙圖示，新增一個新軌道。"

msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""
"繼續在時間軸的每一點新增影格（預設為 ``0.1`` 秒），直到你得到了從 0 到 5 的所"
"有影格。你會看到這些影格出現在動畫軌道上："

msgid "Press \"Play\" on the animation to see how it looks."
msgstr "按下動畫上的“播放”鍵，看看效果如何。"

msgid "Controlling an AnimationPlayer animation"
msgstr "建立內容"

msgid ""
"Like with AnimatedSprite2D, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"正如AnimationSprite一樣, 你可以通過程式碼中的 ``play()`` 和 ``stop()`` 方法控"
"制動畫. 同樣, 這裡有一個簡單的例子, 按住右方向鍵鍵播放動畫, 鬆開後就停下."

msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""
"如果同時更新一個動畫和一個其他的屬性（比如說，平臺跳躍遊戲可能會更新精靈的 "
"``h_flip``/``v_flip`` 屬性然後同時開始一個轉身動畫“turning”），要記住 "
"``play()`` 不是即時生效的。它會在下次 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 被處理時生效。也就是說可能要到下一影格才行，導致現在"
"這一影格變成“問題”影格——應用了屬性的變化，但動畫還沒有開始。如果這會造成麻煩"
"的話，在呼叫 ``play()`` 後，你可以呼叫 ``advance(0)`` 來立即開始播放動畫。"

msgid "Summary"
msgstr "總結"

msgid ""
"These examples illustrate the two classes you can use in Godot for 2D "
"animation. ``AnimationPlayer`` is a bit more complex than "
"``AnimatedSprite2D``, but it provides additional functionality, since you "
"can also animate other properties like position or scale. The class "
"``AnimationPlayer`` can also be used with an ``AnimatedSprite2D``. "
"Experiment to see what works best for your needs."
msgstr ""
"以上的例子演示了使用 Godot 提供的兩個類來製作 2D 動畫的方法。 "
"``AnimationPlayer`` 相比 ``AnimatedSprite`` 而言略顯複雜，但同時也提供了更多"
"的功能，因為你還可以同時動畫位置和縮放之類的其它的屬性。 ``AnimationPlayer`` "
"也可以和 ``AnimatedSprite`` 配合使用，你可以自己試一試，看看怎樣的做法更適合"
"你自己。"

msgid "Translation status"
msgstr "翻譯狀態"
