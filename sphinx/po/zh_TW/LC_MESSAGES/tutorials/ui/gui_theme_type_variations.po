# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Theme type variations"
msgstr "有名稱的型別"

msgid ""
"When designing a user interface there may be times when a :ref:`Control "
"<class_Control>` node needs to have a different look than what is normally "
"defined by a :ref:`Theme <class_Theme>`. Every control node has theme "
"property overrides, which allow you to redefine the styling for each "
"individual UI element."
msgstr ""
"設計使用者介面時，有時候會想要讓某個 :ref:`Control <class_Control>` 節點看起"
"來和 :ref:`Theme <class_Theme>` 中定義的一般樣式不同。每個控制項節點都有主題"
"屬性覆蓋項，可以讓你針對單獨的 UI 元素定義不同的樣式。"

msgid ""
"This approach quickly becomes hard to manage, if you need to share the same "
"custom look between several controls. Imagine that you use gray, blue, and "
"red variants of :ref:`Button <class_Button>` throughout your project. "
"Setting it up every time you add a new button element to your interface is a "
"tedious task."
msgstr ""
"如果你需要讓若干控制項都使用同一個自訂的外觀，這樣的做法很快就會變得難以管"
"理。想像一下，你的專案裡需要用到灰色、藍色、紅色變種的 :ref:`Button "
"<class_Button>`。每在介面裡新增一個按鈕元素都需要進行設定，非常繁瑣。"

msgid ""
"To help with the organization and to better utilize the :ref:`power of "
"themes <doc_gui_skinning>` you can use theme type variations. These work "
"like normal theme types, but instead of being self-sufficient and standalone "
"they extend another, base type."
msgstr ""
"為了方便組織，更好地發揮:ref:`主題的威力 <doc_gui_skinning>`，你可以使用主題"
"型別變種。它們用起來就像普通的主題型別，但無法自給自足，不是獨立的，擴充自其"
"他型別，稱作基礎型別。"

msgid ""
"Following the previous example, your theme can have some styles, colors, and "
"fonts defined for the ``Button`` type, customizing the looks of every button "
"element in your UI. To then have a gray, red, or blue button you would "
"create a new type, e.g. ``GrayButton``, and mark it as a variation of the "
"base ``Button`` type."
msgstr ""
"還是上面的例子，你的主題可以為 ``Button`` 型別定義樣式、顏色、以及字形，UI 中"
"的所有按鈕元素都會得到自訂。如果要再有灰色、紅色、藍色按鈕，你就會建立一個新"
"的型別，例如 ``GrayButton``，然後把它標記為基礎 ``Button`` 型別的變種。"

msgid ""
"Type variations can replace some aspects of the base type, but keep others. "
"They can also define properties that the base style hasn't defined. For "
"example, your ``GrayButton`` can override the ``normal`` style from the base "
"``Button`` and add ``font_color`` that ``Button`` has never defined. The "
"control will use a combination of both types giving priority to the type "
"variation."
msgstr ""
"型別變種可以在替換掉基礎型別的某些內容的同時保留其他方面。它們還可以定義基礎"
"樣式沒有定義的屬性。例如，你的 ``GrayButton`` 可以覆蓋基礎 ``Button`` 的 "
"``normal`` 樣式，加上 ``Button`` 裡沒有定義的 ``font_color``。控制項會使用這"
"兩個型別的組合，並且優先使用型別變種。"

msgid ""
"The way controls resolve what theme items they use from each type and each "
"theme is better described in the :ref:`Customizing a project "
"<doc_gui_theme_in_project>` section of the \"Introduction to GUI skinning\" "
"article."
msgstr ""
"控制項如何確定使用哪個型別、哪個主題、哪個主題專案，在《GUI 皮膚簡介》一文的:"
"ref:`自訂專案 <doc_gui_theme_in_project>`部分有更詳盡的描述。"

msgid "Creating a type variation"
msgstr "建立內容"

msgid ""
"To create a type variation open the theme editor, then click the plus icon "
"next to the **Type** dropdown on the right side of the editor. Type in what "
"you want to name your theme type variation in the text box, then click **Add "
"Type**."
msgstr ""
"要建立主題變種，請打開主題編輯器，然後點擊編輯器右側**型別**下拉列表旁的加號"
"圖示。在文字方塊中輸入你給你的主題型別變種起的名字，然後點擊**新增型別**。"

msgid ""
"Below the **Type** dropdown are the property tabs. Switch to the tab with a "
"wrench and screwdriver icon."
msgstr "**型別**下拉列表的下方是屬性分頁。請切換到圖示是扳手和螺絲刀的分頁。"

msgid ""
"Click on the plus icon next to the **Base Type** field. You can select the "
"base type there, which would typically be the name of a control node class "
"(e.g., ``Button``, ``Label``, etc). Type variations can also chain and "
"extend other type variations. This works in the same way control nodes "
"inherit styling of their base class. For example, ``CheckButton`` inherits "
"styles from ``Button`` because corresponding node types extend each other."
msgstr ""
"點擊**基礎型別**欄位旁的加號。你可以在此處選擇基礎型別，一般就是控制項節點的"
"類別名稱（例如 ``Button``、``Label`` 等）。型別變種還可以進行巢狀，擴充其他型"
"別變種。這就和控制項節點的繼承基底類別風格一樣。例如，``CheckButton`` 繼承 "
"``Button`` 的風格，因為對應的節點型別存在擴充關係。"

msgid ""
"After you select the base type, you should now be able to see its properties "
"on the other tabs in the theme editor. You can edit them as usual."
msgstr ""
"選好基礎型別之後，你應該就能在主題編輯器的其他分頁中看到對應的屬性了。你可以"
"像往常一樣去編輯。"

msgid "Using a type variation"
msgstr "執行編輯器"

msgid ""
"Now that a type variation has been created you can apply it to your nodes. "
"In the inspector dock, under the **Theme** property of a control node, you "
"can find the **Theme Type Variation** property. It is empty by default, "
"which means that only the base type has an effect on this node."
msgstr ""
"現在已經建立好了一個型別變種，你可以將其應用到你的節點上了。屬性面板面板中，"
"在控制項節點的 **Theme** 屬性下，你可以找到 **Theme Type Variation** 屬性。預"
"設為空，表示只有基礎型別會對這個節點起效。"

msgid ""
"You can either select a type variation from a dropdown list, or input its "
"name manually. Variations appear on the list only if the type variation "
"belongs to the project-wide theme, which you can configure in the project "
"settings. For any other case you have to input the name of the variation "
"manually. Click on the pencil icon to the right. Then type in the name of "
"the type variation and click the check mark icon or press enter. If a type "
"variation with that name exists it will now be used by the node."
msgstr ""
"你可以從下拉列表中選擇一個型別變種，或者手動輸入名稱。屬於專案主題的變種才會"
"出現在列表中，專案主題可以在專案設定中配置。其他情況下，你就得手動輸入變種的"
"名稱了。請點擊右側的鉛筆圖示。然後輸入型別變種的名稱，並點擊對勾圖示或者按確"
"認鍵。如果存在使用這個名稱的型別變種，該節點就會去使用。"

msgid "Translation status"
msgstr "翻譯狀態"
