# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Large world coordinates"
msgstr "下一個座標"

msgid ""
"Large world coordinates are mainly useful in 3D projects; they are rarely "
"required in 2D projects. Also, unlike 3D rendering, 2D rendering currently "
"doesn't benefit from increased precision when large world coordinates are "
"enabled."
msgstr ""
"大世界座標主要用於 3D 專案；2D 專案很少會用到。此外，啟用大世界座標後，2D 算"
"繪目前無法從精度的增加中獲益，但 3D 算繪可以。"

msgid "Why use large world coordinates?"
msgstr "為什麼要使用大世界座標？"

msgid ""
"In Godot, physics simulation and rendering both rely on *floating-point* "
"numbers. However, in computing, floating-point numbers have **limited "
"precision and range**. This can be a problem for games with huge worlds, "
"such as space or planetary-scale simulation games."
msgstr ""
"在 Godot 中，物理模擬和算繪都依賴於*浮點數*。然而，電腦中浮點數的**精度和範圍"
"是有限的**，可能在太空、星球尺度的模擬遊戲等擁有龐大世界的遊戲中產生問題。"

msgid ""
"Precision is the greatest when the value is close to ``0.0``. Precision "
"becomes gradually lower as the value increases or decreases away from "
"``0.0``. This occurs every time the floating-point number's *exponent* "
"increases, which happens when the floating-point number surpasses a power of "
"2 value (2, 4, 8, 16, …). Every time this occurs, the number's minimum step "
"will *increase*, resulting in a loss of precision."
msgstr ""
"浮點數的精度在 ``0.0`` 附近是最高的。隨著取值離 ``0.0`` 越來越遠，精度就會變"
"得越來越低。每次浮點數的*指數*變大時，精度就會降低，也就是浮點數取值越過 2 的"
"冪（2、4、8、16……）的時候。此時浮點數的最小步長就會*增大*，精度因此變低。"

msgid ""
"In practice, this means that as the player moves away from the world origin "
"(``Vector2(0, 0)`` in 2D games or ``Vector3(0, 0, 0)`` in 3D games), "
"precision will decrease."
msgstr ""
"在實踐中，這意味著玩家遠離世界原點（2D 遊戲的 ``Vector2(0, 0)`` 和 3D 遊戲的 "
"``Vector3(0, 0, 0)``），精度就會下降。"

msgid ""
"This loss of precision can result in objects appearing to \"vibrate\" when "
"far away from the world origin, as the model's position will snap to the "
"nearest value that can be represented in a floating-point number. This can "
"also result in physics glitches that only occur when the player is far from "
"the world origin."
msgstr ""
"精度的丟失可能會導致遠離世界原點的物件看上去在“抖動”，因為模型的位置會吸附到"
"最接近的浮點數能夠表示的值。這種情況下，如果玩家遠離世界原點，還可能導致物理"
"方面的問題。"

msgid ""
"The range determines the minimum and maximum values that can be stored in "
"the number. If the player tries to move past this range, they will simply "
"not be able to. However, in practice, floating-point precision almost always "
"becomes a problem before the range does."
msgstr ""
"範圍決定的是所能夠儲存的最小和最大值。如果玩家嘗試移出這個範圍就會直接失敗。"
"但是實際情況下，在能夠受到範圍影響之前幾乎都會遇到浮點數精度問題。"

msgid ""
"The range and precision (minimum step between two exponent intervals) are "
"determined by the floating-point number type. The *theoretical* range allows "
"extremely high values to be stored in single-precision floats, but with very "
"low precision. In practice, a floating-point type that cannot represent all "
"integer values is not very useful. At extreme values, precision becomes so "
"low that the number cannot even distinguish two separate *integer* values "
"from each other."
msgstr ""
"範圍和精度（兩個指數間隔的最小步長）取決於浮點數的型別。單精確度浮點數的*理論"
"*範圍支援儲存極高的值，單精確度很低。實踐中，無法表示所有整數值的浮點數型別並"
"不是很有用。極值附近的精度會變得非常低，低到連兩個*整數*值也無法區分。"

msgid ""
"This is the range where individual integer values can be represented in a "
"floating-point number:"
msgstr "以下是浮點數能夠表示整數值的範圍："

msgid ""
"**Single-precision float range (represent all integers):** Between "
"-16,777,216 and 16,777,216"
msgstr "**單精確度浮點數範圍（表示所有整數）：**-16,777,216 和 16,777,216 之間"

msgid ""
"**Double-precision float range (represent all integers):** Between -9 "
"quadrillon and 9 quadrillon"
msgstr "**雙精度浮點數範圍（表示所有整數）：**-9 千萬億和 9 千萬億之間"

msgid "Range"
msgstr "範圍"

msgid "Single step"
msgstr "單引號"

msgid "Double step"
msgstr "雙引號"

msgid "Comment"
msgstr "Comment 註解"

msgid "[1; 2]"
msgstr "[1; 2]"

msgid "~0.0000001"
msgstr "~0.0000001"

msgid "~1e-15"
msgstr "~1e-15"

msgid "Precision becomes greater near 0.0 (this table is abbreviated)."
msgstr "0.0 附近精度會變大（本表省略）。"

msgid "[2; 4]"
msgstr "[2; 4]"

msgid "~0.0000002"
msgstr "~0.0000002"

msgid "[4; 8]"
msgstr "[4; 8]"

msgid "~0.0000005"
msgstr "~0.0000005"

msgid "[8; 16]"
msgstr "[8; 16]"

msgid "~0.000001"
msgstr "~0.000001"

msgid "~1e-14"
msgstr "~1e-14"

msgid "[16; 32]"
msgstr "[16; 32]"

msgid "~0.000002"
msgstr "~0.000002"

msgid "[32; 64]"
msgstr "[32; 64]"

msgid "~0.000004"
msgstr "~0.000004"

msgid "[64; 128]"
msgstr "[64; 128]"

msgid "~0.000008"
msgstr "~0.000008"

msgid "~1e-13"
msgstr "~1e-13"

msgid "[128; 256]"
msgstr "[128; 256]"

msgid "~0.000015"
msgstr "~0.000015"

msgid "[256; 512]"
msgstr "[256; 512]"

msgid "~0.00003"
msgstr "~0.00003"

msgid "[512; 1024]"
msgstr "[512; 1024]"

msgid "~0.00006"
msgstr "~0.00006"

msgid "~1e-12"
msgstr "~1e-12"

msgid "[1024; 2048]"
msgstr "[1024; 2048]"

msgid "~0.0001"
msgstr "~0.0001"

msgid "[2048; 4096]"
msgstr "[2048; 4096]"

msgid "~0.0002"
msgstr "~0.0002"

msgid ""
"Maximum *recommended* single-precision range for a first-person 3D game "
"without rendering artifacts or physics glitches."
msgstr "第一人稱 3D 遊戲的最大*推薦*單精確度範圍，不會有算繪和物理方面的問題。"

msgid "[4096; 8192]"
msgstr "[4096; 8192]"

msgid "~0.0005"
msgstr "~0.0005"

msgid ""
"Maximum *recommended* single-precision range for a third-person 3D game "
"without rendering artifacts or physics glitches."
msgstr "第三人稱 3D 遊戲的最大*推薦*單精確度範圍，不會有算繪和物理方面的問題。"

msgid "[8192; 16384]"
msgstr "[8192; 16384]"

msgid "~0.001"
msgstr "~0.001"

msgid "[16384; 32768]"
msgstr "[16384; 32768]"

msgid "~0.0019"
msgstr "~0.0019"

msgid "~1e-11"
msgstr "~1e-11"

msgid ""
"Maximum *recommended* single-precision range for a top-down 3D game without "
"rendering artifacts or physics glitches."
msgstr "俯視角 3D 遊戲的最大*推薦*單精確度範圍，不會有算繪和物理方面的問題。"

msgid "[32768; 65536]"
msgstr "[32768; 65536]"

msgid "~0.0039"
msgstr "~0.0039"

msgid ""
"Maximum *recommended* single-precision range for any 3D game. Double "
"precision (large world coordinates) is usually required past this point."
msgstr ""
"所有 3D 遊戲的最大*推薦*單精確度範圍。雙精度（大世界座標）通常會超過這個點。"

msgid "[65536; 131072]"
msgstr "[65536; 131072]"

msgid "~0.0078"
msgstr "~0.0078"

msgid "[131072; 262144]"
msgstr "[131072; 262144]"

msgid "~0.0156"
msgstr "~0.0156"

msgid "~1e-10"
msgstr "~1e-10"

msgid "> 262144"
msgstr "> 262144"

msgid "> ~0.0313"
msgstr "> ~0.0313"

msgid "~1e-10 (0.0000000001)"
msgstr "~1e-10（0.0000000001）"

msgid ""
"Double-precision remains far more precise than single-precision past this "
"value."
msgstr "超過這個值之後，雙精度仍然比單精確度要精確地多。"

msgid ""
"When using single-precision floats, it is possible to go past the suggested "
"ranges, but more visible artifacting will occur and physics glitches will be "
"more common (such as the player not walking straight in certain directions)."
msgstr ""
"使用單精確度浮點數時，可以超過建議的範圍，但此時就會更多可見的算繪問題，物理"
"問題也會變得更常見（例如玩家在某些方向上無法直線移動）。"

msgid ""
"See the `Demystifying Floating Point Precision <https://blog.demofox."
"org/2017/11/21/>`__ article for more information."
msgstr ""
"詳見 `Demystifying Floating Point Precision <https://blog.demofox."
"org/2017/11/21/>`__ 一文。"

msgid "How large world coordinates work"
msgstr "大世界座標的工作原理"

msgid ""
"Large world coordinates (also known as **double-precision physics**) "
"increase the precision level of all floating-point computations within the "
"engine."
msgstr ""
"大世界座標（也叫**雙精度物理**）能夠增加引擎中所有浮點數計算的精度級別。"

msgid ""
"By default, :ref:`class_float` is 64-bit in GDScript, but :ref:"
"`class_Vector2`, :ref:`class_Vector3` and :ref:`class_Vector4` are 32-bit. "
"This means that the precision of vector types is much more limited. To "
"resolve this, we can increase the number of bits used to represent a "
"floating-point number in a Vector type. This results in an *exponential* "
"increase in precision, which means the final value is not just twice as "
"precise, but potentially thousands of times more precise at high values. The "
"maximum value that can be represented is also greatly increased by going "
"from a single-precision float to a double-precision float."
msgstr ""
"預設情況下，GDScript 中的 class_float 是 64 位，但 class_Vector2、"
"class_Vector3 和 class_Vector4 是 32 位元。這意味著向量型別的精度受到更多限"
"制。為了解決這個問題，我們可以增加 Vector 型別中用來表示浮點數的位數。這會導"
"致精度呈「指數級」增長，這意味著最終值的精度不僅是兩倍，而且在高值時可能精確"
"數千倍。從單精度浮點變成雙精度浮點，可以表示的最大值也大大增加。"

msgid ""
"To avoid model snapping issues when far away from the world origin, Godot's "
"3D rendering engine will increase its precision for rendering operations "
"when large world coordinates are enabled. The shaders do not use double-"
"precision floats for performance reasons, but an `alternative solution "
"<https://github.com/godotengine/godot/pull/66178>`__ is used to emulate "
"double precision for rendering using single-precision floats."
msgstr ""
"為了避免遠離世界原點時出現模型捕捉問題，Godot 的 3D 算繪引擎將在啟用大世界座"
"標時提高算繪操作的精確度。出於性能原因，著色器不使用雙精度浮點數，但使用替代"
"解決方案<https://github.com/godotengine/godot/pull/66178>`__ 來模擬雙精度，以"
"便使用單精度浮點數進行算繪。"

msgid ""
"Enabling large world coordinates comes with a performance and memory usage "
"penalty, especially on 32-bit CPUs. Only enable large world coordinates if "
"you actually need them."
msgstr ""
"啟用大世界座標會帶來效能和記憶體使用損失，尤其是在 32 位元 CPU 上。僅當您確實"
"需要時才啟用大世界座標。"

msgid ""
"This feature is tailored towards mid-range/high-end desktop platforms. Large "
"world coordinates may not perform well on low-end mobile devices, unless you "
"take steps to reduce CPU usage with other means (such as decreasing the "
"number of physics ticks per second)."
msgstr ""
"此功能專為中階/高階桌面平台量身打造。大世界座標在低階行動裝置上可能表現不佳，"
"除非您採取措施透過其他方式減少 CPU 使用率（例如減少每秒物理滴答數）。"

msgid ""
"On low-end platforms, an *origin shifting* approach can be used instead to "
"allow for large worlds without using double-precision physics and rendering. "
"Origin shifting works with single-precision floats, but it introduces more "
"complexity to game logic, especially in multiplayer games. Therefore, origin "
"shifting is not detailed on this page."
msgstr ""
"在低端平台上，可以使用“原點轉移”方法來允許大世界，而無需使用雙精度物理和算"
"繪。原點轉移適用於單精度浮點數，但它為遊戲邏輯帶來了更多的複雜性，尤其是在多"
"人遊戲中。因此，本頁不詳細介紹原點移位。"

msgid "Who are large world coordinates for?"
msgstr "大世界座標的目標群體是誰？"

msgid ""
"Large world coordinates are typically required for 3D space or planetary-"
"scale simulation games. This extends to games that require supporting *very* "
"fast movement speeds, but also very slow *and* precise movements at times."
msgstr ""
"3D 空間或行星尺度模擬遊戲通常需要大世界座標。這擴充到需要支援*非常*快的移動速"
"度，但有時也需要非常慢*和*精確移動的遊戲。"

msgid ""
"On the other hand, it's important to only use large world coordinates when "
"actually required (for performance reasons). Large world coordinates are "
"usually **not** required for:"
msgstr ""
"另一方面，僅在實際需要時才使用大世界座標（出於性能原因），這一點很重要。大世"
"界座標通常**不需要**："

msgid "2D games, as precision issues are usually less noticeable."
msgstr "2D 遊戲，因為精度問題通常不太明顯。"

msgid "Games with small-scale or medium-scale worlds."
msgstr "具有小規模或中規模世界的遊戲。"

msgid ""
"Games with large worlds, but split into different levels with loading "
"sequences in between. You can center each level portion around the world "
"origin to avoid precision issues without a performance penalty."
msgstr ""
"具有廣闊世界的遊戲，但分為不同的級別，其間有加載順序。您可以將每個關卡部分以"
"世界原點為中心，以避免精確度問題，而不會影響效能。"

msgid ""
"Open world games with a *playable on-foot area* not exceeding 8192×8192 "
"meters (centered around the world origin). As shown in the above table, the "
"level of precision remains acceptable within that range, even for a first-"
"person game."
msgstr ""
"開放世界遊戲，*可步行區域*不超過 8192×8192 公尺（以世界原點為中心）。如上表所"
"示，即使對於第一人稱遊戲，精度等級在該範圍內仍然可以接受。"

msgid ""
"**If in doubt**, you probably don't need to use large world coordinates in "
"your project. For reference, most modern AAA open world titles don't use a "
"large world coordinates system and still rely on single-precision floats for "
"both rendering and physics."
msgstr ""
"**如果有疑問**，您可能不需要在專案中使用大世界座標。作為參考，大多數現代 AAA "
"開放世界遊戲不使用大型世界坐標系，並且仍然依賴單精度浮點進行算繪和物理。"

msgid "Enabling large world coordinates"
msgstr "啟用大世界座標"

msgid ""
"This process requires recompiling the editor and all export template "
"binaries you intend to use. If you only intend to export your project in "
"release mode, you can skip the compilation of debug export templates. In any "
"case, you'll need to compile an editor build so you can test your large "
"precision world without having to export the project every time."
msgstr ""
"此過程需要重新編譯編輯器和您打算使用的所有匯出模板二進位。如果您只想以發布模"
"式匯出專案，則可以跳過偵錯匯出範本的編譯。無論如何，您都需要編譯編輯器版本，"
"以便可以測試大型精確世界，而不必每次都匯出專案。"

msgid ""
"See the :ref:`Compiling <toc-devel-compiling>` section for compiling "
"instructions for each target platform. You will need to add the "
"``precision=double`` SCons option when compiling the editor and export "
"templates."
msgstr ""
"請參閱 :ref:`編譯 <toc-devel-compiling>` 部分，以了解每個目標平台的編譯指令。"
"編譯編輯器和匯出模板時，您需要新增“ precision=double ” SCons 選項。"

msgid ""
"The resulting binaries will be named with a ``.double`` suffix to "
"distinguish them from single-precision binaries (which lack any precision "
"suffix). You can then specify the binaries as custom export templates in "
"your project's export presets in the Export dialog."
msgstr ""
"產生的二進位檔案將以“.double”後綴命名，以將其與單精確度二進位（缺少任何精確度"
"後綴）區分開來。然後，您可以在「匯出」對話方塊的專案匯出預設中將二進位檔案指"
"定為自訂匯出範本。"

msgid "Compatibility between single-precision and double-precision builds"
msgstr "單雙精度建構之間的的相容性"

msgid ""
"When saving a *binary* resource using the :ref:`class_ResourceSaver` "
"singleton, a special flag is stored in the file if the resource was saved "
"using a build that uses double-precision numbers. As a result, all binary "
"resources will change on disk when you switch to a double-precision build "
"and save over them."
msgstr ""
"使用 class_ResourceSaver 單例儲存*二進位*資源時，如果使用使用雙精確度數字的建"
"置儲存資源，則會在檔案中儲存一個特殊旗標。因此，當您切換到雙精度建置並保存它"
"們時，磁碟上的所有二進位資源都會發生變化。"

msgid ""
"Both single-precision and double-precision builds support using the :ref:"
"`class_ResourceLoader` singleton on resources that use this special flag. "
"This means single-precision builds can load resources saved using double-"
"precision builds and vice versa. Text-based resources don't store a double-"
"precision flag, as they don't require such a flag for correct reading."
msgstr ""
"單精度和雙精度建置都支援在使用此特殊旗標的資源上使用 class_ResourceLoader 單"
"例。這意味著單精度建置可以載入使用雙精度建置節省的資源，反之亦然。基於文字的"
"資源不儲存雙精度旗標，因為它們不需要這樣的旗標來正確讀取。"

msgid "Known incompatibilities"
msgstr "已知的不相容"

msgid ""
"In a networked multiplayer game, the server and all clients should be using "
"the same build type to ensure precision remains consistent across clients. "
"Using different build types *may* work, but various issues can occur."
msgstr ""
"在網路多人遊戲中，伺服器和所有使用者端應使用相同的建置型別，以確保客戶端之間"
"的精確度保持一致。使用不同的建置型別*可能*有效，但可能會出現各種問題。"

msgid ""
"The GDExtension API changes in an incompatible way in double-precision "
"builds. This means extensions **must** be rebuilt to work with double-"
"precision builds. On the extension developer's end, the ``REAL_T_IS_DOUBLE`` "
"define is enabled when building a GDExtension with ``precision=double``. "
"``real_t`` can be used as an alias for ``float`` in single-precision builds, "
"and ``double`` in double-precision builds."
msgstr ""
"GDExtension API 在雙精確度建置中以不相容的方式變更。這意味著擴充 **必須** 重"
"新建構才能使用雙精度建構。在擴充開發人員端，當使用「 precision=double 」建置 "
"GDExtension 時，會啟用「 REAL_T_IS_DOUBLE 」定義。 ``real_t`` 可以用作單精度"
"建置中的 ``float`` 的別名，以及雙精度建置中的 ``double`` 的別名。"

msgid "Limitations"
msgstr "限制"

msgid ""
"Since 3D rendering shaders don't actually use double-precision floats, there "
"are some limitations when it comes to 3D rendering precision:"
msgstr ""
"由於 3D 算繪著色器實際上並未使用雙精確度浮點，因此在 3D 算繪精度方面存在一些"
"限制："

msgid ""
"Shaders using the ``skip_vertex_transform`` or ``world_vertex_coords`` don't "
"benefit from increased precision."
msgstr ""
"使用“skip_vertex_transform”或“world_vertex_coords”的著色器不會從提高的精度中"
"受益。"

msgid ""
":ref:`Triplanar mapping <doc_standard_material_3d_triplanar_mapping>` "
"doesn't benefit from increased precision. Materials using triplanar mapping "
"will exhibit visible jittering when far away from the world origin."
msgstr ""
":ref:`三平面貼圖 <doc_standard_material_3d_triplanar_mapping>` 不會從提高的精"
"確度中受益。當遠離世界原點時，使用三平面貼圖的材質將表現出可見的抖動。"

msgid ""
"2D rendering currently doesn't benefit from increased precision when large "
"world coordinates are enabled. This can cause visible model snapping to "
"occur when far away from the world origin (starting from a few million "
"pixels at typical zoom levels). 2D physics calculations will still benefit "
"from increased precision though."
msgstr ""
"當啟用大世界座標時，2D 算繪目前無法從精確度的提升中受益。這可能會導致在遠離世"
"界原點（從典型縮放等級的數百萬像素開始）時發生可見模型捕捉。不過，二維物理計"
"算仍將受益於精確度的提升。"

msgid "Translation status"
msgstr "翻譯狀態"
