# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using RigidBody"
msgstr "使用 RigidBody"

msgid "What is a rigid body?"
msgstr "什麼是剛體？"

msgid ""
"A rigid body is one that is directly controlled by the physics engine in "
"order to simulate the behavior of physical objects. In order to define the "
"shape of the body, it must have one or more :ref:`Shape3D <class_Shape3D>` "
"objects assigned. Note that setting the position of these shapes will affect "
"the body's center of mass."
msgstr ""
"剛體是直接由物理引擎控制以類比物理物件行為的物體. 為了定義物體的形狀, 必須分"
"配一個或多個 :ref:`Shape <class_Shape>` 對象. 注意, 設定這些形狀的位置將影響"
"物體的重心."

msgid "How to control a rigid body"
msgstr "如何控制剛體"

msgid ""
"A rigid body's behavior can be altered by setting its properties, such as "
"mass and weight. A physics material needs to be added to the rigid body to "
"adjust its friction and bounce, and set if it's absorbent and/or rough. "
"These properties can be set in the Inspector or via code. See :ref:"
"`RigidBody3D <class_RigidBody3D>` and :ref:`PhysicsMaterial "
"<class_PhysicsMaterial>` for the full list of properties and their effects."
msgstr ""
"剛體的行為可以通過設定其屬性來改變，比如品質和重量。需要給剛體新增一個物理材"
"質來調整它的摩擦力和反彈力，並設定它是否具有吸收性、粗糙度。這些屬性可以在屬"
"性面板中或通過程式碼來設定。參見 :ref:`RigidBody <class_RigidBody>` 和 :ref:"
"`PhysicsMaterial <class_PhysicsMaterial>` 獲取完整的屬性列表和它們的效果。"

msgid ""
"There are several ways to control a rigid body's movement, depending on your "
"desired application."
msgstr "有幾種方法可以控制剛體的運動, 這取決於您的應用程式."

msgid ""
"If you only need to place a rigid body once, for example to set its initial "
"location, you can use the methods provided by the :ref:`Node3D "
"<class_Node3D>` node, such as ``set_global_transform()`` or ``look_at()``. "
"However, these methods cannot be called every frame or the physics engine "
"will not be able to correctly simulate the body's state. As an example, "
"consider a rigid body that you want to rotate so that it points towards "
"another object. A common mistake when implementing this kind of behavior is "
"to use ``look_at()`` every frame, which breaks the physics simulation. "
"Below, we'll demonstrate how to implement this correctly."
msgstr ""
"如果你只需要放置一次剛體, 例如設定它的初始位置, 你可以使用 :ref:`Spatial "
"<class_Spatial>` 節點提供的方法, 例如 ``set_global_transform()`` 或 "
"``look_at()`` . 但是, 這些方法不能每一影格都被呼叫, 否則物理引擎將無法正確地"
"類比物體的狀態. 舉個例子, 考慮一個剛體, 你想旋轉它, 使它指向另一個對象. 在實"
"作這種行為時, 一個常見的錯誤是每一影格都使用 ``look_at()`` , 這樣會破壞物理類"
"比. 下面, 我們將演示如何正確地實作這一點."

msgid ""
"The fact that you can't use ``set_global_transform()`` or ``look_at()`` "
"methods doesn't mean that you can't have full control of a rigid body. "
"Instead, you can control it by using the ``_integrate_forces()`` callback. "
"In this method, you can add *forces*, apply *impulses*, or set the "
"*velocity* in order to achieve any movement you desire."
msgstr ""
"你不能使用 ``set_global_transform()`` 或 ``look_at()`` 方法並不意味著你不能完"
"全控制一個剛體. 相反, 你可以通過使用 ``_integrate_forces()`` 回呼函式來控制"
"它. 在這個方法中, 你可以新增 *力* , 應用 *脈衝* , 或者設定 *速度* , 以實作你"
"想要的任何運動."

msgid "The \"look at\" method"
msgstr "“look at”方法"

#, fuzzy
msgid ""
"As described above, using the Node3D's ``look_at()`` method can't be used "
"each frame to follow a target. Here is a custom ``look_at()`` method called "
"``look_follow()`` that will work with rigid bodies:"
msgstr ""
"如上所述, 使用Spatial節點的 ``look_at()`` 方法不能每一影格都用來追蹤一個目"
"標. 這裡有一個自訂的 ``look_at()`` 方法, 它可以可靠地工作在剛體上:"

msgid ""
"This method uses the rigid body's ``angular_velocity`` property to rotate "
"the body. The axis to rotate around is given by the cross product between "
"the current forward direction and the direction one wants to look in. The "
"``clamp`` is a simple method used to prevent the amount of rotation from "
"going past the direction which is wanted to be looked in, as the total "
"amount of rotation needed is given by the arccosine of the dot product. This "
"method can be used with ``axis_lock_angular_*`` as well. If more precise "
"control is needed, solutions such as ones relying on :ref:`class_Quaternion` "
"may be required, as discussed in :ref:`doc_using_transforms`."
msgstr ""

msgid "Translation status"
msgstr "翻譯狀態"
