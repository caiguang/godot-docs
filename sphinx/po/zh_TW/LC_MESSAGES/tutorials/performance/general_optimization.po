# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "General optimization tips"
msgstr "**通用選項**"

msgid "Introduction"
msgstr "前言"

msgid ""
"In an ideal world, computers would run at infinite speed. The only limit to "
"what we could achieve would be our imagination. However, in the real world, "
"it's all too easy to produce software that will bring even the fastest "
"computer to its knees."
msgstr ""
"在一個理想的世界裡, 電腦將以無限的速度運作. 我們唯一的限制是我們的想像力. 然"
"而, 在現實世界中, 製造出能讓最快的電腦也屈服的軟體實在是太容易了."

msgid ""
"Thus, designing games and other software is a compromise between what we "
"would like to be possible, and what we can realistically achieve while "
"maintaining good performance."
msgstr ""
"因此, 設計遊戲和其他軟體是在我們希望可能的情況下, 和在保持良好性能的前提下, "
"能夠實際實作的情況之間的折中."

msgid "To achieve the best results, we have two approaches:"
msgstr "要達到最佳效果, 我們有兩種方法:"

msgid "Work faster."
msgstr "工作更快."

msgid "Work smarter."
msgstr "工作更智慧。"

msgid "And preferably, we will use a blend of the two."
msgstr "我們最好將兩者混合使用."

msgid "Smoke and mirrors"
msgstr "節點與資源"

msgid ""
"Part of working smarter is recognizing that, in games, we can often get the "
"player to believe they're in a world that is far more complex, interactive, "
"and graphically exciting than it really is. A good programmer is a magician, "
"and should strive to learn the tricks of the trade while trying to invent "
"new ones."
msgstr ""
"更聰明地工作的一部分是認識到, 在遊戲中, 我們經常可以讓玩家相信他們所處的世界"
"比實際情況要複雜得多, 互動性強, 圖形上也更刺激. 一個好的程式師是一個魔術師, "
"應該努力學習行業的技巧, 同時努力發明新的技巧."

msgid "The nature of slowness"
msgstr "緩慢的本質"

msgid ""
"To the outside observer, performance problems are often lumped together. But "
"in reality, there are several different kinds of performance problems:"
msgstr ""
"在外界觀察者看來, 業績問題往往被歸納在一起. 但實際上, 業績問題有幾種不同的型"
"別:"

msgid ""
"A slow process that occurs every frame, leading to a continuously low frame "
"rate."
msgstr "每一影格都發生的緩慢過程, 導致持續的低影格率."

msgid ""
"An intermittent process that causes \"spikes\" of slowness, leading to "
"stalls."
msgstr "一個斷斷續續的過程, 造成緩慢的到達 \"巔峰\", 導致停滯不前."

msgid ""
"A slow process that occurs outside of normal gameplay, for instance, when "
"loading a level."
msgstr "在正常遊戲之外發生的緩慢程序, 例如載入關卡時."

msgid "Each of these are annoying to the user, but in different ways."
msgstr "每一種都會給使用者帶來煩惱, 但方式不同."

msgid "Measuring performance"
msgstr "效能"

msgid ""
"Probably the most important tool for optimization is the ability to measure "
"performance - to identify where bottlenecks are, and to measure the success "
"of our attempts to speed them up."
msgstr ""
"對於優化來說, 最重要的工具可能是衡量性能的能力--找出瓶頸所在, 並衡量我們突破"
"瓶頸的嘗試是否成功."

msgid "There are several methods of measuring performance, including:"
msgstr "有幾種衡量性能的方法, 包括:"

msgid "Putting a start/stop timer around code of interest."
msgstr "在感興趣的程式碼周圍放置一個 開啟/停止 的計時器."

msgid "Using the :ref:`Godot profiler <doc_the_profiler>`."
msgstr "使用現有的 Godot 材質"

msgid "Using :ref:`external CPU profilers <doc_using_cpp_profilers>`."
msgstr "使用 :ref:`外部 CPU 分析器 <doc_using_cpp_profilers>` 。"

msgid ""
"Using external GPU profilers/debuggers such as `NVIDIA Nsight Graphics "
"<https://developer.nvidia.com/nsight-graphics>`__, `Radeon GPU Profiler "
"<https://gpuopen.com/rgp/>`__ or `Intel Graphics Performance Analyzers "
"<https://www.intel.com/content/www/us/en/developer/tools/graphics-"
"performance-analyzers/overview.html>`__."
msgstr ""
"使用外部 GPU 分析器或除錯器，例如： `NVIDIA Nsight Graphics <https://"
"developer.nvidia.com/nsight-graphics>`__ ， `Radeon GPU Profiler <https://"
"gpuopen.com/rgp/>`__ 或 `Intel Graphics Performance Analyzers <https://www."
"intel.com/content/www/us/en/developer/tools/graphics-performance-analyzers/"
"overview.html>`__ 。"

msgid ""
"Checking the frame rate (with V-Sync disabled). Third-party utilities such "
"as `RivaTuner Statistics Server <https://www.guru3d.com/files-details/rtss-"
"rivatuner-statistics-server-download.html>`__ (Windows) or `MangoHud "
"<https://github.com/flightlessmango/MangoHud>`__ (Linux) can also be useful "
"here."
msgstr ""
"查看影格率（禁用 V-Sync ）。也可以用協力廠商工具，如 `RivaTuner Statistics "
"Server <https://www.guru3d.com/files-details/rtss-rivatuner-statistics-"
"server-download.html>`__ （Windows）or `MangoHud <https://github.com/"
"flightlessmango/MangoHud>`__ （Linux）。"

msgid ""
"Using an unofficial `debug menu add-on <https://github.com/godot-extended-"
"libraries/godot-debug-menu>`__."
msgstr ""
"使用一個非官方的`除錯功能表附加元件 <https://github.com/godot-extended-"
"libraries/godot-debug-menu>`__."

msgid ""
"Be very aware that the relative performance of different areas can vary on "
"different hardware. It's often a good idea to measure timings on more than "
"one device. This is especially the case if you're targeting mobile devices."
msgstr ""
"要非常清楚, 不同區域的相對性能在不同的硬體上會有所不同. 在一個以上的裝置上測"
"量計時通常是個好主意. 如果你的目標是移動裝置, 情況尤其如此."

msgid "Limitations"
msgstr "限制"

msgid ""
"CPU profilers are often the go-to method for measuring performance. However, "
"they don't always tell the whole story."
msgstr "CPU分析器通常是測量性能的常用方法. 然而, 它們並不總是能反映全部情況."

msgid ""
"Bottlenecks are often on the GPU, \"as a result\" of instructions given by "
"the CPU."
msgstr "瓶頸往往在GPU上,\"由於\"CPU給出的指令."

msgid ""
"Spikes can occur in the operating system processes (outside of Godot) \"as a "
"result\" of instructions used in Godot (for example, dynamic memory "
"allocation)."
msgstr ""
"由於在Godot中使用的指令(例如, 動態記憶體分配)\"導致\" 作業系統程序(在Godot之"
"外)可能出現巔峰."

msgid ""
"You may not always be able to profile specific devices like a mobile phone "
"due to the initial setup required."
msgstr "由於需要進行初始設定, 您可能並不總是能夠對特定裝置進行配置, 例如手機."

msgid ""
"You may have to solve performance problems that occur on hardware you don't "
"have access to."
msgstr "您可能需要解決您無法存取的硬體上出現的性能問題."

msgid ""
"As a result of these limitations, you often need to use detective work to "
"find out where bottlenecks are."
msgstr "由於這些限制, 你經常需要使用偵測工作來找出瓶頸所在."

msgid "Detective work"
msgstr "Detect 3d 選項"

msgid ""
"Detective work is a crucial skill for developers (both in terms of "
"performance, and also in terms of bug fixing). This can include hypothesis "
"testing, and binary search."
msgstr ""
"偵測工作對於開發人員來說是一項至關重要的技能(無論是在性能方面, 還是在錯誤修復"
"方面). 這可以包括假設測試和二進位搜索."

msgid "Hypothesis testing"
msgstr "型別轉換"

msgid ""
"Say, for example, that you believe sprites are slowing down your game. You "
"can test this hypothesis by:"
msgstr "比如說, 你認為精靈使你的遊戲速度變慢. 可以通過以下方式來驗證這個假設:"

msgid "Measuring the performance when you add more sprites, or take some away."
msgstr "當你新增更多的精靈或移除一些精靈時, 測量其性能."

msgid ""
"This may lead to a further hypothesis: does the size of the sprite determine "
"the performance drop?"
msgstr "這可能會引出一個進一步的假設: 精靈的大小是否決定了性能的下降？"

msgid ""
"You can test this by keeping everything the same, but changing the sprite "
"size, and measuring performance."
msgstr "你可以通過保持一切不變, 但改變精靈的大小, 並測量性能來進行測試."

msgid "Binary search"
msgstr "二分搜尋"

msgid ""
"If you know that frames are taking much longer than they should, but you're "
"not sure where the bottleneck lies. You could begin by commenting out "
"approximately half the routines that occur on a normal frame. Has the "
"performance improved more or less than expected?"
msgstr ""
"如果你知道影格的時間比它們應該的時間長得多, 但你不確定瓶頸在哪裡. 你可以先注"
"釋掉正常影格上發生的大約一半常式, 測量性能的提升比預期的多還是少？"

msgid ""
"Once you know which of the two halves contains the bottleneck, you can "
"repeat this process until you've pinned down the problematic area."
msgstr ""
"一旦你知道兩半中的哪一半包含瓶頸, 你可以重複這個過程, 直到你確定問題區域."

msgid "Profilers"
msgstr "分析工具"

msgid ""
"Profilers allow you to time your program while running it. Profilers then "
"provide results telling you what percentage of time was spent in different "
"functions and areas, and how often functions were called."
msgstr ""
"分析器允許你在運作程式時對其進行計時. 然後, 分析器提供結果, 告訴你在不同的功"
"能和區域所花費的時間百分比, 以及功能被呼叫的頻率."

msgid ""
"This can be very useful both to identify bottlenecks and to measure the "
"results of your improvements. Sometimes, attempts to improve performance can "
"backfire and lead to slower performance. **Always use profiling and timing "
"to guide your efforts.**"
msgstr ""
"這對於確定瓶頸和衡量改進的結果都非常有用. 有時, 改善性能的嘗試可能會適得其"
"反, 導致性能變慢. **始終使用分析器和時長來指導您的工作**"

msgid ""
"For more info about using Godot's built-in profiler, see :ref:"
"`doc_the_profiler`."
msgstr "更多有關光照烘焙的資訊，請參考 :ref:`doc_baked_lightmaps` 。"

msgid "Principles"
msgstr "原則"

msgid "`Donald Knuth <https://en.wikipedia.org/wiki/Donald_Knuth>`__ said:"
msgstr ""
"`SOLID <https://zh.wikipedia.org/zh-tw/"
"SOLID_(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1)>`_"

msgid ""
"*Programmers waste enormous amounts of time thinking about, or worrying "
"about, the speed of noncritical parts of their programs, and these attempts "
"at efficiency actually have a strong negative impact when debugging and "
"maintenance are considered. We should forget about small efficiencies, say "
"about 97% of the time: premature optimization is the root of all evil. Yet "
"we should not pass up our opportunities in that critical 3%.*"
msgstr ""
"*程式師浪費了大量的時間去考慮或者擔心程式中非關鍵部分的速度, 如果考慮到除錯和"
"維護, 這些提高效率的嘗試實際上會產生強烈的負面影響. 我們應該忘掉小效率, 比如"
"說97%左右的時間: 過早的優化是萬惡之源. 然而不應該放棄那關鍵的3%的機會*"

msgid "The messages are very important:"
msgstr "這些消息非常重要:"

msgid ""
"Developer time is limited. Instead of blindly trying to speed up all aspects "
"of a program, we should concentrate our efforts on the aspects that really "
"matter."
msgstr ""
"開發者的時間是有限的. 與其盲目地試圖加快一個程式的所有方面, 應該集中精力在真"
"正重要的方面."

msgid ""
"Efforts at optimization often end up with code that is harder to read and "
"debug than non-optimized code. It is in our interests to limit this to areas "
"that will really benefit."
msgstr ""
"在優化方面的努力, 最終往往會得到比非優化程式碼更難閱讀和除錯的程式碼. 將這種"
"情況限制在真正受益的領域更符合我們的利益."

msgid ""
"Just because we *can* optimize a particular bit of code, it doesn't "
"necessarily mean that we *should*. Knowing when and when not to optimize is "
"a great skill to develop."
msgstr ""
"僅僅因為我們 *可以* 優化某段程式碼, 並不一定意味著 *應該* . 知道什麼時候優"
"化, 什麼時候不優化, 是一項更好的技能."

msgid ""
"One misleading aspect of the quote is that people tend to focus on the "
"subquote *\"premature optimization is the root of all evil\"*. While "
"*premature* optimization is (by definition) undesirable, performant software "
"is the result of performant design."
msgstr ""
"這句話有一個誤導性的地方, 就是人們往往把注意力集中在 *\"過早的優化是萬惡之源 "
"\"* 這句話上. 雖然過早的優化是不可取的, 但高性能的軟體是高性能設計的結果."

msgid "Performant design"
msgstr "效能"

msgid ""
"The danger with encouraging people to ignore optimization until necessary, "
"is that it conveniently ignores that the most important time to consider "
"performance is at the design stage, before a key has even hit a keyboard. If "
"the design or algorithms of a program are inefficient, then no amount of "
"polishing the details later will make it run fast. It may run *faster*, but "
"it will never run as fast as a program designed for performance."
msgstr ""
"鼓勵人們在必要時忽略優化的危險在於, 它很方便地忽略了考慮性能的最重要時間是在"
"設計階段, 甚至在一個鍵碰到鍵盤之前. 如果一個程式的設計或演算法是低效的, 那麼"
"以後再多的細節修飾也不會使它運作得很快. 它可能運作得更快, 但永遠不會像為性能"
"而設計的程式那樣快."

msgid ""
"This tends to be far more important in game or graphics programming than in "
"general programming. A performant design, even without low-level "
"optimization, will often run many times faster than a mediocre design with "
"low-level optimization."
msgstr ""
"這在遊戲或圖形程式設計中往往比在一般程式設計中更為重要. 一個高性能的設計, 即"
"使沒有低水平的優化, 通常也會比一個低水平優化的平庸設計快很多倍."

msgid "Incremental design"
msgstr "漸進更新／修補"

msgid ""
"Of course, in practice, unless you have prior knowledge, you are unlikely to "
"come up with the best design the first time. Instead, you'll often make a "
"series of versions of a particular area of code, each taking a different "
"approach to the problem, until you come to a satisfactory solution. It's "
"important not to spend too much time on the details at this stage until you "
"have finalized the overall design. Otherwise, much of your work will be "
"thrown out."
msgstr ""
"當然, 在實踐中, 除非你事先有知識, 否則你不可能在第一次就拿出最好的設計. 相"
"反, 你往往會對某一特定區域的程式碼做出一系列版本, 每一個版本都採取不同的方法"
"來解決這個問題, 直到你得出一個滿意的解決方案. 重要的是, 在你最終確定整體設計"
"之前, 在這個階段不要在細節上花費太多時間. 否則, 你的很多工作都會被淘汰."

msgid ""
"It's difficult to give general guidelines for performant design because this "
"is so dependent on the problem. One point worth mentioning though, on the "
"CPU side, is that modern CPUs are nearly always limited by memory bandwidth. "
"This has led to a resurgence in data-oriented design, which involves "
"designing data structures and algorithms for *cache locality* of data and "
"linear access, rather than jumping around in memory."
msgstr ""
"很難給出高性能設計的一般規範，因為這與問題本身有很大關係。不過有一點值得一"
"提，在 CPU 方面，現代 CPU 幾乎總是受到記憶體頻寬的限制。這導致了面向資料的設"
"計的重新興起，涉及到圍繞資料的*快取本地性*（cache locality）和線性存取進行資"
"料結構和演算法的設計，避免在記憶體中進行跳轉。"

msgid "The optimization process"
msgstr "動畫"

msgid ""
"Assuming we have a reasonable design, and taking our lessons from Knuth, our "
"first step in optimization should be to identify the biggest bottlenecks - "
"the slowest functions, the low-hanging fruit."
msgstr ""
"假設我們有一個合理的設計, 聽取Knuth的教訓, 優化的第一步應該是找出最大的瓶頸--"
"最慢的功能, 可輕鬆實作的目標."

msgid ""
"Once we've successfully improved the speed of the slowest area, it may no "
"longer be the bottleneck. So we should test/profile again and find the next "
"bottleneck on which to focus."
msgstr ""
"一旦我們成功地提高了最慢區域的速度, 它可能就不再是瓶頸了. 因此, 我們應該再次"
"進行測試/分析, 找到下一個需要關注的瓶頸."

msgid "The process is thus:"
msgstr "因此, 該過程是:"

msgid "Profile / Identify bottleneck."
msgstr "分析和確定瓶頸."

msgid "Optimize bottleneck."
msgstr "最佳化 APK 大小"

msgid "Return to step 1."
msgstr "返回步驟1."

msgid "Optimizing bottlenecks"
msgstr "最佳化 APK 大小"

msgid ""
"Some profilers will even tell you which part of a function (which data "
"accesses, calculations) are slowing things down."
msgstr ""
"有些分析器甚至會告訴你一個函式的哪個部分在減慢速度(哪些資料存取, 計算)."

msgid ""
"As with design, you should concentrate your efforts first on making sure the "
"algorithms and data structures are the best they can be. Data access should "
"be local (to make best use of CPU cache), and it can often be better to use "
"compact storage of data (again, always profile to test results). Often, you "
"precalculate heavy computations ahead of time. This can be done by "
"performing the computation when loading a level, by loading a file "
"containing precalculated data or simply by storing the results of complex "
"calculations into a script constant and reading its value."
msgstr ""
"與設計一樣, 你應該首先集中精力確保演算法和資料結構是最好的. 資料存取應該是局"
"部的(以最好地利用CPU快取), 而且使用緊湊的資料儲存通常會更好(同樣, 總是對測試"
"結果進行分析). 通常情況下, 你會提前預計算繁重的計算. 這可以通過在載入關卡時執"
"行計算, 載入包含預計算資料的檔或簡單地將複雜的計算結果儲存到腳本常數中並讀取"
"其值來實作."

msgid ""
"Once algorithms and data are good, you can often make small changes in "
"routines which improve performance. For instance, you can move some "
"calculations outside of loops or transform nested ``for`` loops into non-"
"nested loops. (This should be feasible if you know a 2D array's width or "
"height in advance.)"
msgstr ""
"如果確認演算法和資料沒有問題，你通常可以在常式中做一些小的改變來提高性能。例"
"如，可以將一些計算移到迴圈之外，或者將巢狀的 ``for`` 迴圈轉化為非巢狀的迴圈。"
"（如果你事先知道 2D 陣列的寬和高，應該就是可行的。）"

msgid ""
"Always retest your timing/bottlenecks after making each change. Some changes "
"will increase speed, others may have a negative effect. Sometimes, a small "
"positive effect will be outweighed by the negatives of more complex code, "
"and you may choose to leave out that optimization."
msgstr ""
"每次更改後, 一定要重新測試您的時長和瓶頸. 有些改變會提高速度, 有些則可能會產"
"生負面效果. 有時, 一個小的積極效果會被更複雜的程式碼的負面效果所抵消, 可以選"
"擇不做這種優化."

msgid "Appendix"
msgstr "附錄"

msgid "Bottleneck math"
msgstr "瓶頸數學"

msgid ""
"The proverb *\"a chain is only as strong as its weakest link\"* applies "
"directly to performance optimization. If your project is spending 90% of the "
"time in function ``A``, then optimizing ``A`` can have a massive effect on "
"performance."
msgstr ""
"諺語 *\"一條鏈子的強度取決於其最薄弱的環節 \"* 直接適用於性能優化. 如果你的專"
"案90%的時間都花在功能 ``A`` 上, 那麼優化 ``A`` 就會對性能產生巨大影響."

msgid ""
"In this example, improving this bottleneck ``A`` by a factor of 9× decreases "
"overall frame time by 5× while increasing frames per second by 5×."
msgstr ""
"在這個例子中, 將這個瓶頸 ``A`` 改進9倍, 總體影格時間減少5倍, 同時每秒影格數增"
"加5倍."

msgid ""
"However, if something else is running slowly and also bottlenecking your "
"project, then the same improvement can lead to less dramatic gains:"
msgstr ""
"但是, 如果其他東西運作緩慢, 也給你的專案帶來了瓶頸, 那麼同樣的改進只會帶來不"
"那麼顯著的收益:"

msgid ""
"In this example, even though we have hugely optimized function ``A``, the "
"actual gain in terms of frame rate is quite small."
msgstr ""
"在這個例子中, 儘管我們對函式 ``A`` 進行了大量的優化, 但實際的影格率收益卻相當"
"小."

msgid ""
"In games, things become even more complicated because the CPU and GPU run "
"independently of one another. Your total frame time is determined by the "
"slower of the two."
msgstr ""
"在遊戲中, 事情變得更加複雜, 因為CPU和GPU彼此獨立運作. 你的總影格時間是由兩者"
"中較慢的那一個決定的."

msgid ""
"In this example, we optimized the CPU hugely again, but the frame time "
"didn't improve because we are GPU-bottlenecked."
msgstr ""
"在這個例子中, 我們又對CPU進行了大量的優化, 但是影格數並沒有提高, 因為是GPU瓶"
"頸."

msgid "Translation status"
msgstr "翻譯狀態"
