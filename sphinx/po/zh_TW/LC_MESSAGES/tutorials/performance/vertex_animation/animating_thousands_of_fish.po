# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Animating thousands of fish with MultiMeshInstance3D"
msgstr "用 MultiMeshInstance3D 動畫化數以千計條魚"

msgid ""
"This tutorial explores a technique used in the game `ABZU <https://www."
"gdcvault.com/play/1024409/Creating-the-Art-of-ABZ>`_ for rendering and "
"animating thousands of fish using vertex animation and static mesh "
"instancing."
msgstr ""
"本教學探索了遊戲 `ABZU <https://www.gdcvault.com/play/1024409/Creating-the-"
"Art-of-ABZ>`_ 中使用的一種技術, 該技術使用頂點動畫和靜態網格實例, 來算繪和製"
"作成千上萬的魚動畫."

msgid ""
"In Godot, this can be accomplished with a custom :ref:`Shader "
"<class_Shader>` and a :ref:`MultiMeshInstance3D "
"<class_MultiMeshInstance3D>`. Using the following technique you can render "
"thousands of animated objects, even on low end hardware."
msgstr ""
"在 Godot 中，這可以通過自訂 :ref:`Shader <class_Shader>` 和 :ref:"
"`MultiMeshInstance <class_MultiMeshInstance>` 實作。使用下面的技術，即使是在"
"低端硬體上你也可以算繪成千上萬的動畫物件。"

msgid ""
"We will start by animating one fish. Then, we will see how to extend that "
"animation to thousands of fish."
msgstr "我們將從一條魚的動畫開始. 然後, 我們將看到如何將該動畫擴充到數千條魚."

msgid "Animating one Fish"
msgstr "動畫化一條魚"

msgid ""
"We will start with a single fish. Load your fish model into a :ref:"
"`MeshInstance3D <class_MeshInstance3D>` and add a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"按一下下面的材質 :ref:`Plane Mesh <class_MeshInstance>` 功能表並建立一個新"
"的 :ref:`ShaderMaterial <class_ShaderMaterial>`."

msgid ""
"Here is the fish we will be using for the example images, you can use any "
"fish model you like."
msgstr "這是我們用於範例圖像的魚, 您可以使用任何您喜歡的魚模型."

msgid ""
"The fish model in this tutorial is made by `QuaterniusDev <https://"
"quaternius.com>`_ and is shared with a creative commons license. CC0 1.0 "
"Universal (CC0 1.0) Public Domain Dedication https://creativecommons.org/"
"publicdomain/zero/1.0/"
msgstr ""
"本教學中的魚模型由 `QuaterniusDev<http://quaternius.com>` 製作, 使用如下知識"
"共用許可.CC0 1.0通用(CC0 1.0)公共領域貢獻https://creativecommons.org/"
"publicdomain/zero/1.0/"

msgid ""
"Typically, you would use bones and a :ref:`Skeleton3D <class_Skeleton3D>` to "
"animate objects. However, bones are animated on the CPU and so you end "
"having to calculate thousands of operations every frame and it becomes "
"impossible to have thousands of objects. Using vertex animation in a vertex "
"shader, you avoid using bones and can instead calculate the full animation "
"in a few lines of code and completely on the GPU."
msgstr ""
"通常情況下，您將使用骨骼和 :ref:`Skeleton <class_Skeleton>` 為對象做動畫。然"
"而，骨骼的動畫是在 CPU 上做的，所以你必須為每一影格計算成千上萬的操作，因此就"
"不可能有成千上萬的物件。在頂點著色器中使用頂點動畫，你就可以避免使用骨骼，而"
"是完全在 GPU 上，使用幾行程式碼來計算完整的動畫。"

msgid "The animation will be made of four key motions:"
msgstr "動畫由四個關鍵影格動作組成:"

msgid "A side to side motion"
msgstr "從一邊運動到另一邊"

msgid "A pivot motion around the center of the fish"
msgstr "繞著魚的中心作旋轉運動"

msgid "A panning wave motion"
msgstr "平移波動運動"

msgid "A panning twist motion"
msgstr "平移扭轉運動"

msgid ""
"All the code for the animation will be in the vertex shader with uniforms "
"controlling the amount of motion. We use uniforms to control the strength of "
"the motion so that you can tweak the animation in editor and see the results "
"in real time, without the shader having to recompile."
msgstr ""
"所有的動畫程式碼都在頂點著色器中，並由 uniform 控制運動量。我們使用 uniform "
"來控制運動的強度，這樣你就可以在編輯器中調整動畫，並即時看到結果，而不用重新"
"編譯著色器。"

msgid ""
"All the motions will be made using cosine waves applied to ``VERTEX`` in "
"model space. We want the vertices to be in model space so that the motion is "
"always relative to the orientation of the fish. For example, side-to-side "
"will always move the fish back and forth in its left to right direction, "
"instead of on the ``x`` axis in the world orientation."
msgstr ""
"所有的運動都將使用餘弦波應用於模型空間中的 ``VERTEX`` . 我們希望頂點在模型空"
"間中, 使運動總是相對於魚的方向. 例如,side-to-side將始終使魚在其左至右的方向上"
"來回移動, 而不是在世界方向的 ``x`` 軸上."

msgid ""
"In order to control the speed of the animation, we will start by defining "
"our own time variable using ``TIME``."
msgstr "為了控制動畫的速度，我們將通過使用 ``TIME`` 定義自己的時間變數開始。"

msgid ""
"The first motion we will implement is the side to side motion. It can be "
"made by offsetting ``VERTEX.x`` by ``cos`` of ``TIME``. Each time the mesh "
"is rendered, all the vertices will move to the side by the amount of "
"``cos(time)``."
msgstr ""
"我們將實施的第一項議案是左右運動. 它可以通過 ``TIME`` 的 ``cos`` 抵消 "
"``VERTEX.x`` 來製作. 每次算繪網格時, 所有頂點都會移動到 \"cos(時間)\" 的數量."

msgid "The resulting animation should look something like this:"
msgstr "生成的動畫看起來是這樣的:"

msgid ""
"Next, we add the pivot. Because the fish is centered at (0, 0), all we have "
"to do is multiply ``VERTEX`` by a rotation matrix for it to rotate around "
"the center of the fish."
msgstr ""
"接下來，我們新增軸心點。因為魚以 (0, 0) 為中心，我們所要做的只是將 "
"``VERTEX`` 乘以旋轉矩陣，使其圍繞魚的中心旋轉。"

msgid "We construct a rotation matrix like so:"
msgstr "我們建構一個旋轉矩陣, 如下所示:"

msgid ""
"And then we apply it in the ``x`` and ``z`` axes by multiplying it by "
"``VERTEX.xz``."
msgstr "然後我們把它乘以 ``VERTEX.xz``，應用到 ``x`` 和 ``z`` 軸上。"

msgid "With only the pivot applied you should see something like this:"
msgstr "在只應用軸心的情況下，您會看到這個："

msgid ""
"The next two motions need to pan down the spine of the fish. For that, we "
"need a new variable, ``body``. ``body`` is a float that is ``0`` at the tail "
"of the fish and ``1`` at its head."
msgstr ""
"接下來的兩個動作需要沿著魚的脊柱平移. 為此, 我們需要一個新的變數, ``body`` . "
"``body`` 是一個浮點數，在魚的尾部是 ``0`` ，在頭部是 ``1`` ."

msgid ""
"The next motion is a cosine wave that moves down the length of the fish. To "
"make it move along the spine of the fish, we offset the input to ``cos`` by "
"the position along the spine, which is the variable we defined above, "
"``body``."
msgstr ""
"下一個運動是沿著魚的長度向下移動的餘弦波. 為了讓它沿著魚的脊柱移動, 我們用脊"
"柱的位置來偏移輸入到 ``cos`` 的位置, 也就是我們在上面定義的變數 ``body``。"

msgid ""
"This looks very similar to the side to side motion we defined above, but in "
"this one, by using ``body`` to offset ``cos`` each vertex along the spine "
"has a different position in the wave making it look like a wave is moving "
"along the fish."
msgstr ""
"這看起來很像我們上面定義的左右運動, 但在這個例子中, 通過使用 ``body`` 來偏移 "
"``cos``，沿著脊柱的每個頂點在波浪中都有不同的位置, 使它看起來像是沿著魚移動的"
"波浪."

msgid ""
"The last motion is the twist, which is a panning roll along the spine. "
"Similarly to the pivot, we first construct a rotation matrix."
msgstr ""
"最後一個動作是扭轉，也就是沿著脊柱滾動。類似軸心運動，我們首先建構一個旋轉矩"
"陣。"

msgid ""
"We apply the rotation in the ``xy`` axes so that the fish appears to roll "
"around its spine. For this to work, the fish's spine needs to be centered on "
"the ``z`` axis."
msgstr ""
"我們在 ``xy`` 軸上應用旋轉, 使魚看起來繞著它的脊柱滾動. 要做到這一點, 魚的脊"
"柱需要以 ``z`` 軸為中心."

msgid "Here is the fish with twist applied:"
msgstr "這是應用扭曲的魚:"

msgid ""
"If we apply all these motions one after another, we get a fluid jelly-like "
"motion."
msgstr "如果我們一個接一個地應用這些運動, 就得到一個類似液體凝膠似的運動."

msgid ""
"Normal fish swim mostly with the back half of their body. Accordingly, we "
"need to limit the panning motions to the back half of the fish. To do this, "
"we create a new variable, ``mask``."
msgstr ""
"通常魚主要使用身體的後半部分游泳，所以我們需要將平移運動限制在魚的後半部分。"
"為此，我們建立一個新變數 ``mask`` （遮罩）。"

msgid ""
"``mask`` is a float that goes from ``0`` at the front of the fish to ``1`` "
"at the end using ``smoothstep`` to control the point at which the transition "
"from ``0`` to ``1`` happens."
msgstr ""
"``mask`` 是個浮點數，從魚頭的 ``0`` 過渡到魚尾的 ``1`` ，我們用 "
"``smoothstep`` 來控制在哪裡進行由 ``0`` 到 ``1`` 的過渡。"

msgid "Below is an image of the fish with ``mask`` used as ``COLOR``:"
msgstr "下面是把 ``COLOR`` 設定成 ``mask`` 後這條魚的樣子："

msgid ""
"For the wave, we multiply the motion by ``mask`` which will limit it to the "
"back half."
msgstr "我們在做波浪運動的地方乘以 ``mask`` 就可以把動作限制在後半部分。"

msgid ""
"In order to apply the mask to the twist, we use ``mix``. ``mix`` allows us "
"to mix the vertex position between a fully rotated vertex and one that is "
"not rotated. We need to use ``mix`` instead of multiplying ``mask`` by the "
"rotated ``VERTEX`` because we are not adding the motion to the ``VERTEX`` we "
"are replacing the ``VERTEX`` with the rotated version. If we multiplied that "
"by ``mask``, we would shrink the fish."
msgstr ""
"為了將遮罩應用於扭曲, 我們使用 ``mix`` . ``mix`` 允許在完全旋轉的頂點和未旋轉"
"的頂點之間混合頂點位置. 需要使用 ``mix`` 而不是將 ``mask`` 乘以旋轉後的 "
"``VERTEX`` , 因為不是將運動加到 ``VERTEX`` 上, 而是用旋轉後的版本替換 "
"``VERTEX`` . 如果把它乘以 ``mask`` , 就會把魚縮小."

msgid "Putting the four motions together gives us the final animation."
msgstr "將四個動作組合在一起, 就得到了最終的動畫效果."

msgid ""
"Go ahead and play with the uniforms in order to alter the swim cycle of the "
"fish. You will find that you can create a wide variety of swim styles using "
"these four motions."
msgstr ""
"繼續發揮 uniform 的作用, 以改變魚的游泳週期. 你會發現, 你可以用這四個動作創造"
"出各種各樣的游泳方式."

msgid "Making a school of fish"
msgstr "製作一群魚"

msgid ""
"Godot makes it easy to render thousands of the same object using a "
"MultiMeshInstance3D node."
msgstr "在 Godot 中可以很輕鬆地在屬性面板中建立自定資源。"

msgid ""
"A MultiMeshInstance3D node is created and used the same way you would make a "
"MeshInstance3D node. For this tutorial, we will name the MultiMeshInstance3D "
"node ``School``, because it will contain a school of fish."
msgstr ""
"MultiMeshInstance 節點的建立和使用與 MeshInstance 節點相同。在本教學中，我們"
"將把 MultiMeshInstance 節點命名為 ``School``（魚群），因為裡面會有一群魚。"

msgid ""
"Once you have a MultiMeshInstance3D add a :ref:`MultiMesh "
"<class_MultiMesh>`, and to that MultiMesh add your :ref:`Mesh <class_Mesh>` "
"with the shader from above."
msgstr ""
"有了 MultiMeshInstance 之後就再新增一個 :ref:`MultiMesh <class_MultiMesh>`，"
"然後在 MultiMesh 上新增使用上述著色器的 :ref:`Mesh <class_Mesh>`。"

msgid ""
"MultiMeshes draw your Mesh with three additional per-instance properties: "
"Transform (rotation, translation, scale), Color, and Custom. Custom is used "
"to pass in 4 multi-use variables using a :ref:`Color <class_Color>`."
msgstr ""
"MultiMeshes 使用三個額外的實例屬性來繪製 Mesh：變換（旋轉、平移、縮放）、顏色"
"和自訂。自訂用於使用 :ref:`Color <class_Color>` 傳入 4 個多用途變數。"

msgid ""
"``instance_count`` specifies how many instances of the mesh you want to "
"draw. For now, leave ``instance_count`` at ``0`` because you cannot change "
"any of the other parameters while ``instance_count`` is larger than ``0``. "
"We will set ``instance count`` in GDScript later."
msgstr ""
"``instance_count`` 指定要繪製的網格的實例數量。現在，將 ``instance_count`` 保"
"留為 ``0``，因為當 ``instance_count`` 大於 ``0`` 時，您不能更改任何其他參數。"
"我們稍後將在 GDScript 中設定 ``instance_count``。"

msgid ""
"``transform_format`` specifies whether the transforms used are 3D or 2D. For "
"this tutorial, select 3D."
msgstr ""
"``transform_format`` 指定使用的變換是 3D 還是 2D。對於本教學，請選擇 3D。"

msgid ""
"For both ``color_format`` and ``custom_data_format`` you can choose between "
"``None``, ``Byte``, and ``Float``. ``None`` means you won't be passing in "
"that data (either a per-instance ``COLOR`` variable, or ``INSTANCE_CUSTOM``) "
"to the shader. ``Byte`` means each number making up the color you pass in "
"will be stored with 8 bits while ``Float`` means each number will be stored "
"in a floating-point number (32 bits). ``Float`` is slower but more precise, "
"``Byte`` will take less memory and be faster, but you may see some visual "
"artifacts."
msgstr ""
"對於 ``color_format`` 和 ``custom_data_format``，你可以在 ``None``、"
"``Byte``、``Float`` 之間選擇。``None`` 意味著你不會將這些資料（無論是每個實例"
"的 ``COLOR`` 變數還是 ``INSTANCE_CUSTOM``）傳遞給著色器。``Byte`` 意味著組成"
"你傳入的顏色的每一個數位將被儲存為 8 位元，而 ``Float`` 意味著每一個數位將被"
"儲存為浮點數（32 位）。``Float`` 速度較慢但更精確，``Byte`` 佔用記憶體較少、"
"速度較快，但你可能會看到一些視覺上的偽像。"

msgid "Now, set ``instance_count`` to the number of fish you want to have."
msgstr "現在，將 ``instance_count`` 設定為您想要的魚的數量。"

msgid "Next we need to set the per-instance transforms."
msgstr "接下來, 我們需要設定每個實例的變換."

msgid ""
"There are two ways to set per-instance transforms for MultiMeshes. The first "
"is entirely in editor and is described in the :ref:`MultiMeshInstance3D "
"tutorial <doc_using_multi_mesh_instance>`."
msgstr ""
"有兩種方法可以為多個時間軸設定每個實例的變換。第一個完全在編輯器中，在 :ref:"
"`MultiMeshInstance tutorial <doc_using_multi_mesh_instance>` 中進行了描述。"

msgid ""
"The second is to loop over all the instances and set their transforms in "
"code. Below, we use GDScript to loop over all the instances and set their "
"transform to a random position."
msgstr ""
"第二種方法是, 走訪所有實例, 並在程式碼中設定它們的變換. 下面, 我們使用"
"GDScript走訪所有實例, 並將它們的變換設定為隨機位置."

msgid ""
"Running this script will place the fish in random positions in a box around "
"the position of the MultiMeshInstance3D."
msgstr "運作此腳本, 會在多重網格實例位置周圍的框中隨機放置魚."

msgid ""
"If performance is an issue for you, try running the scene with fewer fish."
msgstr "如果你關注性能問題, 試著使用GLES2運作場景或擺放更少的魚."

msgid ""
"Notice how all the fish are all in the same position in their swim cycle? It "
"makes them look very robotic. The next step is to give each fish a different "
"position in the swim cycle so the entire school looks more organic."
msgstr ""
"你應該已經注意到所有魚的游泳動作都是同步的了吧？這樣看上去非常機械。下一步我"
"們要做的就是讓每一條魚都處於游泳週期的不同位置，這樣整個魚群看起來就會更自"
"然。"

msgid "Animating a school of fish"
msgstr "動畫魚群"

msgid ""
"One of the benefits of animating the fish using ``cos`` functions is that "
"they are animated with one parameter, ``time``. In order to give each fish a "
"unique position in the swim cycle, we only need to offset ``time``."
msgstr ""
"使用 ``cos`` 函式給魚做動畫的一個好處是，它們只需要一個 ``time`` 參數。為了讓"
"每條魚在游泳週期中處於單獨的位置，我們只需要偏移 ``time``。"

msgid ""
"We do that by adding the per-instance custom value ``INSTANCE_CUSTOM`` to "
"``time``."
msgstr "為此，我們將每個實例的自訂值 ``INSTANCE_CUSTOM`` 新增到 ``time`` 中。"

msgid ""
"Next, we need to pass a value into ``INSTANCE_CUSTOM``. We do that by adding "
"one line into the ``for`` loop from above. In the ``for`` loop we assign "
"each instance a set of four random floats to use."
msgstr ""
"接下來，我們需要向 ``INSTANCE_CUSTOM`` 傳遞一個值。通過在上面的 ``for`` 迴圈"
"中新增一行來實作這一點。在 ``for`` 迴圈中，為每個實例分配一組四個隨機浮點數來"
"使用。"

msgid ""
"Now the fish all have unique positions in the swim cycle. You can give them "
"a little more individuality by using ``INSTANCE_CUSTOM`` to make them swim "
"faster or slower by multiplying by ``TIME``."
msgstr ""
"現在這些魚在游泳週期中都有獨特的位置。你可以通過使用 ``INSTANCE_CUSTOM`` 乘"
"以 ``TIME`` 讓它們游泳更快或更慢，從而讓它們更個性化。"

msgid ""
"You can even experiment with changing the per-instance color the same way "
"you changed the per-instance custom value."
msgstr "甚至您還可以像更改每個實例的自訂值一樣, 嘗試更改每個實例的顏色."

msgid ""
"One problem that you will run into at this point is that the fish are "
"animated, but they are not moving. You can move them by updating the per-"
"instance transform for each fish every frame. Although doing so will be "
"faster than moving thousands of MeshInstance3Ds per frame, it'll still "
"likely be slow."
msgstr ""
"這時你會遇到一個問題, 那就是魚是有動畫的, 但是它們沒有移動. 你可以通過每一影"
"格更新每個魚的實例變換來移動它們. 雖然這樣做會比每影格移動數千個MeshInstances"
"要快, 但還是可能會很慢."

msgid ""
"In the next tutorial we will cover how to use :ref:`GPUParticles3D "
"<class_GPUParticles3D>` to take advantage of the GPU and move each fish "
"around individually while still receiving the benefits of instancing."
msgstr ""
"下一個教學中，我們將介紹如何使用:ref:`粒子 <class_Particles>`來利用 GPU，分別"
"移動每條魚，同時還能獲得產生實體的好處。"

msgid "Translation status"
msgstr "翻譯狀態"
