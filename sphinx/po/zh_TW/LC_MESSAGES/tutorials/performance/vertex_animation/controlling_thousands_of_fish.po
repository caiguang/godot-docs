# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "用粒子控制數千條魚"

msgid ""
"The problem with :ref:`MeshInstance3D <class_MeshInstance3D>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
":ref:`MeshInstance <class_MeshInstance>` 的問題是，更新轉換陣列的代價很高。它"
"非常適合在場景周圍放置許多靜態物件。但在場景中移動物體仍然很困難。"

msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`GPUParticles3D <class_GPUParticles3D>` node. Particles take advantage of "
"GPU acceleration by computing and setting the per-instance information in a :"
"ref:`Shader <class_Shader>`."
msgstr ""
"為了使每個實例以有趣的方式移動, 我們將使用一個 :ref:`Particles "
"<class_Particles>` 節點.Particles通過在 :ref:`Shader <class_Shader>` 中計算和"
"設定每個實例的資訊來利用GPU加速."

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"首先建立一個 Particles 節點。然後在“Draw Passes”下將粒子的“Draw Pass 1”設定為"
"你的 :ref:`Mesh <class_Mesh>`。然後在“Process Material”下建立一個新的 :ref:"
"`ShaderMaterial <class_ShaderMaterial>`。"

msgid "Set the ``shader_type`` to ``particles``."
msgstr "將 ``shader_type`` 設定為 ``particles``。"

msgid "Then add the following two functions:"
msgstr "然後新增以下兩個函式："

msgid ""
"These functions come from the default :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. They are used to generate a random number "
"from each particle's ``RANDOM_SEED``."
msgstr ""
"這些函式來自預設的 :ref:`ParticlesMaterial <class_ParticlesMaterial>`，可以用"
"來根據每個粒子的 ``RANDOM_SEED`` 生成亂數。"

msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the shader of the mesh, and also in the particle shader the next "
"time it is run."
msgstr ""
"粒子著色器的一個獨特之處在於, 一些內建的變數可以跨影格保存. ``TRANSFORM`` , "
"``COLOR`` 和 ``CUSTOM`` 都可以在網格的Spatial shader 中存取, 下次運作時也可以"
"在粒子著色器中存取."

msgid ""
"Next, setup your ``start()`` function. Particles shaders contain a "
"``start()`` function and a ``process()`` function."
msgstr ""
"接下來，設定您的 ``vertex`` 函式。粒子著色器只包含一個頂點函式，不包含其他函"
"式。"

msgid ""
"The code in the ``start()`` function only runs when the particle system "
"starts. The code in the ``process()`` function will always run."
msgstr ""
"“start()”函式中的程式碼僅在粒子系統啟動時運作。 “process()”函式中的程式碼將始"
"終運作。"

msgid ""
"We need to generate 4 random numbers: 3 to create a random position and one "
"for the random offset of the swim cycle."
msgstr ""
"接下來, 我們需要生成4個亂數:3個用於建立一個隨機位置,1個用於游泳週期的隨機偏移"
"量."

msgid ""
"First, generate 4 seeds inside the ``start()`` function using the ``hash()`` "
"function provided above:"
msgstr "首先，使用上面提供的 ``hash`` 函式在 ``RESTART`` 塊中生成 4 個種子："

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr "然後，使用這些種子生成亂數，使用 ``rand_from_seed``："

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"最後，將 ``position`` 賦值給 ``TRANSFORM[3].xyz``，它是保存位置資訊的變換的一"
"部分。"

msgid "Remember, all this code so far goes inside the ``start()`` function."
msgstr "記住，到目前為止，所有這些程式碼都位於 ``RESTART`` 塊中。"

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr "網格的頂點著色器, 可以完全複用前一教學中的."

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"現在每一影格你都可以單獨移動每條魚了，可以直接增加 ``TRANSFORM`` 也可以設定 "
"``VELOCITY``。"

msgid ""
"Let's transform the fish by setting their ``VELOCITY`` in the ``start()`` "
"function."
msgstr "讓我們通過設定魚的 ``VELOCITY`` 來對它們進行變換。"

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr "這是設定 ``VELOCITY`` 的最基本方法，每個粒子（或魚）都有相同的速度。"

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr "只要設定 ``VELOCITY``，你就可以讓魚自由遊動。例如，嘗試下面的程式碼。"

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr "這將為每條魚在 ``2`` 和 ``10`` 之間設定不同的速度。"

msgid ""
"You can also let each fish change its velocity over time if you set the "
"velocity in the ``process()`` function."
msgstr ""
"如果您在「process()」函式中設定速度，您也可以讓每條魚隨著時間的推移改變其速"
"度。"

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"如果你在上一個教學中使用了 ``CUSTOM.y``，你也可以基於 ``VELOCITY`` 來設定游泳"
"動畫的速度。直接用 ``CUSTOM.y`` 就好了。"

msgid "This code gives you the following behavior:"
msgstr "程式碼產生的效果如圖:"

msgid ""
"Using a ParticleProcessMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"使用 ParticlesMaterial 可以隨意讓魚的行為變得簡單或複雜。在本教學中，我們只設"
"定了速度，但是在你自己的著色器中，你也可以設定 ``COLOR``、旋轉、縮放（通過 "
"``TRANSFORM``）。有關粒子著色器的更多資訊，請參閱:ref:`《粒子著色器參考》 "
"<doc_particle_shader>`。"

msgid "Translation status"
msgstr "翻譯狀態"
