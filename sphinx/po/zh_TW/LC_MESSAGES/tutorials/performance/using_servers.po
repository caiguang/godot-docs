# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Optimization using Servers"
msgstr "使用伺服器進行優化"

msgid ""
"Engines like Godot provide increased ease of use thanks to their high level "
"constructs and features. Most of them are accessed and used via the :ref:"
"`Scene System<doc_scene_tree>`. Using nodes and resources simplifies project "
"organization and asset management in complex games."
msgstr ""
"像 Godot 這樣的引擎，由於其更高層次的建構和功能，提供了更多的易用性。它們中的"
"大多數都是通過:ref:`場景系統 <doc_scene_tree>`來存取和使用的。使用節點和資源"
"可以簡化複雜遊戲中的專案組織和素材管理。"

msgid "There are, of course, always drawbacks:"
msgstr "當然, 總是有缺點的:"

msgid "There is an extra layer of complexity."
msgstr "那有一個額外複雜層。"

msgid "Performance is lower than when using simple APIs directly."
msgstr "性能比直接使用簡單API要低。"

msgid "It is not possible to use multiple threads to control them."
msgstr "也可以有條件地複寫選項："

msgid "More memory is needed."
msgstr "需要更多的記憶體."

msgid ""
"In many cases, this is not really a problem (Godot is very optimized, and "
"most operations are handled with signals, so no polling is required). Still, "
"sometimes it can be. For example, dealing with tens of thousands of "
"instances for something that needs to be processed every frame can be a "
"bottleneck."
msgstr ""
"在很多情況下, 這並不是一個真正的問題(Godot是非常優化的, 大多數操作都是用訊號"
"處理的, 所以不需要輪詢). 不過, 有時候還是會有這樣的情況. 例如, 對於每一影格都"
"需要處理的東西來說, 處理數以萬計的實例可能是一個瓶頸."

msgid ""
"This type of situation makes programmers regret they are using a game engine "
"and wish they could go back to a more handcrafted, low level implementation "
"of game code."
msgstr ""
"這種情況會讓程式師後悔自己使用的是遊戲引擎, 希望能回到更加手動, 更加低層的遊"
"戲程式碼實作中去."

msgid "Still, Godot is designed to work around this problem."
msgstr "當然,Godot的設計工作中還是可以解決這個問題."

msgid ""
"You can see how using low-level servers works in action using the `Bullet "
"Shower demo project <https://github.com/godotengine/godot-demo-projects/tree/"
"master/2d/bullet_shower>`__"
msgstr ""
"除了這份說明文件，你可能也會想看看 `Godot Demo 專案 <https://github.com/"
"godotengine/godot-demo-projects>`_ 。"

msgid "Servers"
msgstr "伺服器"

msgid ""
"One of the most interesting design decisions for Godot is the fact that the "
"whole scene system is *optional*. While it is not currently possible to "
"compile it out, it can be completely bypassed."
msgstr ""
"Godot 有許多非常有趣的設計決定，其中之一就是整個場景系統都是*可選的*。雖然目"
"前還不能在編譯時去除，但你完全可以繞過它。"

msgid ""
"At the core, Godot uses the concept of Servers. They are very low-level APIs "
"to control rendering, physics, sound, etc. The scene system is built on top "
"of them and uses them directly. The most common servers are:"
msgstr ""
"Godot 在核心中使用了“伺服器”的概念。它們是非常底層的 API，用來控制算繪、物"
"理、聲音等。場景系統建立在它們之上，直接使用它們。最常見的伺服器有："

msgid ""
":ref:`RenderingServer <class_RenderingServer>`: handles everything related "
"to graphics."
msgstr ""
":ref:`RenderingServer <class_RenderingServer>`: 處理所有與圖形相關的內容。"

msgid ""
":ref:`PhysicsServer3D <class_PhysicsServer3D>`: handles everything related "
"to 3D physics."
msgstr ""
":ref:`PhysicsServer3D <class_PhysicsServer3D>`: 處理所有與 3D 物理相關的內"
"容。"

msgid ""
":ref:`PhysicsServer2D <class_PhysicsServer2D>`: handles everything related "
"to 2D physics."
msgstr ""
":ref:`PhysicsServer2D <class_PhysicsServer2D>`: 處理所有與 2D 物理相關的內"
"容。"

msgid ""
":ref:`AudioServer <class_AudioServer>`: handles everything related to audio."
msgstr ":ref:`AudioServer <class_AudioServer>`: 處理與音訊相關的一切."

msgid ""
"Explore their APIs and you will realize that all the functions provided are "
"low-level implementations of everything Godot allows you to do."
msgstr ""
"你只需研究它們的 API 就會意識到，它們所提供的函式全部都是 Godot 允許你所進行"
"的操作的底層實作。"

msgid "RIDs"
msgstr "RID"

msgid ""
"The key to using servers is understanding Resource ID (:ref:`RID "
"<class_RID>`) objects. These are opaque handles to the server "
"implementation. They are allocated and freed manually. Almost every function "
"in the servers requires RIDs to access the actual resource."
msgstr ""
"使用伺服器的關鍵是理解資源 ID（Resource ID，即 :ref:`RID <class_RID>`）對象。"
"這些物件是伺服器實作的非公開的控制碼。它們是手動分配和釋放的。幾乎伺服器中的"
"每個功能都需要 RID 來存取實際的資源。"

msgid ""
"Most Godot nodes and resources contain these RIDs from the servers "
"internally, and they can be obtained with different functions. In fact, "
"anything that inherits :ref:`Resource <class_Resource>` can be directly "
"casted to an RID. Not all resources contain an RID, though: in such cases, "
"the RID will be empty. The resource can then be passed to server APIs as an "
"RID."
msgstr ""
"大多數 Godot 節點和資源都包含這些來自服務內部的 RID，它們可以通過不同的函式獲"
"得。事實上，任何繼承 :ref:`Resource <class_Resource>` 的東西都可以直接轉換成 "
"RID。不過並不是所有資源都包含 RID：在這種情況下，RID 為空。可以用 RID 的形式"
"將資源傳遞給伺服器 API。"

msgid ""
"Resources are reference-counted (see :ref:`RefCounted <class_RefCounted>`), "
"and references to a resource's RID are *not* counted when determining "
"whether the resource is still in use. Make sure to keep a reference to the "
"resource outside the server, or else both it and its RID will be erased."
msgstr ""
"資源是引用計數的（參閱 :ref:`RefCounted <class_RefCounted>`），並且對資源 "
"RID 的引用在確定資源仍在使用時 *不* 進行計數。請確保在服務外部保持對資源的引"
"用，否則將刪除資源及其 RID 。"

msgid "For nodes, there are many functions available:"
msgstr "對於節點來說, 有很多函式功能可以使用:"

msgid ""
"For CanvasItem, the :ref:`CanvasItem.get_canvas_item() "
"<class_CanvasItem_method_get_canvas_item>` method will return the canvas "
"item RID in the server."
msgstr ""
"對於 CanvasItem，:ref:`CanvasItem."
"get_canvas_item()<class_CanvasItem_method_get_canvas_item>` 方法將在伺服器中"
"返回該畫布專案的 RID。"

msgid ""
"For CanvasLayer, the :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` method will return the canvas RID in "
"the server."
msgstr ""
"對於CanvasLayer來說, :ref:`CanvasLayer.get_canvas() "
"<class_CanvasLayer_method_get_canvas>` 方法將返回伺服器中的canvas RID."

msgid ""
"For Viewport, the :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` method will return the viewport "
"RID in the server."
msgstr ""
"對於視口, :ref:`Viewport.get_viewport_rid() "
"<class_Viewport_method_get_viewport_rid>` 方法將返回伺服器中的視口RID."

msgid ""
"For 3D, the :ref:`World3D <class_World3D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`Node3D <class_Node3D>` nodes) contains "
"functions to get the *RenderingServer Scenario*, and the *PhysicsServer "
"Space*. This allows creating 3D objects directly with the server API and "
"using them."
msgstr ""
"對於3D, :ref:`World <class_World>` 資源(可在 :ref:`Viewport "
"<class_Viewport>` 和 :ref:`Spatial <class_Spatial>` 節點中獲得)包含獲取 "
"*VisualServer Scenario* 和 *PhysicsServer Space* 的函式. 這樣就可以直接用服務"
"API建立3D物件並使用它們."

msgid ""
"For 2D, the :ref:`World2D <class_World2D>` resource (obtainable in the :ref:"
"`Viewport <class_Viewport>` and :ref:`CanvasItem <class_CanvasItem>` nodes) "
"contains functions to get the *RenderingServer Canvas*, and the "
"*Physics2DServer Space*. This allows creating 2D objects directly with the "
"server API and using them."
msgstr ""
"對於2D, :ref:`World2D <class_World2D>` 資源(可在 :ref:`Viewport "
"<class_Viewport>` 和 :ref:`CanvasItem <class_CanvasItem>` 節點中獲取)包含獲"
"取 *VisualServer Canvas* 和 *Physics2DServer Space* 的函式. 這樣就可以直接用"
"服務API建立2D物件並使用它們."

msgid ""
"The :ref:`VisualInstance3D<class_VisualInstance3D>` class, allows getting "
"the scenario *instance* and *instance base* via the :ref:`VisualInstance3D."
"get_instance() <class_VisualInstance3D_method_get_instance>` and :ref:"
"`VisualInstance3D.get_base() <class_VisualInstance3D_method_get_base>` "
"respectively."
msgstr ""
":ref:`VisualInstance<class_VisualInstance>` 類, 可以分別通過 :ref:"
"`VisualInstance.get_instance() <class_VisualInstance_method_get_instance>` "
"和 :ref:`VisualInstance.get_base() <class_VisualInstance_method_get_base>` 來"
"獲取場景 *instance* 和 *instance base* ."

msgid ""
"Try exploring the nodes and resources you are familiar with and find the "
"functions to obtain the server *RIDs*."
msgstr "請嘗試探索你所熟悉的節點和資源，找到獲得伺服器 *RID* 的功能。"

msgid ""
"It is not advised to control RIDs from objects that already have a node "
"associated. Instead, server functions should always be used for creating and "
"controlling new ones and interacting with the existing ones."
msgstr ""
"不建議從已經有節點關聯的物件中控制RID. 相反, 服務函式應始終用於建立和控制新的"
"以及與現有的互動."

msgid "Creating a sprite"
msgstr "建立內容"

msgid ""
"This is an example of how to create a sprite from code and move it using the "
"low-level :ref:`CanvasItem <class_CanvasItem>` API."
msgstr ""
"這是一個簡單的例子, 說明如何從程式碼中建立一個精靈, 並使用低級的 :ref:"
"`CanvasItem <class_CanvasItem>` API移動它."

msgid ""
"The Canvas Item API in the server allows you to add draw primitives to it. "
"Once added, they can't be modified. The Item needs to be cleared and the "
"primitives re-added (this is not the case for setting the transform, which "
"can be done as many times as desired)."
msgstr ""
"伺服器中的 Canvas Item API 允許您向其新增繪製像素。一旦新增，它們就不能被修"
"改。需要清除 Item，並重新新增像素（設定變換時則不然，變換可根據需要多次進"
"行）。"

msgid "Primitives are cleared this way:"
msgstr "像素的清除方式為："

msgid "Instantiating a Mesh into 3D space"
msgstr "將網格產生實體到 3D 空間"

msgid ""
"The 3D APIs are different from the 2D ones, so the instantiation API must be "
"used."
msgstr "3D API 與 2D API 不同，所以必須使用產生實體 API。"

msgid "Creating a 2D RigidBody and moving a sprite with it"
msgstr "建立 2D 剛體並使用它移動精靈"

msgid ""
"This creates a :ref:`RigidBody2D <class_RigidBody2D>` using the :ref:"
"`PhysicsServer2D <class_PhysicsServer2D>` API, and moves a :ref:`CanvasItem "
"<class_CanvasItem>` when the body moves."
msgstr ""
"這將使用 :ref:`Physics2DServer <class_Physics2DServer>` API建立一個 :ref:"
"`RigidBody2D <class_RigidBody2D>`, 並在物體移動時移動一個 :ref:`CanvasItem "
"<class_CanvasItem>`."

msgid ""
"The 3D version should be very similar, as 2D and 3D physics servers are "
"identical (using :ref:`RigidBody3D <class_RigidBody3D>` and :ref:"
"`PhysicsServer3D <class_PhysicsServer3D>` respectively)."
msgstr ""
"3D版本應該非常相似, 因為2D和3D物理伺服器是相同的(分別使用 :ref:`RigidBody "
"<class_RigidBody>` 和 :ref:`PhysicsServer <class_PhysicsServer>` )."

msgid "Getting data from the servers"
msgstr "從伺服器獲取資料"

msgid ""
"Try to **never** request any information from ``RenderingServer``, "
"``PhysicsServer2D`` or ``PhysicsServer3D`` by calling functions unless you "
"know what you are doing. These servers will often run asynchronously for "
"performance and calling any function that returns a value will stall them "
"and force them to process anything pending until the function is actually "
"called. This will severely decrease performance if you call them every frame "
"(and it won't be obvious why)."
msgstr ""
"除非你知道自己在做什麼，否則儘量**不要**通過呼叫函式向 ``VisualServer``、"
"``PhysicsServer``、``Physics2DServer`` 請求任何資訊。這些伺服器通常會為了性能"
"而非同步運作, 呼叫任何返回值的函式都會使它們停滯, 並迫使它們處理任何待處理的"
"東西, 直到函式被實際呼叫. 如果你每一影格都呼叫它們, 這將嚴重降低性能(而且原因"
"不會很明顯)."

msgid ""
"Because of this, most APIs in such servers are designed so it's not even "
"possible to request information back, until it's actual data that can be "
"saved."
msgstr ""
"正因為如此, 這類伺服器中的大部分API都被設計成連資訊都無法請求回來, 直到這是可"
"以保存的實際資料."

msgid "Translation status"
msgstr "翻譯狀態"
