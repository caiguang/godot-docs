# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Thread-safe APIs"
msgstr "執行緒安全的 API"

msgid "Threads"
msgstr "執行緒"

msgid ""
"Threads are used to balance processing power across CPUs and cores. Godot "
"supports multithreading, but not in the whole engine."
msgstr ""
"執行緒是用來平衡各CPU和核心的處理能力.Godot支援多執行緒, 但不是在整個引擎中."

msgid ""
"Below is a list of ways multithreading can be used in different areas of "
"Godot."
msgstr "下面是可以在Godot的不同區域使用多執行緒的方法列表."

msgid "Global scope"
msgstr "全域作用域"

msgid ""
":ref:`Global Scope<class_@GlobalScope>` singletons are all thread-safe. "
"Accessing servers from threads is supported (for RenderingServer and Physics "
"servers, ensure threaded or thread-safe operation is enabled in the project "
"settings!)."
msgstr ""
":ref:`Global Scope<class_@GlobalScope>` 單例都是執行緒安全的. 支援從執行緒存"
"取伺服器(對於VisualServer和物理伺服器, 確保在專案設定中啟用執行緒或執行緒安全"
"操作！)."

msgid ""
"This makes them ideal for code that creates dozens of thousands of instances "
"in servers and controls them from threads. Of course, it requires a bit more "
"code, as this is used directly and not within the scene tree."
msgstr ""
"這使它們成為在伺服器中建立數十萬個實例並從執行緒控制它們的程式碼的理想選擇. "
"當然, 還需要更多的程式碼, 因為這是直接使用的而不是嵌入場景樹中使用."

msgid "Scene tree"
msgstr "場景樹"

msgid ""
"Interacting with the active scene tree is **NOT** thread-safe. Make sure to "
"use mutexes when sending data between threads. If you want to call functions "
"from a thread, the *call_deferred* function may be used:"
msgstr ""
"與活動場景樹的互動是執行緒 **不** 安全的. 當在執行緒之間發送資料時, 請確保使"
"用mutexes. 如果你想從一個執行緒呼叫函式, 可以使用 *call_deferred* 函式:"

msgid ""
"However, creating scene chunks (nodes in tree arrangement) outside the "
"active tree is fine. This way, parts of a scene can be built or instantiated "
"in a thread, then added in the main thread:"
msgstr ""
"但是, 可以在啟動的場景樹外建立場景塊(以樹形式排列的節點). 這樣, 可以在執行緒"
"中建構或產生實體部分場景, 然後將其新增到主執行緒中:"

msgid ""
"Still, this is only really useful if you have **one** thread loading data. "
"Attempting to load or create scene chunks from multiple threads may work, "
"but you risk resources (which are only loaded once in Godot) tweaked by the "
"multiple threads, resulting in unexpected behaviors or crashes."
msgstr ""
"不過, 只有當您有 **一個** 執行緒載入資料時, 這才真正有用. 從多個執行緒載入或"
"建立場景塊可能有效, 但你要冒著資源被多執行緒調整的風險(在Godot中只載入一次), "
"從而導致意外行為或當機."

msgid ""
"Only use more than one thread to generate scene data if you *really* know "
"what you are doing and you are sure that a single resource is not being used "
"or set in multiple ones. Otherwise, you are safer just using the servers API "
"(which is fully thread-safe) directly and not touching scene or resources."
msgstr ""
"只有當您 \"真正\" 知道自己在做什麼, 並且確信一個資源沒有被多個資源使用或設定"
"時, 才可以使用多個執行緒來生成場景資料. 否則, 直接使用服務端的API(它是完全執"
"行緒安全的)而不接觸場景或資源會更安全."

msgid "Rendering"
msgstr "算繪"

msgid ""
"Instancing nodes that render anything in 2D or 3D (such as Sprite) is *not* "
"thread-safe by default. To make rendering thread-safe, set the **Rendering > "
"Driver > Thread Model** project setting to **Multi-Threaded**."
msgstr ""
"預設情況下，產生實體能夠算繪 2D 或 3D 內容的節點（比如 Sprite）是執行緒*不*安"
"全的。要讓算繪做到執行緒安全，請將專案設定中的 **Rendering > Threads > "
"Thread Model** 設為 **Multi-Threaded**。"

msgid ""
"Note that the Multi-Threaded thread model has several known bugs, so it may "
"not be usable in all scenarios."
msgstr ""
"請注意，Multi-Thtreaded 執行緒模型有若干已知的問題，所以無法勝任所有場景。"

msgid ""
"You should avoid calling functions involving direct interaction with the GPU "
"on other threads, such as creating new textures or modifying and retrieving "
"image data, these operations can lead to performance stalls because they "
"require synchronization with the :ref:"
"`RenderingServer<class_RenderingServer>`, as data needs to be transmitted to "
"or updated on the GPU."
msgstr ""

msgid "GDScript arrays, dictionaries"
msgstr "GDScript 陣列、字典"

msgid ""
"In GDScript, reading and writing elements from multiple threads is OK, but "
"anything that changes the container size (resizing, adding or removing "
"elements) requires locking a mutex."
msgstr ""
"在 GDScript 中，可以從多個執行緒讀取和寫入元素，但是任何改變容器大小的操作"
"（調整大小、新增或刪除元素）都需要鎖定互斥鎖。"

msgid "Resources"
msgstr "資源"

msgid ""
"Modifying a unique resource from multiple threads is not supported. However "
"handling references on multiple threads is supported, hence loading "
"resources on a thread is as well - scenes, textures, meshes, etc - can be "
"loaded and manipulated on a thread and then added to the active scene on the "
"main thread. The limitation here is as described above, one must be careful "
"not to load the same resource from multiple threads at once, therefore it is "
"easiest to use **one** thread for loading and modifying resources, and then "
"the main thread for adding them."
msgstr ""
"不支援從多個執行緒修改一個唯一的資源. 但是支援處理多個執行緒上的引用, 因此在"
"一個執行緒上載入資源也是如此, 場景, 紋理, 網格等都可以在一個執行緒上載入和操"
"作, 然後新增到主執行緒的活動場景中. 這裡的限制如上所述, 必須注意不要同時從多"
"個執行緒上載入相同的資源, 因此最簡單的方法是用 **一個** 執行緒來載入和修改資"
"源, 然後用主執行緒來新增資源."

msgid "Translation status"
msgstr "翻譯狀態"
