# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Overview of Godot's key concepts"
msgstr "Godot 關鍵概念概述"

msgid ""
"Every game engine revolves around abstractions you use to build your "
"applications. In Godot, a game is a **tree** of **nodes** that you group "
"together into **scenes**. You can then wire these nodes so they can "
"communicate using **signals**."
msgstr ""
"任何遊戲引擎都是圍繞著建構程式所用的抽象的。在 Godot 中，遊戲就是一棵由 **節"
"點** 構成的 **樹** ，樹又可以結合起來構成 **場景** 。然後你還可以將這些節點連"
"起來，讓它們通過 **訊號** 進行通信。"

msgid ""
"These are the four concepts you will learn here. We're going to look at them "
"briefly to give you a sense of how the engine works. In the getting started "
"series, you will get to use them in practice."
msgstr ""
"這就是你將在這裡學習的四個概念。我們將簡要地看一下它們，讓你對引擎的工作原理"
"有一個瞭解。在入門系列中，你將在實踐中使用它們。"

msgid "Scenes"
msgstr "場景"

msgid ""
"In Godot, you break down your game in reusable scenes. A scene can be a "
"character, a weapon, a menu in the user interface, a single house, an entire "
"level, or anything you can think of. Godot's scenes are flexible; they fill "
"the role of both prefabs and scenes in some other game engines."
msgstr ""
"在 Godot 中，你把你的遊戲分解成可重複使用的場景。場景可以是一個角色、一件武"
"器、使用者介面中的一個功能表、一座房子、整個關卡，或者任何你能想到的東西。"
"Godot 的場景很靈活，既能夠充當預製件（Prefab），又能夠用作其他遊戲引擎中的場"
"景。"

msgid ""
"You can also nest scenes. For example, you can put your character in a "
"level, and drag and drop a scene as a child of it."
msgstr ""
"你還可以巢狀場景。例如，你可以把你的角色放在關卡中，然後拖放一個場景作為它的"
"子級。"

msgid "Nodes"
msgstr "節點"

msgid ""
"A scene is composed of one or more **nodes**. Nodes are your game's smallest "
"building blocks that you arrange into trees. Here's an example of a "
"character's nodes."
msgstr ""
"場景由若干 **節點** 組成。節點是你的遊戲最小的構件，你將其排列成樹狀。下面是"
"一個人物節點的例子。"

#, fuzzy
msgid ""
"It is made of a ``CharacterBody2D`` node named \"Player\", a ``Camera2D``, a "
"``Sprite2D``, and a ``CollisionShape2D``."
msgstr ""
"它由名為「Player」的 ``CharacterBody2D`` 節點、 ``Sprite2D`` 、 "
"``Camera2D`` 、 ``CollisionShape2D`` 組成。"

msgid ""
"The node names end with \"2D\" because this is a 2D scene. Their 3D "
"counterparts have names that end with \"3D\". Be aware that \"Spatial\" "
"Nodes are now called \"Node3D\" starting with Godot 4."
msgstr ""
"節點名稱以“2D”結尾，因為這是一個 2D 場景。對應 3D 節點的名稱以“3D”結尾。請注"
"意，原本的空間節點“Spatial”從 Godot 4 開始改名成了“Node3D”。"

msgid ""
"Notice how nodes and scenes look the same in the editor. When you save a "
"tree of nodes as a scene, it then shows as a single node, with its internal "
"structure hidden in the editor."
msgstr ""
"注意節點和場景在編輯器中看起來是一樣的。當你把一棵節點樹保存為場景時，它就顯"
"示為一個單一的節點，其內部結構在編輯器中是隱藏的。"

msgid ""
"Godot provides an extensive library of base node types you can combine and "
"extend to build more powerful ones. 2D, 3D, or user interface, you will do "
"most things with these nodes."
msgstr ""
"Godot 提供了豐富的基礎節點型別程式庫，你可以通過組合和擴充來建立更強大的節"
"點。無論是 2D、3D 還是使用者介面，你都可以用這些節點完成大多數事情。"

msgid "The scene tree"
msgstr "場景樹"

msgid ""
"All your game's scenes come together in the **scene tree**, literally a tree "
"of scenes. And as scenes are trees of nodes, the scene tree also is a tree "
"of nodes. But it's easier to think of your game in terms of scenes as they "
"can represent characters, weapons, doors, or your user interface."
msgstr ""
"遊戲的所有場景都彙集在 **場景樹** 中，字面意思是一棵場景樹。由於場景是節點"
"樹，因此場景樹也是節點樹。但是，從場景的角度來考慮您的遊戲更容易，因為它們可"
"以代表角色、武器、門或您的使用者介面。"

msgid "Signals"
msgstr "訊號"

msgid ""
"Nodes emit signals when some event occurs. This feature allows you to make "
"nodes communicate without hard-wiring them in code. It gives you a lot of "
"flexibility in how you structure your scenes."
msgstr ""
"節點在發生某些事件時發出訊號。此功能無需在程式碼中硬連接它們就能讓節點相互通"
"信。它為您提供了建構場景的靈活性。"

msgid ""
"Signals are Godot's version of the *observer* pattern. You can read more "
"about it here: https://gameprogrammingpatterns.com/observer.html"
msgstr ""
"欲瞭解更多有關觀察者模式的資訊，請參考：https://gameprogrammingpatterns.com/"
"observer.html"

msgid ""
"For example, buttons emit a signal when pressed. You can connect to this "
"signal to run code in reaction to this event, like starting the game or "
"opening a menu."
msgstr ""
"例如，按鈕在按下時會發出訊號。您可以連接到此訊號以運作程式碼以回應此事件，例"
"如啟動遊戲或打開功能表。"

msgid ""
"Other built-in signals can tell you when two objects collided, when a "
"character or monster entered a given area, and much more. You can also "
"define new signals tailored to your game."
msgstr ""
"其他內建訊號可以告訴您兩個物件何時碰撞，角色或怪物何時進入給定區域等等。您還"
"可以針對遊戲量身定制新的訊號。"

msgid "Summary"
msgstr "總結"

msgid ""
"Nodes, scenes, the scene tree, and signals are four core concepts in Godot "
"that you will manipulate all the time."
msgstr "節點、場景、場景樹和訊號是 Godot 中的四個核心概念，您將一直操縱它們。"

msgid ""
"Nodes are your game's smallest building blocks. You combine them to create "
"scenes that you then combine and nest into the scene tree. You can then use "
"signals to make nodes react to events in other nodes or different scene tree "
"branches."
msgstr ""
"節點是遊戲最小的建構塊。你把它們組合起來建立場景，再把它們組合起來並巢狀到場"
"景樹中。最後，你可以使用訊號來使節點對其他節點或不同的場景樹分支中的事件做出"
"回應。"

msgid ""
"After this short breakdown, you probably have many questions. Bear with us "
"as you will get many answers throughout the getting started series."
msgstr ""
"經過這個簡短的分解，你可能有很多問題。請耐心等待，你將在整個入門系列中得到更"
"多解答。"

msgid "Translation status"
msgstr "翻譯狀態"
