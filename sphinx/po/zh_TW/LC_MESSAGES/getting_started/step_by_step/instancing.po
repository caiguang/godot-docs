# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "編輯實體"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"上一部分中，我們瞭解到場景是一系列組織成樹狀結構的節點，其中只有一個節點是根"
"節點。你可以將專案拆分成任意數量的場景。這一功能可以幫你將遊戲拆解成不同的元"
"件，並進行組織。"

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"你可以建立任意數量的場景並將他們保存成副檔名為 ``.tscn`` （“text scene” 文字"
"場景）的檔。上節課的 ``label.tscn`` 檔就是一個例子。我們把這些檔叫作“打包的場"
"景”（Packed Scene），因為它們將場景的內容資訊進行了打包。"

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite2D <class_Sprite2D>` node, and a :"
"ref:`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"這有一個小球的例子。它由以下內容組成：一個叫“Ball”的 :ref:`RigidBody2D "
"<class_RigidBody2D>` 節點是根節點，可以讓小球下落、在撞牆後反彈；一個 :ref:"
"`Sprite2D <class_Sprite2D>` 節點以及一個 :ref:`CollisionShape2D "
"<class_CollisionShape2D>` 。"

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"保存場景過後，這個場景就可以作為藍圖使用：你可以在其他場景中進行任意數量的翻"
"制。將物件根據範本進行翻制的這一過程就叫作 **產生實體** 。"

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"我們在上一部分提到過，產生實體場景的行為與節點類似：編輯器預設會隱藏其中的內"
"容。產生實體 Ball 之後，你只會看到 Ball 節點。請注意製作出的副本，名字是唯一"
"的。"

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Ball 場景的實例最開始都和 ``ball.tscn`` 有相同的結構和屬性。不過你也可以單獨"
"修改各個實例，比如修改反彈的方式、重量等源場景所暴露的屬性。"

msgid "In practice"
msgstr "最佳實踐"

msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: "
"`instancing_starter.zip <https://github.com/godotengine/godot-docs-project-"
"starters/releases/download/latest-4.x/instancing_starter.zip>`_."
msgstr ""
"讓我們先下載一個範例專案來瞭解實體化是怎麼運作的： :download:`instancing.zip "
"<files/instancing.zip>` 。"

#, fuzzy
msgid ""
"Extract the archive on your computer. To import it, you need the Project "
"Manager. The Project Manager is accessed by opening Godot, or if you already "
"have Godot opened, click on *Project -> Quit to Project List* (:kbd:`Ctrl + "
"Shift + Q`, :kbd:`Ctrl + Option + Cmd + Q` on macOS)"
msgstr ""
"從你的電腦中將檔案提取出來。你需要專案管理器來匯入它。專案管理器可以在打開 "
"Godot 的時候存取到。當你已經打開 Godot 時，點擊 *專案->退出到專案列表* （:"
"kbd:`Ctrl + Shift + Q`，在 macOS 中：:kbd:`Ctrl + Option + Cmd + B`）"

msgid ""
"In the Project Manager, click the *Import* button to import the project."
msgstr "在專案管理員裡點擊 [匯入] 按鈕來匯入該專案。"

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr "在彈出框中點擊瀏覽按鈕，定位到剛才解壓的資料夾。"

msgid "Double-click the ``project.godot`` file to open it."
msgstr "按兩下打開 ``project.godot`` 檔案。"

msgid "Finally, click the Import & Edit button."
msgstr "最後，點擊匯入 & 編輯按鈕。"

#, fuzzy
msgid ""
"The project contains two packed scenes: ``main.tscn``, containing walls "
"against which the ball collides, and ``ball.tscn``. The Main scene should "
"open automatically. If you're seeing an empty 3D scene instead of the main "
"scene, click the 2D button at the top of the screen."
msgstr ""
"該專案包含兩個已包裝好的場景：``main.tscn``，其中包含供球碰撞的牆壁，以及"
"``ball.tscn``。主場景應該會自動打開。"

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""
"讓我們為 Main 節點新增一個小球作為子節點。在“場景”面板中，選擇 Main 節點。然"
"後點擊場景面板頂部的連結圖示。這個按鈕的作用是為目前選中節點新增另一個場景的"
"實例作為子節點。"

msgid "Double-click the ball scene to instance it."
msgstr "按兩下小球場景來產生實體。"

msgid "The ball appears in the top-left corner of the viewport."
msgstr "Logo 會顯示在螢幕的最上方。"

msgid "Click on it and drag it towards the center of the view."
msgstr "點擊「新增合集」然後拖移並選擇整個圖塊表。"

msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS). You should "
"see it fall."
msgstr "按 :kbd:`Ctrl + F` (或 macOS 上 :kbd:`Cmd + F`) 可以搜尋列表。"

#, fuzzy
msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to call the "
"duplicate command. Click and drag to move the new ball to a different "
"location."
msgstr ""
"現在我們希望建立更多的 Ball 節點實例。保持小球仍處於選中的狀態，按下 :kbd:"
"`Ctrl-D` （macOS 則是 :kbd:`Cmd-D` ）呼叫製作副本命令。點擊並將新的小球拖到別"
"的位置。"

msgid "You can repeat this process until you have several in the scene."
msgstr "你可以重複這個過程，直到你已經放幾個在場景上。"

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""
"再次運作遊戲。現在你應該看到每個小球都各自下落。這就是實例的作用。每一個都是"
"範本場景的獨立副本。"

msgid "Editing scenes and instances"
msgstr "編輯實體"

msgid "There is more to instances. With this feature, you can:"
msgstr "實例還有很多用法。使用這個功能，你可以："

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr "使用“屬性面板”修改一個小球的屬性，不影響其他實例。"

msgid ""
"Change the default properties of every Ball by opening the ``ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""
"打開 ``ball.tscn`` 場景修改 Ball 節點，從而修改所有 Ball 的預設屬性。在保存"
"時，專案中所有 Ball 的實例都會更新其屬性值。"

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr "修改實例上的屬性總是會覆蓋對應打包場景中的值。"

msgid ""
"Let's try this. Open ``ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""
"讓我們來試一試。打開 ``ball.tscn`` 然後選中 Ball 節點。在右側的“屬性面板”中，"
"點擊展開 PhysicsMaterial 屬性。"

msgid ""
"Set its Bounce property to ``0.5`` by clicking on the number field, typing "
"``0.5``, and pressing :kbd:`Enter`."
msgstr ""
"將其 Bounce（彈力）屬性設為 ``0.5`` ，只要點擊對應的數字欄位、輸入 ``0.5`` 、"
"然後按 :kbd:`Enter` 就可以了。"

#, fuzzy
msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS) and notice how "
"all balls now bounce a lot more. As the Ball scene is a template for all "
"instances, modifying it and saving causes all instances to update "
"accordingly."
msgstr ""
"按 :kbd:`F5` 運作遊戲，請注意所有的小球都更有彈性了。因為 Ball 場景是所有實例"
"的範本，對它進行修改並保存，就會導致所有實例同時進行更新。"

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr "現在讓我們來調整單個實例。點擊視口上方的對應分頁回到 Main 場景。"

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""
"選擇一個 Ball 實例節點，然後“屬性面板”中將 Gravity Scale（重力縮放）設為 "
"``10`` 。"

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr "在被調整過的屬性旁邊就會多一個灰色的“復原”按鈕。"

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"可以注意到在已經調整的屬性旁邊會出現一個灰色的 [還原] 按鈕。如果出現了這個按"
"鈕就代表修改了實體化的場景，而且這個節點的數值覆蓋了原始場景的值。就算再次修"
"改原本的場景，這裡自定的數值還是會保留。點擊 [還原] 按鈕就能把屬性還原成原始"
"場景的值。"

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr "重新運作遊戲，請注意這個小球會比其他小球落得快得多。"

#, fuzzy
msgid ""
"You may notice you are unable to change the values of the "
"``PhysicsMaterial`` of the ball. This is because ``PhysicsMaterial`` is a "
"resource, and needs to be made unique before you can edit it in a scene that "
"is linking to its original scene. To make a resource unique for one "
"instance, right-click on it in the Inspector and click Make Unique in the "
"contextual menu."
msgstr ""
"如果你修改了一個實例中的 ``PhysicsMaterial`` ，那麼就會影響到其他所有實例。這"
"是因為 ``PhysicsMaterial`` 是一個資源，而資源是跨實例共用的。要讓某個實例的資"
"源唯一，請在“屬性面板”中對其右鍵，然後選擇彈出功能表中的“唯一化”。"

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr "資源也是 Godot 遊戲的關鍵元件，我們會在後續課程中介紹。"

msgid "Scene instances as a design language"
msgstr "作為設計語言的場景實例"

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""
"Godot中的實例和場景提供了一種優秀的設計語言，使該引擎與其他引擎不同。我們從一"
"開始就圍繞這個概念設計Godot。"

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""
"我們建議在使用 Godot 製作遊戲時忽略架構程式碼模式，例如模型-視圖-控制器 "
"（MVC） 或實體關係圖。相反，你可以從想像玩家將在遊戲中看到的元素開始，並圍繞"
"它們建構程式碼。"

msgid "For example, you could break down a shooter game like so:"
msgstr "例如，可以這樣想像簡單的射擊遊戲："

msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"幾乎任何一種遊戲都可以用這種方式畫成圖片。先寫下遊戲裡可以被看到的部分，然後"
"在每個部分用箭頭來表示這些元素的從屬關係。"

msgid ""
"Once you have a diagram, we recommend creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"畫出這樣的圖之後，我們建議你為圖上的各個元素都建立一個場景來使用，再通過實體"
"化來做出從屬關係 (可以用程式碼或是直接在編輯器裡實體化)。"

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"開發遊戲 (或是一般軟體) 時，我們總會花費許多時間來設計架構，然後再花時間把遊"
"戲的元素都套用到這個架構上。以場景為基礎來設計就取代了這個過程，讓開發變得更"
"快速而且更直觀，也讓你能直接專注於實作遊戲本身的邏輯。由於大多數的遊戲元件都"
"可以直接對應到場景上，使用使用以場景實體化為基礎的設計也就能在架構上花費較少"
"的程式碼。"

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"再來看看另一個某方面來說更複雜的例子。這個例子是開放世界型別的遊戲，有很多素"
"材以及巢狀的元素："

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""
"想像一下，我們從建立房間開始。我們可以製作幾個不同的房間場景，在其中有獨特的"
"傢俱安排。後來，我們可以製作一個房屋場景，在內部使用多個房間實例。我們將用許"
"多產生實體的房子和一個大的地形來建立一個城堡，我們將把城堡放在這個地形上。每"
"一個場景都將是一個或多個子場景的實例。"

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"接下來我們可以建立一些代表守衛 (以及其他 NPC) 的場景，然後也把這些場景都加進"
"城堡裡。這樣一來，這些 NPC 就間接地進到了整個遊戲世界裡了。"

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"在 Godot 裡，很容易就可以通過這種方式來迭代出遊戲，需要做的就只是建立場景、實"
"體化場景然後建立更多場景再實體化更多場景。而且，不管是對於程式設計師或非程式"
"設計師來說，Godot 的編輯器 UI 很友善。一般標準的團隊開發流程還會有 2D 與 3D "
"設計師、關卡設計師、遊戲設計師以及動畫家的參與，大家都會使用 Godot 編輯器界面"
"來進行作業。"

msgid "Summary"
msgstr "總結"

#, fuzzy
msgid ""
"Instancing, the process of producing an object from a blueprint, has many "
"handy uses. With scenes, it gives you:"
msgstr "產生實體，從藍圖生成物件的過程有許多方便的用途。通過場景，它為您提供："

msgid "The ability to divide your game into reusable components."
msgstr "能讓你的遊戲拆分成可充分利用的元件。"

msgid "A tool to structure and encapsulate complex systems."
msgstr "一個建構和封裝複雜系統的工具。"

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr "一種以自然方式思考遊戲專案結構的語言。"

msgid "Translation status"
msgstr "翻譯狀態"
