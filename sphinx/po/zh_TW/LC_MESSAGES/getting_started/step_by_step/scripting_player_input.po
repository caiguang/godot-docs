# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Listening to player input"
msgstr "監聽玩家的輸入"

#, fuzzy
msgid ""
"Building upon the previous lesson, :ref:`doc_scripting_first_script`, let's "
"look at another important feature of any game: giving control to the player. "
"To add this, we need to modify our ``sprite_2d.gd`` code."
msgstr ""
"在上一課 :ref:`doc_scripting_first_script` 的基礎上，讓我們看看任何遊戲的另一"
"個重要特徵：將控制權交給玩家。為了增加這一點，我們需要修改 ``sprite_2d.gd`` "
"的程式碼。"

msgid "You have two main tools to process the player's input in Godot:"
msgstr "在 Godot 中，你有兩個主要工具來處理玩家的輸入："

msgid ""
"The built-in input callbacks, mainly ``_unhandled_input()``. Like "
"``_process()``, it's a built-in virtual function that Godot calls every time "
"the player presses a key. It's the tool you want to use to react to events "
"that don't happen every frame, like pressing :kbd:`Space` to jump. To learn "
"more about input callbacks, see :ref:`doc_inputevent`."
msgstr ""
"內建的輸入回呼函式，主要是 ``_unhandled_input()`` 。像 ``_process()`` ，它是"
"一個內建的虛函式，Godot 每次在玩家按下一個鍵時都會呼叫。它是你想用來對那些不"
"是每一影格都發生的事件做出反應的工具，比如按 :kbd:`Space` 來跳躍。要瞭解更多"
"關於輸入回呼函式的資訊，請參閱 :ref:`doc_inputevent` 。"

msgid ""
"The ``Input`` singleton. A singleton is a globally accessible object. Godot "
"provides access to several in scripts. It's the right tool to check for "
"input every frame."
msgstr ""
"``Input`` 單例。單例是一個全域可存取的物件。Godot 在腳本中提供對幾個物件的存"
"取。它是每一影格檢查輸入的有效工具。"

msgid ""
"We're going to use the ``Input`` singleton here as we need to know if the "
"player wants to turn or move every frame."
msgstr ""
"我們這裡將使用 ``Input`` 單例，因為我們需要知道在每一影格中玩家是否想轉身或者"
"移動。"

msgid ""
"For turning, we should use a new variable: ``direction``. In our "
"``_process()`` function, replace the ``rotation += angular_speed * delta`` "
"line with the code below."
msgstr ""
"對於轉彎，我們應該使用一個新的變數： ``direction`` 。在我們的 ``_process()`` "
"函式中，將 ``rotation += angular_speed * delta`` 替換成以下程式碼。"

msgid ""
"Our ``direction`` local variable is a multiplier representing the direction "
"in which the player wants to turn. A value of ``0`` means the player isn't "
"pressing the left or the right arrow key. A value of ``1`` means the player "
"wants to turn right, and ``-1`` means they want to turn left."
msgstr ""
"我們的 ``direction`` 區域變數是一個乘數，代表玩家想要轉向的方向。 ``0`` 的值"
"表示玩家沒有按左或右方向鍵。 ``1`` 表示玩家想向右轉，而 ``-1`` 表示他們想向左"
"轉。"

msgid ""
"To produce these values, we introduce conditions and the use of ``Input``. A "
"condition starts with the ``if`` keyword in GDScript and ends with a colon. "
"The condition is the expression between the keyword and the end of the line."
msgstr ""
"為了產生這些值，我們引入了條件和 ``Input`` 的使用。條件以 GDScript 中的 "
"``if`` 關鍵字開始，以冒號結束。條件是關鍵字和行末之間的運算式。"

msgid ""
"To check if a key was pressed this frame, we call ``Input."
"is_action_pressed()``. The method takes a text string representing an input "
"action and returns ``true`` if the action is pressed, ``false`` otherwise."
msgstr ""
"為了檢查目前影格玩家是否按下了某個鍵，我們需要呼叫 ``Input."
"is_action_pressed()`` 。這個方法使用一個字串來表示一個輸入動作。當該按鍵被按"
"下時，函式返回 ``true`` ，否則這個函式將返回 ``false`` 。"

msgid ""
"The two actions we use above, \"ui_left\" and \"ui_right\", are predefined "
"in every Godot project. They respectively trigger when the player presses "
"the left and right arrows on the keyboard or left and right on a gamepad's D-"
"pad."
msgstr ""
"上面我們使用的兩個動作，“ui_left”和“ui_right”，是每個 Godot 專案中預定義的。"
"它們分別在玩家按鍵盤上的左右箭頭或遊戲手柄上的左右鍵時觸發。"

msgid ""
"You can see and edit input actions in your project by going to Project -> "
"Project Settings and clicking on the Input Map tab."
msgstr ""
"打開“專案 -> 專案設定”並點擊“輸入對應”分頁，就可以查看並編輯專案中的輸入動"
"作。"

msgid ""
"Finally, we use the ``direction`` as a multiplier when we update the node's "
"``rotation``: ``rotation += angular_speed * direction * delta``."
msgstr ""
"最後，當我們更新節點的 ``rotation`` 時，我們使用 ``direction`` 作為乘數： "
"``rotation += angular_speed * direction * delta`` 。"

msgid ""
"If you run the scene with this code, the icon should rotate when you press :"
"kbd:`Left` and :kbd:`Right`."
msgstr ""
"如果你用這段程式碼運作場景，當你按下 :kbd:`左方向鍵` 和 :kbd:`右方向鍵` 時，"
"圖示應該會旋轉。"

msgid "Moving when pressing \"up\""
msgstr "按“上”時移動"

msgid ""
"To only move when pressing a key, we need to modify the code that calculates "
"the velocity. Replace the line starting with ``var velocity`` with the code "
"below."
msgstr ""
"為了只在按下一個鍵時移動，我們需要修改計算速度的程式碼。用下面的程式碼替換以 "
"``var velocity`` 開始的一行。"

msgid ""
"We initialize the ``velocity`` with a value of ``Vector2.ZERO``, another "
"constant of the built-in ``Vector`` type representing a 2D vector of length "
"0."
msgstr ""
"我們將 ``velocity`` 的值初始化為 ``Vector2.ZERO`` ，這是內建 ``Vector`` 型別"
"的一個常數，代表長度為 0 的二維向量。"

msgid ""
"If the player presses the \"ui_up\" action, we then update the velocity's "
"value, causing the sprite to move forward."
msgstr "如果玩家按下“ui_up”動作，我們就會更新速度的值，使精靈向前移動。"

msgid "Complete script"
msgstr "GDScript 範例"

msgid "Here is the complete ``sprite_2d.gd`` file for reference."
msgstr "這是完整的 ``sprite_2d.gd`` 檔案，僅供參考。"

msgid ""
"If you run the scene, you should now be able to rotate with the left and "
"right arrow keys and move forward by pressing :kbd:`Up`."
msgstr ""
"如果你運作這個場景，你現在應該能夠用左右方向鍵進行旋轉，並通過按 :kbd:`Up` 向"
"前移動。"

msgid "Summary"
msgstr "總結"

#, fuzzy
msgid ""
"In summary, every script in Godot represents a class and extends one of the "
"engine's built-in classes. The node types your classes inherit from give you "
"access to properties, such as ``rotation`` and ``position`` in our sprite's "
"case. You also inherit many functions, which we didn't get to use in this "
"example."
msgstr ""
"總之，Godot中的每個腳本都代表一個類，並擴充了引擎的一個內建類。在我們sprite的"
"例子中，你的類所繼承的節點型別可以讓你存取一些屬性，如 ``rotation`` 和 "
"``position`` 。你還繼承了許多函式，但我們在這個例子中沒有使用這些函式。"

msgid ""
"In GDScript, the variables you put at the top of the file are your class's "
"properties, also called member variables. Besides variables, you can define "
"functions, which, for the most part, will be your classes' methods."
msgstr ""
"在 GDScript 中，放在檔頂部的變數是類的屬性，也稱為成員變數。除了變數之外，您"
"還可以定義函式，在大多數情況下，這些函式將是類的方法。"

msgid ""
"Godot provides several virtual functions you can define to connect your "
"class with the engine. These include ``_process()``, to apply changes to the "
"node every frame, and ``_unhandled_input()``, to receive input events like "
"key and button presses from the users. There are quite a few more."
msgstr ""
"Godot 提供了幾個虛函式，您可以定義這些函式來將類與引擎連接起來。其中包括 "
"``_process()`` ，用於每影格將更改應用於節點，以及 ``_unhandled_input()`` ，用"
"於接收使用者的輸入事件，如按鍵和按鈕。還有很多。"

msgid ""
"The ``Input`` singleton allows you to react to the players' input anywhere "
"in your code. In particular, you'll get to use it in the ``_process()`` loop."
msgstr ""
"``Input`` 單例允許您在程式碼中的任何位置對玩家的輸入做出反應。 尤其是，你在 "
"``_process()`` 迴圈中使用它。"

#, fuzzy
msgid ""
"In the next lesson, :ref:`doc_signals`, we'll build upon the relationship "
"between scripts and nodes by having our nodes trigger code in scripts."
msgstr ""
"在下一課 :ref:`doc_signals` 中，我們會讓節點觸發腳本中的程式碼，讓腳本和程式"
"碼之間產生聯繫。"

msgid "Translation status"
msgstr "翻譯狀態"
