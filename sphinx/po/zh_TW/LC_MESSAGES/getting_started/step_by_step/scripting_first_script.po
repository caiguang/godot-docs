# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating your first script"
msgstr "建立腳本"

msgid ""
"In this lesson, you will code your first script to make the Godot icon turn "
"in circles using GDScript. As we mentioned :ref:`in the introduction <toc-"
"learn-introduction>`, we assume you have programming foundations. The "
"equivalent C# code has been included in another tab for convenience."
msgstr ""
"在本課中，你將用 GDScript 編寫第一個腳本，使 Godot 圖示轉圈。正如我們 :ref:`"
"在介紹中 <toc-learn-introduction>` 提到的，我們假設你有程式設計基礎。方便起"
"見，我們在單獨的分頁中包含了等價的 C# 程式碼。"

msgid ""
"To learn more about GDScript, its keywords, and its syntax, head to the :ref:"
"`GDScript reference<doc_gdscript>`."
msgstr ""
"要瞭解更多關於GDScript、其關鍵字和語法的資訊，請前往 :ref:`GDScript 參考"
"<doc_gdscript>` 。"

msgid ""
"To learn more about C#, head to the :ref:`C# basics <doc_c_sharp>` page."
msgstr "更多資訊請參考 :ref:`doc_c_sharp_differences` 一頁。"

msgid "Project setup"
msgstr "設定專案"

msgid ""
"Please :ref:`create a new project <doc_creating_and_importing_projects>` to "
"start with a clean slate. Your project should contain one picture: the Godot "
"icon, which we often use for prototyping in the community."
msgstr ""
"請從頭開始 :ref:`建立一個新專案<doc_creating_and_importing_projects>` 。您的"
"專案應該包含一張圖片：Godot 圖示，我們經常在社區中使用它來製作原型。"

msgid ""
"We need to create a Sprite2D node to display it in the game. In the Scene "
"dock, click the Other Node button."
msgstr ""
"我們需要建立一個 Sprite2D 節點來在遊戲中顯示它。在“場景”停靠面板中，點擊“其他"
"節點”按鈕。"

msgid ""
"Type \"Sprite2D\" in the search bar to filter nodes and double-click on "
"Sprite2D to create the node."
msgstr "在搜索欄中輸入“Sprite2D”來篩選節點，按兩下 Sprite2D 來建立節點。"

msgid "Your Scene tab should now only have a Sprite2D node."
msgstr "你的“場景”分頁現在應該只有一個 Sprite2D 節點。"

msgid ""
"A Sprite2D node needs a texture to display. In the Inspector on the right, "
"you can see that the Texture property says \"[empty]\". To display the Godot "
"icon, click and drag the file ``icon.svg`` from the FileSystem dock onto the "
"Texture slot."
msgstr ""
"Sprite2D 節點需要用於顯示的紋理。在右邊的“屬性面板”中，你可以看到 Texture（紋"
"理）屬性寫著“[空]”。要顯示 Godot 圖示，請點擊瓶拖拽“檔案系統”面板中的 ``icon."
"svg`` 檔案到 Texture 插槽上。"

msgid ""
"You can create Sprite2D nodes automatically by dragging and dropping images "
"on the viewport."
msgstr "您可以通過將圖像拖放到視口上來自動建立 Sprite2D 節點。"

msgid ""
"Then, click and drag the icon in the viewport to center it in the game view."
msgstr "然後，點擊並拖動視口中的圖示，使其在遊戲視圖中居中。"

msgid "Creating a new script"
msgstr "建立腳本"

msgid ""
"To create and attach a new script to our node, right-click on Sprite2D in "
"the scene dock and select \"Attach Script\"."
msgstr ""
"在場景面板的 Sprite2D 上點擊右鍵並選擇“新增腳本”，來建立或附加一個新的腳本到"
"我們的節點上。"

msgid ""
"The Attach Node Script window appears. It allows you to select the script's "
"language and file path, among other options."
msgstr ""
"接著會彈出腳本建立視窗。在這個視窗裡可以設定腳本所使用的語言、類別名稱以及其"
"他相關設定。"

#, fuzzy
msgid ""
"Change the Template field from \"Node: Default\" to \"Object: Empty\" to "
"start with a clean file. Leave the other options set to their default values "
"and click the Create button to create the script."
msgstr ""
"把範本欄位從“Node: Default”改為“Object: Empty”從而得到一個乾淨的腳本。其他選"
"項保持預設，然後點擊“建立”按鈕來建立腳本。"

msgid ""
"C# script names need to match their class name. In this case, you should "
"name the file ``MySprite2D.cs``."
msgstr ""

msgid ""
"The Script workspace should appear with your new ``sprite_2d.gd`` file open "
"and the following line of code:"
msgstr ""
"此時 Script 工作區將自動打開並顯示你新建的 ``sprite_2d.gd`` 檔，顯示以下程式"
"碼行："

msgid ""
"Every GDScript file is implicitly a class. The ``extends`` keyword defines "
"the class this script inherits or extends. In this case, it's ``Sprite2D``, "
"meaning our script will get access to all the properties and functions of "
"the Sprite2D node, including classes it extends, like ``Node2D``, "
"``CanvasItem``, and ``Node``."
msgstr ""
"每個 GDScript 檔都是一個隱含的類。 ``extends`` 關鍵字定義了這個腳本所繼承或擴"
"充的類。本例中它是 ``Sprite2D`` ，意味著我們的腳本將獲得 Sprite2D 節點的所有"
"屬性和函式，包括它繼承的 ``Node2D`` 、 ``CanvasItem`` 、 ``Node`` 等類。"

msgid ""
"In GDScript, if you omit the line with the ``extends`` keyword, your class "
"will implicitly extend :ref:`RefCounted <class_RefCounted>`, which Godot "
"uses to manage your application's memory."
msgstr ""
"在GDScript中，如果你沒有寫帶有 ``extends`` 關鍵字的一行，你的類將隱式地擴充"
"自 :ref:`RefCounted <class_RefCounted>`，Godot使用這個類來管理你的應用程式的"
"記憶體。"

msgid ""
"Inherited properties include the ones you can see in the Inspector dock, "
"like our node's ``texture``."
msgstr ""
"繼承的屬性包括您可以在“屬性面板”面板中看到的屬性，例如節點的 ``texture`` 。"

msgid ""
"By default, the Inspector displays a node's properties in \"Title Case\", "
"with capitalized words separated by a space. In GDScript code, these "
"properties are in \"snake_case\", which is lowercase with words separated by "
"an underscore."
msgstr ""
"“屬性面板”預設使用“Title Case”形式展示節點的屬性，將單詞的首字母大寫、用空格"
"分隔。在 GDScript 程式碼中，這些屬性使用的是“snake_case”，全小寫、單詞之間使"
"用底線分隔。"

msgid ""
"You can hover over any property's name in the Inspector to see a description "
"and its identifier in code."
msgstr ""
"你可以在屬性面板中懸停任何屬性的名稱來查看它的描述和在程式碼中的識別字。"

msgid "Hello, world!"
msgstr "Hello, world!"

msgid ""
"Our script currently doesn't do anything. Let's make it print the text "
"\"Hello, world!\" to the Output bottom panel to get started."
msgstr ""
"我們的腳本目前沒有做任何事情。讓我們開始列印文字“Hello, world!”到底部輸出面"
"板。"

msgid "Add the following code to your script:"
msgstr "往腳本中新增以下程式碼："

msgid ""
"Let's break it down. The ``func`` keyword defines a new function named "
"``_init``. This is a special name for our class's constructor. The engine "
"calls ``_init()`` on every object or node upon creating it in memory, if you "
"define this function."
msgstr ""
"讓我們把它分解一下。 ``func`` 關鍵字定義了一個名為 ``_init`` 的新函式。這是類"
"建構子的一個特殊名稱。如果你定義了這個函式，引擎會在記憶體中建立每個物件或節"
"點時呼叫 ``_init()`` 。"

msgid ""
"GDScript is an indent-based language. The tab at the start of the line that "
"says ``print()`` is necessary for the code to work. If you omit it or don't "
"indent a line correctly, the editor will highlight it in red and display the "
"following error message: \"Indented block expected\"."
msgstr ""
"GDScript 是基於縮進的語言。行首的定位字元是 ``print()`` 程式碼正常工作的必要"
"條件。如果你省略了它或者沒有正確縮進一行，編輯器將以紅色高亮顯示，並顯示以下"
"錯誤資訊：“Indented block expected”（應有縮進塊）。"

msgid ""
"Save the scene as ``sprite_2d.tscn`` if you haven't already, then press :kbd:"
"`F6` (:kbd:`Cmd + R` on macOS) to run it. Look at the **Output** bottom "
"panel that expands. It should display \"Hello, world!\"."
msgstr ""
"如果你還沒有保存場景為 ``sprite_2d.tscn`` ，請保存，然後按 :kbd:`F6` （macOS "
"上為 :kbd:`Cmd + R` ）來運作它。看一下底部展開的 **輸出** 面板。它應該顯"
"示“Hello, world!”。"

msgid ""
"Delete the ``_init()`` function, so you're only left with the line ``extends "
"Sprite2D``."
msgstr "將 ``_init()`` 函式刪除，這樣你就只有一行 ``extends Sprite2D`` 了。"

msgid "Turning around"
msgstr "四處旋轉"

msgid ""
"It's time to make our node move and rotate. To do so, we're going to add two "
"member variables to our script: the movement speed in pixels per second and "
"the angular speed in radians per second.  Add the following after the "
"``extends Sprite2D`` line."
msgstr ""
"是時候讓我們的節點移動和旋轉了。為此，我們將向腳本中新增兩個成員變數：以像素"
"每秒為單位的移動速度，和以弧度每秒為單位的角速度。將下述內容新增到 ``extends "
"Sprite2D`` 行的後面。"

msgid ""
"Member variables sit near the top of the script, after any \"extends\" "
"lines, but before functions. Every node instance with this script attached "
"to it will have its own copy of the ``speed`` and ``angular_speed`` "
"properties."
msgstr ""
"成員變數位於腳本的頂部，在“extends”之後、函式之前。附加了此腳本的每個節點實例"
"都將具有自己的 ``speed`` 和 ``angular_speed`` 屬性副本。"

msgid ""
"Angles in Godot work in radians by default, but you have built-in functions "
"and properties available if you prefer to calculate angles in degrees "
"instead."
msgstr ""
"與其他一些引擎一樣，Godot 中的角度預設使用弧度為單位，但如果您更喜歡以度為單"
"位計算角度，則可以使用內建函式和屬性。"

msgid ""
"To move our icon, we need to update its position and rotation every frame in "
"the game loop. We can use the ``_process()`` virtual function of the "
"``Node`` class. If you define it in any class that extends the Node class, "
"like Sprite2D, Godot will call the function every frame and pass it an "
"argument named ``delta``, the time elapsed since the last frame."
msgstr ""
"為了移動我們的圖示，我們需要在遊戲迴圈中每一影格更新其位置和旋轉。我們可以使"
"用 ``Node`` 類中的虛函式 ``_process()`` 。如果你在任何擴充自 Node 類的類中定"
"義它，如 Sprite2D，Godot將在每一影格呼叫該函式，並傳遞給它一個名為 ``delta`` "
"的參數，即從上一影格開始經過的時間。"

msgid ""
"Games work by rendering many images per second, each called a frame, and "
"they do so in a loop. We measure the rate at which a game produces images in "
"Frames Per Second (FPS). Most games aim for 60 FPS, although you might find "
"figures like 30 FPS on slower mobile devices or 90 to 240 for virtual "
"reality games."
msgstr ""
"遊戲的工作方式是每秒鐘算繪許多圖像，每幅圖像稱為一影格，而且是迴圈進行的。我"
"們用每秒影格數（FPS）來衡量一個遊戲產生圖像的速度。大多數遊戲的目標是60FPS，"
"儘管你可能會發現在較慢的移動裝置上的數位是30FPS，或者是虛擬實境遊戲的90至"
"240。"

msgid ""
"The engine and game developers do their best to update the game world and "
"render images at a constant time interval, but there are always small "
"variations in frame render times. That's why the engine provides us with "
"this delta time value, making our motion independent of our framerate."
msgstr ""
"引擎和遊戲開發者盡最大努力以恒定的時間間隔更新遊戲世界和算繪圖像，但在影格的"
"算繪時間上總是存在著微小的變化。這就是為什麼引擎為我們提供了這個delta時間值，"
"使我們的運動與我們的畫面播放速率無關。"

msgid "At the bottom of the script, define the function:"
msgstr "在腳本的底部，定義該函式："

msgid ""
"The ``func`` keyword defines a new function. After it, we have to write the "
"function's name and arguments it takes in parentheses. A colon ends the "
"definition, and the indented blocks that follow are the function's content "
"or instructions."
msgstr ""
"``func`` 關鍵字定義了一個新函式。在它之後，我們必須在括弧裡寫上函式的名稱和它"
"所接受的參數。冒號結束定義，後面的縮進塊是函式的內容或指令。"

msgid ""
"Notice how ``_process()``, like ``_init()``, starts with a leading "
"underscore. By convention, Godot's virtual functions, that is to say, built-"
"in functions you can override to communicate with the engine, start with an "
"underscore."
msgstr ""
"請注意 ``_process()`` 和 ``_init()`` 一樣都是以底線開頭的。按照約定，這是 "
"Godot 的虛函式，也就是你可以覆蓋的與引擎通信的內建函式。"

msgid ""
"The line inside the function, ``rotation += angular_speed * delta``, "
"increments our sprite's rotation every frame. Here, ``rotation`` is a "
"property inherited from the class ``Node2D``, which ``Sprite2D`` extends. It "
"controls the rotation of our node and works with radians."
msgstr ""
"函式內部的那一行 ``rotation += angular_speed * delta`` 每一影格都會增加我們的"
"精靈的旋轉量。這裡 ``rotation`` 是從 ``Sprite2D`` 所擴充的 ``Node2D`` 類繼承"
"的屬性。它可以控制我們節點的旋轉，以弧度為單位。"

msgid ""
"In the code editor, you can ctrl-click on any built-in property or function "
"like ``position``, ``rotation``, or ``_process`` to open the corresponding "
"documentation in a new tab."
msgstr ""
"在程式碼編輯器中，你可以按住 ctrl 按一下任何內建的屬性或函式，如 "
"``position`` 、 ``rotation`` 、 ``_process`` 以在新標籤頁中打開相應的文件。"

msgid "Run the scene to see the Godot icon turn in-place."
msgstr "運作該場景，可以看到 Godot 的圖示在原地轉動。"

msgid ""
"In C#, notice how the ``delta`` argument taken by ``_Process()`` is a "
"``double``. We therefore need to convert it to ``float`` when we apply it to "
"the rotation."
msgstr ""
"在 C# 中，請注意 ``_Process()`` 所採用的 ``delta`` 參數型別是 ``double`` 。 "
"故當我們將其應用於旋轉時，需要將其轉換為 ``float`` 。"

msgid "Moving forward"
msgstr "下一頁"

msgid ""
"Let's now make the node move. Add the following two lines inside of the "
"``_process()`` function, ensuring the new lines are indented the same way as "
"the ``rotation += angular_speed * delta`` line before them."
msgstr ""
"現在我們來讓節點移動。在 ``_process()`` 函式中新增下面兩行程式碼，確保每一行"
"都和之前的 ``rotation += angular_speed * delta`` 行的縮進保持一致。"

msgid ""
"As we already saw, the ``var`` keyword defines a new variable. If you put it "
"at the top of the script, it defines a property of the class. Inside a "
"function, it defines a local variable: it only exists within the function's "
"scope."
msgstr ""
"正如我們所看到的， ``var`` 關鍵字可以定義新變數。如果你把它放在腳本頂部，定義"
"的就是類的屬性。在函式內部，定義的則是區域變數：只在函式的作用域中存在。"

#, fuzzy
msgid ""
"We define a local variable named ``velocity``, a 2D vector representing both "
"a direction and a speed. To make the node move forward, we start from the "
"Vector2 class's constant ``Vector2.UP``, a vector pointing up, and rotate it "
"by calling the Vector2 method ``rotated()``. This expression, ``Vector2.UP."
"rotated(rotation)``, is a vector pointing forward relative to our icon. "
"Multiplied by our ``speed`` property, it gives us a velocity we can use to "
"move the node forward."
msgstr ""
"我們定義一個名為 ``velocity`` 的區域變數，該變數是用於表示方向和速度的 2D 向"
"量。要讓節點向前移動，我們可以從 Vector2 類的常數 ``Vector2.UP`` 入手，這個向"
"量指向上方，呼叫 ``Vector2`` 的 ``rotated()`` 方法可以將其進行旋轉。運算式 "
"``Vector2.UP.rotated(rotation)`` 表示的是指向圖示前方的向量。用這個方向與我們"
"的 ``speed`` 屬性相乘後，得到的就是用來移動節點的速度。"

msgid ""
"We add ``velocity * delta`` to the node's ``position`` to move it. The "
"position itself is of type :ref:`Vector2 <class_Vector2>`, a built-in type "
"in Godot representing a 2D vector."
msgstr ""
"我們在節點的 ``position`` 里加上 ``velocity * delta`` 來實作移動。位置本身"
"是 :ref:`Vector2 <class_Vector2>` 型別的，是 Godot 用於表示 2D 向量的內建型"
"別。"

msgid "Run the scene to see the Godot head run in circles."
msgstr "運作場景就可以看到 Godot 頭像在繞圈圈。"

msgid ""
"Moving a node like that does not take into account colliding with walls or "
"the floor. In :ref:`doc_your_first_2d_game`, you will learn another approach "
"to moving objects while detecting collisions."
msgstr ""
"使用這樣的方法不會考慮與牆壁和地面的碰撞。在 :ref:`doc_your_first_2d_game` "
"中，你會學到另一種移動物件的方法，可以偵測碰撞。"

#, fuzzy
msgid ""
"Our node currently moves by itself. In the next part, :ref:"
"`doc_scripting_player_input`, we'll use player input to control it."
msgstr ""
"我們的節點目前是自行移動的。在下一部分 :ref:`doc_scripting_player_input` 中，"
"我們會讓玩家的輸入來控制它。"

msgid "Complete script"
msgstr "GDScript 範例"

msgid "Here is the complete ``sprite_2d.gd`` file for reference."
msgstr "這是完整的 ``sprite_2d.gd`` 檔案，僅供參考。"

msgid "Translation status"
msgstr "翻譯狀態"
