# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "CLion"
msgstr "CLion"

msgid ""
"`CLion <https://www.jetbrains.com/clion/>`_ is a commercial `JetBrains "
"<https://www.jetbrains.com/>`_ IDE for C++."
msgstr ""
"`CLion <https://www.jetbrains.com/clion/>`_ 是用於 C++ 的商業版 `JetBrains "
"<https://www.jetbrains.com/>`_ IDE。"

msgid "Importing the project"
msgstr "匯入專案"

msgid ""
"CLion can import a project's `compilation database file <https://clang.llvm."
"org/docs/JSONCompilationDatabase.html>`_, commonly named ``compile_commands."
"json``. To generate the compilation database file, open the terminal, change "
"to the Godot root directory, and run:"
msgstr ""
"CLion 可以匯入專案的編譯資料庫檔案<https://clang.llvm.org/docs/"
"JSONCompilationDatabase.html>`_，通常名稱為「compile_commands.json」。若要產"
"生編譯資料庫檔案，請開啟終端，切換到Godot根目錄，然後執行："

msgid ""
"Then, open the Godot root directory with CLion. CLion will import the "
"compilation database, index the codebase, and provide autocompletion and "
"other advanced code navigation and refactoring functionality."
msgstr ""
"然後，使用 CLion 開啟 Godot 根目錄。 CLion 將匯入編譯資料庫、索引程式碼庫，並"
"提供自動完成和其他進階程式碼導覽和重構功能。"

msgid "Compiling and debugging the project"
msgstr "對專案進行除錯"

msgid ""
"CLion does not support compiling and debugging Godot via SCons out of the "
"box. This can be achieved by creating a custom build target and run "
"configuration in CLion. Before creating a custom build target, you must :ref:"
"`compile Godot <toc-devel-compiling>` once on the command line, to generate "
"the Godot executable. Open the terminal, change into the Godot root "
"directory, and execute:"
msgstr ""
"CLion 不支援開箱即用地透過 SCons 編譯和除錯 Godot。這可以透過在 CLion 中建立"
"自訂建置目標和運作配置來實作。在建立自訂建置目標之前，您必須在命令列上編譯 "
"Godot <toc-devel-compiling>` 一次，以產生 Godot 執行檔。開啟終端，切換到Godot"
"根目錄，然後執行："

msgid "To add a custom build target that invokes SCons for compilation:"
msgstr "若要新增呼叫 SCons 進行編譯的自訂建置目標："

msgid ""
"Open CLion and navigate to **Preferences > Build, Execution, Deployment > "
"Custom Build Targets**"
msgstr "開啟 CLion 並導覽至 **首選項 > 建置、執行、部署 > 自訂建置目標**"

msgid "Click **Add target** and give the target a name, e.g. ``Godot debug``."
msgstr "按一下“**新增目標**”並為目標命名，例如“Godot debug”。"

msgid ""
"Click **...** next to the **Build:** selectbox, then click the **+** button "
"in the **External Tools** dialog to add a new external tool."
msgstr ""
"按一下 **Build:** 選擇方塊旁的 **...**，然後按一下 **External Tools** 對話方"
"塊中的 **+** 按鈕以新增新的外部工具。"

msgid ""
"Give the tool a name, e.g. ``Build Godot debug``, set **Program** to "
"``scons``, set **Arguments** to the compilation settings you want (see :ref:"
"`compiling Godot <toc-devel-compiling>`), and set the **Working directory** "
"to ``$ProjectFileDir$``, which equals the Godot root directory. Click **OK** "
"to create the tool."
msgstr ""
"為工具命名，例如“Build Godot debug”，將 **Program** 設定為“scons”，將 "
"**Arguments** 設定為您想要的編譯設定（請參閱:ref:`編譯 Godot <toc -devel -"
"compiling>`)，並將**工作目錄** 設定為``$ProjectFileDir$``，它等於Godot 根目"
"錄。按一下 **確定** 建立該工具。"

msgid ""
"CLion does not expand shell commands like ``scons -j$(nproc)``. Use concrete "
"values instead, e.g. ``scons -j8``."
msgstr ""
"CLion 不會擴充諸如「scons -j$(nproc)」之類的 shell 指令。請使用具體值，例"
"如“scons -j8”。"

msgid ""
"Back in the **External Tools** dialog, click the **+** again to add a second "
"external tool for cleaning the Godot build via SCons. Give the tool a name, "
"e.g. ``Clean Godot debug``, set **Program** to ``scons``, set **Arguments** "
"to ``-c`` (which will clean the build), and set the **Working directory** to "
"``$ProjectFileDir$``. Click **OK** to create the tool."
msgstr ""
"返回 **外部工具** 對話框，再次按一下 **+** 以新增第二個外部工具，用於透過 "
"SCons 清理 Godot 建置。為該工具命名，例如“Clean Godot debug”，將 **Program** "
"設為“scons”，將 **Arguments** 設為“-c”（這將清理建置），然後將**工作目錄* * "
"設定為``$ProjectFileDir$``。按一下 **確定** 建立該工具。"

msgid ""
"Close the **External Tools** dialog. In the **Custom Build Target** dialog "
"for the custom ``Godot debug`` build target, select the **Build Godot "
"debug** tool from the **Build** select box, and select the **Clean Godot "
"debug** tool from the **Clean** select box. Click **OK** to create the "
"custom build target."
msgstr ""
"關閉**外部工具**對話框。在自訂「Godot debug」建置目標的 **Custom Build "
"Target** 對話方塊中，從 **Build** 選擇方塊中選擇 **Build Godot debug** 工具，"
"然後選擇 **Clean Godot debug ** * *清潔** 選擇框中的工具。按一下 **確定** 建"
"立自訂建置目標。"

msgid "In the main IDE window, click **Add Configuration**."
msgstr "在主 IDE 視窗中，按一下「**新增配置**」。"

msgid ""
"In the **Run/Debug Configuration** dialog, click **Add new...**, then select "
"**Custom Build Application** to create a new custom run/debug configuration."
msgstr ""
"在 **執行/偵錯配置** 對話方塊中，按一下 **新增...**，然後選擇 **自訂建置應用"
"程式** 以建立新的自訂運作/偵錯配置。"

msgid ""
"Give the run/debug configuration a name, e.g. ``Godot debug``, select the "
"``Godot debug`` custom build target as the **Target**. Select the Godot "
"executable in the ``bin/`` folder as the **Executable**, and set the "
"**Program arguments** to ``--editor --path path-to-your-project/``, where "
"``path-to-your-project/`` should be a path pointing to an existing Godot "
"project. If you omit the ``--path`` argument, you will only be able to debug "
"the Godot Project Manager window. Click **OK** to create the run/debug "
"configuration."
msgstr ""
"為運作/偵錯配置命名，例如“Godot debug”，選擇“Godot debug”自訂建置目標作為**目"
"標**。選擇“bin/”資料夾中的Godot可執行檔作為**可執行檔**，並將**程式參數**設"
"為“--editor --path path-to-your-project/”，其中``path-to-your-project/``應該"
"是指向現有Godot專案的路徑。如果省略「--path」參數，您將只能偵錯 Godot 專案管"
"理器視窗。按一下 **確定** 建立運作/偵錯配置。"

msgid ""
"You can now build, run, debug, profile, and Valgrind check the Godot editor "
"via the run configuration."
msgstr "現在您可以透過執行設定來建置、運作、偵錯、分析和檢查 Godot 編輯器。"

msgid ""
"When playing a scene, the Godot editor will spawn a separate process. You "
"can debug this process in CLion by going to **Run > Attach to process...**, "
"typing ``godot``, and selecting the Godot process with the highest **pid** "
"(process ID), which will usually be the running project."
msgstr ""
"播放場景時，Godot 編輯器將產生一個單獨的程序。您可以在CLion 中偵錯此程序，方"
"法是前往**Run > Attach to process...**，輸入``godot``，然後選擇具有最高"
"**pid**（程序ID）的Godot 程序，這將通常是正在運作的專案。"

msgid "Translation status"
msgstr "翻譯狀態"
