# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Custom platform ports"
msgstr "支援平台"

msgid ""
"Similar to :ref:`doc_custom_modules_in_cpp`, Godot's multi-platform "
"architecture is designed in a way that allows creating platform ports "
"without modifying any existing source code."
msgstr ""
"與 doc_custom_modules_in_cpp 類似，Godot 的多平台架構的設計方式允許在不修改任"
"何現有原始碼的情況下建立平台連接埠。"

msgid ""
"An example of a custom platform port distributed independently from the "
"engine is `FRT <https://github.com/efornara/frt>`__, which targets single-"
"board computers. Note that this platform port currently targets Godot 3.x; "
"therefore, it does not use the :ref:`class_DisplayServer` abstraction that "
"is new in Godot 4."
msgstr ""
"獨立於引擎分發的自訂平台連接埠的一個範例是`FRT <https://github.com/efornara/"
"frt>`__，它針對單板電腦。請注意，該平台移植目前針對 Godot 3.x；因此，它不使"
"用 Godot 4 中新增的 class_DisplayServer 抽象化。"

msgid "Some reasons to create custom platform ports might be:"
msgstr "建立自訂平臺移植可能有以下原因："

msgid ""
"You want to :ref:`port your game to consoles <doc_consoles>`, but wish to "
"write the platform layer yourself. This is a long and arduous process, as it "
"requires signing NDAs with console manufacturers, but it allows you to have "
"full control over the console porting process."
msgstr ""
"您想要 :ref:`將您的遊戲移植到控制台 <doc_consoles>`，但希望自己編寫平台層。這"
"是一個漫長而艱鉅的過程，因為它需要與控制台製造商簽署保密協議，但它允許您完全"
"控制控制台移植過程。"

msgid ""
"You want to port Godot to an exotic platform that isn't currently supported."
msgstr "您想要將 Godot 移植到目前不支援的奇異平台。"

msgid ""
"If you have questions about creating a custom platform port, feel free to "
"ask in the ``#platforms`` channel of the `Godot Contributors Chat <https://"
"chat.godotengine.org/channel/platforms>`__."
msgstr ""
"如果您對建立自訂平台連接埠有疑問，請隨時在「Godot 貢獻者聊天 <https://chat."
"godotengine.org/channel/platforms>」的「#platforms」頻道中提問。"

msgid ""
"Godot is a modern engine with modern requirements. Even if you only intend "
"to run simple 2D projects on the target platform, it still requires an "
"amount of memory that makes it unviable to run on most retro consoles. For "
"reference, in Godot 4, an empty project with nothing visible requires about "
"100 MB of RAM to run on Linux (50 MB in headless mode)."
msgstr ""
"Godot 是一款具有現代要求的現代化引擎。即使您只想在目標平台上運作簡單的 2D 專"
"案，它仍然需要大量內存，這使得它無法在大多數復古控制台上運作。作為參考，在 "
"Godot 4 中，一個沒有任何可見內容的空專案需要大約 100 MB 的 RAM 才能在 Linux "
"上運作（無頭模式下為 50 MB）。"

msgid ""
"If you want to run Godot on heavily memory-constrained platforms, older "
"Godot versions have lower memory requirements. The porting process is "
"similar, with the exception of :ref:`class_DisplayServer` not being split "
"from the :ref:`class_OS` singleton."
msgstr ""
"如果您想在記憶體嚴重受限的平台上執行 Godot，較舊的 Godot 版本的記憶體需求較"
"低。移植過程類似，但 class_DisplayServer 並沒有從 class_OS 單例中分離出來。"

msgid "Official platform ports"
msgstr "官方 Git 外掛"

msgid ""
"The official platform ports can be used as a reference when creating a "
"custom platform port:"
msgstr "建立自訂平台連接埠時可以參考官方平台連接埠："

msgid ""
"`Windows <https://github.com/godotengine/godot/tree/master/platform/"
"windows>`__"
msgstr ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid ""
"`macOS <https://github.com/godotengine/godot/tree/master/platform/macos>`__"
msgstr ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid ""
"`Linux/\\*BSD <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd>`__"
msgstr ""
"\\ `editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"
msgstr ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid "`iOS <https://github.com/godotengine/godot/tree/master/platform/ios>`__"
msgstr ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid "`Web <https://github.com/godotengine/godot/tree/master/platform/web>`__"
msgstr ""
"`editor/icons <https://github.com/godotengine/godot/tree/master/editor/"
"icons>`__"

msgid ""
"While platform code is usually self-contained, there are exceptions to this "
"rule. For instance, audio drivers that are shared across several platforms "
"and rendering backends are located in the `drivers/ folder <https://github."
"com/godotengine/godot/tree/master/drivers>`__ of the Godot source code."
msgstr ""
"雖然平台程式碼通常是獨立的，但此規則也有例外。例如，跨多個平台和算繪後端共享"
"的音訊驅動程式位於 Godot 原始碼的 `drivers/ 資料夾 <https://github.com/"
"godotengine/godot/tree/master/drivers>`__ 中。"

msgid "Creating a custom platform port"
msgstr "建立自定節點"

msgid ""
"Creating a custom platform port is a large undertaking which requires prior "
"knowledge of the platform's SDKs. Depending on what features you need, the "
"amount of work needed varies:"
msgstr ""
"建立自訂平台連接埠是一項艱鉅的工作，需要事先了解平台的 SDK。根據您需要的功"
"能，所需的工作量會有所不同："

msgid "Required features of a platform port"
msgstr "平臺移植需要的功能"

msgid ""
"At the very least, a platform port must have methods from the :ref:"
"`class_OS` singleton implemented to be buildable and usable for headless "
"operation. A ``logo.svg`` (32×32) vector image must also be present within "
"the platform folder. This logo is displayed in the Export dialog for each "
"export preset targeting the platform in question."
msgstr ""
"至少，平台連接埠必須具有實作的 class_OS 單例中的方法，以便可建置並可用於無頭"
"操作。平台資料夾中也必須存在「logo.svg」 (32×32) 向量圖。對於針對相關平台的每"
"個匯出預設，此旗標會顯示在「匯出」對話方塊中。"

msgid ""
"See `this implementation <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/os_linuxbsd.cpp>`__ for the Linux/\\*BSD platform as an "
"example. See also the `OS singleton header <https://github.com/godotengine/"
"godot/blob/master/core/os/os.h>`__ for reference."
msgstr ""
"請參閱 '這個實作 <https://github.com/godotengine/ godot/blob/master/platform/"
"linuxbsd/os_linuxbsd.cpp>'__ 作為 Linux/\\*BSD 平臺的範例。另請參閱“OS "
"singleton header <https://github.com/godotengine/ godot/blob/master/core/os/"
"os.h>”__ 以供參考。"

msgid ""
"If your target platform is UNIX-like, consider inheriting from the "
"``OS_Unix`` class to get much of the work done automatically."
msgstr ""
"如果您的目標平台是類 UNIX 的，請考慮繼承「OS_Unix」類別以自動完成大部分工作。"

msgid ""
"If the platform is not UNIX-like, you might use the `Windows port <https://"
"github.com/godotengine/godot/blob/master/platform/windows/os_windows.cpp>` "
"as a reference."
msgstr ""
"如果平台不是類 UNIX，您可以使用「Windows 連接埠 <https://github.com/"
"godotengine/godot/blob/master/platform/windows/os_windows.cpp>」作為參考。"

msgid "**detect.py file**"
msgstr "**紋理篩選：**"

msgid ""
"A ``detect.py`` file must be created within the platform's folder with all "
"methods implemented. This file is required for SCons to detect the platform "
"as a valid option for compiling. See the `detect.py file <https://github.com/"
"godotengine/godot/blob/master/platform/linuxbsd/detect.py>`__ for the Linux/"
"\\*BSD platform as an example."
msgstr ""
"必須在平臺的資料夾中建立一個「detect.py」檔，並實現所有方法。SCons 需要此檔才"
"能將平台檢測為有效的編譯選項。請參閱 Linux/\\*BSD 平臺的 'detect.py 檔 "
"<https://github.com/godotengine/ godot/blob/master/platform/linuxbsd/detect."
"py>“__ 作為範例。"

msgid "All methods should be implemented within ``detect.py`` as follows:"
msgstr "``detect.py`` 應實作如下所有方法："

msgid ""
"``is_active()``: Can be used to temporarily disable building for a platform. "
"This should generally always return ``True``."
msgstr "``is_active()``：可用於暫時停用平台建置。這通常應該總是返回“True”。"

msgid "``get_name()``: Returns the platform's user-visible name as a string."
msgstr "``get_name()``：以字串形式傳回平台的使用者可見名稱。"

msgid ""
"``can_build()``: Return ``True`` if the host system is able to build for the "
"target platform, ``False`` otherwise. Do not put slow checks here, as this "
"is queried when the list of platforms is requested by the user. Use "
"``configure()`` for extensive dependency checks instead."
msgstr ""
"“can_build()”：如果主機系統能夠為目標平台建構，則返回“True”，否則返"
"回“False”。請勿在此處進行緩慢檢查，因為當使用者要求平台列表時會查詢此檢查。請"
"使用“configure()”進行廣泛的依賴性檢查。"

msgid ""
"``get_opts()``: Returns the list of SCons build options that can be defined "
"by the user for this platform."
msgstr "``get_opts()``：傳回使用者可以為此平台定義的 SCons 建置選項列表。"

msgid ""
"``get_flags()``: Returns the list of overridden SCons flags for this "
"platform."
msgstr "``get_flags()``：傳回該平台覆蓋的 SCons 旗標列表。"

msgid ""
"``configure()``: Perform build configuration, such as selecting compiler "
"options depending on SCons options chosen."
msgstr ""
"``configure()``：執行建置配置，例如根據所選的 SCons 選項選擇編譯器選項。"

msgid "Optional features of a platform port"
msgstr "平臺移植的可選功能"

msgid ""
"In practice, headless operation doesn't suffice if you want to see anything "
"on screen and handle input devices. You may also want audio output for most "
"games."
msgstr ""
"實際上，如果您想在螢幕上看到任何內容並處理輸入裝置，無頭操作是不夠的。您可能"
"還需要大多數遊戲的音訊輸出。"

msgid ""
"*Some links on this list point to the Linux/\\*BSD platform implementation "
"as a reference.*"
msgstr "*此清單中的一些連結指向Linux/\\*BSD平臺實現作為參考。*"

msgid ""
"One or more `DisplayServers <https://github.com/godotengine/godot/blob/"
"master/platform/linuxbsd/x11/display_server_x11.cpp>`__, with the windowing "
"methods implemented. DisplayServer also covers features such as mouse "
"support, touchscreen support and tablet driver (for pen input). See the "
"`DisplayServer singleton header <https://github.com/godotengine/godot/blob/"
"master/servers/display_server.h>`__ for reference."
msgstr ""
"一個或多個 `DisplayServers <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/x11/display_server_x11.cpp>`__，已實作視窗方法。 "
"DisplayServer 還涵蓋滑鼠支援、觸控螢幕支援和平板電腦驅動程式（用於筆輸入）等"
"功能。請參閱 `DisplayServer 單例標頭 <https://github.com/godotengine/godot/"
"blob/master/servers/display_server.h>`__ 以供參考。"

msgid ""
"For platforms not featuring full windowing support (or if it's not relevant "
"for the port you are making), most windowing functions can be left mostly "
"unimplemented. These functions can be made to only check if the window ID is "
"``MAIN_WINDOW_ID`` and specific operations like resizing may be tied to the "
"platform's screen resolution feature (if relevant). Any attempt to create or "
"manipulate other window IDs can be rejected."
msgstr ""
"對於不具有完整視窗支援的平台（或如果它與您正在製作的連接埠無關），大多數視窗"
"功能可以大部分未實作。這些函式可以僅檢查視窗 ID 是否為“MAIN_WINDOW_ID”，並且"
"調整大小等特定操作可能與平台的螢幕解析度功能（如果相關）相關。任何建立或操作"
"其他視窗 ID 的嘗試都會被拒絕。"

msgid ""
"*If the target platform supports the graphics APIs in question:* Rendering "
"context for `Vulkan <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/x11/vulkan_context_x11.cpp>`__, `OpenGL 3.3 or OpenGL ES "
"3.0 <https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/"
"gl_manager_x11.cpp>`__."
msgstr ""
"*如果目標平台支援相關圖形 API：* `Vulkan <https://github.com/godotengine/"
"godot/blob/master/platform/linuxbsd/x11/vulkan_context_x11.cpp>`__ 的算繪本"
"文，`OpenGL 3.3 或OpenGL ES 3.0 <https://github.com/godotengine/godot/blob/"
"master/platform/linuxbsd/x11/gl_manager_x11.cpp>`__。"

msgid ""
"Input handlers for `keyboard <https://github.com/godotengine/godot/blob/"
"master/platform/linuxbsd/x11/key_mapping_x11.cpp>`__ and `controller "
"<https://github.com/godotengine/godot/blob/master/platform/linuxbsd/"
"joypad_linux.cpp>`__."
msgstr ""
"`鍵盤<https://github.com/godotengine/godot/blob/master/platform/linuxbsd/x11/"
"key_mapping_x11.cpp>`__ 和`控制器<https://github.com/godotengine/godot/ 的輸"
"入處理程式blob/master/platform/linuxbsd/joypad_linux.cpp>`__。"

msgid ""
"One or more `audio drivers <https://github.com/godotengine/godot/blob/master/"
"drivers/pulseaudio/audio_driver_pulseaudio.cpp>`__. The audio driver can be "
"located in the ``platform/`` folder (this is done for the Android and Web "
"platforms), or in the ``drivers/`` folder if multiple platforms may be using "
"this audio driver. See the `AudioServer singleton header <https://github.com/"
"godotengine/godot/blob/master/servers/audio_server.h>`__ for reference."
msgstr ""
"一個或多個「音訊驅動程式<https://github.com/godotengine/godot/blob/master/"
"drivers/pulseaudio/audio_driver_pulseaudio.cpp>`__。音訊驅動程式可以位於"
"「platform/」資料夾中（這是針對 Android 和 Web 平台完成的），或者如果多個平台"
"可能使用此音訊驅動程式，則位於「drivers/」資料夾中。請參閱 `AudioServer 單例"
"標頭 <https://github.com/godotengine/godot/blob/master/servers/audio_server."
"h>`__ 以供參考。"

msgid ""
"`Crash handler <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/crash_handler_linuxbsd.cpp>`__, for printing crash backtraces when "
"the game crashes. This allows for easier troubleshooting on platforms where "
"logs aren't readily accessible."
msgstr ""
"`當機處理程式 <https://github.com/godotengine/godot/blob/master/platform/"
"linuxbsd/crash_handler_linuxbsd.cpp>`__，用於在遊戲當機時列印當機回溯。這樣可"
"以更輕鬆地在不易存取紀錄的平台上進行故障排除。"

msgid ""
"`Text-to-speech driver <https://github.com/godotengine/godot/blob/master/"
"platform/linuxbsd/tts_linux.cpp>`__ (for accessibility)."
msgstr ""
"`core/io/fileaccess.h <https://github.com/godotengine/godot/blob/master/core/"
"os/file_access.h>`_"

msgid ""
"`Export handler <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd/export>`__ (for exporting from the editor, including :ref:`doc_one-"
"click_deploy`). Not required if you intend to export only a PCK from the "
"editor, then run the export template binary directly by renaming it to match "
"the PCK file. See the `EditorExportPlatform header <https://github.com/"
"godotengine/godot/blob/master/editor/export/editor_export_platform.h>`__ for "
"reference. ``run_icon.svg`` (16×16) should be present within the platform "
"folder if :ref:`doc_one-click_deploy` is implemented for the target "
"platform. This icon is displayed at the top of the editor when one-click "
"deploy is set up for the target platform."
msgstr ""
"`匯出處理程式 <https://github.com/godotengine/godot/tree/master/platform/"
"linuxbsd/export>`__ （用於從編輯器匯出，包括 :ref:`doc_one-click_deploy`）。"
"如果您打算僅從編輯器匯出 PCK，則不需要，然後透過重命名它以配對 PCK 檔案來直接"
"執行匯出範本二進位檔案。請參閱 `EditorExportPlatform 標頭 <https://github."
"com/godotengine/godot/blob/master/editor/export/editor_export_platform.h>`__ "
"以供參考。如果為目標平台實作了 doc_one-click_deploy ，則平台資料夾中應存在"
"「run_icon.svg」(16×16)。當為目標平台設定一鍵部署時，此圖示將顯示在編輯器頂"
"部。"

msgid ""
"If the target platform doesn't support running Vulkan, OpenGL 3.3 or OpenGL "
"ES 3.0, you have two options:"
msgstr ""
"如果目標平台不支援運作 Vulkan、OpenGL 3.3 或 OpenGL ES 3.0，您有兩個選擇："

msgid ""
"Use a library at run-time to translate Vulkan or OpenGL calls to another "
"graphics API. For example, `MoltenVK <https://moltengl.com/moltenvk/>`__ is "
"used on macOS to translate Vulkan to Metal at run-time."
msgstr ""
"在運作時使用庫將 Vulkan 或 OpenGL 呼叫轉換為另一個圖形 API。例如，`MoltenVK "
"<https://moltengl.com/moltenvk/>`__ 用於在 macOS 上在運作時將 Vulkan 轉換為 "
"Metal。"

msgid ""
"Create a new renderer from scratch. This is a large undertaking, especially "
"if you want to support both 2D and 3D rendering with advanced features."
msgstr ""
"從頭開始建立一個新的算繪器。這是一項艱鉅的工作，特別是如果您想透過進階功能支"
"援 2D 和 3D 算繪。"

msgid "Distributing a custom platform port"
msgstr "分發自訂平台端口"

msgid ""
"Before distributing a custom platform port, make sure you're allowed to "
"distribute all the code that is being linked against. Console SDKs are "
"typically under NDAs which prevent redistribution to the public."
msgstr ""
"在分發自訂平台連接埠之前，請確保您有權分發所連結的所有程式碼。控制台 SDK 通常"
"處於保密協議 (NDA) 之下，這會阻止向公眾重新分發。"

msgid ""
"Platform ports are designed to be as self-contained as possible. Most of the "
"code can be kept within a single folder located in ``platform/``. Like :ref:"
"`doc_custom_modules_in_cpp`, this allows for streamlining the build process "
"by making it possible to ``git clone`` a platform folder within a Godot "
"repository clone's ``platform/`` folder, then run ``scons platform=<name>``. "
"No other steps are necessary for building, unless third-party platform-"
"specific dependencies need to be installed first."
msgstr ""
"平台連接埠被設計為盡可能獨立。大多數程式碼可以保存在“platform/”中的單一資料夾"
"中。與 doc_custom_modules_in_cpp 一樣，這可以透過在 Godot 儲存庫克隆的 "
"platform/ 資料夾中「git clone」平台資料夾來簡化建置過程，然後執行 scons "
"platform=<名稱>``。建置不需要其他步驟，除非需要先安裝第三方平台特定的依賴項。"

msgid ""
"However, when a custom rendering backend is needed, another folder must be "
"added in ``drivers/``. In this case, the platform port can be distributed as "
"a fork of the Godot repository, or as a collection of several folders that "
"can be added over a Godot Git repository clone."
msgstr ""
"但是，當需要自訂算繪後端時，必須在「drivers/」中新增另一個資料夾。在這種情況"
"下，平台連接埠可以作為 Godot 儲存庫的分支進行分發，或者作為可以透過 Godot "
"Git 儲存庫克隆新增的多個資料夾的集合進行分發。"

msgid "Translation status"
msgstr "翻譯狀態"
