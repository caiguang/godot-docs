# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D coordinate systems and 2D transforms"
msgstr "2D 坐標系與 2D 變換"

msgid "Introduction"
msgstr "前言"

msgid ""
"This is a detailed overview of the available 2D coordinate systems and 2D "
"transforms that are built in. The basic concepts are covered in :ref:"
"`doc_viewport_and_canvas_transforms`."
msgstr ""
"這是可用的 2D 座標系和內建 2D 變換的詳細概述。基本概念包含在 "
"doc_viewport_and_canvas_transforms 中。"

msgid ""
":ref:`Transform2D <class_Transform2D>` are matrices that convert coordinates "
"from one coordinate system to an other. In order to use them, it is "
"beneficial to know which coordinate systems are available in Godot. For a "
"deeper understanding, the :ref:`doc_matrices_and_transforms` tutorial offers "
"insights to the underlying functionality."
msgstr ""
":ref:`Transform2D <class_Transform2D>` 是將座標從一種座標系轉換為另一種座標系"
"的矩陣。為了使用它們，了解 Godot 中可用的座標係是有益的。為了更深入地理解，"
"doc_matrices_and_transforms 教學提供了對底層功能的見解。"

msgid "Godot 2D coordinate systems"
msgstr "座標系"

msgid ""
"The following graphic gives an overview of Godot 2D coordinate systems and "
"the available node-transforms, transform-functions and coordinate-system "
"related functions. At the left is the OS Window Manager screen, at the right "
"are the :ref:`CanvasItems <class_CanvasItem>`. For simplicity reasons this "
"graphic doesn't include :ref:`SubViewport <class_SubViewport>`, :ref:"
"`SubViewportContainer <class_SubViewportContainer>`, :ref:"
"`ParallaxLayer<class_ParallaxLayer>` and :ref:"
"`ParallaxBackground<class_ParallaxBackground>` all of which also influence "
"transforms."
msgstr ""
"下圖概述了 Godot 2D 座標係以及可用的節點變換、變換函式和座標系相關函式。左側"
"是作業系統視窗管理器螢幕，右側是 CanvasItems <class_CanvasItem>`。為簡單起"
"見，此圖形不包含:ref:`SubViewport <class_SubViewport>`、:ref:"
"`SubViewportContainer <class_SubViewportContainer>`、:ref:"
"`ParallaxLayer<class_ParallaxLayer>` 和:ref:"
"`ParallaBackground<class_`Packground<class_`ack影響變換。"

msgid ""
"The graphic is based on a node tree of the following form: ``Root Window "
"(embed Windows)`` ⇒ ``Window (don't embed Windows)`` ⇒ ``CanvasLayer`` ⇒ "
"``CanvasItem`` ⇒ ``CanvasItem`` ⇒ ``CanvasItem``. There are more complex "
"combinations possible, like deeply nested Window and SubViewports, however "
"this example intends to provide an overview of the methodology in general."
msgstr ""
"此圖形基於以下形式的節點樹：``根視窗（嵌入Windows）`` ⇒``視窗（不嵌入"
"Windows）`` ` ` ⇒``CanvasLayer``⇒``CanvasItem``⇒` ` CanvasItem`` "
"⇒``CanvasItem`` 。可能存在更複雜的組合，例如深度巢狀的視窗和子視口，但此範例"
"旨在提供一般方法的概述。"

msgid "Click graphic to enlarge."
msgstr "按一下圖片放大。"

msgid "**Item Coordinates**"
msgstr "下一個座標"

msgid ""
"This is the local coordinate system of a :ref:`CanvasItem "
"<class_CanvasItem>`."
msgstr "這是 :ref:`CanvasItem <class_CanvasItem>` 的局部坐標系。"

msgid "**Parent Item Coordinates**"
msgstr "下一個座標"

msgid ""
"This is the local coordinate system of the parent's *CanvasItem*. When "
"positioning *CanvasItems* in the *Canvas*, they usually inherit the "
"transformations of their parent *CanvasItems*. An exceptions is :ref:"
"`CanvasItems.top_level <class_CanvasItem_property_top_level>`."
msgstr ""
"這是父級 *CanvasItem* 的局部座標系。當在 *Canvas* 中定位 *CanvasItems* 時，它"
"們通常會繼承其父級 *CanvasItems* 的轉換。一個例外是 CanvasItems.top_level "
"<class_CanvasItem_property_top_level>`。"

msgid "**Canvas Coordinates**"
msgstr "上一個座標"

msgid ""
"As mentioned in the previous tutorial :ref:`doc_canvas_layers`, there are "
"two types of canvases (*Viewport* canvas and *CanvasLayer* canvas) and both "
"have a canvas coordinate system. These are also called world coordinates. A "
"*Viewport* can contain multiple *Canvases* with different coordinate systems."
msgstr ""
"如同前面的教學 doc_canvas_layers 中所提到的，有兩種型別的畫布（*Viewport* 畫"
"布和 *CanvasLayer* 畫布），並且都有畫布座標系。這些也稱為世界座標。一個*視口*"
"可以包含多個具有不同座標系的*畫布*。"

msgid "**Viewport Coordinates**"
msgstr "下一個座標"

msgid "This is the coordinate system of the :ref:`Viewport <class_Viewport>`."
msgstr "然後選擇您想要使用的 :ref:`Viewport <class_Viewport>`."

msgid "**Camera Coordinates**"
msgstr "下一個座標"

msgid ""
"This is only used internally for functionality like 3D-camera ray "
"projections."
msgstr "這僅在內部用於 3D 相機光線投影等功能。"

msgid "**Embedder Coordinates / Screen Coordinates**"
msgstr "**嵌入器座標 / 螢幕座標**"

msgid ""
"Every *Viewport* (*Window* or *SubViewport*) in the scene tree is embedded "
"either in a different node or in the OS Window Manager. This coordinate "
"system's origin is identical to the top-left corner of the *Window* or "
"*SubViewport* and its scale is the one of the embedder or the OS Window "
"Manager."
msgstr ""
"場景樹中的每個*視窗*（*視窗*或*子視窗*）都嵌入到不同的節點或作業系統視窗管理"
"員中。此座標系的原點與 *Window* 或 *SubViewport* 的左上角相同，其比例為嵌入器"
"或作業系統視窗管理員之一。"

msgid ""
"If the embedder is the OS Window Manager, then they are also called Screen "
"Coordinates."
msgstr "如果嵌入器是作業系統視窗管理器，那麼它們也稱為螢幕座標。"

msgid "**Absolute Embedder Coordinates / Absolute Screen Coordinates**"
msgstr "**絕對嵌入器座標 / 絕對螢幕座標**"

msgid ""
"The origin of this coordinate system is the top-left corner of the embedding "
"node or the OS Window Manager screen. Its scale is the one of the embedder "
"or the OS Window Manager."
msgstr ""
"此座標系的原點是嵌入節點或作業系統視窗管理器畫面的左上角。它的規模是嵌入器或"
"作業系統視窗管理器之一。"

msgid ""
"If the embedder is the OS Window Manager, then they are also called Absolute "
"Screen Coordinates."
msgstr "如果嵌入器是作業系統視窗管理器，那麼它們也稱為絕對螢幕座標。"

msgid "Node transforms"
msgstr "拉伸變換"

msgid ""
"Each of the mentioned nodes have one or more transforms associated with them "
"and the combination of these nodes infer the transforms between the "
"different coordinate systems. With a few exceptions, the transforms are :ref:"
"`Transform2D <class_Transform2D>` and the following list shows details and "
"effects of each of them."
msgstr ""
"每個提到的節點都有一個或多個與之關聯的變換，這些節點的組合推斷出不同座標系之"
"間的變換。除了少數例外，這些變換是:ref:`Transform2D <class_Transform2D>`，下"
"面的列表顯示了每個變換的詳細資訊和效果。"

msgid "**CanvasItem transform**"
msgstr "Canvas 變換"

msgid "*CanvasItems* are either *Control*-nodes or *Node2D*-nodes."
msgstr "*CanvasItems* 是 *Control* 節點或 *Node2D* 節點。"

msgid ""
"For *Control* nodes this transform consists of a :ref:`position "
"<class_Control_property_position>` relative to the parent's origin and a :"
"ref:`scale <class_Control_property_scale>` and :ref:`rotation "
"<class_Control_property_rotation>` around a :ref:`pivot point "
"<class_Control_property_pivot_offset>`."
msgstr ""
"對於 *Control* 節點，此轉換由相對於父級原點的位置 "
"<class_Control_property_position>` 和圍繞 :ref:`scale "
"<class_Control_property_scale>` 和旋轉 <class_Control_property_rotation>` 組"
"成： `點制軸點 <class_Control_property_`pivot_offset>。"

msgid ""
"For *Node2D* nodes :ref:`transform <class_Node2D_property_transform>` "
"consists of :ref:`position <class_Node2D_property_position>`, :ref:`rotation "
"<class_Node2D_property_rotation>`, :ref:`scale "
"<class_Node2D_property_scale>` and :ref:`skew <class_Node2D_property_skew>`."
msgstr ""
"對於 *Node2D* 節點 :ref:`transform <class_Node2D_property_transform>` 由 :"
"ref:`position <class_Node2D_property_position>`、:ref:`rotation "
"<class_Node2D_property_rotation>`、:ref:`scale "
"<class_`2D_Node2D_property_rotation>`、:ref:`scale <class_？傾斜"
"<class_Node2D_property_skew>`。"

msgid ""
"The transform affects the item itself and usually also child-*CanvasItems* "
"and in the case of a *SubViewportContainer* it affects the contained "
"*SubViewport*."
msgstr ""
"變換會影響專案本身，通常也會影響子 *CanvasItems*，並且在 "
"*SubViewportContainer* 的情況下，它會影響所包含的 *SubViewport*。"

msgid "**CanvasLayer transform**"
msgstr "Canvas 變換"

msgid ""
"The *CanvasLayer's* :ref:`transform <class_CanvasLayer_property_transform>` "
"affects all *CanvasItems* within the *CanvasLayer*. It doesn't affect other "
"*CanvasLayers* or *Windows* in its *Viewport*."
msgstr ""
"*CanvasLayer*:ref:`變換 <class_CanvasLayer_property_transform>` 影響 "
"*CanvasLayer* 內的所有 *CanvasItems*。它不會影響其*Viewport* 中的其他"
"*CanvasLayers* 或*Windows*。"

msgid "**CanvasLayer follow viewport transform**"
msgstr "**CanvasLayer 視口跟隨變換**"

msgid ""
"The *follow viewport transform* is an automatically calculated transform, "
"that is based on the *Viewport's* :ref:`canvas transform "
"<class_Viewport_property_canvas_transform>` and the *CanvasLayer's* :ref:"
"`follow viewport scale <class_CanvasLayer_property_follow_viewport_scale>` "
"and can be used, if :ref:`enabled "
"<class_CanvasLayer_property_follow_viewport_enabled>`, to achieve a pseudo "
"3D effect. It affects the same child nodes as the *CanvasLayer transform*."
msgstr ""
"*跟隨視窗變換*是一個自動計算的變換，它基於*Viewport的*:ref:`canvas變換"
"<class_Viewport_property_canvas_transform>`和*CanvasLayer的*:ref:`跟隨視窗比"
"例<class_CanvasLayer_property_follow_viewport_scale>`並且可以使用、可以使用、"
"若啟用<class_CanvasLayer_property_follow_viewport_enabled>`，即可實作偽3D效"
"果。它影響與 *CanvasLayer 變換* 相同的子節點。"

msgid "**Viewport canvas transform**"
msgstr "Viewport 與 Canvas 變換"

msgid ""
"The :ref:`canvas transform <class_Viewport_property_canvas_transform>` "
"affects all *CanvasItems* in the *Viewport's* default canvas. It also "
"affects *CanvasLayers*, that have follow viewport transform enabled. The "
"*Viewport's* active :ref:`Camera2D <class_Camera2D>` works by changing this "
"transform. It doesn't affect this *Viewport's* embedded *Windows*."
msgstr ""
"畫布轉換 <class_Viewport_property_canvas_transform>` 影響*Viewport's* 預設畫"
"布中的所有 *CanvasItems*。它還會影響啟用了跟隨視窗變換的 *CanvasLayers*。 *視"
"窗的*活動 :ref:`Camera2D <class_Camera2D>` 透過更改此轉換來運作。它不會影響此"
"*視窗*嵌入的*Windows*。"

msgid "**Viewport global canvas transform**"
msgstr "Viewport 與 Canvas 變換"

msgid ""
"*Viewports* also have a :ref:`global canvas transform "
"<class_Viewport_property_global_canvas_transform>`. This is the master "
"transform and affects all individual *Canvas Layer* and embedded *Window* "
"transforms. This is primarily used in Godot's CanvasItem Editor."
msgstr ""
"Viewport 也有一個全域 Canvas 變換 (該變換也是 :ref:`Transform2D "
"<class_Transform2D>`)。全域 Canvas 為主變換，會影響所有單獨的 **Canvas "
"Layer** 變換。一般來說，這種變換並不常用，但在 Godot 編輯器中的 CanvasItem 編"
"輯器中有用到。"

msgid "**Viewport stretch transform**"
msgstr "拉伸變換"

msgid ""
"Finally, *Viewports* have a *stretch transform*, which is used when resizing "
"or stretching the viewport. This transform is used for :ref:`Windows "
"<class_Window>` as described in :ref:`doc_multiple_resolutions`, but can "
"also be manually set on *SubViewports* by means of :ref:`size "
"<class_SubViewport_property_size>` and :ref:`size_2d_override "
"<class_SubViewport_property_size_2d_override>`. It's :ref:`translation "
"<class_Transform2D_method_get_origin>`, :ref:`rotation "
"<class_Transform2D_method_get_rotation>` and :ref:`skew "
"<class_Transform2D_method_get_skew>` are the default values and it can only "
"have non-default :ref:`scale <class_Transform2D_method_get_scale>`."
msgstr ""
"最後，*視口*具有*拉伸變換*，在調整視窗大小或拉伸視口時使用。此轉換用於 :ref:"
"`Windows <class_Window>`，如 :ref:`doc_multiple_resolutions` 中所述，但也可以"
"透過 :ref:`size <class_SubViewport_property_size>` 和 :ref:`size_2d_override "
"<class_SubViewport_property_size_2d_override>`。它的 :ref:`translation "
"<class_Transform2D_method_get_origin>`、 :ref:`rotation "
"<class_Transform2D_method_get_rotation>` 和 :ref:`skew "
"<class_Transform2D_method_get_skew>` 是預設值，且只能有非預設值 :ref:`scale "
"<class_Transform2D_method_get_scale>`。"

msgid "**Window transform**"
msgstr "**Window transform**"

msgid ""
"In order to scale and position the *Window's* content as described in :ref:"
"`doc_multiple_resolutions`, each :ref:`Window <class_Window>` contains a "
"*window transform*. It is for example responsible for the black bars at the "
"*Window's* sides so that the *Viewport* is displayed with a fixed aspect "
"ratio."
msgstr ""
"為了依照 doc_multiple_resolutions 中的描述縮放和定位*視窗的*內容，每個 "
"Window <class_Window> 都包含一個*視窗變換*。例如，它負責*視窗*兩側的黑條，以"
"便*視口*以固定的寬高比顯示。"

msgid "**Window position**"
msgstr "**Window position**"

msgid ""
"Every *Window* also has a :ref:`position <class_Window_property_position>` "
"to describe its position within its embedder. The embedder can be another "
"*Viewport* or the OS Window Manager."
msgstr ""
"每個 *Window* 都還有一個 :ref:`position <class_Window_property_position>`，描"
"述的是它在嵌入器中的位置。嵌入器可以是另一個 *Viewport*，也可以是作業系統視窗"
"管理器。"

msgid "**SubViewportContainer shrink transform**"
msgstr "Viewport 與 Canvas 變換"

msgid ""
":ref:`stretch <class_SubViewportContainer_property_stretch>` together with :"
"ref:`stretch_shrink <class_SubViewportContainer_property_stretch_shrink>` "
"declare for a *SubViewportContaner* if and by what integer factor the "
"contained *SubViewport* should be scaled in comparison to the container's "
"size."
msgstr ""
"stretch <class_SubViewportContainer_property_stretch>` 和 stretch_shrink "
"<class_SubViewportContainer_property_stretch_shrink>` 一起宣告 "
"*SubViewportContaner* 所包含的 *SubViewport* 是否應該相對於容器的大小進行縮放"
"以及按什麼整數因子縮放以及按什麼整數因子縮放以及按什麼整數因子縮放以及按什麼"
"整數因子縮放以及按什麼整數因子縮放以及按什麼整數因子縮放以及按什麼整數因子縮"
"放以及按什麼整數因子縮放以及按什麼整數因子縮放以及按什麼整數因子縮放以及按什"
"麼整數因子縮放。"

msgid "Translation status"
msgstr "翻譯狀態"
