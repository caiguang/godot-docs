# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Linux, \\*BSD"
msgstr "為 Linux, \\*BSD 進行編譯"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""
"這個頁面描述的是如何從源碼編譯 Linux 編輯器和匯出範本二進位檔案。如果你要找的"
"是匯出專案到 Linux，請閱讀 :ref:`doc_exporting_for_linux`。"

msgid "Requirements"
msgstr "系統需求"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr "若要在 Linux 或其他各種 Unix 下進行編譯，必須滿足下列條件："

msgid "GCC 7+ or Clang 6+."
msgstr "GCC 7+ 或 Clang 6+。"

msgid "`Python 3.6+ <https://www.python.org/downloads/>`_."
msgstr "`Python 3.5+ <https://www.python.org/downloads/>`_ 。"

msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr "`SCons 3.0+ <https://scons.org/pages/download.html>`_ 建置系統。"

msgid ""
"If your distribution uses Python 2 by default, or you are using a version of "
"SCons prior to 3.1.2, you will need to change the version of Python that "
"SCons uses by changing the shebang (the first line) of the SCons script file "
"to ``#! /usr/bin/python3``. Use the command ``which scons`` to find the "
"location of the SCons script file."
msgstr ""
"SCons 3.0+ 建置系統。若使用預設為 Python 2 的發行版，或使用 3.1.2 版以前的 "
"SCons，則必須更改 SCons 腳本檔的 Shebang (第一行) 為 ``#!/usr/bin/python3`` "
"來更改 SCons 使用的 Python 版本。可使用 ``which scons`` 指令來找到 SCons 腳本"
"的位置。"

msgid "pkg-config (used to detect the development libraries listed below)."
msgstr "pkg-config (用於偵測下方的相依性套件)。"

msgid "Development libraries:"
msgstr "ALSA 開發函式庫。"

msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr "X11, Xcursor, Xinerama, Xi 與 XRandR 開發函式庫。"

msgid "MesaGL."
msgstr "MesaGL."

msgid "ALSA."
msgstr "ALSA."

msgid "PulseAudio."
msgstr "音訊"

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "**可選** - libudev (使用 ``udev=yes`` 進行建置)。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "要獲取編譯所需的 Godot 源碼，請參閱 :ref:`doc_getting_source`。"

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有關配合 Godot 使用 SCons 的一般說明，請參考 :ref:"
"`doc_introduction_to_the_buildsystem` 。"

msgid "Distro-specific one-liners"
msgstr "用於各個發行版的單行安裝程式"

msgid "Alpine Linux"
msgstr "Alpine Linux"

msgid "Arch Linux"
msgstr "Arch Linux"

msgid "Debian/Ubuntu"
msgstr "Debian/Ubuntu"

msgid "Fedora"
msgstr "Fedora"

msgid "FreeBSD"
msgstr "FreeBSD"

msgid "Gentoo"
msgstr "Gentoo"

msgid "Mageia"
msgstr "Mageia"

msgid "OpenBSD"
msgstr "OpenBSD"

msgid "openSUSE"
msgstr "openSUSE"

msgid "NetBSD"
msgstr "NetBSD"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr "若要支援音訊，則可選擇性地安裝 ``pulseaudio`` 。"

msgid "Solus"
msgstr "Solus"

msgid "Compiling"
msgstr "編譯"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr "開啟終端機，移至 Godot 原始碼的根目錄然後輸入："

msgid ""
"Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of "
"``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the "
"`3.x branch of this documentation <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__."
msgstr ""
"在Godot 4.0之前，Linux/\\*BSD目標被稱為“x11”而不是“linuxbsd”。如果你想編譯"
"Godot 3.x，請確保使用本文檔的'3.x分支<https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>'_。"

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"若沒有出現什麼問題的話，最終產生的二進位可執行檔會被放在「bin」子資料夾中。該"
"執行檔包含了整個 Godot 遊戲引擎，且可不依賴任何相依性套件執行。執行該檔案會開"
"啟專案管理員。"

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr "若想使用 Clang 而不是 GCC 來編譯的話，請使用這個指令："

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr "在 OpenBSD 上似乎需要使用 Clang，否則無法正確建置字形。"

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons options "
"``target=template_release production=yes``."
msgstr ""
"若是要為正式環境編譯 Godot，則可以通過加上 ``target=release_debug`` SCons 選"
"項來讓最終產生的可執行檔更小且更快速。"

msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``lto=full``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""
"若使用 GCC 來編譯 Godot，則可以通過往 SCons 新增 ``use_lto=yes`` 選項來讓二進"
"位可執行檔更小更快。由於連結時期最佳化是很消耗記憶體的過程，所以在編譯時會需"
"要至少有 3GB 的可用記憶體。"

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"若想在客製化建置上使用與 Godot 官方釋出版本不同的編輯器設定，可以通過在 "
"``bin/`` 資料夾中建立檔名為 ``._sc_`` 或 ``_sc_`` 的檔案來開啟 :ref:"
"`doc_data_paths_self_contained_mode` 。"

msgid "Running a headless/server build"
msgstr "編譯無周邊版本與伺服器版本"

msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr "若要編譯用於以編輯器功能來自動化匯出專案的 **無周邊** 版本，請使用："

msgid "And then use the ``--headless`` command line argument::"
msgstr "然後使用“--headless”命令列參數::"

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"如果要編譯除錯版本的*伺服器*，支援:ref:`遠端除錯工具 "
"<doc_command_line_tutorial>`，那麼請使用： ::"

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr "若要編譯可執行專屬遊戲伺服器的 **伺服器** 版本，請使用："

msgid "Building export templates"
msgstr "建置匯出樣板"

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""
"Linux 二進位執行檔通常無法在比用來建置該執行檔還要舊的發行版上執行。若想提供"
"能在多數發行版上執行的二進位執行檔，請使用較舊的發行版來建置，如 Ubuntu "
"16.04。可以使用虛擬機或容器來設定一個適合的建置環境。"

msgid ""
"To build Linux or \\*BSD export templates, run the build system with the "
"following parameters:"
msgstr "若要建置 Linux, \\*BSD 匯出樣板，請使用下列參數來執行建置系統："

msgid "(32 bits)"
msgstr "(32 位元)"

msgid "(64 bits)"
msgstr "(64 位元)"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""
"請注意，可能無法為與目前宿主機環境不同的位元 (64/32) 進行交叉編譯時，有可能會"
"需要 Chroot 環境。"

msgid ""
"To create standard export templates, the resulting files in the ``bin/`` "
"folder must be copied to:"
msgstr "要建立標準的匯出樣板，則必須將產生的檔案複製至："

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux/X11\" by "
"Godot):"
msgstr "並將這些檔案如下命名 (在 Godot 中，\\*BSD 被視為「Linux X11」)："

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""
"但，若你正在撰寫客製化模組或自定 C++ 程式碼，則可能會需要在此將該二進位執行檔"
"設定為自定匯出樣板："

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""
"這種情況下甚至不需要複製檔案，只需要將這些檔案參照到 Godot 原始碼目錄的 "
"``bin/`` 資料夾下即可。這樣下次建置時，就會自動參照到自定樣板。"

msgid "Using Clang and LLD for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""
"也可以使用 Clang 與 LLD 來建置 Godot。使用 Clang 與 LLD 比起預設的 GCC + GNU "
"ld 有兩個好處："

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""
"LLD 與 GNU ld 或 gold 比起來，連結速度明顯快很多。這樣就可以迭代地更快。"

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr "Clang 比起 GCC，提供的錯誤訊息通常更有用。"

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""
"要使用 Clang 與 LLD，請先使用發行版的套件管理員來安裝 Clang 與 ``lld`` 套件，"
"然後使用下列 SCons 指令："

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""
"建構完成後，將在 ``bin/`` 資料夾中建立一個以 ``.llvm`` 為後綴的新的二進位檔"
"案。"

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""
"雖然我們依然建議正式版本使用 GCC 來建置，因為 GCC 可以配合連結時期最佳化來編"
"譯，產生的二進位執行檔也更小更快。"

msgid "If this error occurs::"
msgstr "如果出現此錯誤：："

msgid "There are two solutions:"
msgstr "Godot 沒有使用限制"

msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr "在 SCons 指令中，新增參數``use_static_cpp=no``。"

#, fuzzy
msgid ""
"Follow `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ to configure, build, and install "
"``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/"
"libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln -"
"s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure "
"the latest ``libatomic_ops`` will be used without the need to copy it "
"everytime when it is updated."
msgstr ""
"請依照這些說明<https://github.com/ivmai/libatomic_ops#installation-and-"
"usage>`__ 來設定、建置和安裝「libatomic_ops」。然後，將「/usr/lib/"
"libatomic_ops.a」複製到「/usr/lib/libatomic.a」。"

msgid "Using mold for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"For even faster linking compared to LLD, you can use `mold <https://github."
"com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""
"為了比 LLD 更快的鏈接，您可以使用 `mold <https://github.com/rui314/"
"mold>`__。 Mold 可以與 GCC 或 Clang 一起使用。"

msgid ""
"As of January 2023, mold is not readily available in Linux distribution "
"repositories, so you will have to install its binaries manually."
msgstr ""
"截至 2023 年 1 月，mold 在 Linux 發行版儲存庫中尚不可用，因此您必須手動安裝其"
"二進位。"

msgid ""
"Download mold binaries from its `releases page <https://github.com/rui314/"
"mold/releases/latest>`__."
msgstr ""
"在這份文件之外，你可能也會想看看 `Godot 的 demo 專案 <https://github.com/"
"godotengine/godot-demo-projects>`_。"

msgid ""
"Extract the ``.tar.gz`` file, then move the extraced folder to a location "
"such as ``.local/share/mold``."
msgstr ""
"解壓 ``.tar.gz`` 檔，然後將得到的資料夾移動到類似於 ``.local/share/mold`` 的"
"位置。"

msgid ""
"Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment "
"variable. For example, you can add the following line at the end of your "
"``$HOME/.bash_profile`` file:"
msgstr ""
"將 ``$HOME/.local/share/mold/bin`` 新增到使用者的 ``PATH`` 環境變數中。例如可"
"以在 ``$HOME/.bash_profile`` 檔的末尾加上以下內容："

msgid ""
"Open a new terminal (or run ``source \"$HOME/.bash_profile\"``), then use "
"the following SCons command when compiling Godot::"
msgstr ""
"打開新的終端（或者運作 ``source \"$HOME/.bash_profile\"``），然後使用以下 "
"SCons 命令編譯 Godot：::"

msgid "Using system libraries for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"`Godot bundles the source code of various third-party libraries. <https://"
"github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to "
"use system versions of third-party libraries instead. This makes the Godot "
"binary faster to link, as third-party libraries are dynamically linked. "
"Therefore, they don't need to be statically linked every time you build the "
"engine (even on small incremental changes)."
msgstr ""
"`Godot 捆綁了各種第三方函式庫的源程式碼。 <https://github.com/godotengine/"
"godot/tree/master/thirdparty>`__ 您可以選擇使用系統版本的第三方函式庫。這使"
"得 Godot 二進位檔案的連結速度更快，因為第三方函式庫是動態連結的。因此，它們不"
"需要在每次建立引擎時靜態連結（即使是小的差異量更改）。"

msgid ""
"However, not all Linux distributions have packages for third-party libraries "
"available (or they may not be up-to-date)."
msgstr ""
"但是，並非所有 Linux 發行版都有可用的第三方函式庫的軟體包（或者它們可能不是最"
"新的）。"

msgid ""
"Moving to system libraries can reduce linking times by several seconds on "
"slow CPUs, but it requires manual testing depending on your Linux "
"distribution. Also, you may not be able to use system libraries for "
"everything due to bugs in the system library packages (or in the build "
"system, as this feature is less tested)."
msgstr ""
"遷移到系統庫可以將慢速 CPU 上的連結時間縮短幾秒鐘，但需要手動測試，具體取決於"
"您的 Linux 發行版。此外，由於系統庫包中的錯誤（或建置系統中的錯誤，因為此功能"
"測試較少），您可能無法將系統庫用於所有內容。"

msgid ""
"To compile Godot with system libraries, install these dependencies *on top* "
"of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""
"要使用系統庫編譯 Godot，請在 doc_compiling_for_linuxbsd_oneliners 中列出的*頂"
"部*安裝這些依賴項："

msgid "**Fedora**"
msgstr "**Fedora**"

msgid ""
"After installing all required packages, use the following command to build "
"Godot:"
msgstr "安裝所有必需的軟體包後，使用以下命令建置 Godot："

msgid ""
"You can view a list of all built-in libraries that have system alternatives "
"by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""
"您可以透過執行「scons -h」來查看具有系統替代方案的所有內建庫的列表，然後尋找"
"以「builtin_」開頭的選項。"

msgid ""
"When using system libraries, the resulting library is **not** portable "
"across Linux distributions anymore. Do not use this approach for creating "
"binaries you intend to distribute to others, unless you're creating a "
"package for a Linux distribution."
msgstr ""
"使用系統函式庫時，產生的函式庫**不再**可跨 Linux 發行版移植。請勿使用此方法建"
"立要分發給其他人的二進位檔案，除非您正在為 Linux 發行版建立套件。"

msgid "Using Pyston for faster development"
msgstr "使用 Clang 與 LLD 來更快速地開發"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""
"你可以使用 `Pyston <https://www.pyston.org/>`__ 來運作 SCons。Pyston 是一種利"
"用了 JIT 的 Python 語言實作（SCons 就是使用 Python 編寫的）。目前它只相容 "
"Linux。Pyston 可以顯著加速差異量建構，經常可以達到 1.5× 和 2× 倍。可以將 "
"Pyston 與 Clang 和 LLD 組合，進行更快的建構。"

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""
"下載 `Pyston 的最新綠色版本 <https://github.com/pyston/pyston/releases/"
"latest>`__。"

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""
"將綠色的 ``.tar.gz`` 解壓到特定的位置，比如 `$HOME/.local/opt/pyston/`（必要"
"時請建立資料夾）。"

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""
"在命令列中，使用 ``cd`` 達到 Pyston 解壓出的資料夾，然後運作 ``./pyston -m "
"pip install scons``，在 Pyston 中安裝 SCons。"

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""
"為了便於通過 Pyston 運作 SCons，請建立一個指向其封裝腳本的符號連結，符號連結"
"的位置必須在你的 ``PATH`` 環境變數中： ::"

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""
"現在就不是執行 ``scons <建構參數>`` 了，要編譯 Godot 請執行 ``pyston-scons <"
"建構參數>``。"

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""
"如果建立符號連結後無法執行 ``pyston-scons``，請確定 ``$HOME/.local/bin/`` 是"
"目前使用者的 ``PATH`` 環境變數的一部分。"

msgid ""
"Alternatively, you can run ``python -m pip install pyston_lite_autoload`` "
"then run SCons as usual. This will automatically load a subset of Pyston's "
"optimizations in any Python program you run. However, this won't bring as "
"much of a performance improvement compared to installing \"full\" Pyston."
msgstr ""
"或者，您可以執行“python -m pip install pyston_lite_autoload”，然後照常執行 "
"SCons。這將自動在您執行的任何 Python 程式中載入 Pyston 最佳化的子集。然而，與"
"安裝「完整」Pyston 相比，這不會帶來那麼多的效能改進。"

msgid "Translation status"
msgstr "翻譯狀態"
