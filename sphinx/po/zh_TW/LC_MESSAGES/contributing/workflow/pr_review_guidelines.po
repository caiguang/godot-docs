# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Pull request review process"
msgstr "Pull Request 工作流程"

msgid ""
"This page is intended to provide insight into the pull request (PR) review "
"process that we aspire to. As such, it is primarily targeted at engine "
"maintainers who are responsible for reviewing and approving pull requests. "
"That being said, much of the content is useful for prospective contributors "
"wanting to know how to ensure that their PR is merged."
msgstr ""
"此頁面旨在深入了解我們渴望的拉取請求 (PR) 審核流程。因此，它主要針對負責審查"
"和批准拉取請求的引擎維護人員。話雖如此，大部分內容對於想要了解如何確保其 PR "
"被合併的潛在貢獻者來說都是有用的。"

msgid ""
"From a high level, the ideal life cycle of a pull request looks like the "
"following:"
msgstr "從高層次來看，拉取請求的理想生命週期如下所示："

msgid ""
"A contributor opens a PR that fixes a specific problem (optimally closing a "
"GitHub `issue <https://github.com/godotengine/godot>`_ or implementing a "
"`proposal <https://github.com/godotengine/godot-proposals>`_)."
msgstr ""
"貢獻者開啟修復特定問題的 PR（最好關閉 GitHub `issue <https://github.com/"
"godotengine/godot>`_ 或實作 `proposal <https://github.com/godotengine/godot-"
"建議>` _)。"

msgid ""
"Other contributors provide feedback on the PR (including reviewing and/or "
"approving the PR, as appropriate)."
msgstr "其他貢獻者提供有關 PR 的回饋（包括酌情審查和/或批准 PR）。"

msgid ""
"An engine maintainer reviews the code and provides feedback, requests "
"changes, or approves the pull request, as appropriate."
msgstr "引擎維護人員審查程式碼並根據需要提供回饋、請求變更或批准拉取請求。"

msgid ""
"Another maintainer reviews the code with a focus on code style/clarity and "
"approves it once satisfied."
msgstr ""
"另一位維護人員審查程式碼，重點關注程式碼風格/清晰度，並在滿意後批准它。"

msgid ""
"A team leader or a member of the `production team <https://godotengine.org/"
"teams#production>`_ merges the pull request if satisfied that it has been "
"sufficiently reviewed."
msgstr ""
"如果團隊領導者或「生產團隊<https://godotengine.org/teams#product>」的成員認為"
"拉取請求已充分審查，則可以合併拉取請求。"

msgid ""
"This document will explain steps 2, 3, 4, and 5 in more detail. For a more "
"detailed explanation of the pull request workflow please see the :ref:`pull "
"request workflow document <doc_pr_workflow>`."
msgstr ""
"本文件將更詳細地解釋步驟 2、3、4 和 5。有關拉取請求工作流程的更詳細說明，請參"
"閱拉取請求工作流程檔案 <doc_pr_workflow>`。"

msgid ""
"In practice these steps may blend together. Oftentimes maintainers will "
"provide comments on code style and code quality at the same time and will "
"approve a pull request for both."
msgstr ""
"在實踐中，這些步驟可以混合在一起。通常，維護人員會同時提供有關程式碼風格和程"
"式碼品質的評論，並批准對兩者的拉取請求。"

msgid ""
"Typically the first interaction on a pull request will be an engine "
"maintainer assigning tags to the pull request and flagging it for review by "
"someone familiar with that area of code."
msgstr ""
"通常，拉取請求的第一次互動將是引擎維護人員為拉取請求分配標籤，並將其標記為供"
"熟悉該程式碼區域的人員審查。"

msgid ""
"Engine maintainers are folks who are \"members\" of the Godot project "
"repository on GitHub and/or are listed on the `Teams page <https://"
"godotengine.org/teams>`_ on the Godot website. Maintainers are responsible "
"for a given area of the engine. Typically this means they are the people who "
"are given more trust to approve and recommend pull requests for merging."
msgstr ""
"和/或在 Godot 網站上的「團隊頁面 <https://godotengine.org/teams>」上列出的人"
"員。維護人員負責發動機的特定區域。通常，這意味著他們被給予更多信任來批准和推"
"薦合併拉取請求。"

msgid ""
"Even if you are not a maintainer, you can still help by reviewing code, "
"providing feedback on PRs and testing PRs locally on your machine to confirm "
"that they work as intended. Many of the currently active maintainers started "
"out doing this before they became maintainers."
msgstr ""
"即使您不是維護者，您仍然可以透過檢查程式碼、提供 PR 回饋以及在您的電腦上本地"
"測試 PR 來確認它們是否按預期工作來提供協助。許多目前活躍的維護者在成為維護者"
"之前就開始這樣做了。"

msgid "Code review and testing"
msgstr "程式碼評審與測試"

msgid ""
"The following is a list of things that contributors and engine maintainers "
"can do to conduct a substantive code review of a pull request."
msgstr "以下是貢獻者和引擎維護者可以對拉取請求進行實質程式碼審查的一系列操作。"

msgid ""
"If you want to conduct a code review, but can't do everything on this list, "
"say that in your review comment. For example, it is still very helpful to "
"provide comments on code, even if you can't build the pull request locally "
"to test the pull request (or vice versa). Feel free to review the code, just "
"remember to make a note at the end of your review that you have reviewed the "
"code only and have not tested the changes locally."
msgstr ""
"如果您想要進行程式碼審查，但無法執行此列表中的所有操作，請在您的審查評論中註"
"明。例如，即使您無法在本機上建立拉取請求來測試拉取請求（反之亦然），提供程式"
"碼註解仍然非常有幫助。請隨意審查程式碼，只需記住在審查結束時記下您僅審查了程"
"式碼，尚未在本地測試更改。"

msgid "1. Confirm that the problem exists"
msgstr "1、確認存在問題"

msgid ""
"PRs need to solve problems and problems need to be documented. Make sure "
"that the pull request links and closes (or at least addresses) a bug or a "
"proposal. If it doesn't, consider asking the contributor to update the "
"opening message of the PR to explain the problem that the PR aims to solve "
"in more detail."
msgstr ""
"PR 需要解決問題，問題需要記錄下來。確保拉取請求連結並關閉（或至少解決）錯誤或"
"提案。如果沒有，請考慮要求貢獻者更新 PR 的開頭訊息，以更詳細地解釋 PR 旨在解"
"決的問題。"

msgid ""
"It should be clear _why_ a pull request is needed before it is merged. This "
"assists reviewers in determining whether a PR does what it says it does and "
"it helps contributors in the future understand why the code is the way it is."
msgstr ""
"在合併之前應該要清楚_為什麼_需要拉取請求。這有助於審閱者確定 PR 是否按照其所"
"說的那樣進行操作，並幫助將來的貢獻者理解為什麼程式碼是這樣的。"

msgid "2. Test the PR and look for regressions"
msgstr "2、測試 PR 並搜尋 Regression"

msgid ""
"While strict code review and CI help to ensure that all pull requests work "
"as intended, mistakes happen and sometimes contributors push code that "
"creates a problem in addition to solving a problem. Maintainers will avoid "
"merging code that contains a regression even if it solves the problem as "
"intended."
msgstr ""
"雖然嚴格的程式碼審查和 CI 有助於確保所有拉取請求按預期工作，但錯誤還是會發"
"生，有時貢獻者推送的程式碼除了解決問題之外還會產生問題。維護者將避免合併包含"
"回歸的程式碼，即使它按預期解決了問題。"

msgid ""
"When reviewing a pull request, ensure that the PR does what it says it does "
"(i.e. fixes the linked bug or implements the new feature) and nothing "
"outside of the PR target area is broken by the change. You can do this by "
"running the editor and trying out some common functions of the editor "
"(adding objects to a scene, running GDScript, opening and closing menus "
"etc.). Also, while reviewing the code, look for suspicious changes in other "
"parts of the engine. Sometimes during rebasing changes slip through that "
"contributors are not aware of."
msgstr ""
"在審查拉取請求時，請確保 PR 按照其規定執行（即修復連結的錯誤或實作新功能），"
"並且 PR 目標區域以外的任何內容都不會因更改而受到破壞。您可以透過執行編輯器並"
"嘗試編輯器的一些常見功能（為場景新增物件、執行 GDScript、開啟和關閉功能表等）"
"來完成此操作。此外，在檢查程式碼時，請尋找引擎其他部分中的可疑變更。有時，在"
"變基過程中，貢獻者沒有意識到更改會被忽略。"

msgid "3. Do a code review"
msgstr "3、進行程式碼評審"

msgid ""
"Code reviews are usually done by people who are already experienced in a "
"given area. They may be able to provide ideas to make code faster, more "
"organized, or more idiomatic. But, even if you are not very experienced, you "
"may want to conduct a code review to provide feedback within the scope of "
"what you are comfortable reviewing. Doing so is valuable for the area "
"maintainer (as a second set of eyes on a problem is always helpful) and it "
"is also helpful for you as it will help you get more familiar with that area "
"of code and will expose you to how other people solve problems. In fact, "
"reviewing the code of experienced engine maintainers is a great way to get "
"to know the codebase."
msgstr ""
"程式碼審查通常由在特定領域已經有經驗的人來完成。他們也許能夠提供一些想法，讓"
"程式碼更快、更有條理、或更慣用。但是，即使您經驗不足，您也可能希望進行程式碼"
"審查，以在您願意審查的範圍內提供回饋。這樣做對於區域維護人員來說很有價值（因"
"為對問題的第二雙眼睛總是有幫助的），而且對您也有幫助，因為它將幫助您更熟悉該"
"區域的程式碼，並使您了解其他人是如何做的解決問題。事實上，查看經驗豐富的引擎"
"維護人員的程式碼是了解程式碼庫的好方法。"

msgid ""
"Here are some things to think about and look out for as you review the code:"
msgstr "評審程式碼時，可以對這些內容進行檢查："

msgid ""
"**Code only touches the areas announced in the PR (and the commit message).**"
msgstr "**程式碼僅涉及 PR（和提交資訊）中提及的領域。**"

msgid ""
"It can be tempting to fix random things in the code, as you see them. "
"However, this can quickly make a pull request difficult to review and can "
"make it hard to dig through in the commit history. Small touch-ups next to "
"the related area are alright, but often bugs that you can find along the way "
"are better fixed in their own PRs."
msgstr ""
"正如您所看到的，修復程式碼中的隨機內容可能很誘人。然而，這很快就會使拉取請求"
"難以審查，並且難以深入挖掘提交歷史記錄。相關區域旁邊的小修改是可以的，但通常"
"您可以在自己的 PR 中找到的錯誤得到更好的修復。"

msgid "**Code properly uses Godot's own APIs and patterns.**"
msgstr "**程式碼正確使用了 Godot 自己的 API 和模式。**"

msgid ""
"Consistency is very important, and a solution that already exists in the "
"codebase is preferable to an ad-hoc solution."
msgstr "一致性非常重要，程式碼庫中已經存在的解決方案比臨時解決方案更可取。"

msgid "**Are core areas affected by the change?**"
msgstr "**修改影響核心區域嗎？**"

msgid ""
"Sometimes a PR that is supposed to solve a local problem can have a far-"
"reaching effect way outside of its scope. Usually it is best to keep code "
"changes local to where the problem arises. If you think that the solution "
"requires changes outside the scope of the problem, it is usually best to "
"seek the opinion of a team leader who may have another idea for how to solve "
"the problem."
msgstr ""
"有時，旨在解決當地問題的公關可能會產生超出其範圍的深遠影響。通常最好將程式碼"
"變更保留在出現問題的本地位置。如果您認為解決方案需要在問題範圍之外進行更改，"
"通常最好尋求團隊領導的意見，他可能對如何解決問題有其他想法。"

msgid "4. Iterate with the contributor and improve the PR"
msgstr "4、與貢獻者反覆運算改進 PR"

msgid ""
"Maintainers should provide feedback and suggestions for improvement if they "
"spot things in the code that they would like changed. Preferably, "
"suggestions should come in order of importance: first, address overall code "
"design and the approach to solving the problem, then make sure the code is "
"complying with the engine's best practices, and lastly, do the :ref:`code "
"style review <doc_code_style_review>`."
msgstr ""
"如果維護人員發現程式碼中需要更改的內容，他們應該提供回饋和改進建議。最好，建"
"議應該按重要性順序排列：首先，解決整體程式碼設計和解決問題的方法，然後確保程"
"式碼符合引擎的最佳實踐，最後，進行程式碼風格審查< doc_code_style_review>`。"

msgid "**Communicate barriers to merging early in the review process.**"
msgstr "**在審查過程中儘早溝通合併的障礙。**"

msgid ""
"If the PR has clear blockers or will likely not get merged for whatever "
"other reason, that fact should be communicated as early and clearly as "
"possible. We want to avoid stringing people along because it feels bad to "
"say \"sorry, no\"."
msgstr ""
"如果 PR 有明顯的阻礙，或者可能由於任何其他原因而不會被合併，那麼應該儘早、清"
"楚地傳達這一事實。我們希望避免欺騙別人，因為說「對不起，不」感覺很不好。"

msgid ""
"As you review pull requests, keep the Godot `Code of Conduct <https://"
"godotengine.org/code-of-conduct>`_ in mind. Especially the following:"
msgstr ""
"當您審查拉取請求時，請牢記 Godot `行為準則 <https://godotengine.org/code-of-"
"conduct>`_。特別是以下內容："

msgid "Politeness is expected at all times. Be kind and courteous."
msgstr "任何時候都應該保持禮貌。保持友善和禮貌。"

msgid "Always assume positive intent from others."
msgstr "始終假設他人有正面的意圖。"

msgid "Feedback is always welcome but keep your criticism constructive."
msgstr "我們隨時歡迎提供回饋，但請保持您的批評具有建設性。"

msgid ""
"Here are some things to avoid as you iterate on a pull request with a "
"contributor:"
msgstr "與貢獻者反覆運算拉取請求時，請避免以下情況："

msgid "**Needless double reviews.**"
msgstr "**不必要的多次評審。**"

msgid ""
"In other words, review the full PR at once and avoid coming back endless "
"times to point out issues that you could have noted in the first review. Of "
"course, this can't always be avoided, but we should try to catch everything "
"at once."
msgstr ""
"換句話說，立即審查完整的 PR，避免無休止地回來指出您在第一次審查中可能注意到的"
"問題。當然，這並不總是可以避免的，但我們應該嘗試一次抓住一切。"

msgid "**Being overly nitpicky.**"
msgstr "**過於吹毛求疵。**"

msgid ""
"Code quality can be flexible depending on the area of the engine you are "
"working in. In general, our standard for code quality is much higher in core "
"areas and in performance-sensitive areas than it is in editor code for "
"example."
msgstr ""
"程式碼品質可以很靈活，這取決於您所使用的引擎區域。一般來說，我們的程式碼品質"
"標準在核心區域和效能敏感區域比在編輯器程式碼中要高得多。"

msgid "**Expanding the scope of a pull request.**"
msgstr "**擴大拉取請求的範圍。**"

msgid ""
"Providing context or related/similar issues or proposals that may be fixed "
"similarly can be helpful, but adding a \"may as well fix that thing over "
"there as well while at it\" or \"could we add to this as well?\" isn't "
"always fair to the contributor. Use your judgement when deciding whether "
"additional fixes are within scope, but try to keep the scope as close to the "
"original pull request as possible."
msgstr ""
"提供本文或相關/類似的問題或可以類似解決的建議可能會有所幫助，但新增“也可以解"
"決那裡的問題”或“我們也可以新增到此嗎？”對貢獻者並不總是公平的。在決定其他修復"
"是否在範圍內時，請使用您的判斷，但請嘗試使範圍盡可能接近原始拉取請求。"

msgid ""
"And ultimately, don't feel pressured to deal with the PR all alone. Feel "
"free to ask for a helping hand on the `Godot Contributors Chat <https://chat."
"godotengine.org>`_, in the appropriate channel or in #general. Other teams "
"may already be tagged for review, so you can also wait or ask for their "
"assistance."
msgstr ""
"最後，不要因為獨自處理公關而感到壓力。請隨時透過適當的管道或 #general在"
"「Godot 貢獻者聊天 <https://chat.godotengine.org>」_ 上尋求協助。其他團隊可能"
"已經被標記為需要審核，因此您也可以等待或要求他們的協助。"

msgid "5. Approve the pull request"
msgstr "開啟 PR"

msgid ""
"After reviewing the code, if you think that the code is ready to be merged "
"into the engine, then go ahead and \"approve\" it. Make sure to also comment "
"and specify the nature of your review (i.e. say whether you ran the code "
"locally, whether you reviewed for style as well as correctness, etc.). Even "
"if you are not an engine maintainer, approving a pull request signals to "
"others that the code is good and likely solves the problem the PR says it "
"does. Approving a pull request as a non-engine maintainer does not guarantee "
"that the code will be merged, other people will still review it, so don't be "
"shy."
msgstr ""
"檢查程式碼後，如果您認為程式碼已準備好合併到引擎中，那麼請繼續並「批准」它。"
"確保也會評論並指定您的審查的性質（即說明您是否在本地運作程式碼，您是否審查了"
"風格和正確性等）。即使您不是引擎維護者，批准拉取請求也會向其他人發出訊號，表"
"明程式碼很好，並且可能解決 PR 所說的問題。作為非引擎維護者批准拉取請求並不能"
"保證程式碼會被合併，其他人仍然會審查它，所以不要害羞。"

msgid "Code style review"
msgstr "程式碼樣式方針"

msgid ""
"Generally speaking, we aim to conduct a code review before a style/clarity "
"review as contributors typically want to know if their general approach is "
"acceptable before putting in the effort to make nitpicky changes to style. "
"In other words, maintainers shouldn't ask contributors to change the style "
"of code that may need to be rewritten in subsequent reviews. Similarly, "
"maintainers should avoid asking for contributors to rebase PRs if the PR has "
"not been reviewed."
msgstr ""
"一般來說，我們的目標是在風格/清晰度審查之前進行程式碼審查，因為貢獻者通常想知"
"道他們的一般方法是否可以接受，然後再對風格進行挑剔的更改。換句話說，維護者不"
"應該要求貢獻者更改可能需要在後續審查中重寫的程式碼風格。同樣，如果 PR 未經審"
"查，維護者應避免要求貢獻者重新調整 PR。"

msgid ""
"That being said, not everyone feels confident enough to provide a review on "
"code correctness, in that case, providing comments on code style and clarity "
"ahead of a more substantive code review is totally appropriate and more than "
"welcome."
msgstr ""
"話雖如此，並不是每個人都有足夠的信心來對程式碼的正確性進行審查，在這種情況"
"下，在進行更實質性的程式碼審查之前提供對程式碼風格和清晰度的評論是完全合適"
"的，並且非常受歡迎。"

msgid ""
"In practice the code style review can be done as part of the substantive "
"code review. The important thing is that both the substantive code and the "
"code style need to be reviewed and considered before a pull request is "
"merged."
msgstr ""
"在實踐中，程式碼風格審查可以作為實質程式碼審查的一部分來完成。重要的是，在合"
"併拉取請求之前，需要審查和考慮實質程式碼和程式碼風格。"

msgid ""
"When reviewing code style pay particular attention to ensuring that the pull "
"request follows the :ref:`doc_code_style_guidelines`. While ``clang-format`` "
"and various CI checks can catch a lot of inconsistencies, they are far from "
"perfect and are unable to detect some issues. For example, you should check "
"that:"
msgstr ""
"在審查程式碼風格時，請特別注意確保拉取請求遵循 doc_code_style_guidelines`。雖"
"然「clang-format」和各種 CI 檢查可以發現很多不一致之處，但它們遠非完美，無法"
"偵測到某些問題。例如，您應該檢查："

msgid "The style of header includes is respected."
msgstr "標題包含的樣式受到尊重。"

msgid "Identifiers use ``snake_case`` and follow our naming conventions."
msgstr "標識符使用“snake_case”並遵循我們的命名約定。"

msgid ""
"Method parameters start with ``p_*`` or ``r_*`` (if they are used to return "
"a value)."
msgstr "方法參數以``p_*`` 或``r_*`` 開頭（如果它們用於傳回值）。"

msgid "Braces are used appropriately, even for one-liner conditionals."
msgstr "即使是單行條件敘述，也可以適當地使用大括號。"

msgid ""
"Code is properly spaced (exactly one empty line between methods, no "
"unnecessary empty lines inside of method bodies)."
msgstr "程式碼間隔適當（方法之間只有一個空行，方法體內沒有不必要的空行）。"

msgid ""
"This list is not complete and doesn't aim to be complete. Refer to the "
"linked style guide document for a complete set of rules. Keep in mind that "
"``clang-format`` may not catch things you hope it would, so pay attention "
"and try to build a sense of what exactly it can and cannot detect."
msgstr ""
"此列表並不完整，也無意完整。有關完整的規則集，請參閱連結的樣式指南檔案。請記"
"住，「clang-format」可能無法捕捉您希望捕獲的內容，因此請注意並嘗試了解它到底"
"可以偵測到什麼，不能偵測到什麼。"

msgid "Merging pull requests"
msgstr "開啟 PR"

msgid ""
"In general, pull requests should only be merged by members of the production "
"team or team leaders for pull requests in their area of the engine. For "
"example, the networking team leader could merge a networking pull request "
"that doesn't substantially change non-networking sections of code."
msgstr ""
"一般來說，拉取請求只能由生產團隊成員或團隊負責人在其引擎區域內合併拉取請求。"
"例如，網路團隊負責人可以合併網路拉取請求，該請求不會實質更改程式碼的非網路部"
"分。"

msgid ""
"In practice it is best to wait for a member of the production team to merge "
"the pull request as they keep a close eye on the entire codebase and will "
"likely have a better sense of what other recent/upcoming changes this pull "
"request may conflict with (or any other reason that it may make sense to "
"delay the pull request). Feel free to leave a comment saying that the PR "
"should be ready to merge."
msgstr ""
"在實踐中，最好等待生產團隊的成員合併拉取請求，因為他們密切關注整個程式碼庫，"
"並且可能會更好地了解此拉取請求可能與哪些其他最近/即將發生的變更發生衝突（或延"
"遲拉取請求可能有意義的任何其他原因）。請隨意發表評論說 PR 應該準備好合併。"

msgid ""
"The following are the steps to take before merging a pull request. The "
"degree to which you adhere to these steps can be flexible for simple/"
"straightforward pull requests, but they should be carefully taken for "
"complex or risky pull requests."
msgstr ""
"以下是合併拉取請求之前要執行的步驟。對於簡單/直接的拉取請求，您遵守這些步驟的"
"程度可以很靈活，但對於複雜或有風險的拉取請求，應謹慎對待。"

msgid ""
"As a contributor you can help move a pull request forward by doing some of "
"these steps yourself."
msgstr "作為貢獻者，您可以透過自己執行其中一些步驟來幫助推動拉取請求。"

msgid "1. Get feedback from the right people/teams"
msgstr "1、從正確的人/團隊獲取回饋"

msgid ""
"Production team members should ensure that the right people look at a pull "
"request before it is merged. In some cases this may require multiple people "
"to weigh in. In other cases, only one substantive approval is needed before "
"the code can be merged."
msgstr ""
"生產團隊成員應確保在合併拉取請求之前由合適的人員查看。在某些情況下，這可能需"
"要多人參與。在其他情況下，只需獲得一項實質批准即可合併程式碼。"

msgid ""
"In general, try not to merge things based on one review alone, especially if "
"it is your own. Get a second opinion from another maintainer, and make sure "
"all the teams that may be impacted have been reasonably represented by the "
"reviewers. For example, if a pull request adds to the documentation, it's "
"often useful to let the area maintainers check it for factual correctness "
"and let documentation maintainers check it for formatting, style, and "
"grammar."
msgstr ""
"一般來說，盡量不要僅根據一項評論來合併內容，特別是如果它是您自己的。從另一位"
"維護者那裡獲取第二意見，並確保所有可能受影響的團隊都得到了審核者的合理代表。"
"例如，如果拉取請求新增到檔案中，那麼讓區域維護人員檢查它的事實正確性並讓檔案"
"維護人員檢查它的格式、樣式和語法通常很有用。"

msgid ""
"A good rule of thumb is that at least one subject matter expert should have "
"approved the pull request for correctness, and at least one other maintainer "
"should have approved the pull request for code style. Either of those people "
"could be the person merging the pull request."
msgstr ""
"一個好的經驗法則是，至少一名主題專家應該批准拉取請求的正確性，並且至少有一名"
"其他維護人員應該批准拉取請求的程式碼樣式。這些人中的任何一個都可能是合併拉取"
"請求的人。"

msgid ""
"Make sure that the reviews and approvals were left by people competent in "
"that specific engine area. It is possible that even a long-standing member "
"of the Godot organization left a review without having the relevant "
"expertise."
msgstr ""
"確保審查和批准是由該特定引擎領域的主管人員留下的。即使是戈多組織的長期成員也"
"有可能在不具備相關專業知識的情況下留下評論。"

msgid ""
"An easy way to find PRs that may be ready for merging is filtering by "
"approved PRs and sorting by recently updated. For example, in the main Godot "
"repository, you can use `this link <https://github.com/godotengine/godot/"
"pulls?q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-desc>`_."
msgstr ""
"尋找可能已準備好合併的 PR 的簡單方法是按已批准的 PR 進行篩選並按最近更新進行"
"排序。例如，在主 Godot 儲存庫中，您可以使用「此連結 <https://github.com/"
"godotengine/godot/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-"
"desc> `_。"

msgid "2. Get feedback from the community"
msgstr "2、從社區獲取回饋"

msgid ""
"If a pull request is having trouble attracting reviewers, you may need to "
"reach out more broadly to ask for help reviewing. Consider asking:"
msgstr ""
"如果拉取請求難以吸引審閱者，您可能需要更廣泛地尋求協助進行審查。考慮詢問："

msgid ""
"the person who reported the bug if the pull request fixes the bug for them,"
msgstr "如果拉取請求為他們修復了錯誤，則報告該錯誤的人，"

msgid ""
"contributors who have recently edited that file if they could take a look, or"
msgstr "最近編輯過該檔案的貢獻者（如果他們可以看一下），或者"

msgid ""
"a more experienced maintainer from another area if they could provide "
"feedback."
msgstr "來自其他領域的更有經驗的維護人員（如果他們可以提供回饋）。"

msgid "3. Git checklist"
msgstr "3、Git 注意事項"

msgid "**Make sure that the PR comes in one commit.**"
msgstr "**確保 PR 中只有一個提交。**"

msgid ""
"When each commit is self-contained and could be used to build a clean and "
"working version of the engine, it may be okay to merge a pull request with "
"multiple commits, but in general, we require that all pull requests only "
"have one commit. This helps us keep the Git history clean."
msgstr ""
"當每個提交都是獨立的並且可用於建構引擎的乾淨且可工作的版本時，將一個拉取請求"
"與多個提交合併可能是可以的，但一般來說，我們要求所有拉取請求只有一個提交。這"
"有助於我們保持 Git 歷史記錄的乾淨。"

msgid ""
"**Fixes made during the review process must be squashed into the main commit."
"**"
msgstr "**評審過程中作出的修改必須 Squash 到主提交中。**"

msgid ""
"For multi-commit PRs check that those fixes are amended in the relevant "
"commits, and are not just applied on top of everything."
msgstr ""
"對於多提交 PR，請檢查這些修復是否在相關提交中進行了修改，而不僅僅是應用於所有"
"內容。"

msgid "**Make sure that the PR has no merge conflicts.**"
msgstr "**確保 PR 沒有合併衝突。**"

msgid ""
"Contributors may need to rebase their changes on top of the relevant branch "
"(e.g. ``master`` or ``3.x``) and manually fix merge conflicts. Even if there "
"are no merge conflicts, contributors may need to rebase especially old PRs "
"as the GitHub conflict checker may not catch all conflicts, or the CI may "
"have changed since it was originally run."
msgstr ""
"貢獻者可能需要在相關分支（例如“master”或“3.x”）之上重新調整其更改，並手動修復"
"合併衝突。即使不存在合併衝突，貢獻者也可能需要重新設定特別是舊 PR 的基準，因"
"為 GitHub 衝突屬性面板可能無法捕獲所有衝突，或者 CI 自最初運作以來可能已發生"
"更改。"

msgid "**Check for proper commit attribution.**"
msgstr "**檢查正確的提交歸屬。**"

msgid ""
"If a contributor uses an author signature that is not listed in their GitHub "
"account, GitHub won't link the merged pull request to their account. This "
"keeps them from getting proper credit in the GitHub history and makes them "
"appear like a new contributor on the GitHub UI even after several "
"contributions."
msgstr ""
"如果貢獻者使用的作者簽章未在其 GitHub 帳戶中列出，則 GitHub 不會將合併的拉取"
"請求連結到其帳戶。這使他們無法在 GitHub 歷史記錄中獲得適當的榮譽，並使他們在 "
"GitHub UI 上看起來像新貢獻者，即使在多次貢獻之後也是如此。"

msgid ""
"Ultimately, it's up to the user if they want to fix it, but they can do so "
"by authoring the Git commit with the same email they use for their GitHub "
"account, or by adding the email they used for the Git commit to their GitHub "
"profile."
msgstr ""
"最終，使用者是否想要修復該問題取決於使用者，但他們可以透過使用用於GitHub 帳戶"
"的相同電子郵件來編寫Git 提交，或者將用於Git 提交的電子郵件新增到其GitHub 設定"
"檔中來實作此目的。"

msgid "**Check for proper commit messages.**"
msgstr "**檢查正確的提交消息。**"

msgid ""
"While we don't have a very strict ruleset for commit messages, we still "
"require them to be short yet descriptive and use proper English. As a "
"maintainer you've probably written them enough times to know how to make "
"one, but for a general template think about *\"Fix <issue> in <part of "
"codebase>\"*. For a more detailed recommendation see the `contributing.md "
"<https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#format-"
"your-commit-messages-with-readability-in-mind>`_ page in the main Godot "
"repository."
msgstr ""
"雖然我們沒有非常嚴格的提交訊息規則集，但我們仍然要求它們簡短而具有描述性，並"
"使用正確的英語。作為維護者，您可能已經編寫了足夠的程式碼來了解如何製作它們，"
"但對於通用模板，請考慮「修復<程式碼庫的一部分>中的<問題>」*。更詳細的建議，請"
"參閱`contributing.md <https://github.com/godotengine/godot/blob/master/"
"CONTRIBUTING.md#format-your-commit-messages-with-readability-in-mind>` _ "
"Godot 主儲存庫中的頁面。"

msgid "4. GitHub checklist"
msgstr "4、GitHub 注意事項"

msgid "**Validate the target branch of the PR.**"
msgstr "**確認 PR 的目標分支。**"

msgid ""
"Most Godot development happens around in the ``master`` branch. Therefore "
"most pull requests must be made against it. From there pull requests can "
"then be backported to other branches. Be wary of people making PRs on the "
"version they are using (e.g, ``3.3``) and guide them to make a change "
"against a higher-order branch (e.g. ``3.x``). If the change is not "
"applicable for the ``master`` branch, the initial PR can be made against the "
"current maintenance branch, such as ``3.x``. It's okay for people to make "
"multiple PRs for each target branch, especially if the changes cannot be "
"easily backported. Cherry-picking is also an option, if possible. Use the "
"appropriate labels if the PR can be cherrypicked (e.g. ``cherrypick:3.x``)."
msgstr ""
"大多數 Godot 開發都發生在「master」分支。因此，大多數拉取請求必須針對它提出。"
"然後，拉取請求可以從那裡向後移植到其他分支。警惕在他們正在使用的版本（例"
"如“3.3”）上製作 PR 的人，並引導他們針對更高階的分支（例如“3.x”）進行更改。如"
"果變更不適用於「master」分支，則可以針對目前維護分支（例如「3.x」）進行初始 "
"PR。人們可以為每個目標分支建立多個 PR，特別是在變更無法輕鬆向後移植的情況下。"
"如果可能的話，挑選櫻桃也是一種選擇。如果可以對 PR 進行挑選（例"
"如“cherrypick:3.x”），請使用適當的標籤。"

msgid ""
"It is possible to change the target branch of the PR, that has already been "
"submitted, but be aware of the consequences. As it cannot be synchronized "
"with the push, the target branch change will inevitable tag the entire list "
"of maintainers for review. It may also render the CI incapable of running "
"properly. A push should help with that, but if nothing else, recommend "
"opening a new, fresh PR."
msgstr ""
"可以更改已提交的 PR 的目標分支，但請注意後果。由於無法與推送同步，目標分支的"
"變更必然會標記整個維護者列表以供審核。它還可能導致 CI 無法正常運作。推動應該"
"會有所幫助，但如果沒有別的辦法，建議開設一個新的 PR。"

msgid "**Make sure that the appropriate milestone is assigned.**"
msgstr "**確保分配了合適的里程碑。**"

msgid ""
"This will make it more obvious which version would include the submitted "
"changes, should the pull request be merged now. Note, that the milestone is "
"not a binding contract and does not guarantee that this version is "
"definitely going to include the PR. If the pull request is not merged before "
"the version is released, the milestone will be moved (and the PR itself may "
"require a target branch change)."
msgstr ""
"如果現在合併拉取請求，這將使哪個版本將包含提交的變更更加明顯。請注意，里程碑"
"不是具有約束力的合同，並且不保證此版本一定會包含 PR。如果在版本發布之前未合併"
"拉取請求，則里程碑將被移動（且 PR 本身可能需要目標分支變更）。"

msgid ""
"Similarly, when merging a PR with a higher milestone than the current "
"version, or a \"wildcard\" milestone (e.g. \"4.x\"), ensure to update the "
"milestone to the current version."
msgstr ""
"同樣，當合併具有比目前版本更高的里程碑或「通配符」里程碑（例如「4.x」）的 PR "
"時，請確保將里程碑更新至目前版本。"

msgid ""
"**Make sure that the opening message of the PR contains the magic words "
"\"Closes #...\" or \"Fixes #...\".**"
msgstr "**確保 PR 消息的開頭包含“Closes #...”或“Fixes #...”咒語。**"

msgid ""
"These link the PR and the referenced issue together and allow GitHub to auto-"
"close the latter when you merge the changes. Note, that this only works for "
"the PRs that target the ``master`` branch. For others you need to pay "
"attention and close the related issues manually. Do it with *\"Fixed by #..."
"\"* or *\"Resolved by #...\"* comment to clearly indicate the act for future "
"contributors."
msgstr ""
"這些將 PR 和引用的問題連結在一起，並允許 GitHub 在您合併更改時自動關閉後者。"
"請注意，這僅適用於針對「master」分支的 PR。對於其他問題，您需要關注並手動關閉"
"相關問題。使用 *“Fixed by #...”* 或 *“Resolved by #...”* 註解來明確指示未來貢"
"獻者的行為。"

msgid ""
"**For the issues that get closed by the PR add the closest relevant "
"milestone.**"
msgstr "**為 PR 所關閉的 Issue 新增最近的相關里程碑。**"

msgid ""
"In other words, if the PR is targeting the ``master`` branch, but is then "
"also cherrypicked for ``3.x``, the next ``3.x`` release would be the "
"appropriate milestone for the closed issue."
msgstr ""
"換句話說，如果 PR 的目標是“master”分支，但隨後也被挑選為“3.x”，則下一個“3."
"x”版本將是已解決問題的適當里程碑。"

msgid "5. Merge the pull request"
msgstr "更改 PR"

msgid ""
"If it is appropriate for you to be merging a pull request (i.e. you are on "
"the production team or you are the team leader for that area), you are "
"confident that the pull request has been sufficiently reviewed, and once you "
"carry out these steps you can go ahead and merge the pull request."
msgstr ""
"如果您適合合併拉取請求（即您是生產團隊的成員或您是該領域的團隊領導），那麼您"
"確信該拉取請求已得到充分審查，並且一旦執行了這些步驟您可以繼續合併拉取請求。"

msgid "Translation status"
msgstr "翻譯狀態"
