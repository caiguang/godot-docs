# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Bisect 迴歸"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"Bisect 是一種在軟體中找出迴歸 (Regression) 的方法。當在 `GitHub 上的 Godot 儲"
"存庫 <https://github.com/godotengine/godot>`__ 上回報 Bug 後，可能會有貢獻者"
"要求你 **Bisect** 該問題。通過 Bisect 便能讓貢獻者進一步瞭解是哪個 Commit 造"
"成該問題的，進而更快修正 Bug。大家會很感謝你的努力 :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr "本指南解釋如何通過 Bisect 來找出迴歸。"

msgid "What is bisecting?"
msgstr "什麼是 Bisect？"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot 開發人員使用 `Git <https://git-scm.com/>`__ 版本控制系統。在 Git 的脈路"
"下，Bisect 是一個手動進行 `二分搜尋 <https://zh.wikipedia.org/zh-tw/"
"%E4%BA%8C%E5%88%86%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95>`__ 來判斷迴"
"歸是何時產生的一個過程。雖然通常 Bisect 是用來找出 Bug 的，但也可以用來找出如"
"效能迴歸等其他未預期的改動。"

msgid "Using official builds to speed up bisecting"
msgstr "使用官方建置來加快 Bisect"

msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""
"在使用 Git 的 ``bisect`` 指令前，我們強烈建議試著通過較舊版本 (或較新) 的官方"
"釋出版本來嘗試重現 Bug。這樣一來可以大幅降低可能需要用來從原始碼建置並進行測"
"試的 Commit 範圍。可以在 `此處 <https://downloads.tuxfamily.org/godotengine/"
">`__ 找到官方釋出版本、Alpha 版、RC 版的二進位檔。"

msgid ""
"If you have experience with Godot 3.x and can reproduce an issue with Godot "
"4.0, we recommend trying to reproduce the issue in the latest Godot 3.x "
"version (if the feature exhibiting the bug is present in 3.x). This can be "
"used to check whether the issue is a regression in 4.0 or not."
msgstr ""
"如果您有使用 Godot 3.x 的經驗並且可以使用 Godot 4.0 重現問題，我們建議您嘗試"
"在最新的 Godot 3.x 版本中重現問題（如果 3.x 中存在顯示錯誤的功能）。這可以用"
"來檢查問題是否為 4.0 中的迴歸。"

msgid ""
"If the issue **is present** in 3.x, then you'll need to check whether the "
"issue occurs in older 3.x versions as well."
msgstr ""
"如果 3.x 中**存在**問題，那麼您需要檢查較早的 3.x 版本中是否也出現該問題。"

msgid ""
"If the issue is **not present** in 3.x, then you can try older 4.0 alphas "
"and betas to determine when the regression started."
msgstr ""
"如果問題在 3.x 中**不存在**，那麼您可以嘗試較舊的 4.0 alpha 和 beta 來確定回"
"歸何時開始。"

msgid ""
"Project files may be incompatible between Godot versions. **Make a backup of "
"your project** before starting the bisection process."
msgstr ""
"Godot 版本之間的專案檔案可能不相容。 **開始二分程式之前，先備份您的專案**。"

msgid ""
"Going from the oldest to the newest build generally reduces the risk of the "
"project not being able to successfully open in the editor, thanks to "
"backwards compatibility. Try to reduce your project to the smallest "
"repeatable example too. The more minimal the project is, the more likely "
"you'll be able to open it without compatibility issues in newer engine "
"versions."
msgstr ""
"由於向後相容性，從最舊的版本到最新的版本通常會降低專案無法在編輯器中成功開啟"
"的風險。也嘗試將您的專案縮減為最小的可重複範例。專案越小，您就越有可能在較新"
"的引擎版本中開啟它而不會出現相容性問題。"

msgid "The Git bisect command"
msgstr "Git 的 Bisect 指令"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"如果在上述測試過程中找到了沒有出現該 Bug 的建置，則可以開始 Bisect 迴歸。Git "
"版本控制系統提供了一個內建指令來進行 Bisect 迴歸： ``git bisect`` 。有了這個"
"指令便可將此一過程半自動化，只需要建置引擎並嘗試重現該 Bug 即可。"

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"在 Bisect 迴歸前，需要先建置用於從原始碼編譯 Godot 的建置環境。要設定建置環"
"境，請參考與建置目標平台對應的 :ref:`編譯 <toc-devel-compiling>` 頁面。(從原"
"始碼編譯 Godot 並不需要 C++ 程式設計知識。)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"請主義，在較慢的硬體上編譯 Godot 可能會花費一些時間 (在較慢的雙核 CPU 上，每"
"個建置可能會花費高達一個小時)。這表示，整個過程可能會耗費數個小時。如果你使用"
"較慢的硬體，則你可以停在這裡，並在 GitHub Issue 上回報你在「Bisect 前」的結果"
"來讓其他貢獻者能從此處繼續進行 Bisect。"

msgid "Determine the commit hashes"
msgstr "確定提交雜湊"

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"要開始 Bisect，首先必須先判斷「壞的」與「好的」建置的 Commit 雜湊 (識別項)。"
"「壞的」代表會出現 Bug 的建置，而「好的」則代表不會出現該 Bug 的版本。如果使"
"用預釋出的建置來當作「好的」或「壞的」建置，則請瀏覽 `下載鏡像 <https://"
"downloads.tuxfamily.org/godotengine/>`__ 頁面，前往包含你下載的預釋出版本的資"
"料夾內，然後找到 ``README.txt`` 檔案。該檔案內有寫上 Commit 雜湊。"

msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr ""
"如果你使用穩定版來作為「好的」或「壞的」建置，則請依據版本來使用下列其一 "
"Commit 雜湊："

msgid ""
"You can also use this Bash function to retrieve the Git commit hash of a pre-"
"release build (add it to your ``$HOME/.bashrc`` or similar):"
msgstr ""
"您也可以使用此 Bash 函式來檢索預發布版本的 Git 提交雜湊（將其新增至您的 "
"``$HOME/.bashrc`` 或類似檔案）："

msgid "Example usage:"
msgstr "範例："

msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash. Note that unlike tagged releases or snapshot "
"commit hashes, ``master`` is a perpetually moving target."
msgstr ""
"如果要參照 master 分支的最新狀態，則可以使用 ``master`` 來代替 Commit 雜湊。"

msgid "Build the engine"
msgstr "建置 Mono 執行環境"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`使用 Git 來取得 Godot 的原始碼 <doc_getting_source>` 。完成後，在終端機"
"視窗內使用 ``cd`` 來移動至 Godot 儲存庫資料夾內，然後輸入下列指令："

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "編譯 Godot。此處假設你已經設定好了建置環境："

msgid "Run the engine"
msgstr "執行遊戲"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr "執行 ``bin/`` 資料夾內的二進位檔，然後嘗試復現 Bug。"

msgid ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` in ``bin/`` to make "
"sure you're actually running the binary you've just compiled. Different "
"Godot versions will output binaries with different names."
msgstr ""
":ref:`仔細檢查 ``bin/`` 中的輸出檔案名稱 "
"<doc_introduction_to_the_buildsystem_resulting_binary>` 以確保您實際上正在執"
"行剛剛編譯的二進位檔案。不同的 Godot 版本將輸出具有不同名稱的二進位。"

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "若該建置中 **依然** 會遇到 Bug，則請執行下列指令："

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "如果該建置 **沒有** 出現 Bug，請執行下列指令："

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"輸入上述其中一個指令後，Git 會切換到不同的 Commit 上。接著應再次建置 Godot、"
"嘗試復現 Bug、然後依據結果輸入 ``git bisect good`` 或 ``git bisect bad`` 。這"
"個過程會需要重複多次。Commit 的範圍越大、就需要越多步驟。通常需要 5 到 10 個"
"步驟才足夠找出大多數的迴歸；Git 會提示還剩下幾個步驟 (最糟情況下的剩餘步驟)。"

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"完成了足夠的步驟後，Git 會顯示該迴歸出現的 Commit 雜湊。請將該 Commit 雜湊寫"
"在所 Bisect 的 GitHub Issue 留言上。這樣有助於解決該問題。再次感謝你參與貢獻 "
"Godot :)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""
"有關 ``git bisect`` 的完整說明文件可以參考 `此處 <https://git-scm.com/docs/"
"git-bisect>`__ 。"

msgid "Translation status"
msgstr "翻譯狀態"
