# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "GDScript reference"
msgstr "Zmiana aktualnej sceny"

#, fuzzy
msgid ""
":ref:`GDScript<doc_gdscript>` is a high-level, `object-oriented <https://en."
"wikipedia.org/wiki/Object-oriented_programming>`_, `imperative <https://en."
"wikipedia.org/wiki/Imperative_programming>`_, and `gradually typed <https://"
"en.wikipedia.org/wiki/Gradual_typing>`_ programming language built for "
"Godot. It uses an indentation-based syntax similar to languages like `Python "
"<https://en.wikipedia.org/wiki/Python_%28programming_language%29>`_. Its "
"goal is to be optimized for and tightly integrated with Godot Engine, "
"allowing great flexibility for content creation and integration."
msgstr ""
"*GDScript* jest wysokopoziomowym, dynamicznie typowanym językiem do "
"tworzenia treści. Używa składni podobnej do `Pythona <https://en.wikipedia."
"org/wiki/Python_%28programming_language%29>`_ (bloki są oparte na wcięciach "
"i wiele słów kluczowych jest podobnych). Jego celem jest optymalizacja i "
"ścisła integracja z Godot Engine, pozwalając na dużą elastyczność w "
"tworzeniu i integracji treści."

msgid "GDScript is entirely independent from Python and is not based on it."
msgstr ""

msgid "History"
msgstr "Historia"

msgid ""
"Documentation about GDScript's history has been moved to the :ref:"
"`Frequently Asked Questions <doc_faq_what_is_gdscript>`."
msgstr ""

msgid "Example of GDScript"
msgstr "Przykład GDScript"

#, fuzzy
msgid ""
"Some people can learn better by taking a look at the syntax, so here's an "
"example of how GDScript looks."
msgstr ""
"Niektórzy ludzie mogą się lepiej uczyć patrząc na składnię, więc jest to "
"prosty przykład jak wygląda GDScript."

msgid ""
"If you have previous experience with statically typed languages such as C, C+"
"+, or C# but never used a dynamically typed one before, it is advised you "
"read this tutorial: :ref:`doc_gdscript_more_efficiently`."
msgstr ""
"Jeśli masz wcześniejsze doświadczenia z językami statycznie typowanymi "
"takimi jak C, C++ lub C#, ale nigdy wcześniej nie używałeś języka "
"dynamicznie typowanego, zalecane jest przeczytanie tego samouczka: :ref:"
"`doc_gdscript_more_efficiently`."

msgid "Language"
msgstr "Język"

msgid ""
"In the following, an overview is given to GDScript. Details, such as which "
"methods are available to arrays or other objects, should be looked up in the "
"linked class descriptions."
msgstr ""
"Poniżej przedstawiono przegląd GDScript. Szczegóły, takie jak metody "
"dostępne dla tablic lub innych obiektów, należy sprawdzić w powiązanych "
"opisach klas."

msgid "Identifiers"
msgstr "Identyfikatory"

msgid ""
"Any string that restricts itself to alphabetic characters (``a`` to ``z`` "
"and ``A`` to ``Z``), digits (``0`` to ``9``) and ``_`` qualifies as an "
"identifier. Additionally, identifiers must not begin with a digit. "
"Identifiers are case-sensitive (``foo`` is different from ``FOO``)."
msgstr ""
"Każdy ciąg znaków, który ogranicza się do znaków alfabetycznych ( ``a`` do "
"``z`` i ``A`` do ``Z``), cyfr (``0`` do ``9``) i ``_`` kwalifikuje się jako "
"identyfikator. Ponadto identyfikatory nie mogą rozpoczynać się cyfrą. W "
"identyfikatorach wielkość liter ma znaczenie (``ziemniak`` jest różny od "
"``ZIEMNIAK``)."

msgid ""
"Identifiers may also contain most Unicode characters part of `UAX#31 "
"<https://www.unicode.org/reports/tr31/>`__. This allows you to use "
"identifier names written in languages other than English. Unicode characters "
"that are considered \"confusable\" for ASCII characters and emoji are not "
"allowed in identifiers."
msgstr ""

msgid "Keywords"
msgstr "Słowa kluczowe"

msgid ""
"The following is the list of keywords supported by the language. Since "
"keywords are reserved words (tokens), they can't be used as identifiers. "
"Operators (like ``in``, ``not``, ``and`` or ``or``) and names of built-in "
"types as listed in the following sections are also reserved."
msgstr ""
"Poniżej znajduje się lista słów kluczowych obsługiwanych przez ten język. "
"Ponieważ słowa kluczowe są słowami zastrzeżonymi (tokenami), nie mogą być "
"używane jako identyfikatory. Operatorzy (jak ``in``, ``not``, ``and`` lub "
"`or``) oraz nazwy wbudowanych typów jak wymienione w poniższych sekcjach są "
"również zastrzeżone."

msgid ""
"Keywords are defined in the `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ in "
"case you want to take a look under the hood."
msgstr ""
"Słowa kluczowe są zdefiniowane w `GDScript tokenizer <https://github.com/"
"godotengine/godot/blob/master/modules/gdscript/gdscript_tokenizer.cpp>`_ w "
"przypadku, gdybyś chciał zajrzeć pod maskę silnika."

msgid "Keyword"
msgstr "Słowo kluczowe"

msgid "Description"
msgstr "Opis"

msgid "if"
msgstr "if"

msgid "See `if/else/elif`_."
msgstr "Zobacz `if/else/elif`_."

msgid "elif"
msgstr "elif"

msgid "else"
msgstr "else"

msgid "for"
msgstr "for"

msgid "See for_."
msgstr "Zobacz for_."

msgid "while"
msgstr "while"

msgid "See while_."
msgstr "Zobacz while_."

msgid "match"
msgstr "match"

msgid "See match_."
msgstr "Zobacz match_."

msgid "break"
msgstr "break"

msgid "Exits the execution of the current ``for`` or ``while`` loop."
msgstr "Wychodzi z bieżącej pętli ``for`` lub ``while``."

msgid "continue"
msgstr "continue"

msgid ""
"Immediately skips to the next iteration of the ``for`` or ``while`` loop."
msgstr ""
"Natychmiast przechodzi do następnej iteracji pętli ``for`` lub ``while``."

msgid "pass"
msgstr "przejście"

msgid ""
"Used where a statement is required syntactically but execution of code is "
"undesired, e.g. in empty functions."
msgstr ""
"Stosuje się tam, gdzie wyrażenie jest wymagane składniowo, ale wykonanie "
"kodu jest niepożądane, np. w pustych funkcjach."

msgid "return"
msgstr "return"

msgid "Returns a value from a function."
msgstr "Zwraca wartość funkcji."

msgid "class"
msgstr "klasa"

#, fuzzy
msgid "Defines an inner class. See `Inner classes`_."
msgstr "Klasa wewnętrzna w pliku innej klasy."

#, fuzzy
msgid "class_name"
msgstr "class"

msgid ""
"Defines the script as a globally accessible class with the specified name. "
"See `Registering named classes`_."
msgstr ""

msgid "extends"
msgstr "extends"

msgid "Defines what class to extend with the current class."
msgstr "Definiuje rozszerzenie bieżącej klasy o inną klasę."

msgid "is"
msgstr "is"

#, fuzzy
msgid ""
"Tests whether a variable extends a given class, or is of a given built-in "
"type."
msgstr "Sprawdza, czy dana zmienna rozszerza daną klasę."

#, fuzzy
msgid "in"
msgstr "Podpowiedz"

msgid ""
"Tests whether a value is within a string, array, range, dictionary, or node. "
"When used with ``for``, it iterates through them instead of testing."
msgstr ""

#, fuzzy
msgid "as"
msgstr "case"

msgid "Cast the value to a given type if possible."
msgstr ""

msgid "self"
msgstr "self"

msgid "Refers to current class instance."
msgstr "Odnosi się do aktualnej instancji klasy."

msgid "signal"
msgstr "signal"

msgid "Defines a signal."
msgstr "Definiuje sygnał."

msgid "func"
msgstr "func"

msgid "Defines a function."
msgstr "Definiuje funkcję."

msgid "static"
msgstr "static"

#, fuzzy
msgid "Defines a static function or a static member variable."
msgstr "Definiuje statyczną funkcję. Zmienne statyczne nie są dozwolone."

msgid "const"
msgstr "const"

msgid "Defines a constant."
msgstr "Definiuje stałą."

msgid "enum"
msgstr "enum"

msgid "Defines an enum."
msgstr "Definiuje wyliczenie."

msgid "var"
msgstr "var"

msgid "Defines a variable."
msgstr "Definiuje zmienną."

msgid "breakpoint"
msgstr "breakpoint"

msgid ""
"Editor helper for debugger breakpoints. Unlike breakpoints created by "
"clicking in the gutter, ``breakpoint`` is stored in the script itself. This "
"makes it persistent across different machines when using version control."
msgstr ""

msgid "preload"
msgstr "preload"

msgid "Preloads a class or variable. See `Classes as resources`_."
msgstr "Ładuje za w czasu klasę albo zmienną. Zobacz `Classes as resources`_."

msgid "await"
msgstr ""

msgid ""
"Waits for a signal or a coroutine to finish. See `Awaiting for signals or "
"coroutines`_."
msgstr ""

msgid "yield"
msgstr "yield"

msgid "Previously used for coroutines. Kept as keyword for transition."
msgstr ""

msgid "assert"
msgstr "assert"

msgid ""
"Asserts a condition, logs error on failure. Ignored in non-debug builds. See "
"`Assert keyword`_."
msgstr ""
"Sygnalizuje stan, rejestruje błąd w przypadku awarii. Ignorowane przy trybie "
"niedebugowanym. Patrz słowo kluczowe `Assert`_."

#, fuzzy
msgid "void"
msgstr "**void**"

msgid "Used to represent that a function does not return any value."
msgstr ""

msgid "PI"
msgstr "PI"

msgid "PI constant."
msgstr "Stała Pi."

msgid "TAU"
msgstr "TAU"

msgid "TAU constant."
msgstr "Stała Tau."

msgid "INF"
msgstr "INF"

#, fuzzy
msgid "Infinity constant. Used for comparisons and as result of calculations."
msgstr "Stała nieskończoności. Służy do porównań."

msgid "NAN"
msgstr "NAN"

#, fuzzy
msgid ""
"NAN (not a number) constant. Used as impossible result from calculations."
msgstr "stała NAN (nie liczba). Służy do porównań."

msgid "Operators"
msgstr "Operatory"

msgid "The following is the list of supported operators and their precedence."
msgstr ""
"Poniżej znajduje się lista obsługiwanych operatorów i ich pierwszeństwo."

msgid "**Operator**"
msgstr "**Operator**"

msgid "**Description**"
msgstr "**Opis**"

#, fuzzy
msgid "``(`` ``)``"
msgstr "``<<`` ``>>``"

#, fuzzy
msgid "Grouping (highest priority)"
msgstr "Właściwości węzła"

msgid ""
"Parentheses are not really an operator, but allow you to explicitly specify "
"the precedence of an operation."
msgstr ""

msgid "``x[index]``"
msgstr "``x[indeks]``"

#, fuzzy
msgid "Subscription"
msgstr "Opis"

msgid "``x.attribute``"
msgstr "``x.atrybut``"

#, fuzzy
msgid "Attribute reference"
msgstr "Odwołanie do atrybutu"

msgid "``foo()``"
msgstr ""

#, fuzzy
msgid "Function call"
msgstr "Funkcje"

msgid "``await x``"
msgstr ""

msgid "`Awaiting for signals or coroutines`_"
msgstr ""

#, fuzzy
msgid "``x is Node``"
msgstr "Konfiguracja węzła"

#, fuzzy
msgid "Type checking"
msgstr "Testowanie"

msgid ""
"See also :ref:`is_instance_of() <class_@GDScript_method_is_instance_of>` "
"function."
msgstr ""

msgid "``x ** y``"
msgstr ""

msgid "Power"
msgstr ""

msgid ""
"Multiplies ``x`` by itself ``y`` times, similar to calling :ref:`pow() "
"<class_@GlobalScope_method_pow>` function."
msgstr ""

msgid ""
"**Note:** In GDScript, the ``**`` operator is `left-associative <https://en."
"wikipedia.org/wiki/Operator_associativity>`_. See a detailed note after the "
"table."
msgstr ""

msgid "``~x``"
msgstr ""

msgid "Bitwise NOT"
msgstr "Bitowe NOT"

msgid "``+x``"
msgstr ""

msgid "``-x``"
msgstr "``-x``"

#, fuzzy
msgid "Identity / Negation"
msgstr "Wcięcia"

msgid "``x * y``"
msgstr ""

msgid "``x / y``"
msgstr ""

msgid "``x % y``"
msgstr ""

msgid "Multiplication / Division / Remainder"
msgstr "Mnożenie / Dzielenie / Reszta z dzielenia"

msgid ""
"The ``%`` operator is additionally used for :ref:`format strings "
"<doc_gdscript_printf>`."
msgstr ""

msgid ""
"**Note:** These operators have the same behavior as C++, which may be "
"unexpected for users coming from Python, JavaScript, etc. See a detailed "
"note after the table."
msgstr ""

msgid "``x + y``"
msgstr ""

msgid "``x - y``"
msgstr ""

#, fuzzy
msgid "Addition (or Concatenation) / Subtraction"
msgstr "Dodawanie / Odejmowanie"

msgid "``x << y``"
msgstr ""

msgid "``x >> y``"
msgstr ""

#, fuzzy
msgid "Bit shifting"
msgstr "Przesunięcie bitowe"

msgid "``x & y``"
msgstr ""

msgid "Bitwise AND"
msgstr "Bitowe AND"

msgid "``x ^ y``"
msgstr ""

msgid "Bitwise XOR"
msgstr "Bitowe XOR"

msgid "``x | y``"
msgstr ""

msgid "Bitwise OR"
msgstr "Bitowe OR"

msgid "``x == y``"
msgstr ""

msgid "``x != y``"
msgstr ""

msgid "``x < y``"
msgstr ""

msgid "``x > y``"
msgstr ""

msgid "``x <= y``"
msgstr ""

msgid "``x >= y``"
msgstr ""

#, fuzzy
msgid "Comparison"
msgstr "Porównania"

msgid "See a detailed note after the table."
msgstr ""

msgid "``x in y``"
msgstr ""

msgid "``x not in y``"
msgstr ""

#, fuzzy
msgid "Inclusion checking"
msgstr "Tryb okluzji"

msgid "``in`` is also used with the for_ keyword as part of the syntax."
msgstr ""

#, fuzzy
msgid "``not x``"
msgstr "``!`` ``not``"

msgid "``!x``"
msgstr ""

msgid "Boolean NOT and its :ref:`unrecommended <boolean_operators>` alias"
msgstr ""

msgid "``x and y``"
msgstr ""

msgid "``x && y``"
msgstr ""

msgid "Boolean AND and its :ref:`unrecommended <boolean_operators>` alias"
msgstr ""

msgid "``x or y``"
msgstr ""

msgid "``x || y``"
msgstr ""

msgid "Boolean OR and its :ref:`unrecommended <boolean_operators>` alias"
msgstr ""

msgid "``true_expr if cond else false_expr``"
msgstr ""

msgid "Ternary if/else"
msgstr "Trójskładnikowy if/else"

#, fuzzy
msgid "``x as Node``"
msgstr "Konfiguracja węzła"

#, fuzzy
msgid "`Type casting <casting_>`_"
msgstr "Konwersja i Rzutowanie"

msgid "``x = y``"
msgstr ""

msgid "``x += y``"
msgstr ""

msgid "``x -= y``"
msgstr ""

msgid "``x *= y``"
msgstr ""

msgid "``x /= y``"
msgstr ""

msgid "``x **= y``"
msgstr ""

msgid "``x %= y``"
msgstr ""

msgid "``x &= y``"
msgstr ""

msgid "``x |= y``"
msgstr ""

msgid "``x ^= y``"
msgstr ""

msgid "``x <<= y``"
msgstr ""

msgid "``x >>= y``"
msgstr ""

msgid "Assignment (lowest priority)"
msgstr ""

msgid "You cannot use an assignment operator inside an expression."
msgstr ""

msgid "The behavior of some operators may differ from what you expect:"
msgstr ""

msgid ""
"If both operands of the ``/`` operator are :ref:`int <class_int>`, then "
"integer division is performed instead of fractional. For example ``5 / 2 == "
"2``, not ``2.5``. If this is not desired, use at least one :ref:`float "
"<class_float>` literal (``x / 2.0``), cast (``float(x) / y``), or multiply "
"by ``1.0`` (``x * 1.0 / y``)."
msgstr ""

msgid ""
"The ``%`` operator is only available for ints, for floats use the :ref:"
"`fmod() <class_@GlobalScope_method_fmod>` function."
msgstr ""

msgid ""
"For negative values, the ``%`` operator and ``fmod()`` use `truncation "
"<https://en.wikipedia.org/wiki/Truncation>`_ instead of rounding towards "
"negative infinity. This means that the remainder has a sign. If you need the "
"remainder in a mathematical sense, use the :ref:`posmod() "
"<class_@GlobalScope_method_posmod>` and :ref:`fposmod() "
"<class_@GlobalScope_method_fposmod>` functions instead."
msgstr ""

msgid ""
"The ``**`` operator is `left-associative <https://en.wikipedia.org/wiki/"
"Operator_associativity>`_. This means that ``2 ** 2 ** 3`` is equal to ``(2 "
"** 2) ** 3``. Use parentheses to explicitly specify precedence you need, for "
"example ``2 ** (2 ** 3)``."
msgstr ""

msgid ""
"The ``==`` and ``!=`` operators sometimes allow you to compare values of "
"different types (for example, ``1 == 1.0`` is true), but in other cases it "
"can cause a runtime error. If you're not sure about the types of the "
"operands, you can safely use the :ref:`is_same() "
"<class_@GlobalScope_method_is_same>` function (but note that it is more "
"strict about types and references). To compare floats, use the :ref:"
"`is_equal_approx() <class_@GlobalScope_method_is_equal_approx>` and :ref:"
"`is_zero_approx() <class_@GlobalScope_method_is_zero_approx>` functions "
"instead."
msgstr ""

msgid "Literals"
msgstr "Literały"

#, fuzzy
msgid "**Example(s)**"
msgstr "**Przykład**"

#, fuzzy
msgid "``null``"
msgstr "null"

#, fuzzy
msgid "Null value"
msgstr "wartość"

#, fuzzy
msgid "``false``, ``true``"
msgstr "``+`` ``-``"

#, fuzzy
msgid "Boolean values"
msgstr "Operator logiczny lub"

msgid "``45``"
msgstr "``45``"

msgid "Base 10 integer"
msgstr "Bazowy system dziesiętny"

#, fuzzy
msgid "``0x8f51``"
msgstr "``0x8F51``"

#, fuzzy
msgid "Base 16 (hexadecimal) integer"
msgstr "Baza heksadecymalna"

msgid "``0b101010``"
msgstr ""

#, fuzzy
msgid "Base 2 (binary) integer"
msgstr "Baza heksadecymalna"

msgid "``3.14``, ``58.1e-10``"
msgstr "``3.14``, ``58.1e-10``"

#, fuzzy
msgid "Floating-point number (real)"
msgstr "Liczby zmiennoprzecinkowe"

#, fuzzy
msgid "``\"Hello\"``, ``'Hi'``"
msgstr "``\"Cześć\"``, ``\"Hej\"``"

#, fuzzy
msgid "Regular strings"
msgstr "Wypal światło"

#, fuzzy
msgid "``\"\"\"Hello\"\"\"``, ``'''Hi'''``"
msgstr "``\"Cześć\"``, ``\"Hej\"``"

msgid "Triple-quoted regular strings"
msgstr ""

#, fuzzy
msgid "``r\"Hello\"``, ``r'Hi'``"
msgstr "``\"Cześć\"``, ``\"Hej\"``"

#, fuzzy
msgid "Raw strings"
msgstr "string"

#, fuzzy
msgid "``r\"\"\"Hello\"\"\"``, ``r'''Hi'''``"
msgstr "``\"Cześć\"``, ``\"Hej\"``"

#, fuzzy
msgid "Triple-quoted raw strings"
msgstr "GDScript formatuje łańcuchy znaków (string)"

#, fuzzy
msgid "``&\"name\"``"
msgstr "``name``"

#, fuzzy
msgid ":ref:`StringName <class_StringName>`"
msgstr ":ref:`String <class_String>`"

#, fuzzy
msgid "``^\"Node/Label\"``"
msgstr "``@\"Węzeł/Sprite\"``"

msgid ":ref:`NodePath <class_NodePath>`"
msgstr ":ref:`NodePath <class_NodePath>`"

msgid ""
"There are also two constructs that look like literals, but actually are not:"
msgstr ""

msgid "**Example**"
msgstr "**Przykład**"

#, fuzzy
msgid "``$NodePath``"
msgstr "Konfiguracja węzła"

msgid "Shorthand for ``get_node(\"NodePath\")``"
msgstr ""

#, fuzzy
msgid "``%UniqueNode``"
msgstr "Węzeł sceny"

msgid "Shorthand for ``get_node(\"%UniqueNode\")``"
msgstr ""

msgid ""
"Integers and floats can have their numbers separated with ``_`` to make them "
"more readable. The following ways to write numbers are all valid::"
msgstr ""

msgid "**Regular string literals** can contain the following escape sequences:"
msgstr ""

msgid "**Escape sequence**"
msgstr ""

msgid "**Expands to**"
msgstr ""

msgid "``\\n``"
msgstr ""

msgid "Newline (line feed)"
msgstr ""

msgid "``\\t``"
msgstr ""

msgid "Horizontal tab character"
msgstr ""

msgid "``\\r``"
msgstr ""

msgid "Carriage return"
msgstr ""

msgid "``\\a``"
msgstr ""

msgid "Alert (beep/bell)"
msgstr ""

msgid "``\\b``"
msgstr ""

msgid "Backspace"
msgstr "Backspace"

msgid "``\\f``"
msgstr ""

msgid "Formfeed page break"
msgstr ""

msgid "``\\v``"
msgstr ""

#, fuzzy
msgid "Vertical tab character"
msgstr "Kinematyczna postać (2D)"

msgid "``\\\"``"
msgstr ""

msgid "Double quote"
msgstr ""

msgid "``\\'``"
msgstr ""

msgid "Single quote"
msgstr ""

msgid "``\\\\``"
msgstr ""

msgid "Backslash"
msgstr ""

msgid "``\\uXXXX``"
msgstr ""

msgid "UTF-16 Unicode codepoint ``XXXX`` (hexadecimal, case-insensitive)"
msgstr ""

msgid "``\\UXXXXXX``"
msgstr ""

msgid "UTF-32 Unicode codepoint ``XXXXXX`` (hexadecimal, case-insensitive)"
msgstr ""

#, fuzzy
msgid ""
"There are two ways to represent an escaped Unicode character above "
"``0xFFFF``:"
msgstr "Mogły się wydarzyć następujące rzeczy:"

msgid ""
"as a `UTF-16 surrogate pair <https://en.wikipedia.org/wiki/"
"UTF-16#Code_points_from_U+010000_to_U+10FFFF>`_ ``\\uXXXX\\uXXXX``."
msgstr ""

msgid "as a single UTF-32 codepoint ``\\UXXXXXX``."
msgstr ""

msgid ""
"Also, using ``\\`` followed by a newline inside a string will allow you to "
"continue it in the next line, without inserting a newline character in the "
"string itself."
msgstr ""

msgid ""
"A string enclosed in quotes of one type (for example ``\"``) can contain "
"quotes of another type (for example ``'``) without escaping. Triple-quoted "
"strings allow you to avoid escaping up to two consecutive quotes of the same "
"type (unless they are adjacent to the string edges)."
msgstr ""

msgid ""
"**Raw string literals** always encode the string as it appears in the source "
"code. This is especially useful for regular expressions. Raw strings do not "
"process escape sequences, but you can \"escape\" a quote or backslash (they "
"replace themselves)."
msgstr ""

msgid "GDScript also supports :ref:`format strings <doc_gdscript_printf>`."
msgstr ""

#, fuzzy
msgid "Annotations"
msgstr "Wcięcia"

msgid ""
"There are some special tokens in GDScript that act like keywords but are "
"not, they are *annotations* instead. Every annotation start with the ``@`` "
"character and is specified by a name. A detailed description and example for "
"each annotation can be found inside the :ref:`GDScript class reference "
"<class_@GDScript>`."
msgstr ""

msgid ""
"Annotations affect how the script is treated by external tools and usually "
"don't change the behavior."
msgstr ""

msgid "For instance, you can use it to export a value to the editor::"
msgstr ""

#, fuzzy
msgid ""
"For more information about exporting properties, read the :ref:`GDScript "
"exports <doc_gdscript_exports>` article."
msgstr ""
"Aby dowiedzieć się więcej, jak działają ``Vieport`` i działanie nodów, "
"zobacz :ref:`Viewports Tutorial <doc_viewports>`."

msgid ""
"Any constant expression compatible with the required argument type can be "
"passed as an annotation argument value::"
msgstr ""

msgid ""
"Annotations can be specified one per line or all in the same line. They "
"affect the next statement that isn't an annotation. Annotations can have "
"arguments sent between parentheses and separated by commas."
msgstr ""

msgid "Both of these are the same::"
msgstr ""

msgid "``@onready`` annotation"
msgstr ""

msgid ""
"When using nodes, it's common to desire to keep references to parts of the "
"scene in a variable. As scenes are only warranted to be configured when "
"entering the active scene tree, the sub-nodes can only be obtained when a "
"call to ``Node._ready()`` is made."
msgstr ""

msgid ""
"This can get a little cumbersome, especially when nodes and external "
"references pile up. For this, GDScript has the ``@onready`` annotation, that "
"defers initialization of a member variable until ``_ready()`` is called. It "
"can replace the above code with a single line::"
msgstr ""

msgid ""
"Applying ``@onready`` and any ``@export`` annotation to the same variable "
"doesn't work as you might expect. The ``@onready`` annotation will cause the "
"default value to be set after the ``@export`` takes effect and will override "
"it::"
msgstr ""

msgid ""
"Therefore, the ``ONREADY_WITH_EXPORT`` warning is generated, which is "
"treated as an error by default. We do not recommend disabling or ignoring it."
msgstr ""

msgid "Comments"
msgstr "Komentarze"

msgid ""
"Anything from a ``#`` to the end of the line is ignored and is considered a "
"comment."
msgstr ""
"Wszystko od ``#``do końca wiersza jest ignorowane i jest traktowane jako "
"komentarz."

msgid ""
"In the Godot script editor, special keywords are highlighted within comments "
"to bring the user's attention to specific comments:"
msgstr ""

msgid ""
"**Critical** *(appears in red)*: ``ALERT``, ``ATTENTION``, ``CAUTION``, "
"``CRITICAL``, ``DANGER``, ``SECURITY``"
msgstr ""

msgid ""
"**Warning** *(appears in yellow)*: ``BUG``, ``DEPRECATED``, ``FIXME``, "
"``HACK``, ``TASK``, ``TBD``, ``TODO``, ``WARNING``"
msgstr ""

msgid ""
"**Notice** *(appears in green)*: ``INFO``, ``NOTE``, ``NOTICE``, ``TEST``, "
"``TESTING``"
msgstr ""

msgid ""
"These keywords are case-sensitive, so they must be written in uppercase for "
"them to be recognized:"
msgstr ""

msgid ""
"The list of highlighted keywords and their colors can be changed in the "
"**Text Editor > Theme > Comment Markers** section of the Editor Settings."
msgstr ""

#, fuzzy
msgid "Code regions"
msgstr "Rozważania"

msgid ""
"Code regions are special types of comments that the script editor "
"understands as *foldable regions*. This means that after writing code region "
"comments, you can collapse and expand the region by clicking the arrow that "
"appears at the left of the comment. This arrow appears within a purple "
"square to be distinguishable from standard code folding."
msgstr ""

#, fuzzy
msgid "The syntax is as follows:"
msgstr ""
"Tekst ten brzmi następująco (tłumaczenie polskie dla wygody, proszę używać "
"oryginalnej wersji angielskiej):"

msgid ""
"To create a code region quickly, select several lines in the script editor, "
"right-click the selection then choose **Create Code Region**. The region "
"description will be selected automatically for editing."
msgstr ""

msgid "It is possible to nest code regions within other code regions."
msgstr ""

#, fuzzy
msgid "Here's a concrete usage example of code regions:"
msgstr "Oto prosty przykład jak to działa:"

msgid ""
"This can be useful to organize large chunks of code into easier to "
"understand sections. However, remember that external editors generally don't "
"support this feature, so make sure your code is easy to follow even when not "
"relying on folding code regions."
msgstr ""

msgid ""
"Individual functions and indented sections (such as ``if`` and ``for``) can "
"*always* be collapsed in the script editor. This means you should avoid "
"using a code region to contain a single function or indented section, as it "
"won't bring much of a benefit. Code regions work best when they're used to "
"group multiple elements together."
msgstr ""

#, fuzzy
msgid "Line continuation"
msgstr "Uruchom konfigurację silnika"

msgid ""
"A line of code in GDScript can be continued on the next line by using a "
"backslash (``\\``). Add one at the end of a line and the code on the next "
"line will act like it's where the backslash is. Here is an example:"
msgstr ""

msgid "A line can be continued multiple times like this:"
msgstr ""

msgid "Built-in types"
msgstr "Typy wbudowane"

msgid ""
"Built-in types are stack-allocated. They are passed as values. This means a "
"copy is created on each assignment or when passing them as arguments to "
"functions. The exceptions are ``Object``, ``Array``, ``Dictionary``, and "
"packed arrays (such as ``PackedByteArray``), which are passed by reference "
"so they are shared. All arrays, ``Dictionary``, and some objects (``Node``, "
"``Resource``) have a ``duplicate()`` method that allows you to make a copy."
msgstr ""

msgid "Basic built-in types"
msgstr "Podstawowe typy wbudowane"

msgid "A variable in GDScript can be assigned to several built-in types."
msgstr "Do zmiennej w GDScript można przypisać do wiele wbudowanych typów."

msgid "null"
msgstr "null"

msgid ""
"``null`` is an empty data type that contains no information and can not be "
"assigned any other value."
msgstr ""
"``null`` jest pustym typem danych, który nie zawiera żadnych informacji i "
"nie może być przypisana do niego żadna inna wartość."

#, fuzzy
msgid ":ref:`bool <class_bool>`"
msgstr "1: :ref:`bool<class_bool>`"

#, fuzzy
msgid "Short for \"boolean\", it can only contain ``true`` or ``false``."
msgstr "Typ danych logicznych może zawierać tylko ``true`` lub ``false``."

#, fuzzy
msgid ":ref:`int <class_int>`"
msgstr "2: :ref:`int<class_int>`"

msgid ""
"Short for \"integer\", it stores whole numbers (positive and negative). It "
"is stored as a 64-bit value, equivalent to ``int64_t`` in C++."
msgstr ""

#, fuzzy
msgid ":ref:`float <class_float>`"
msgstr ":ref:`Quat <class_Quat>`"

msgid ""
"Stores real numbers, including decimals, using floating-point values. It is "
"stored as a 64-bit value, equivalent to ``double`` in C++. Note: Currently, "
"data structures such as ``Vector2``, ``Vector3``, and ``PackedFloat32Array`` "
"store 32-bit single-precision ``float`` values."
msgstr ""

msgid ":ref:`String <class_String>`"
msgstr ":ref:`String <class_String>`"

#, fuzzy
msgid ""
"A sequence of characters in `Unicode format <https://en.wikipedia.org/wiki/"
"Unicode>`_."
msgstr ""
"Ciąg znaków w formacie `Unicode <https://en.wikipedia.org/wiki/Unicode>`_. "
"Łańcuchy mogą zawierać `Standardowe sekwencje specjalne C <https://en."
"wikipedia.org/wiki/Escape_sequences_in_C>`_. GDScript obsługuje :ref:"
"`formatowanie łańcucha znaków czyli funkcjonalność funkcji printf "
"<doc_gdscript_printf>`:"

msgid ""
"An immutable string that allows only one instance of each name. They are "
"slower to create and may result in waiting for locks when multithreading. In "
"exchange, they're very fast to compare, which makes them good candidates for "
"dictionary keys."
msgstr ""

msgid ""
"A pre-parsed path to a node or a node property.  It can be easily assigned "
"to, and from, a String. They are useful to interact with the tree to get a "
"node, or affecting properties like with :ref:`Tweens <class_Tween>`."
msgstr ""

msgid "Vector built-in types"
msgstr "Wbudowane typy wektorowe"

msgid ":ref:`Vector2 <class_Vector2>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

#, fuzzy
msgid ""
"2D vector type containing ``x`` and ``y`` fields. Can also be accessed as an "
"array."
msgstr ""
"Wektor w przestrzeni 2D zawiera pola ``x`` i ``y``. Dostępny jest również "
"jako tablica."

#, fuzzy
msgid ":ref:`Vector2i <class_Vector2i>`"
msgstr ":ref:`Vector2 <class_Vector2>`"

msgid ""
"Same as a Vector2 but the components are integers. Useful for representing "
"items in a 2D grid."
msgstr ""

msgid ":ref:`Rect2 <class_Rect2>`"
msgstr ":ref:`Rect2 <class_Rect2>`"

#, fuzzy
msgid ""
"2D Rectangle type containing two vectors fields: ``position`` and ``size``. "
"Also contains an ``end`` field which is ``position + size``."
msgstr ""
"Typ prostokątny 2D zawierający dwa pola wektorowe: ``position`` i ``size``. "
"Alternatywnie zawiera pole ``end``, które jest ``position+size``."

msgid ":ref:`Vector3 <class_Vector3>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

msgid ""
"3D vector type containing ``x``, ``y`` and ``z`` fields. This can also be "
"accessed as an array."
msgstr ""
"Wektor w przestrzeni trójwymiarowej(3D) zawiera pola ``x``, ``y`` i ``z``. "
"Dostęp do tej funkcji jest również możliwy w postaci tablicy."

#, fuzzy
msgid ":ref:`Vector3i <class_Vector3i>`"
msgstr ":ref:`Vector3 <class_Vector3>`"

msgid ""
"Same as Vector3 but the components are integers. Can be use for indexing "
"items in a 3D grid."
msgstr ""

msgid ":ref:`Transform2D <class_Transform2D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

#, fuzzy
msgid "3×2 matrix used for 2D transforms."
msgstr "Macierz 3x2 stosowana do przekształceń 2D."

msgid ":ref:`Plane <class_Plane>`"
msgstr ":ref:`Plane <class_Plane>`"

msgid ""
"3D Plane type in normalized form that contains a ``normal`` vector field and "
"a ``d`` scalar distance."
msgstr ""
"3D Plane w znormalizowanej formie, który zawiera pole wektorowe ``normal`` i "
"długość skalarną ``d``."

#, fuzzy
msgid ":ref:`Quaternion <class_Quaternion>`"
msgstr ":ref:`Quat <class_Quat>`"

msgid ""
"Quaternion is a datatype used for representing a 3D rotation. It's useful "
"for interpolating rotations."
msgstr ""
"Quaternion jest to typ danych używany do reprezentowania obrotu w 3D. Jest "
"przydatny do interpolacji obrotu."

msgid ":ref:`AABB <class_AABB>`"
msgstr ":ref:`AABB <class_AABB>`"

#, fuzzy
msgid ""
"Axis-aligned bounding box (or 3D box) contains 2 vectors fields: "
"``position`` and ``size``. Also contains an ``end`` field which is "
"``position + size``."
msgstr ""
"Typ prostokątny 2D zawierający dwa pola wektorowe: ``position`` i ``size``. "
"Alternatywnie zawiera pole ``end``, które jest ``position+size``."

msgid ":ref:`Basis <class_Basis>`"
msgstr ":ref:`Basis <class_Basis>`"

msgid ""
"3x3 matrix used for 3D rotation and scale. It contains 3 vector fields "
"(``x``, ``y`` and ``z``) and can also be accessed as an array of 3D vectors."
msgstr ""
"Macierz 3x3 używana jest do obrotu i skalowania 3D. Zawiera 3 pola wektorowe "
"( ``x``, ``y`` i ``z``) i może być również dostępna jako tablica wektorów 3D."

#, fuzzy
msgid ":ref:`Transform3D <class_Transform3D>`"
msgstr ":ref:`Transform2D <class_Transform2D>`"

msgid ""
"3D Transform contains a Basis field ``basis`` and a Vector3 field ``origin``."
msgstr ""
"Przekształcenie(Transform) 3D zawiera pole Basis ``basis`` i "
"Vector3``origin``."

msgid "Engine built-in types"
msgstr "Wbudowane typy silnika"

msgid ":ref:`Color <class_Color>`"
msgstr ":ref:`Color <class_Color>`"

msgid ""
"Color data type contains ``r``, ``g``, ``b``, and ``a`` fields. It can also "
"be accessed as ``h``, ``s``, and ``v`` for hue/saturation/value."
msgstr ""
"Typ danych kolorowych zawiera pola ``r``, ``g``,``b`` i ``a``. Dostępny jest "
"również jako ``h``, ``s`` i ``v`` dla barwy/nasycenia/wartości."

msgid ":ref:`RID <class_RID>`"
msgstr ":ref:`RID <class_RID>`"

msgid "Resource ID (RID). Servers use generic RIDs to reference opaque data."
msgstr ""
"Identyfikator zasobu (RID). Serwery wykorzystują ogólne RID-y do odniesień "
"dla danych nieprzezroczystych."

msgid ":ref:`Object <class_Object>`"
msgstr ":ref:`Object <class_Object>`"

msgid "Base class for anything that is not a built-in type."
msgstr "Klasa podstawowa do wszystkiego, co nie jest typem wbudowanym."

msgid "Container built-in types"
msgstr "Wbudowane typy kontenerowe"

msgid ":ref:`Array <class_Array>`"
msgstr ":ref:`Array <class_Array>`"

msgid ""
"Generic sequence of arbitrary object types, including other arrays or "
"dictionaries (see below). The array can resize dynamically. Arrays are "
"indexed starting from index ``0``. Negative indices count from the end."
msgstr ""

#, fuzzy
msgid "Typed arrays"
msgstr "Tangens"

msgid ""
"Godot 4.0 added support for typed arrays. On write operations, Godot checks "
"that element values match the specified type, so the array cannot contain "
"invalid values. The GDScript static analyzer takes typed arrays into "
"account, however array methods like ``front()`` and ``back()`` still have "
"the ``Variant`` return type."
msgstr ""

msgid ""
"Typed arrays have the syntax ``Array[Type]``, where ``Type`` can be any "
"``Variant`` type, native or user class, or enum. Nested array types (like "
"``Array[Array[int]]``) are not supported."
msgstr ""

msgid "``Array`` and ``Array[Variant]`` are the same thing."
msgstr ""

msgid ""
"Arrays are passed by reference, so the array element type is also an "
"attribute of the in-memory structure referenced by a variable in runtime. "
"The static type of a variable restricts the structures that it can reference "
"to. Therefore, you **cannot** assign an array with a different element type, "
"even if the type is a subtype of the required type."
msgstr ""

msgid ""
"If you want to *convert* a typed array, you can create a new array and use "
"the :ref:`Array.assign() <class_Array_method_assign>` method::"
msgstr ""

msgid ""
"The only exception was made for the ``Array`` (``Array[Variant]``) type, for "
"user convenience and compatibility with old code. However, operations on "
"untyped arrays are considered unsafe."
msgstr ""

#, fuzzy
msgid "Packed arrays"
msgstr "Lokalne zmienne"

msgid ""
"GDScript arrays are allocated linearly in memory for speed. Large arrays "
"(more than tens of thousands of elements) may however cause memory "
"fragmentation. If this is a concern, special types of arrays are available. "
"These only accept a single data type. They avoid memory fragmentation and "
"use less memory, but are atomic and tend to run slower than generic arrays. "
"They are therefore only recommended to use for large data sets:"
msgstr ""

#, fuzzy
msgid ""
":ref:`PackedByteArray <class_PackedByteArray>`: An array of bytes (integers "
"from 0 to 255)."
msgstr ""
":ref:`PoolByteArray <class_PoolByteArray>`: Tablica bajtów (liczby całkowite "
"od 0 do 255)."

#, fuzzy
msgid ""
":ref:`PackedInt32Array <class_PackedInt32Array>`: An array of 32-bit "
"integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: Tablica liczb całkowitych."

#, fuzzy
msgid ""
":ref:`PackedInt64Array <class_PackedInt64Array>`: An array of 64-bit "
"integers."
msgstr ":ref:`PoolIntArray <class_PoolIntArray>`: Tablica liczb całkowitych."

#, fuzzy
msgid ""
":ref:`PackedFloat32Array <class_PackedFloat32Array>`: An array of 32-bit "
"floats."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>`: Tablica liczb "
"zmiennoprzecinkowych."

#, fuzzy
msgid ""
":ref:`PackedFloat64Array <class_PackedFloat64Array>`: An array of 64-bit "
"floats."
msgstr ""
":ref:`PoolRealArray <class_PoolRealArray>`: Tablica liczb "
"zmiennoprzecinkowych."

#, fuzzy
msgid ""
":ref:`PackedStringArray <class_PackedStringArray>`: An array of strings."
msgstr ""
":ref:`PoolStringArray <class_PoolStringArray>`: Tablica łańcuchów znaków."

#, fuzzy
msgid ""
":ref:`PackedVector2Array <class_PackedVector2Array>`: An array of :ref:"
"`Vector2 <class_Vector2>` values."
msgstr ""
":ref:`PoolVector2Array <class_PoolVector2Array>`: Tablica obiektów :ref:"
"`Vector2 <class_Vector2>`."

#, fuzzy
msgid ""
":ref:`PackedVector3Array <class_PackedVector3Array>`: An array of :ref:"
"`Vector3 <class_Vector3>` values."
msgstr ""
":ref:`PoolVector3Array <class_PoolVector3Array>`: Tablica obiektów :ref:"
"`Vector3 <class_Vector3>`."

#, fuzzy
msgid ""
":ref:`PackedColorArray <class_PackedColorArray>`: An array of :ref:`Color "
"<class_Color>` values."
msgstr ""
":ref:`PoolColorArray <class_PoolColorArray>`: Tablica obiektów :ref:`Color "
"<class_Color>`."

msgid ":ref:`Dictionary <class_Dictionary>`"
msgstr ":ref:`Słownik <class_Dictionary>`"

msgid "Associative container which contains values referenced by unique keys."
msgstr ""

msgid ""
"Lua-style table syntax is also supported. Lua-style uses ``=`` instead of ``:"
"`` and doesn't use quotes to mark string keys (making for slightly less to "
"write). However, keys written in this form can't start with a digit (like "
"any GDScript identifier), and must be string literals."
msgstr ""

msgid ""
"To add a key to an existing dictionary, access it like an existing key and "
"assign to it::"
msgstr ""
"Aby dodać klucz do istniejącego słownika, otwórz go jakby istniał i przypisz "
"do niego wartość::"

msgid ""
"The bracket syntax can be used to access properties of any :ref:"
"`class_Object`, not just Dictionaries. Keep in mind it will cause a script "
"error when attempting to index a non-existing property. To avoid this, use "
"the :ref:`Object.get() <class_Object_method_get>` and :ref:`Object.set() "
"<class_Object_method_set>` methods instead."
msgstr ""

#, fuzzy
msgid ":ref:`Signal <class_Signal>`"
msgstr "2: :ref:`int<class_int>`"

msgid ""
"A signal is a message that can be emitted by an object to those who want to "
"listen to it. The Signal type can be used for passing the emitter around."
msgstr ""

msgid ""
"Signals are better used by getting them from actual objects, e.g. ``$Button."
"button_up``."
msgstr ""

#, fuzzy
msgid ":ref:`Callable <class_Callable>`"
msgstr ":ref:`Plane <class_Plane>`"

msgid ""
"Contains an object and a function, which is useful for passing functions as "
"values (e.g. when connecting to signals)."
msgstr ""

msgid ""
"Getting a method as a member returns a callable. ``var x = $Sprite2D."
"rotate`` will set the value of ``x`` to a callable with ``$Sprite2D`` as the "
"object and ``rotate`` as the method."
msgstr ""

msgid "You can call it using the ``call`` method: ``x.call(PI)``."
msgstr ""

msgid "Data"
msgstr "Dane"

msgid "Variables"
msgstr "Zmienne"

msgid ""
"Variables can exist as class members or local to functions. They are created "
"with the ``var`` keyword and may, optionally, be assigned a value upon "
"initialization."
msgstr ""
"Zmienne mogą istnieć jako elementy klasy lub lokalnie w funkcji. Są one "
"tworzone za pomocą słowa kluczowego ``var`` i mogą, mieć przypisaną wartość "
"przy inicjalizacji."

msgid ""
"Variables can optionally have a type specification. When a type is "
"specified, the variable will be forced to have always that same type, and "
"trying to assign an incompatible value will raise an error."
msgstr ""

msgid ""
"Types are specified in the variable declaration using a ``:`` (colon) symbol "
"after the variable name, followed by the type."
msgstr ""

msgid ""
"If the variable is initialized within the declaration, the type can be "
"inferred, so it's possible to omit the type name::"
msgstr ""

msgid ""
"Type inference is only possible if the assigned value has a defined type, "
"otherwise it will raise an error."
msgstr ""

msgid "Valid types are:"
msgstr "Prawidłowymi typami są:"

msgid "Built-in types (Array, Vector2, int, String, etc.)."
msgstr "Wbudowane typy (Array, Vector2, int, String, itp.)."

msgid "Engine classes (Node, Resource, Reference, etc.)."
msgstr ""

msgid ""
"Constant names if they contain a script resource (``MyScript`` if you "
"declared ``const MyScript = preload(\"res://my_script.gd\")``)."
msgstr ""

msgid ""
"Other classes in the same script, respecting scope (``InnerClass."
"NestedClass`` if you declared ``class NestedClass`` inside the ``class "
"InnerClass`` in the same scope)."
msgstr ""

msgid "Script classes declared with the ``class_name`` keyword."
msgstr ""

msgid "Autoloads registered as singletons."
msgstr ""

msgid ""
"While ``Variant`` is a valid type specification, it's not an actual type. It "
"only means there's no set type and is equivalent to not having a static type "
"at all. Therefore, inference is not allowed by default for ``Variant``, "
"since it's likely a mistake."
msgstr ""

msgid ""
"You can turn off this check, or make it only a warning, by changing it in "
"the project settings. See :ref:`doc_gdscript_warning_system` for details."
msgstr ""

#, fuzzy
msgid "Initialization order"
msgstr "Kompilowanie naszej wtyczki"

#, fuzzy
msgid "Member variables are initialized in the following order:"
msgstr "Stwórz Węzeł i załącz do niego skrypt."

msgid ""
"Depending on the variable's static type, the variable is either ``null`` "
"(untyped variables and objects) or has a default value of the type (``0`` "
"for ``int``, ``false`` for ``bool``, etc.)."
msgstr ""

msgid ""
"The specified values are assigned in the order of the variables in the "
"script, from top to bottom. - *(Only for ``Node``-derived classes)* If the "
"``@onready`` annotation is applied to a variable, its initialization is "
"deferred to step 5."
msgstr ""

msgid "If defined, the ``_init()`` method is called."
msgstr ""

msgid ""
"When instantiating scenes and resources, the exported values are assigned."
msgstr ""

msgid ""
"*(Only for ``Node``-derived classes)* ``@onready`` variables are initialized."
msgstr ""

msgid ""
"*(Only for ``Node``-derived classes)* If defined, the ``_ready()`` method is "
"called."
msgstr ""

msgid ""
"You can specify a complex expression as a variable initializer, including "
"function calls. Make sure the variables are initialized in the correct "
"order, otherwise your values may be overwritten. For example::"
msgstr ""

#, fuzzy
msgid "Will print::"
msgstr "Wyświetli:"

msgid ""
"To fix this, move the ``_data`` variable definition above the ``a`` "
"definition or remove the empty dictionary assignment (``= {}``)."
msgstr ""

#, fuzzy
msgid "Static variables"
msgstr "Edytowanie instancji"

msgid "A class member variable can be declared static::"
msgstr ""

msgid ""
"Static variables belong to the class, not instances. This means that static "
"variables share values between multiple instances, unlike regular member "
"variables."
msgstr ""

msgid ""
"From inside a class, you can access static variables from any function, both "
"static and non-static. From outside the class, you can access static "
"variables using the class or an instance (the second is not recommended as "
"it is less readable)."
msgstr ""

msgid ""
"The ``@export`` and ``@onready`` annotations cannot be applied to a static "
"variable. Local variables cannot be static."
msgstr ""

msgid ""
"The following example defines a ``Person`` class with a static variable "
"named ``max_id``. We increment the ``max_id`` in the ``_init()`` function. "
"This makes it easy to keep track of the number of ``Person`` instances in "
"our game."
msgstr ""

msgid ""
"In this code, we create two instances of our ``Person`` class and check that "
"the class and every instance have the same ``max_id`` value, because the "
"variable is static and accessible to every instance."
msgstr ""

msgid "Static variables can have type hints, setters and getters::"
msgstr ""

msgid "A base class static variable can also be accessed via a child class::"
msgstr ""

msgid "``@static_unload`` annotation"
msgstr ""

msgid ""
"Since GDScript classes are resources, having static variables in a script "
"prevents it from being unloaded even if there are no more instances of that "
"class and no other references left. This can be important if static "
"variables store large amounts of data or hold references to other project "
"resources, such as scenes. You should clean up this data manually, or use "
"the :ref:`@static_unload <class_@GDScript_annotation_@static_unload>` "
"annotation if static variables don't store important data and can be reset."
msgstr ""

msgid ""
"Currently, due to a bug, scripts are never freed, even if ``@static_unload`` "
"annotation is used."
msgstr ""

msgid ""
"Note that ``@static_unload`` applies to the entire script (including inner "
"classes) and must be placed at the top of the script, before ``class_name`` "
"and ``extends``::"
msgstr ""

msgid "See also `Static functions`_ and `Static constructor`_."
msgstr ""

msgid "Casting"
msgstr ""

msgid ""
"Values assigned to typed variables must have a compatible type. If it's "
"needed to coerce a value to be of a certain type, in particular for object "
"types, you can use the casting operator ``as``."
msgstr ""

msgid ""
"Casting between object types results in the same object if the value is of "
"the same type or a subtype of the cast type."
msgstr ""

msgid ""
"If the value is not a subtype, the casting operation will result in a "
"``null`` value."
msgstr ""

msgid ""
"For built-in types, they will be forcibly converted if possible, otherwise "
"the engine will raise an error."
msgstr ""

msgid ""
"Casting is also useful to have better type-safe variables when interacting "
"with the scene tree::"
msgstr ""

msgid "Constants"
msgstr "Stałe"

msgid ""
"Constants are values you cannot change when the game is running. Their value "
"must be known at compile-time. Using the ``const`` keyword allows you to "
"give a constant value a name. Trying to assign a value to a constant after "
"it's declared will give you an error."
msgstr ""

msgid "We recommend using constants whenever a value is not meant to change."
msgstr ""

msgid ""
"Although the type of constants is inferred from the assigned value, it's "
"also possible to add explicit type specification::"
msgstr ""

msgid "Assigning a value of an incompatible type will raise an error."
msgstr ""

msgid ""
"You can also create constants inside a function, which is useful to name "
"local magic values."
msgstr ""

msgid ""
"Since objects, arrays and dictionaries are passed by reference, constants "
"are \"flat\". This means that if you declare a constant array or dictionary, "
"it can still be modified afterwards. They can't be reassigned with another "
"value though."
msgstr ""

msgid "Enums"
msgstr "Typy wyliczeniowe"

msgid ""
"Enums are basically a shorthand for constants, and are pretty useful if you "
"want to assign consecutive integers to some constant."
msgstr ""
"Typy wyliczeniowe są w zasadzie skrótem stałych i są bardzo przydatne, jeśli "
"chcesz przypisać kolejne liczby całkowite do jakiejś stałej."

msgid ""
"If you pass a name to the enum, it will put all the keys inside a constant :"
"ref:`Dictionary <class_Dictionary>` of that name. This means all constant "
"methods of a dictionary can also be used with a named enum."
msgstr ""

msgid ""
"Keys in a named enum are not registered as global constants. They should be "
"accessed prefixed by the enum's name (``Name.KEY``)."
msgstr ""

msgid "Functions"
msgstr "Funkcje"

msgid ""
"Functions always belong to a `class <Classes_>`_. The scope priority for "
"variable look-up is: local → class member → global. The ``self`` variable is "
"always available and is provided as an option for accessing class members, "
"but is not always required (and should *not* be sent as the function's first "
"argument, unlike Python)."
msgstr ""

msgid ""
"A function can ``return`` at any point. The default return value is ``null``."
msgstr ""
"Funkcja może ``return``(zwrócić) w dowolnym momencie. Domyślną wartością "
"zwracaną jest ``null``."

msgid ""
"If a function contains only one line of code, it can be written on one line::"
msgstr ""

msgid ""
"Functions can also have type specification for the arguments and for the "
"return value. Types for arguments can be added in a similar way to "
"variables::"
msgstr ""

msgid ""
"If a function argument has a default value, it's possible to infer the type::"
msgstr ""

msgid ""
"The return type of the function can be specified after the arguments list "
"using the arrow token (``->``)::"
msgstr ""

msgid ""
"Functions that have a return type **must** return a proper value. Setting "
"the type as ``void`` means the function doesn't return anything. Void "
"functions can return early with the ``return`` keyword, but they can't "
"return any value."
msgstr ""

msgid ""
"Non-void functions must **always** return a value, so if your code has "
"branching statements (such as an ``if``/``else`` construct), all the "
"possible paths must have a return. E.g., if you have a ``return`` inside an "
"``if`` block but not after it, the editor will raise an error because if the "
"block is not executed, the function won't have a valid value to return."
msgstr ""

#, fuzzy
msgid "Referencing functions"
msgstr "Odwołanie do funkcji"

msgid ""
"Functions are first-class items in terms of the :ref:`Callable "
"<class_Callable>` object. Referencing a function by name without calling it "
"will automatically generate the proper callable. This can be used to pass "
"functions as arguments."
msgstr ""

msgid ""
"Callables **must** be called with the ``call`` method. You cannot use the "
"``()`` operator directly. This behavior is implemented to avoid performance "
"issues on direct function calls."
msgstr ""

#, fuzzy
msgid "Lambda functions"
msgstr "Losowy obrót"

msgid ""
"Lambda functions allow you to declare functions that do not belong to a "
"class. Instead a :ref:`Callable <class_Callable>` object is created and "
"assigned to a variable directly. This can be useful to create Callables to "
"pass around without polluting the class scope."
msgstr ""

msgid "Lambda functions can be named for debugging purposes::"
msgstr ""

msgid ""
"Note that if you want to return a value from a lambda, an explicit "
"``return`` is required (you can't omit ``return``)::"
msgstr ""

msgid ""
"Lambda functions capture the local environment. Local variables are passed "
"by value, so they won't be updated in the lambda if changed in the local "
"function::"
msgstr ""

msgid ""
"The values of the outer scope behave like constants. Therefore, if you "
"declare an array or dictionary, it can still be modified afterwards."
msgstr ""

msgid "Static functions"
msgstr "Funkcje statyczne"

msgid ""
"A function can be declared static. When a function is static, it has no "
"access to the instance member variables or ``self``. A static function has "
"access to static variables. Also static functions are useful to make "
"libraries of helper functions::"
msgstr ""

msgid "Lambdas cannot be declared static."
msgstr ""

msgid "See also `Static variables`_ and `Static constructor`_."
msgstr ""

msgid "Statements and control flow"
msgstr ""

msgid ""
"Statements are standard and can be assignments, function calls, control flow "
"structures, etc (see below). ``;`` as a statement separator is entirely "
"optional."
msgstr ""

#, fuzzy
msgid "Expressions"
msgstr "Węzły ekspresji mogą"

msgid ""
"Expressions are sequences of operators and their operands in orderly "
"fashion. An expression by itself can be a statement too, though only calls "
"are reasonable to use as statements since other expressions don't have side "
"effects."
msgstr ""

msgid ""
"Expressions return values that can be assigned to valid targets. Operands to "
"some operator can be another expression. An assignment is not an expression "
"and thus does not return any value."
msgstr ""

#, fuzzy
msgid "Here are some examples of expressions::"
msgstr "Oto prosty przykład jak to działa:"

msgid ""
"Identifiers, attributes, and subscripts are valid assignment targets. Other "
"expressions cannot be on the left side of an assignment."
msgstr ""

msgid "if/else/elif"
msgstr "if/else/elif"

msgid ""
"Simple conditions are created by using the ``if``/``else``/``elif`` syntax. "
"Parenthesis around conditions are allowed, but not required. Given the "
"nature of the tab-based indentation, ``elif`` can be used instead of "
"``else``/``if`` to maintain a level of indentation."
msgstr ""

msgid "Short statements can be written on the same line as the condition::"
msgstr "Krótkie instrukcje mogą być napisane w tym samym wierszu co warunek::"

#, fuzzy
msgid ""
"Sometimes, you might want to assign a different initial value based on a "
"boolean expression. In this case, ternary-if expressions come in handy::"
msgstr ""
"Czasami można przypisać jedną z dwóch wartości w oparciu o wyrażenie "
"logiczne. W tym przypadku przydatne są wyrażenia trzyargumentowe wyrażenie "
"warunkowe::"

msgid ""
"Ternary-if expressions can be nested to handle more than 2 cases. When "
"nesting ternary-if expressions, it is recommended to wrap the complete "
"expression over multiple lines to preserve readability::"
msgstr ""

msgid ""
"You may also wish to check if a value is contained within something. You can "
"use an ``if`` statement combined with the ``in`` operator to accomplish "
"this::"
msgstr ""

#, fuzzy
msgid ""
"Simple loops are created by using ``while`` syntax. Loops can be broken "
"using ``break`` or continued using ``continue`` (which skips to the next "
"iteration of the loop without executing any further code in the current "
"iteration):"
msgstr ""
"Proste pętle są tworzone przy użyciu ``while``. Pętle można przerwać za "
"pomocą ``break`` lub kontynuować za pomocą ``continue``:"

#, fuzzy
msgid ""
"To iterate through a range, such as an array or table, a *for* loop is used. "
"When iterating over an array, the current array element is stored in the "
"loop variable. When iterating over a dictionary, the *key* is stored in the "
"loop variable."
msgstr ""
"Do iteracji w zakresie, takim jak tablica lub tabela, wykorzystywana jest "
"pętla *for*. Podczas iteracji na tablicy, aktualny element tablicy jest "
"zapisywany do zmiennej. Podczas iteracji słownikiem *indeks* jest zapisywany "
"w zmiennej."

msgid ""
"If you want to assign values on an array as it is being iterated through, it "
"is best to use ``for i in array.size()``."
msgstr ""

msgid ""
"The loop variable is local to the for-loop and assigning to it will not "
"change the value on the array. Objects passed by reference (such as nodes) "
"can still be manipulated by calling methods on the loop variable."
msgstr ""

msgid ""
"A ``match`` statement is used to branch execution of a program. It's the "
"equivalent of the ``switch`` statement found in many other languages, but "
"offers some additional features."
msgstr ""

msgid ""
"``match`` is more type strict than the ``==`` operator. For example ``1`` "
"will **not** match ``1.0``. The only exception is ``String`` vs "
"``StringName`` matching: for example, the String ``\"hello\"`` is considered "
"equal to the StringName ``&\"hello\"``."
msgstr ""

#, fuzzy
msgid "Basic syntax"
msgstr "Podstawowa składnia:"

#, fuzzy
msgid "Crash-course for people who are familiar with switch statements"
msgstr "**Kurs dla osób, które są zaznajomione z instrukcją switch**:"

msgid "Replace ``switch`` with ``match``."
msgstr "Zastąp ``switch`` z ``match``."

msgid "Remove ``case``."
msgstr "Usuń ``case``."

#, fuzzy
msgid "Remove any ``break``\\ s."
msgstr "Usuń ``case``."

msgid "Change ``default`` to a single underscore."
msgstr "Zamień ``default`` na jedno podkreślenie."

#, fuzzy
msgid "Control flow"
msgstr "Control"

msgid ""
"The patterns are matched from top to bottom. If a pattern matches, the first "
"corresponding block will be executed. After that, the execution continues "
"below the ``match`` statement."
msgstr ""

msgid ""
"The special ``continue`` behavior in ``match`` supported in 3.x was removed "
"in Godot 4.0."
msgstr ""

#, fuzzy
msgid "The following pattern types are available:"
msgstr "Następujące etykiety są obecnie zdefiniowane w repozytorium Godota:"

#, fuzzy
msgid "Literal pattern"
msgstr "zmienny wzorzec"

msgid "Matches a `literal <Literals_>`_::"
msgstr ""

#, fuzzy
msgid "Expression pattern"
msgstr "Węzły ekspresji mogą"

msgid ""
"Matches a constant expression, an identifier, or an attribute access (``A."
"B``)::"
msgstr ""

#, fuzzy
msgid "Wildcard pattern"
msgstr "stały wzorzec"

msgid "This pattern matches everything. It's written as a single underscore."
msgstr ""
"Ten wzór pasuje do wszystkiego. Jest napisany jako pojedyncze podkreślenie."

#, fuzzy
msgid ""
"It can be used as the equivalent of the ``default`` in a ``switch`` "
"statement in other languages::"
msgstr ""
"Jest używany jako odpowiednik instrukcji ``default`` w ``switch`` w innych "
"językach. ::"

#, fuzzy
msgid "Binding pattern"
msgstr "stały wzorzec"

#, fuzzy
msgid ""
"A binding pattern introduces a new variable. Like the wildcard pattern, it "
"matches everything - and also gives that value a name. It's especially "
"useful in array and dictionary patterns::"
msgstr ""
"Wzór wiążący wprowadza nową zmienną. Podobnie jak wzór wieloznaczny, pasuje "
"do wszystkiego, a także nadaje tej wartości nazwę. Jest szczególnie "
"przydatny w szablonach tablic i słowników. ::"

#, fuzzy
msgid "Array pattern"
msgstr "zmienny wzorzec"

msgid ""
"Matches an array. Every single element of the array pattern is a pattern "
"itself, so you can nest them."
msgstr ""

msgid ""
"The length of the array is tested first, it has to be the same size as the "
"pattern, otherwise the pattern doesn't match."
msgstr ""

msgid ""
"**Open-ended array**: An array can be bigger than the pattern by making the "
"last subpattern ``..``."
msgstr ""

msgid "Every subpattern has to be comma-separated."
msgstr ""

#, fuzzy
msgid "Dictionary pattern"
msgstr "stały wzorzec"

msgid ""
"Works in the same way as the array pattern. Every key has to be a constant "
"pattern."
msgstr ""

msgid ""
"The size of the dictionary is tested first, it has to be the same size as "
"the pattern, otherwise the pattern doesn't match."
msgstr ""

msgid ""
"**Open-ended dictionary**: A dictionary can be bigger than the pattern by "
"making the last subpattern ``..``."
msgstr ""

msgid "Every subpattern has to be comma separated."
msgstr ""

msgid ""
"If you don't specify a value, then only the existence of the key is checked."
msgstr ""

msgid "A value pattern is separated from the key pattern with a ``:``."
msgstr ""

#, fuzzy
msgid "Multiple patterns"
msgstr "Wielokrotne instancje"

msgid ""
"You can also specify multiple patterns separated by a comma. These patterns "
"aren't allowed to have any bindings in them."
msgstr ""

#, fuzzy
msgid "Pattern guards"
msgstr "wschodnia mari (Rosja)"

msgid ""
"Only one branch can be executed per ``match``. Once a branch is chosen, the "
"rest are not checked. If you want to use the same pattern for multiple "
"branches or to prevent choosing a branch with too general pattern, you can "
"specify a guard expression after the list of patterns with the ``when`` "
"keyword::"
msgstr ""

msgid ""
"If there is no matching pattern for the current branch, the guard expression "
"is **not** evaluated and the patterns of the next branch are checked."
msgstr ""

msgid "If a matching pattern is found, the guard expression is evaluated."
msgstr ""

msgid ""
"If it's true, then the body of the branch is executed and ``match`` ends."
msgstr ""

msgid "If it's false, then the patterns of the next branch are checked."
msgstr ""

msgid "Classes"
msgstr "Klasy"

msgid ""
"By default, all script files are unnamed classes. In this case, you can only "
"reference them using the file's path, using either a relative or an absolute "
"path. For example, if you name a script file ``character.gd``::"
msgstr ""

#, fuzzy
msgid "Registering named classes"
msgstr "Rejstrowanie skryptów jako klasy"

msgid ""
"You can give your class a name to register it as a new type in Godot's "
"editor. For that, you use the ``class_name`` keyword. You can optionally use "
"the ``@icon`` annotation with a path to an image, to use it as an icon. Your "
"class will then appear with its new icon in the editor::"
msgstr ""

msgid ""
"SVG images that are used as custom node icons should have the **Editor > "
"Scale With Editor Scale** and **Editor > Convert Icons With Editor Theme** :"
"ref:`import options <doc_importing_images_editor_import_options>` enabled. "
"This allows icons to follow the editor's scale and theming settings if the "
"icons are designed with the same color palette as Godot's own icons."
msgstr ""

#, fuzzy
msgid "Here's a class file example:"
msgstr "Tak wygląda klasa w XML:"

msgid ""
"If you want to use ``extends`` too, you can keep both on the same line::"
msgstr ""

msgid ""
"Godot initializes non-static variables every time you create an instance, "
"and this includes arrays and dictionaries. This is in the spirit of thread "
"safety, since scripts can be initialized in separate threads without the "
"user knowing."
msgstr ""

msgid "Inheritance"
msgstr "Dziedziczenie"

msgid "A class (stored as a file) can inherit from:"
msgstr "Klasa (przechowywana jako plik) może dziedziczyć po:"

msgid "A global class."
msgstr "Klasie globalnej."

msgid "Another class file."
msgstr "Innego pliku klasy."

msgid "An inner class inside another class file."
msgstr "Klasa wewnętrzna w pliku innej klasy."

msgid "Multiple inheritance is not allowed."
msgstr "Wielokrotne dziedziczenie jest niedozwolone."

#, fuzzy
msgid "Inheritance uses the ``extends`` keyword::"
msgstr "Dziedziczenie używa słowa kluczowego ``extends``:"

msgid ""
"If inheritance is not explicitly defined, the class will default to "
"inheriting :ref:`class_RefCounted`."
msgstr ""

#, fuzzy
msgid ""
"To check if a given instance inherits from a given class, the ``is`` keyword "
"can be used::"
msgstr ""
"Aby sprawdzić, czy dana instancja dziedziczy z danej klasy, można użyć słowa "
"kluczowego ``is``:"

msgid ""
"To call a function in a *super class* (i.e. one ``extend``-ed in your "
"current class), use the ``super`` keyword::"
msgstr ""

#, fuzzy
msgid ""
"This is especially useful because functions in extending classes replace "
"functions with the same name in their super classes. If you still want to "
"call them, you can use ``super``::"
msgstr ""
"Jest to szczególnie przydatne, ponieważ funkcje w klasach pochodnych "
"zastępują funkcje o tej samej nazwie w swoich klasach bazowych. Więc jeśli "
"nadal chcesz je wywołać, to możesz użyć ``.`` będące tym samym co słowo "
"kluczowe ``super`` w innych językach:"

msgid ""
"If you need to call a different function from the super class, you can "
"specify the function name with the attribute operator::"
msgstr ""

msgid ""
"One of the common misconceptions is trying to override *non-virtual* engine "
"methods such as ``get_class()``, ``queue_free()``, etc. This is not "
"supported for technical reasons."
msgstr ""

msgid ""
"In Godot 3, you can *shadow* engine methods in GDScript, and it will work if "
"you call this method in GDScript. However, the engine will **not** execute "
"your code if the method is called inside the engine on some event."
msgstr ""

msgid ""
"In Godot 4, even shadowing may not always work, as GDScript optimizes native "
"method calls. Therefore, we added the ``NATIVE_METHOD_OVERRIDE`` warning, "
"which is treated as an error by default. We strongly advise against "
"disabling or ignoring the warning."
msgstr ""

msgid ""
"Note that this does not apply to virtual methods such as ``_ready()``, "
"``_process()`` and others (marked with the ``virtual`` qualifier in the "
"documentation and the names start with an underscore). These methods are "
"specifically for customizing engine behavior and can be overridden in "
"GDScript. Signals and notifications can also be useful for these purposes."
msgstr ""

#, fuzzy
msgid "Class constructor"
msgstr "Konstruktor klasy"

msgid ""
"The class constructor, called on class instantiation, is named ``_init``. If "
"you want to call the base class constructor, you can also use the ``super`` "
"syntax. Note that every class has an implicit constructor that it's always "
"called (defining the default values of class variables). ``super`` is used "
"to call the explicit constructor::"
msgstr ""

msgid "This is better explained through examples. Consider this scenario::"
msgstr ""

msgid "There are a few things to keep in mind here:"
msgstr "Nie ma żadnych ograniczeń w stosowaniu Godota:"

msgid ""
"If the inherited class (``state.gd``) defines a ``_init`` constructor that "
"takes arguments (``e`` in this case), then the inheriting class (``idle."
"gd``) *must* define ``_init`` as well and pass appropriate parameters to "
"``_init`` from ``state.gd``."
msgstr ""

msgid ""
"``idle.gd`` can have a different number of arguments than the base class "
"``state.gd``."
msgstr ""

msgid ""
"In the example above, ``e`` passed to the ``state.gd`` constructor is the "
"same ``e`` passed in to ``idle.gd``."
msgstr ""

msgid ""
"If ``idle.gd``'s ``_init`` constructor takes 0 arguments, it still needs to "
"pass some value to the ``state.gd`` base class, even if it does nothing. "
"This brings us to the fact that you can pass expressions to the base "
"constructor as well, not just variables, e.g.::"
msgstr ""

#, fuzzy
msgid "Static constructor"
msgstr "Konstruktor klasy"

msgid ""
"A static constructor is a static function ``_static_init`` that is called "
"automatically when the class is loaded, after the static variables have been "
"initialized::"
msgstr ""

msgid ""
"A static constructor cannot take arguments and must not return any value."
msgstr ""

msgid "Inner classes"
msgstr "Klasy wewnętrzne"

msgid ""
"A class file can contain inner classes. Inner classes are defined using the "
"``class`` keyword. They are instanced using the ``ClassName.new()`` function."
msgstr ""
"Plik klasy może zawierać klasy wewnętrzne. Klasy wewnętrzne są definiowane "
"za pomocą słowa kluczowego ``class``. Są one instancjowane za pomocą funkcji "
"``NazwaKlasy.new()``."

msgid "Classes as resources"
msgstr "Klasy jako zasoby"

msgid ""
"Classes stored as files are treated as :ref:`resources <class_GDScript>`. "
"They must be loaded from disk to access them in other classes. This is done "
"using either the ``load`` or ``preload`` functions (see below). Instancing "
"of a loaded class resource is done by calling the ``new`` function on the "
"class object::"
msgstr ""
"Klasy przechowywane jako pliki traktowane są jako :ref:`zasoby "
"<class_GDScript>`. Muszą być załadowane z dysku, aby uzyskać do nich dostęp "
"z innych klas. Odbywa się to za pomocą funkcji ``load`` lub ``preload`` "
"(patrz poniżej). Instancjowanie wczytanych zasobów klasy odbywa się przez "
"wywołanie funkcji ``new`` na obiekcie klasy::"

msgid "Exports"
msgstr "Eksport"

msgid ""
"Documentation about exports has been moved to :ref:`doc_gdscript_exports`."
msgstr ""

#, fuzzy
msgid "Properties (setters and getters)"
msgstr "Właściwości (set/get)"

#, fuzzy
msgid ""
"Sometimes, you want a class' member variable to do more than just hold data "
"and actually perform some validation or computation whenever its value "
"changes. It may also be desired to encapsulate its access in some way."
msgstr ""
"Często są używane, gdy zmienna w klasie zmienia swoją wartość. Pożądane jest "
"by kontrolować dostęp do tych zmiennych."

msgid ""
"For this, GDScript provides a special syntax to define properties using the "
"``set`` and ``get`` keywords after a variable declaration. Then you can "
"define a code block that will be executed when the variable is accessed or "
"assigned."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Na przykład:"

msgid ""
"Unlike ``setget`` in previous Godot versions, the properties setter and "
"getter are **always** called (except as noted below), even when accessed "
"inside the same class (with or without prefixing with ``self.``). This makes "
"the behavior consistent. If you need direct access to the value, use another "
"variable for direct access and make the property code use that name."
msgstr ""

#, fuzzy
msgid "Alternative syntax"
msgstr "Możesz również uruchomić"

msgid ""
"Also there is another notation to use existing class functions if you want "
"to split the code from the variable declaration or you need to reuse the "
"code across multiple properties (but you can't distinguish which property "
"the setter/getter is being called for)::"
msgstr ""

#, fuzzy
msgid "This can also be done in the same line::"
msgstr "Scena Mob będzie korzystać z następujących węzłów:"

msgid ""
"The setter and getter must use the same notation, mixing styles for the same "
"variable is not allowed."
msgstr ""

msgid ""
"You cannot specify type hints for *inline* setters and getters. This is done "
"on purpose to reduce the boilerplate. If the variable is typed, then the "
"setter's argument is automatically of the same type, and the getter's return "
"value must match it. Separated setter/getter functions can have type hints, "
"and the type must match the variable's type or be a wider type."
msgstr ""

msgid "When setter/getter is not called"
msgstr ""

msgid ""
"When a variable is initialized, the value of the initializer will be written "
"directly to the variable. Including if the ``@onready`` annotation is "
"applied to the variable."
msgstr ""

msgid ""
"Using the variable's name to set it inside its own setter or to get it "
"inside its own getter will directly access the underlying member, so it "
"won't generate infinite recursion and saves you from explicitly declaring "
"another variable::"
msgstr ""

#, fuzzy
msgid "This also applies to the alternative syntax::"
msgstr "Końcowy wynik:"

msgid ""
"The exception does **not** propagate to other functions called in the setter/"
"getter. For example, the following code **will** cause an infinite "
"recursion::"
msgstr ""

msgid "Tool mode"
msgstr "Tryb narzędziowy"

#, fuzzy
msgid ""
"By default, scripts don't run inside the editor and only the exported "
"properties can be changed. In some cases, it is desired that they do run "
"inside the editor (as long as they don't execute game code or manually avoid "
"doing so). For this, the ``@tool`` annotation exists and must be placed at "
"the top of the file::"
msgstr ""
"Domyślnie skrypty nie są uruchamiane wewnątrz edytora i tylko eksportowane "
"właściwości mogą być zmieniane. W niektórych przypadkach pożądane jest, aby "
"uruchamiały się wewnątrz edytora (o ile nie uruchamiają kodu gry). W tym "
"celu istnieje słowo kluczowe ``tool`` i musi być umieszczone na górze pliku:"

msgid "See :ref:`doc_running_code_in_the_editor` for more information."
msgstr ""
":ref:`Uruchamianie kodu w edytorze <doc_running_code_in_the_editor>` dla "
"więcej informacji."

msgid ""
"Be cautious when freeing nodes with ``queue_free()`` or ``free()`` in a tool "
"script (especially the script's owner itself). As tool scripts run their "
"code in the editor, misusing them may lead to crashing the editor."
msgstr ""

msgid "Memory management"
msgstr "Zarządzanie pamięcią"

msgid ""
"Godot implements reference counting to free certain instances that are no "
"longer used, instead of a garbage collector, or requiring purely manual "
"management. Any instance of the :ref:`class_RefCounted` class (or any class "
"that inherits it, such as :ref:`class_Resource`) will be freed automatically "
"when no longer in use. For an instance of any class that is not a :ref:"
"`class_RefCounted` (such as :ref:`class_Node` or the base :ref:"
"`class_Object` type), it will remain in memory until it is deleted with "
"``free()`` (or ``queue_free()`` for Nodes)."
msgstr ""

msgid ""
"If a :ref:`class_Node` is deleted via ``free()`` or ``queue_free()``, all of "
"its children will also recursively be deleted."
msgstr ""

msgid ""
"To avoid reference cycles that can't be freed, a :ref:`class_WeakRef` "
"function is provided for creating weak references, which allow access to the "
"object without preventing a :ref:`class_RefCounted` from freeing. Here is an "
"example:"
msgstr ""

msgid ""
"Alternatively, when not using references, the "
"``is_instance_valid(instance)`` can be used to check if an object has been "
"freed."
msgstr ""

msgid "Signals"
msgstr "Sygnały"

msgid ""
"Signals are a tool to emit messages from an object that other objects can "
"react to. To create custom signals for a class, use the ``signal`` keyword."
msgstr ""

msgid ""
"Signals are a `Callback <https://en.wikipedia.org/wiki/"
"Callback_(computer_programming)>`_ mechanism. They also fill the role of "
"Observers, a common programming pattern. For more information, read the "
"`Observer tutorial <https://gameprogrammingpatterns.com/observer.html>`_ in "
"the Game Programming Patterns ebook."
msgstr ""

msgid ""
"You can connect these signals to methods the same way you connect built-in "
"signals of nodes like :ref:`class_Button` or :ref:`class_RigidBody3D`."
msgstr ""

msgid ""
"In the example below, we connect the ``health_depleted`` signal from a "
"``Character`` node to a ``Game`` node. When the ``Character`` node emits the "
"signal, the game node's ``_on_character_health_depleted`` is called::"
msgstr ""

msgid "You can emit as many arguments as you want along with a signal."
msgstr ""

msgid ""
"Here is an example where this is useful. Let's say we want a life bar on "
"screen to react to health changes with an animation, but we want to keep the "
"user interface separate from the player in our scene tree."
msgstr ""

msgid ""
"In our ``character.gd`` script, we define a ``health_changed`` signal and "
"emit it with :ref:`Signal.emit() <class_Signal_method_emit>`, and from a "
"``Game`` node higher up our scene tree, we connect it to the ``Lifebar`` "
"using the :ref:`Signal.connect() <class_Signal_method_connect>` method::"
msgstr ""

msgid ""
"In the ``Game`` node, we get both the ``Character`` and ``Lifebar`` nodes, "
"then connect the character, that emits the signal, to the receiver, the "
"``Lifebar`` node in this case."
msgstr ""

msgid ""
"This allows the ``Lifebar`` to react to health changes without coupling it "
"to the ``Character`` node."
msgstr ""

msgid ""
"You can write optional argument names in parentheses after the signal's "
"definition::"
msgstr ""

msgid ""
"These arguments show up in the editor's node dock, and Godot can use them to "
"generate callback functions for you. However, you can still emit any number "
"of arguments when you emit signals; it's up to you to emit the correct "
"values."
msgstr ""

msgid ""
"GDScript can bind an array of values to connections between a signal and a "
"method. When the signal is emitted, the callback method receives the bound "
"values. These bound arguments are unique to each connection, and the values "
"will stay the same."
msgstr ""

msgid ""
"You can use this array of values to add extra constant information to the "
"connection if the emitted signal itself doesn't give you access to all the "
"data that you need."
msgstr ""

msgid ""
"Building on the example above, let's say we want to display a log of the "
"damage taken by each character on the screen, like ``Player1 took 22 damage."
"``. The ``health_changed`` signal doesn't give us the name of the character "
"that took damage. So when we connect the signal to the in-game console, we "
"can add the character's name in the binds array argument::"
msgstr ""

msgid ""
"Our ``BattleLog`` node receives each element in the binds array as an extra "
"argument::"
msgstr ""

#, fuzzy
msgid "Awaiting for signals or coroutines"
msgstr "Tworzenie projektu"

msgid ""
"The ``await`` keyword can be used to create `coroutines <https://en."
"wikipedia.org/wiki/Coroutine>`_ which wait until a signal is emitted before "
"continuing execution. Using the ``await`` keyword with a signal or a call to "
"a function that is also a coroutine will immediately return the control to "
"the caller. When the signal is emitted (or the called coroutine finishes), "
"it will resume execution from the point on where it stopped."
msgstr ""

msgid ""
"For example, to stop execution until the user presses a button, you can do "
"something like this::"
msgstr ""

msgid ""
"In this case, the ``wait_confirmation`` becomes a coroutine, which means "
"that the caller also needs to await for it::"
msgstr ""

msgid ""
"Note that requesting a coroutine's return value without ``await`` will "
"trigger an error::"
msgstr ""

msgid ""
"However, if you don't depend on the result, you can just call it "
"asynchronously, which won't stop execution and won't make the current "
"function a coroutine::"
msgstr ""

msgid ""
"If you use await with an expression that isn't a signal nor a coroutine, the "
"value will be returned immediately and the function won't give the control "
"back to the caller::"
msgstr ""

msgid ""
"This also means that returning a signal from a function that isn't a "
"coroutine will make the caller await on that signal::"
msgstr ""

msgid ""
"Unlike ``yield`` in previous Godot versions, you cannot obtain the function "
"state object. This is done to ensure type safety. With this type safety in "
"place, a function cannot say that it returns an ``int`` while it actually "
"returns a function state object during runtime."
msgstr ""

msgid "Assert keyword"
msgstr "Słowo kluczowe assert"

msgid ""
"The ``assert`` keyword can be used to check conditions in debug builds. "
"These assertions are ignored in non-debug builds. This means that the "
"expression passed as argument won't be evaluated in a project exported in "
"release mode. Due to this, assertions must **not** contain expressions that "
"have side effects. Otherwise, the behavior of the script would vary "
"depending on whether the project is run in a debug build."
msgstr ""

msgid ""
"When running a project from the editor, the project will be paused if an "
"assertion error occurs."
msgstr ""

msgid ""
"You can optionally pass a custom error message to be shown if the assertion "
"fails::"
msgstr ""

msgid "Translation status"
msgstr "Status tłumaczenia"
