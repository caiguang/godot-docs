# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: pl\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Canvas layers"
msgstr "Warstwy Kanwy (Canvas layers)"

msgid "Viewport and Canvas items"
msgstr "Rzut Widoku oraz Elementy Kanwy (Viewport and Canvas items)"

msgid ""
":ref:`CanvasItem <class_CanvasItem>` is the base for all 2D nodes, be it "
"regular 2D nodes, such as :ref:`Node2D <class_Node2D>`, or :ref:`Control "
"<class_Control>`. Both inherit from :ref:`CanvasItem <class_CanvasItem>`. "
"You can arrange canvas items in trees. Each item will inherit its parent's "
"transform: when the parent moves, its children move too."
msgstr ""
":ref:`CanvasItem <class_CanvasItem>` jest podstawą wszystkich węzłów 2D, czy "
"to zwykłych takich jak :ref:`Node2D <class_Node2D>`, lub :ref:`Control "
"<class_Control>`. Oba dziedziczą od :ref:`CanvasItem <class_CanvasItem>`. "
"Elementy Kanwy można układać w struktury drzew. Każdy element dziedziczy "
"transformacje od swojego rodzica: gdy rodzic się porusza jego dzieci również "
"się poruszają."

msgid ""
"CanvasItem nodes, and nodes inheriting from them, are direct or indirect "
"children of a :ref:`Viewport <class_Viewport>`, that displays them."
msgstr ""
"Węzeł CanvasItem oraz węzły od niego dziedziczące są bezpośrednio bądź "
"pośrednio dziećmi :ref:`Viewport <class_Viewport>`a, który je wyświetla."

msgid ""
"The Viewport's property :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, allows to apply a custom :ref:"
"`Transform2D <class_Transform2D>` transform to the CanvasItem hierarchy it "
"contains. Nodes such as :ref:`Camera2D <class_Camera2D>` work by changing "
"that transform."
msgstr ""
"Właściwość Viewporta :ref:`Viewport.canvas_transform "
"<class_Viewport_property_canvas_transform>`, pozwala na zastosowanie "
"niestandardowej transformacji :ref:`Transform2D <class_Transform2D>` w "
"ramach hierarchi CanvasItem . Węzły takie jak :ref:`Camera2D "
"<class_Camera2D>` działają poprzez zmiane tej transformacji."

msgid ""
"To achieve effects like scrolling, manipulating the canvas transform "
"property is more efficient than moving the root canvas item and the entire "
"scene with it."
msgstr ""
"Aby uzyskać efekt skrolowania, zmiana właściwości kanwy 'transform' jest "
"bardziej efektywna zamiast poruszać korzeniem elemnetów kanwy, który także "
"poruszy całą sceną."

msgid ""
"Usually though, we don't want *everything* in the game or app to be subject "
"to the canvas transform. For example:"
msgstr ""
"Zazwyczaj jednak nie chcemy, aby *wszystko* w grze lub aplikacji podlegało "
"transformacji kanwy. Na przykład:"

msgid ""
"**Parallax Backgrounds**: Backgrounds that move slower than the rest of the "
"stage."
msgstr ""
"**Parallax Backgrounds**: Tło które porusza się wolniej niż reszta sceny."

msgid ""
"**UI**: Think of a user interface (UI) or head-up display (HUD) superimposed "
"on our view of the game world. We want a life counter, score display and "
"other elements to retain their screen positions even when our view of the "
"game world changes."
msgstr ""
"**UI**: Pomyślmy o interfejsie użytkownika (user inteface - UI) lub o head-"
"up display (HUD) nałożonych na nasz widok świata gry . Chcemy, aby licznik "
"żyć, wyświetlanie wyników i inne elementy zachowały swoje pozycje na "
"ekranie, nawet gdy nasz widok świata gry się zmienia."

msgid ""
"**Transitions**: We may want visual effects used for transitions (fades, "
"blends) to remain at a fixed screen location."
msgstr ""
"**Transitions**: Możemy chcieć uzyskać wizualny efekt przejścia np. między "
"scenami (zanikanie, blendowanie) to chcemy aby efekt pozostał w stałej "
"lokalizacji ekranu."

msgid "How to solve these problems in a single scene tree?"
msgstr "Jak mogę to rozwiązać za pomocą jednej sceny?"

msgid "CanvasLayers"
msgstr "CanvasLayers"

msgid ""
"The answer is :ref:`CanvasLayer <class_CanvasLayer>`, which is a node that "
"adds a separate 2D rendering layer for all its children and grand-children. "
"Viewport children will draw by default at layer \"0\", while a CanvasLayer "
"will draw at any numeric layer. Layers with a greater number will be drawn "
"above those with a smaller number. CanvasLayers also have their own "
"transform and do not depend on the transform of other layers. This allows "
"the UI to be fixed in screen-space while our view on the game world changes."
msgstr ""
"Odpowiedzią jest :ref:`CanvasLayer <class_CanvasLayer>`, który jest węzłem "
"dodającym oddzielną warstwę renderowania 2D dla wszystkich swoich dzieci i "
"wnuków (podwęzłów). Dzieci Viewporta będą domyślnie rysowane na warstwie "
"numer \"0\", podczas gdy CanvasLayer może być rysowanym na dowolnym numerze "
"warstwy. Warstwy z większym numerem będą rysowane wyżej od tych z mniejszym "
"numerem. Będą je przysłaniać. CanvasLayers mają również własną transformację "
"i nie zależą od transformacji innych warstw. Dzięki temu interfejs "
"użytkownika może być stały w przestrzeni ekranu, podczas gdy nasz widok na "
"świat gry się zmienia."

msgid ""
"An example of this is creating a parallax background. This can be done with "
"a CanvasLayer at layer \"-1\". The screen with the points, life counter and "
"pause button can also be created at layer \"1\"."
msgstr ""
"Przykładem tego jest tworzenie tła paralaksy. Można to zrobić ustawiająć w "
"CanvasLayer warstwę na \"-1\". Ekran z punktami, ilością żyć bądź "
"przyciskiem pauzy można utworzyć na warstwie \"1\"."

msgid "Here's a diagram of how it looks:"
msgstr "Tutaj jest diagram jak to powinno wyglądać:"

msgid ""
"CanvasLayers are independent of tree order, and they only depend on their "
"layer number, so they can be instantiated when needed."
msgstr ""
"CanvasLayers są niezależne od pozycji w drzewie sceny i zależą wyłącznie od "
"numeru warstwy, więc możesz je dodać na dowolnym poziomie drzewa sceny."

msgid ""
"CanvasLayers aren't necessary to control the drawing order of nodes. The "
"standard way to ensuring that a node is correctly drawn 'in front' or "
"'behind' others is to manipulate the order of the nodes in the scene panel. "
"Perhaps counterintuitively, the topmost nodes in the scene panel are drawn "
"on *behind* lower ones in the viewport. 2D nodes also have the :ref:"
"`CanvasItem.z_index <class_CanvasItem_property_z_index>` property for "
"controlling their drawing order."
msgstr ""
"CanvasLayers nie są konieczne do kontrolowania kolejności widoczności "
"węzłów. Standardowym sposobem upewnienia się, że węzeł jest poprawnie "
"rysowany \"przed\" lub \"za\" innymi, jest ustawianie kolejności węzłów na "
"liście drzewa węzłów sceny. Wbrew intuicji najwyższe węzły w panelu sceny są "
"rysowane *za* niższymi w rzutni. Węzły 2D mają również właściwość :ref:"
"`CanvasItem.z_index <class_CanvasItem_property_z_index>` do kontrolowania "
"ich kolejności rysowania."

msgid "Translation status"
msgstr "Status tłumaczenia"
