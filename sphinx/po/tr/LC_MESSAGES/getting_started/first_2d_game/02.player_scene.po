# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating the player scene"
msgstr "Oyuncu sahnesini oluşturmak"

msgid ""
"With the project settings in place, we can start working on the player-"
"controlled character."
msgstr ""
"Proje ayarları yerini aldığına göre, oyuncu-denetimli karakter üzerinde "
"çalışmaya başlayabiliriz."

msgid ""
"The first scene will define the ``Player`` object. One of the benefits of "
"creating a separate Player scene is that we can test it separately, even "
"before we've created other parts of the game."
msgstr ""
"İlk sahne, ``Player`` (oyuncu) nesnesini tanımlayacak. Ayrı bir oyuncu "
"sahnesi oluşturmanın yararlarından biri, oyunun diğer kısımlarını "
"oluşturmadan çok önce, bunun üzerinde denemeler yapabilmektir."

msgid "Node structure"
msgstr "Düğüm Yapısı"

msgid ""
"To begin, we need to choose a root node for the player object. As a general "
"rule, a scene's root node should reflect the object's desired functionality "
"- what the object *is*. Click the \"Other Node\" button and add an :ref:"
"`Area2D <class_Area2D>` node to the scene."
msgstr ""
"Başlangıç olarak, oyuncu nesnesi için bir kök düğüm seçmeliyiz. Genel bir "
"kural olarak, sahnenin kök düğümü nesnenin arzu edilen işlevini "
"yansıtmalıdır - nesnenin ne *olduğu*. \"Diğer Düğüm\" düğmesine tıklayın ve "
"sahneye bir 2B alan, :ref:`Area2D <class_Area2D>`, düğümü ekleyin."

msgid ""
"Godot will display a warning icon next to the node in the scene tree. You "
"can ignore it for now. We will address it later."
msgstr ""
"Godot sahnedeki düğümün yanında bir uyarı gösterecektir. Şimdilik bunu "
"gözardı edin. Sonra üzerinde duracağız."

msgid ""
"With ``Area2D`` we can detect objects that overlap or run into the player. "
"Change the node's name to ``Player`` by double-clicking on it. Now that "
"we've set the scene's root node, we can add additional nodes to give it more "
"functionality."
msgstr ""
"``Area2D`` kullanarak, oyuncu ile çakışan veya oyuncuya çarpan nesneleri "
"tespit edebiliriz. Düğümün ismini, üzerine çift tıklayarak ``Player`` "
"(oyuncu) olarak değiştirin. Şimdi, sahnenin kök düğümünü ayarladığımıza "
"göre, daha fazla işlevsellik kazandırmak için daha fazla düğüm ekleyebiliriz."

#, fuzzy
msgid ""
"Before we add any children to the ``Player`` node, we want to make sure we "
"don't accidentally move or resize them by clicking on them. Select the node "
"and click the icon to the right of the lock. Its tooltip says \"Make "
"selected node's children not selectable.\""
msgstr ""
"``Player`` düğümüne herhangi bir alt düğüm eklemeden önce, kazara üzerlerine "
"tıklayıp onları boyutlandırmağımızdan ya da taşımayacağımızdan emin olmak "
"istiyoruz. Düğümü seçip kilit simgesinin sağ tarafındaki simgeye tıklayın; "
"araç ipucu olarak \"Nesnenin alt-öğelerini seçilemez yapın\" yazar"

msgid ""
"Save the scene. Click Scene -> Save, or press :kbd:`Ctrl + S` on Windows/"
"Linux or :kbd:`Cmd + S` on macOS."
msgstr ""
"Sahneyi kaydedin. Sahne -> Kaydet tıklayın, ya da Windows/Linux için :kbd:"
"`Ctrl + S` tuşlarına, MacOS için :kbd:`Cmd + S` tuşlarına basın."

msgid "For this project, we will be following the Godot naming conventions."
msgstr "Bu proje için, Godot isimlendirme geleneğini takip edeceğiz."

msgid ""
"**GDScript**: Classes (nodes) use PascalCase, variables and functions use "
"snake_case, and constants use ALL_CAPS (See :ref:`doc_gdscript_styleguide`)."
msgstr ""
"**GDScript**: Sınıf (düğümler) isimleri PaskalTarzı kullanır, değişkenler ve "
"fonksiyonlar yılan_tarzı kullanır, ve sabitler ise HEPSİ_BÜYÜK tarz ile "
"yazılır (bakınız :ref:`doc_gdscript_styleguide`)."

msgid ""
"**C#**: Classes, export variables and methods use PascalCase, private fields "
"use _camelCase, local variables and parameters use camelCase (See :ref:"
"`doc_c_sharp_styleguide`). Be careful to type the method names precisely "
"when connecting signals."
msgstr ""
"**C#**: Nesneler, dışa aktarılan değişkenler ve yöntemler için PaskalTarzı, "
"özel alanlar için _deveTarzı (başında alt çizgi), yerel değişkenler ve "
"parametreler için ise deveTarzı kullanın (bakınız :ref:"
"`doc_c_sharp_styleguide`). Sinyalleri bağlarken yöntem isimlerini tam olarak "
"yazdığınızdan emin olun."

msgid "Sprite animation"
msgstr "Grafik öğe animasyonu"

#, fuzzy
msgid ""
"Click on the ``Player`` node and add (:kbd:`Ctrl + A` on Windows/Linux or :"
"kbd:`Cmd + A` on macOS) a child node :ref:`AnimatedSprite2D "
"<class_AnimatedSprite2D>`. The ``AnimatedSprite2D`` will handle the "
"appearance and animations for our player. Notice that there is a warning "
"symbol next to the node. An ``AnimatedSprite2D`` requires a :ref:"
"`SpriteFrames <class_SpriteFrames>` resource, which is a list of the "
"animations it can display. To create one, find the ``Sprite Frames`` "
"property under the ``Animation`` tab in the Inspector and click \"[empty]\" -"
"> \"New SpriteFrames\". Click again to open the \"SpriteFrames\" panel:"
msgstr ""
"``Player`` düğümüne tıklayın, ve alt-öğe olarak bir :ref:`AnimatedSprite "
"<class_AnimatedSprite>` (hareketli grafik öğe) düğümü ekleyin. "
"``AnimatedSprite`` oyuncu için görünüm ve animasyonları tutacak. Düğümün yan "
"tarafında bir uyarı işareti olduğuna dikkat edin. Bir ``AnimatedSprite`` "
"düğümü, bir :ref:`SpriteFrames <class_SpriteFrames>` (grafik öğe kareleri) "
"kaynağına ihtiyaç duyar, bu da görüntüleyebileceği animasyonların bir "
"listesidir. Bir tane oluşturmak için, Denetleyici bölmesinden ``Kareler`` "
"özelliğini bulun ve \"[boş]\" -> \"Yeni SpriteFrames\" 'e tıklayın.Buna "
"tekrar tıklayarak \"SpriteFrames\" panelini açın:"

#, fuzzy
msgid ""
"On the left is a list of animations. Click the \"default\" one and rename it "
"to \"walk\". Then click the \"Add Animation\" button to create a second "
"animation named \"up\". Find the player images in the \"FileSystem\" tab - "
"they're in the ``art`` folder you unzipped earlier. Drag the two images for "
"each animation, named ``playerGrey_up[1/2]`` and ``playerGrey_walk[1/2]``, "
"into the \"Animation Frames\" side of the panel for the corresponding "
"animation:"
msgstr ""
"Sol tarafta animasyonların listesi var. \"varsayılan\" yazana tıklayın ve "
"ismini \"walk\" (yürü) olarak değiştirin. Sonra \"Yeni Animasyon\" düğmesine "
"basarak, \"up\" (yukarı) isminde ikinci bir animasyon oluşturun. "
"\"DosyaSistemi\" sekmesinden oyuncu resimlerini bulun - daha önce zip "
"dosyasından çıkardığımız ``art`` klasöründeler. Her animasyon için iki resim "
"sürükleyin - isimleri ``playerGrey_up[1/2]`` ve ``playerGrey_walk[1/2]``, ve "
"bunlara karşılık gelen animasyonlar için \"Animasyon Kareleri\" isimli yan "
"panelin içine bırakın:"

#, fuzzy
msgid ""
"The player images are a bit too large for the game window, so we need to "
"scale them down. Click on the ``AnimatedSprite2D`` node and set the "
"``Scale`` property to ``(0.5, 0.5)``. You can find it in the Inspector under "
"the ``Node2D`` heading."
msgstr ""
"Oyuncu resimleri, oyun penceresi için biraz büyük, yani bunları biraz "
"küçültmeliyiz. ``AnimatedSprite`` düğümüne tıklayın ve ``Ölçek`` (scale) "
"özelliğini ``(0.5,0.5)`` olarak ayarlayın. Bu özelliği Denetleyici içinde "
"``Node2D`` başlığı altında bulabilirsiniz."

#, fuzzy
msgid ""
"Finally, add a :ref:`CollisionShape2D <class_CollisionShape2D>` as a child "
"of ``Player``. This will determine the player's \"hitbox\", or the bounds of "
"its collision area. For this character, a ``CapsuleShape2D`` node gives the "
"best fit, so next to \"Shape\" in the Inspector, click \"[empty]\" -> \"New "
"CapsuleShape2D\". Using the two size handles, resize the shape to cover the "
"sprite:"
msgstr ""
"Son olarak, ``Player`` ın alt-öğesi olarak bir 2B çarpışma şekli, :ref:"
"`CollisionShape2D <class_CollisionShape2D>`, ekleyin. Bu oyuncunun "
"\"çarpışma-kutusu\"nu, yani çarpışma alanı için sınırlarını belirleyecek. Bu "
"karakter için, bir ``CapsuleShape2D`` düğümü en iyi sonucu verir, bu yüzden "
"Denetleyicideki \"Şekil\" ifadesinin yanındaki \"[boş]\"\" -> \"Yeni "
"CapsuleShape2D\" 'ye tıklayın. İki tane boyutlandırma tutumacını kullanarak, "
"grafik öğeyi kapsayacak biçimde şekli yeniden boyutlandırın:"

msgid "When you're finished, your ``Player`` scene should look like this:"
msgstr "Bitirdiğinizde, ``Player`` sahneniz bunun gibi görünmelidir:"

msgid "Make sure to save the scene again after these changes."
msgstr "Bu değişikliklerden sonra sahneyi tekrar kaydettiğinizden emin olun."

msgid ""
"In the next part, we'll add a script to the player node to move and animate "
"it. Then, we'll set up collision detection to know when the player got hit "
"by something."
msgstr ""
"Sıradaki bölümde, hareket ettirme ve canlandırma için oyuncu düğümüne bir "
"betik ekleyeceğiz. Sonra, oyuncu bir şeylerle çarpışırsa bunu anlamak için "
"çarpışma algılamasını kuracağız."

msgid "Translation status"
msgstr "Çeviri durumu"
