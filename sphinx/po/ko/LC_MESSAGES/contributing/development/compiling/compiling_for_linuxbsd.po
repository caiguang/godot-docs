# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Compiling for Linux, \\*BSD"
msgstr "iOS로 내보내기"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""

msgid "Requirements"
msgstr "요구사항"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""

msgid "GCC 7+ or Clang 6+."
msgstr ""

msgid "`Python 3.6+ <https://www.python.org/downloads/>`_."
msgstr ""

msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

msgid ""
"If your distribution uses Python 2 by default, or you are using a version of "
"SCons prior to 3.1.2, you will need to change the version of Python that "
"SCons uses by changing the shebang (the first line) of the SCons script file "
"to ``#! /usr/bin/python3``. Use the command ``which scons`` to find the "
"location of the SCons script file."
msgstr ""

msgid "pkg-config (used to detect the development libraries listed below)."
msgstr ""

#, fuzzy
msgid "Development libraries:"
msgstr "능동적 개발 고려사항"

msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr ""

msgid "MesaGL."
msgstr ""

msgid "ALSA."
msgstr ""

#, fuzzy
msgid "PulseAudio."
msgstr "오디오"

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr ""

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

msgid "Distro-specific one-liners"
msgstr ""

#, fuzzy
msgid "Alpine Linux"
msgstr "Windows, Linux"

#, fuzzy
msgid "Arch Linux"
msgstr "리눅스"

msgid "Debian/Ubuntu"
msgstr ""

msgid "Fedora"
msgstr ""

msgid "FreeBSD"
msgstr ""

msgid "Gentoo"
msgstr ""

msgid "Mageia"
msgstr ""

msgid "OpenBSD"
msgstr ""

msgid "openSUSE"
msgstr ""

msgid "NetBSD"
msgstr ""

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""

msgid "Solus"
msgstr ""

msgid "Compiling"
msgstr "컴파일링(Compiling)"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""

msgid ""
"Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of "
"``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the "
"`3.x branch of this documentation <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__."
msgstr ""

msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons options "
"``target=template_release production=yes``."
msgstr ""

msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``lto=full``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#, fuzzy
msgid "Running a headless/server build"
msgstr "출시 빌드에서 실행 중"

msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr ""

msgid "And then use the ``--headless`` command line argument::"
msgstr ""

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""

msgid "Building export templates"
msgstr ""

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""

msgid ""
"To build Linux or \\*BSD export templates, run the build system with the "
"following parameters:"
msgstr ""

msgid "(32 bits)"
msgstr ""

msgid "(64 bits)"
msgstr ""

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""

msgid ""
"To create standard export templates, the resulting files in the ``bin/`` "
"folder must be copied to:"
msgstr ""

msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux/X11\" by "
"Godot):"
msgstr ""

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""

msgid "Using Clang and LLD for faster development"
msgstr ""

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr ""

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""

msgid "If this error occurs::"
msgstr ""

#, fuzzy
msgid "There are two solutions:"
msgstr "이렇게 하고 싶어하는 몇 가지 이유가 있습니다:"

msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr ""

msgid ""
"Follow `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ to configure, build, and install "
"``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/"
"libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln -"
"s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure "
"the latest ``libatomic_ops`` will be used without the need to copy it "
"everytime when it is updated."
msgstr ""

#, fuzzy
msgid "Using mold for faster development"
msgstr "내보내기 소개"

msgid ""
"For even faster linking compared to LLD, you can use `mold <https://github."
"com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""

msgid ""
"As of January 2023, mold is not readily available in Linux distribution "
"repositories, so you will have to install its binaries manually."
msgstr ""

#, fuzzy
msgid ""
"Download mold binaries from its `releases page <https://github.com/rui314/"
"mold/releases/latest>`__."
msgstr ""
"`godot-cpp 저장소 <https://github.com/GodotNativeTools/godot-cpp>`_ 의 사본."

msgid ""
"Extract the ``.tar.gz`` file, then move the extraced folder to a location "
"such as ``.local/share/mold``."
msgstr ""

msgid ""
"Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment "
"variable. For example, you can add the following line at the end of your "
"``$HOME/.bash_profile`` file:"
msgstr ""

msgid ""
"Open a new terminal (or run ``source \"$HOME/.bash_profile\"``), then use "
"the following SCons command when compiling Godot::"
msgstr ""

#, fuzzy
msgid "Using system libraries for faster development"
msgstr "내보내기 소개"

msgid ""
"`Godot bundles the source code of various third-party libraries. <https://"
"github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to "
"use system versions of third-party libraries instead. This makes the Godot "
"binary faster to link, as third-party libraries are dynamically linked. "
"Therefore, they don't need to be statically linked every time you build the "
"engine (even on small incremental changes)."
msgstr ""

msgid ""
"However, not all Linux distributions have packages for third-party libraries "
"available (or they may not be up-to-date)."
msgstr ""

msgid ""
"Moving to system libraries can reduce linking times by several seconds on "
"slow CPUs, but it requires manual testing depending on your Linux "
"distribution. Also, you may not be able to use system libraries for "
"everything due to bugs in the system library packages (or in the build "
"system, as this feature is less tested)."
msgstr ""

msgid ""
"To compile Godot with system libraries, install these dependencies *on top* "
"of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""

msgid "**Fedora**"
msgstr ""

msgid ""
"After installing all required packages, use the following command to build "
"Godot:"
msgstr ""

msgid ""
"You can view a list of all built-in libraries that have system alternatives "
"by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""

msgid ""
"When using system libraries, the resulting library is **not** portable "
"across Linux distributions anymore. Do not use this approach for creating "
"binaries you intend to distribute to others, unless you're creating a "
"package for a Linux distribution."
msgstr ""

#, fuzzy
msgid "Using Pyston for faster development"
msgstr "내보내기 소개"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""

msgid ""
"Alternatively, you can run ``python -m pip install pyston_lite_autoload`` "
"then run SCons as usual. This will automatically load a subset of Pyston's "
"optimizations in any Python program you run. However, this won't bring as "
"much of a performance improvement compared to installing \"full\" Pyston."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
