# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Making plugins"
msgstr "플러그인 만들기"

msgid "About plugins"
msgstr "플러그인에 대해서"

#, fuzzy
msgid ""
"A plugin is a great way to extend the editor with useful tools. It can be "
"made entirely with GDScript and standard scenes, without even reloading the "
"editor. Unlike modules, you don't need to create C++ code nor recompile the "
"engine. While this makes plugins less powerful, there are still many things "
"you can do with them. Note that a plugin is similar to any scene you can "
"already make, except it is created using a script to add editor "
"functionality."
msgstr ""
"플러그인은 에디터에 유용한 툴을 추가할 수 있는 좋은 방법입니다. 에디터를 다"
"시 로드하지 않고도 GDScript와 표준 씬만으로 플러그인을 만들 수 있습니다. 모듈"
"과 다르게, C++ 코드를 만들거나 엔진을 다시 컴파일할 필요도 없습니다. 이로 인"
"해 플러그인의 기능이 덜 강력해지긴 하지만 그럼에도 플러그인으로 할 수 있는 작"
"업은 많습니다. 플러그인은 편집기 기능을 추가하기 위해 스크립트를 사용해 생성"
"된다는 점만 빼면 기존의 다른 씬들과 유사합니다."

msgid ""
"This tutorial will guide you through the creation of two plugins so you can "
"understand how they work and be able to develop your own. The first is a "
"custom node that you can add to any scene in the project, and the other is a "
"custom dock added to the editor."
msgstr ""
"이 튜토리얼에서는 플러그인의 작동 방식을 이해하고, 자신만의 플러그인을 개발하"
"기 위해 두 가지 플러그인을 만드는 과정을 안내합니다. 첫 번째는 프로젝트의 모"
"든 씬에 추가할 수 있는 사용자 정의 노드이고, 다른 하나는 에디터에 추가되는 사"
"용자 정의 독(dock)입니다."

msgid "Creating a plugin"
msgstr "플러그인 생성하기"

msgid ""
"Before starting, create a new empty project wherever you want. This will "
"serve as a base to develop and test the plugins."
msgstr ""
"시작하기 전에 원하는 위치에 빈 프로젝트를 만드세요. 이는 플러그인을 개발하고 "
"테스트하기 위한 기반 역할을 합니다."

msgid ""
"The first thing you need for the editor to identify a new plugin is to "
"create two files: a ``plugin.cfg`` for configuration and a tool script with "
"the functionality. Plugins have a standard path like ``addons/plugin_name`` "
"inside the project folder. Godot provides a dialog for generating those "
"files and placing them where they need to be."
msgstr ""
"가장 먼저, 에디터가 새 플러그인을 인식하기 위해 두 개의 파일이 필요합니다. 구"
"성을 위한 ``plugin.cfg``와 기능이 포함된 툴 스크립트입니다. 플러그인은 프로젝"
"트 폴더 내에 ``addons/plugin_name``형태의 표준 경로를 가지고 있습니다. Godot"
"는 해당 파일을 생성하고 필요한 위치에 배치하기 위한 대화 상자를 제공합니다."

msgid ""
"In the main toolbar, click the ``Project`` dropdown. Then click ``Project "
"Settings...``. Go to the ``Plugins`` tab and then click on the ``Create New "
"Plugin`` button in the top-right."
msgstr ""
"메인 툴바에서 '프로젝트(Project)' 드롭다운을 클릭하세요. 그런 다음 '프로젝트 "
"설정...(Project Settings...)'을 클릭하세요. '플러그인(Plugins)' 탭으로 이동"
"한 다음 오른쪽 상단에 있는 '새 플러그인 만들기(Create New Plugin)' 버튼을 클"
"릭하세요."

msgid "You will see the dialog appear, like so:"
msgstr "다음과 같은 대화 상자가 나타나는 것을 볼 수 있습니다."

msgid ""
"The placeholder text in each field describes how it affects the plugin's "
"creation of the files and the config file's values."
msgstr ""
"각 필드의 자리 표시자 텍스트는 플러그인의 파일 생성 및 구성 파일 값에 어떤 영"
"향을 미치는지 설명합니다."

msgid "To continue with the example, use the following values:"
msgstr "예제를 계속하려면, 다음 값을 사용하십시오."

msgid ""
"Unchecking the ``Activate now?`` option in C# is always required because, "
"like every other C# script, the EditorPlugin script needs to be compiled "
"which requires building the project. After building the project the plugin "
"can be enabled in the ``Plugins`` tab of ``Project Settings``."
msgstr ""
"다른 모든 C# 스크립트와 마찬가지로 EditorPlugin 스크립트를 컴파일해야 프로젝"
"트를 빌드해야 하기 때문에 C#에서 ``지금 활성화하시겠습니까?`` 옵션을 선택 취"
"소해야 합니다. 프로젝트를 빌드한 후 ``프로젝트 설정``의 ``플러그인`` 탭에서 "
"플러그인을 활성화할 수 있습니다."

msgid "You should end up with a directory structure like this:"
msgstr "다음과 같은 디렉터리 구조로 끝나야 합니다."

msgid ""
"``plugin.cfg`` is an INI file with metadata about your plugin. The name and "
"description help people understand what it does. Your name helps you get "
"properly credited for your work. The version number helps others know if "
"they have an outdated version; if you are unsure on how to come up with the "
"version number, check out `Semantic Versioning <https://semver.org/>`_. The "
"main script file will instruct Godot what your plugin does in the editor "
"once it is active."
msgstr ""
"``plugin.cfg``는 플러그인에 대한 메타데이터가 포함된 INI 파일입니다. 이름과 "
"설명은 사람들이 그 기능을 이해하는 데 도움이 됩니다. 이름을 남겨두면 작업한 "
"업무에 대해 적절한 인정을 받는 데 도움이 됩니다. 버전 번호는 다른 사람들이 오"
"래된 버전인지 알 수 있도록 도와줍니다. 버전 번호를 찾는 방법을 잘 모르겠으면 "
"`Semantic Versioning <https://semver.org/>`_을 확인하세요. 메인 스크립트 파일"
"은 플러그인이 활성화되면 에디에서 플러그인이 수행하는 작업을 Godot에게 지시니"
"다."

msgid "The script file"
msgstr ""

msgid ""
"Upon creation of the plugin, the dialog will automatically open the "
"EditorPlugin script for you. The script has two requirements that you cannot "
"change: it must be a ``@tool`` script, or else it will not load properly in "
"the editor, and it must inherit from :ref:`class_EditorPlugin`."
msgstr ""

msgid ""
"In addition to the EditorPlugin script, any other GDScript that your plugin "
"uses must *also* be a tool. Any GDScript without ``@tool`` imported into the "
"editor will act like an empty file!"
msgstr ""

msgid ""
"It's important to deal with initialization and clean-up of resources. A good "
"practice is to use the virtual function :ref:`_enter_tree() "
"<class_Node_private_method__enter_tree>` to initialize your plugin and :ref:"
"`_exit_tree() <class_Node_private_method__exit_tree>` to clean it up. "
"Thankfully, the dialog generates these callbacks for you. Your script should "
"look something like this:"
msgstr ""

msgid "This is a good template to use when creating new plugins."
msgstr ""

msgid "A custom node"
msgstr ""

msgid ""
"Sometimes you want a certain behavior in many nodes, such as a custom scene "
"or control that can be reused. Instancing is helpful in a lot of cases, but "
"sometimes it can be cumbersome, especially if you're using it in many "
"projects. A good solution to this is to make a plugin that adds a node with "
"a custom behavior."
msgstr ""

msgid ""
"Nodes added via an EditorPlugin are \"CustomType\" nodes. While they work "
"with any scripting language, they have fewer features than :ref:`the Script "
"Class system <doc_gdscript_basics_class_name>`. If you are writing GDScript "
"or NativeScript, we recommend using Script Classes instead."
msgstr ""

msgid ""
"To create a new node type, you can use the function :ref:`add_custom_type() "
"<class_EditorPlugin_method_add_custom_type>` from the :ref:"
"`class_EditorPlugin` class. This function can add new types to the editor "
"(nodes or resources). However, before you can create the type, you need a "
"script that will act as the logic for the type. While that script doesn't "
"have to use the ``@tool`` annotation, it can be added so the script runs in "
"the editor."
msgstr ""

msgid ""
"For this tutorial, we'll create a button that prints a message when clicked. "
"For that, we'll need a script that extends from :ref:`class_Button`. It "
"could also extend :ref:`class_BaseButton` if you prefer:"
msgstr ""

msgid ""
"That's it for our basic button. You can save this as ``my_button.gd`` inside "
"the plugin folder. You'll also need a 16×16 icon to show in the scene tree. "
"If you don't have one, you can grab the default one from the engine and save "
"it in your `addons/my_custom_node` folder as `icon.png`, or use the default "
"Godot logo (`preload(\"res://icon.svg\")`)."
msgstr ""

msgid ""
"SVG images that are used as custom node icons should have the **Editor > "
"Scale With Editor Scale** and **Editor > Convert Icons With Editor Theme** :"
"ref:`import options <doc_importing_images_editor_import_options>` enabled. "
"This allows icons to follow the editor's scale and theming settings if the "
"icons are designed with the same color palette as Godot's own icons."
msgstr ""

msgid ""
"Now, we need to add it as a custom type so it shows on the **Create New "
"Node** dialog. For that, change the ``custom_node.gd`` script to the "
"following:"
msgstr ""

msgid ""
"With that done, the plugin should already be available in the plugin list in "
"the **Project Settings**, so activate it as explained in `Checking the "
"results`_."
msgstr ""

msgid "Then try it out by adding your new node:"
msgstr ""

msgid ""
"When you add the node, you can see that it already has the script you "
"created attached to it. Set a text to the button, save and run the scene. "
"When you click the button, you can see some text in the console:"
msgstr ""

msgid "A custom dock"
msgstr ""

msgid ""
"Sometimes, you need to extend the editor and add tools that are always "
"available. An easy way to do it is to add a new dock with a plugin. Docks "
"are just scenes based on Control, so they are created in a way similar to "
"usual GUI scenes."
msgstr ""

msgid ""
"Creating a custom dock is done just like a custom node. Create a new "
"``plugin.cfg`` file in the ``addons/my_custom_dock`` folder, then add the "
"following content to it:"
msgstr ""

msgid ""
"Then create the script ``custom_dock.gd`` in the same folder. Fill it with "
"the :ref:`template we've seen before <doc_making_plugins_template_code>` to "
"get a good start."
msgstr ""

msgid ""
"Since we're trying to add a new custom dock, we need to create the contents "
"of the dock. This is nothing more than a standard Godot scene: just create a "
"new scene in the editor then edit it."
msgstr ""

msgid ""
"For an editor dock, the root node **must** be a :ref:`Control "
"<class_Control>` or one of its child classes. For this tutorial, you can "
"create a single button. The name of the root node will also be the name that "
"appears on the dock tab, so be sure to give it a short and descriptive name. "
"Also, don't forget to add some text to your button."
msgstr ""

msgid ""
"Save this scene as ``my_dock.tscn``. Now, we need to grab the scene we "
"created then add it as a dock in the editor. For this, you can rely on the "
"function :ref:`add_control_to_dock() "
"<class_EditorPlugin_method_add_control_to_dock>` from the :ref:`EditorPlugin "
"<class_EditorPlugin>` class."
msgstr ""

msgid ""
"You need to select a dock position and define the control to add (which is "
"the scene you just created). Don't forget to **remove the dock** when the "
"plugin is deactivated. The script could look like this:"
msgstr ""

msgid ""
"Note that, while the dock will initially appear at its specified position, "
"the user can freely change its position and save the resulting layout."
msgstr ""

msgid "Checking the results"
msgstr ""

msgid ""
"It's now time to check the results of your work. Open the **Project "
"Settings** and click on the **Plugins** tab. Your plugin should be the only "
"one on the list."
msgstr ""

msgid ""
"You can see the plugin is not enabled. Click the **Enable** checkbox to "
"activate the plugin. The dock should become visible before you even close "
"the settings window. You should now have a custom dock:"
msgstr ""

msgid "Going beyond"
msgstr ""

msgid ""
"Now that you've learned how to make basic plugins, you can extend the editor "
"in several ways. Lots of functionality can be added to the editor with "
"GDScript; it is a powerful way to create specialized editors without having "
"to delve into C++ modules."
msgstr ""

msgid ""
"You can make your own plugins to help yourself and share them in the `Asset "
"Library <https://godotengine.org/asset-library/>`_ so that people can "
"benefit from your work."
msgstr ""

msgid "Registering autoloads/singletons in plugins"
msgstr ""

msgid ""
"It is possible for editor plugins to automatically register :ref:`autoloads "
"<doc_singletons_autoload>` when the plugin is enabled. This also includes "
"unregistering the autoload when the plugin is disabled."
msgstr ""

msgid ""
"This makes setting up plugins faster for users, as they no longer have to "
"manually add autoloads to their project settings if your editor plugin "
"requires the use of an autoload."
msgstr ""

#, fuzzy
msgid "Use the following code to register a singleton from an editor plugin:"
msgstr "외부 편집기를 설정하는 방법은 아래 구획들을 확인하십시오:"

msgid "Translation status"
msgstr "번역 상태"
