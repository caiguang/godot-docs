# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Using CharacterBody2D/3D"
msgstr "KinematicBody2D 사용하기"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"Godot offers several collision objects to provide both collision detection "
"and response. Trying to decide which one to use for your project can be "
"confusing. You can avoid problems and simplify development if you understand "
"how each of them works and what their pros and cons are. In this tutorial, "
"we'll look at the :ref:`CharacterBody2D <class_CharacterBody2D>` node and "
"show some examples of how to use it."
msgstr ""
"Godot은 콜리전 감지와 반응성을 모두 제공하기 위해 많은 콜리전 오브젝트를 제공"
"합니다. 프로젝트에 사용할 항목을 결정하는 것은 혼란스러울 수 있습니다. 각각"
"의 작동 방식 및 장단점이 무엇인지 이해한다면 문제를 피하고 개발을 간소화할 "
"수 있습니다. 이 튜토리얼에서는 :ref:`KinematicBody2D "
"<class_KinematicBody2D>` 노드를 살펴보고 사용 방법에 대한 몇 가지 예를 보여 "
"드리겠습니다."

msgid ""
"While this document uses ``CharacterBody2D`` in its examples, the same "
"concepts apply in 3D as well."
msgstr ""

#, fuzzy
msgid "What is a character body?"
msgstr "리지드 바디(rigid body)란?"

#, fuzzy
msgid ""
"``CharacterBody2D`` is for implementing bodies that are controlled via code. "
"Character bodies detect collisions with other bodies when moving, but are "
"not affected by engine physics properties, like gravity or friction. While "
"this means that you have to write some code to create their behavior, it "
"also means you have more precise control over how they move and react."
msgstr ""
"``KinematicBody2D``\\ 는 코드로 통제되는 바디를 구현하기 위한 것입니다. 움직"
"일 때, 다른 바디와의 콜리전을 감지하지만, 중력이나 마찰과 같은 물리 엔진 특성"
"에 의해 영향을 받지 않습니다. 이것은 당신이 그것들의 행동을 만들어내기 위해 "
"몇 개의 코드를 써야 한다는 것이기도 하지만, 반대로 그것들이 어떻게 움직이고 "
"반응하는지 더 정확히 제어할 수 있다는 것을 의미합니다."

#, fuzzy
msgid ""
"This document assumes you're familiar with Godot's various physics bodies. "
"Please read :ref:`doc_physics_introduction` first, for an overview of the "
"physics options."
msgstr ""
"이 문서는 당신이 Godot의 다양한 물리 바디에 대해 잘 알고 있다고 가정합니다. "
"먼저 :ref:`doc_physics_introduction`\\ 를 읽어주세요."

#, fuzzy
msgid ""
"A `CharacterBody2D` can be affected by gravity and other forces, but you "
"must calculate the movement in code. The physics engine will not move a "
"`CharacterBody2D`."
msgstr ""
"`KinematicBody2D`\\ 는 중력과 다른 힘에 의해 영향을 받을 수 있지만 코드로 움"
"직임을 계산해야 합니다. 물리 엔진이 `KinematicBody2D`\\ 를 움직이게 하진 않습"
"니다."

msgid "Movement and collision"
msgstr "이동과 콜리전"

#, fuzzy
msgid ""
"When moving a ``CharacterBody2D``, you should not set its ``position`` "
"property directly. Instead, you use the ``move_and_collide()`` or "
"``move_and_slide()`` methods. These methods move the body along a given "
"vector and detect collisions."
msgstr ""
"``KinematicBody2D``\\ 를 움직일 때 ``position`` 속성을 직접 설정해서는 안 됩"
"니다. 대신 ``move_and_collide()`` 또는 ``move_and_slide()`` 메서드를 사용해"
"야 합니다. 이러한 방법은 주어진 벡터를 따라 바디가 이동하며 콜리전이 감지될 "
"경우 즉시 중지됩니다. KinematicBody2D가 충돌한 후에는 *콜리전 반응*\\ 을 수동"
"으로 코딩해야 합니다."

#, fuzzy
msgid ""
"You should handle physics body movement in the ``_physics_process()`` "
"callback."
msgstr ""
"키네마틱 바디의 움직임은 ``_physics_process()`` 콜백으로 이루어져야 합니다."

msgid ""
"The two movement methods serve different purposes, and later in this "
"tutorial, you'll see examples of how they work."
msgstr ""
"두 개의 이동 메서드는 다른 목적을 지닙니다, 그리고 이 튜토리얼 이후에, 어떻"
"게 작동하는 지에 대한 예제를 볼 것입니다."

#, fuzzy
msgid "move_and_collide"
msgstr "``move_and_collide``"

#, fuzzy
msgid ""
"This method takes one required parameter: a :ref:`Vector2 <class_Vector2>` "
"indicating the body's relative movement. Typically, this is your velocity "
"vector multiplied by the frame timestep (``delta``). If the engine detects a "
"collision anywhere along this vector, the body will immediately stop moving. "
"If this happens, the method will return a :ref:`KinematicCollision2D "
"<class_KinematicCollision2D>` object."
msgstr ""
"이 메서드는 하나의 매개 변수를 가집니다: 바디의 상대적인 움직임을 나타내는 :"
"ref:`Vector2 <class_Vector2>`\\ 입니다. 일반적으로, 이것은 속도 벡터에 프레"
"임 타임 스텝 (``delta``)을 곱한 것입니다. 엔진이 이 벡터를 따라 어느 곳이든 "
"콜리전을 감지하면, 바디는 즉시 이동을 멈춥니다. 이 경우, 메서드는 :ref:"
"`KinematicCollision2D <class_KinematicCollision2D>` 오브젝트를 반환합니다."

msgid ""
"``KinematicCollision2D`` is an object containing data about the collision "
"and the colliding object. Using this data, you can calculate your collision "
"response."
msgstr ""
"``KinematicCollision2D``\\ 는 콜리전과 충돌하는 오브젝트에 대한 정보를 담고 "
"있는 오브젝트입니다. 이 정보로, 콜리전 반응을 계산할 수 있습니다."

msgid ""
"``move_and_collide`` is most useful when you just want to move the body and "
"detect collision, but don't need any automatic collision response. For "
"example, if you need a bullet that ricochets off a wall, you can directly "
"change the angle of the velocity when you detect a collision. See below for "
"an example."
msgstr ""

#, fuzzy
msgid "move_and_slide"
msgstr "``move_and_slide``"

#, fuzzy
msgid ""
"The ``move_and_slide()`` method is intended to simplify the collision "
"response in the common case where you want one body to slide along the "
"other. It is especially useful in platformers or top-down games, for example."
msgstr ""
"``move_and_slide()`` 메서드는 콜리전 응답을 한 바디가 다른 바디를 따라 미끄러"
"지는 일반적인 경우에서 단순화 하기 위한 것입니다. 이것은 특히, 예를 들어 플랫"
"포머나 탑뷰 게임에서 유용합니다."

msgid ""
"When calling ``move_and_slide()``, the function uses a number of node "
"properties to calculate its slide behavior. These properties can be found in "
"the Inspector, or set in code."
msgstr ""

#, fuzzy
msgid "``velocity`` - *default value:* ``Vector2( 0, 0 )``"
msgstr "``floor_normal`` - *기본 값:* ``Vector2( 0, 0 )``"

msgid ""
"This property represents the body's velocity vector in pixels per second. "
"``move_and_slide()`` will modify this value automatically when colliding."
msgstr ""

#, fuzzy
msgid "``motion_mode`` - *default value:* ``MOTION_MODE_GROUNDED``"
msgstr "``max_bounces`` - *기본 값:* ``4``"

#, fuzzy
msgid ""
"This property is typically used to distinguish between side-scrolling and "
"top-down movement. When using the default value, you can use the "
"``is_on_floor()``, ``is_on_wall()``, and ``is_on_ceiling()`` methods to "
"detect what type of surface the body is in contact with, and the body will "
"interact with slopes. When using ``MOTION_MODE_FLOATING``, all collisions "
"will be considered \"walls\"."
msgstr ""
"이 매개변수는 엔진이 바닥이라고 생각하는 표면을 정의할 수 있습니다. 이것을 설"
"정하면 ``is_on_floor()``, ``is_on_wall()``, 그리고 ``is_on_ceiling()`` 메서드"
"를 사용할 수 있고, 어떤 타입의 표면이 바디와 닿았는지 감지할 수 있습니다. 기"
"본 값으로 모든 표면은 벽으로 간주되는 것을 뜻합니다."

#, fuzzy
msgid "``up_direction`` - *default value:* ``Vector2( 0, -1 )``"
msgstr "``floor_normal`` - *기본 값:* ``Vector2( 0, 0 )``"

#, fuzzy
msgid ""
"This property allows you to define what surfaces the engine should consider "
"being the floor. Its value lets you use the ``is_on_floor()``, "
"``is_on_wall()``, and ``is_on_ceiling()`` methods to detect what type of "
"surface the body is in contact with. The default value means that the top "
"side of horizontal surfaces will be considered \"ground\"."
msgstr ""
"이 매개변수는 엔진이 바닥이라고 생각하는 표면을 정의할 수 있습니다. 이것을 설"
"정하면 ``is_on_floor()``, ``is_on_wall()``, 그리고 ``is_on_ceiling()`` 메서드"
"를 사용할 수 있고, 어떤 타입의 표면이 바디와 닿았는지 감지할 수 있습니다. 기"
"본 값으로 모든 표면은 벽으로 간주되는 것을 뜻합니다."

#, fuzzy
msgid "``floor_stop_on_slope`` - *default value:* ``true``"
msgstr "``slope_stop_min_velocity`` - *기본 값:* ``5``"

#, fuzzy
msgid ""
"This parameter prevents a body from sliding down slopes when standing still."
msgstr ""
"이것은 경사면에 서있을 수 있는 최소 속도입니다. 이것으로 서있는 상태일 때 바"
"디가 경사면에 미끄러져 내려가는 것을 방지합니다."

#, fuzzy
msgid ""
"``wall_min_slide_angle`` - *default value:* ``0.261799`` (in radians, "
"equivalent to ``15`` degrees)"
msgstr ""
"``floor_max_angle`` - *기본 값:* ``0.785398`` (라디안에서는, ``45``\\ 도와 같"
"습니다)"

msgid ""
"This is the minimum angle where the body is allowed to slide when it hits a "
"slope."
msgstr ""

msgid ""
"``floor_max_angle`` - *default value:* ``0.785398`` (in radians, equivalent "
"to ``45`` degrees)"
msgstr ""
"``floor_max_angle`` - *기본 값:* ``0.785398`` (라디안에서는, ``45``\\ 도와 같"
"습니다)"

#, fuzzy
msgid ""
"This parameter is the maximum angle before a surface is no longer considered "
"a \"floor.\""
msgstr "이것은 표면이 더 이상 \"바닥\"으로 인식되지 않는 최대 각도입니다."

msgid ""
"There are many other properties that can be used to modify the body's "
"behavior under specific circumstances. See the :ref:`CharacterBody2D "
"<class_CharacterBody2D>` docs for full details."
msgstr ""

msgid "Detecting collisions"
msgstr "콜리전 감지하기"

msgid ""
"When using ``move_and_collide()`` the function returns a "
"``KinematicCollision2D`` directly, and you can use this in your code."
msgstr ""
"``move_and_collide()``\\ 를 사용할 때 함수는 ``KinematicCollision2D``\\ 를 직"
"접 반환하고, 이 정보를 여러분의 코드에 사용할 수 있습니다."

msgid ""
"When using ``move_and_slide()`` it's possible to have multiple collisions "
"occur, as the slide response is calculated. To process these collisions, use "
"``get_slide_collision_count()`` and ``get_slide_collision()``:"
msgstr ""

msgid ""
"`get_slide_collision_count()` only counts times the body has collided and "
"changed direction."
msgstr ""

#, fuzzy
msgid ""
"See :ref:`KinematicCollision2D <class_KinematicCollision2D>` for details on "
"what collision data is returned."
msgstr ""
"파티클 이펙트를 사용하는 더 많은 정보는 :ref:`Particles2D "
"<class_Particles2D>` 를 참고하세요."

msgid "Which movement method to use?"
msgstr "어떤 이동 메서드를 사용해야 할까요?"

#, fuzzy
msgid ""
"A common question from new Godot users is: \"How do you decide which "
"movement function to use?\" Often, the response is to use "
"``move_and_slide()`` because it seems simpler, but this is not necessarily "
"the case. One way to think of it is that ``move_and_slide()`` is a special "
"case, and ``move_and_collide()`` is more general. For example, the following "
"two code snippets result in the same collision response:"
msgstr ""
"새로운 Godot 사용자로부터 흔한 질문이 있습니다: \"어떻게 어떤 이동 함수를 사"
"용하는 지를 결정하나요?\" 자주하는 대답은 ``move_and_slide()``\\ 를 사용하라"
"는 것인데, \"더 쉽기\" 때문입니다, 그러나 반드시 그런 것은 아닙니다. 생각을 "
"해보자면 ``move_and_slide()``\\ 는 특별한 경우, 그리고 "
"``move_and_collide()``\\ 는 더 일반적인 것입니다. 예를 들어 두 개의 코드 단문"
"은 값은 콜리전 반응 결과가 나타납니다:"

msgid ""
"Anything you do with ``move_and_slide()`` can also be done with "
"``move_and_collide()``, but it might take a little more code. However, as "
"we'll see in the examples below, there are cases where ``move_and_slide()`` "
"doesn't provide the response you want."
msgstr ""
"``move_and_slide()``\\ 로 하는 것을 ``move_and_collide()``\\ 또한 할 수 있습"
"니다, 하지만 좀 더 많은 코드를 갖습니다. 하지만 아래에서 예제를 보면, "
"``move_and_slide()``\\ 가 원하는 응답을 제공하지 않는 경우도 있습니다."

msgid ""
"In the example above, ``move_and_slide()`` automatically alters the "
"``velocity`` variable. This is because when the character collides with the "
"environment, the function recalculates the speed internally to reflect the "
"slowdown."
msgstr ""

msgid ""
"For example, if your character fell on the floor, you don't want it to "
"accumulate vertical speed due to the effect of gravity. Instead, you want "
"its vertical speed to reset to zero."
msgstr ""

msgid ""
"``move_and_slide()`` may also recalculate the kinematic body's velocity "
"several times in a loop as, to produce a smooth motion, it moves the "
"character and collides up to five times by default. At the end of the "
"process, the character's new velocity is available for use on the next frame."
msgstr ""

msgid "Examples"
msgstr "예제"

msgid ""
"To see these examples in action, download the sample project: "
"`character_body_2d_starter.zip <https://github.com/godotengine/godot-docs-"
"project-starters/releases/download/latest-4.x/character_body_2d_starter."
"zip>`_"
msgstr ""

msgid "Movement and walls"
msgstr "이동과 벽"

#, fuzzy
msgid ""
"If you've downloaded the sample project, this example is in \"basic_movement."
"tscn\"."
msgstr ""
"샘플 프로젝트를 다운로드 했다면, 이 예제는 \"BasicMovement.tscn\"입니다."

#, fuzzy
msgid ""
"For this example, add a ``CharacterBody2D`` with two children: a "
"``Sprite2D`` and a ``CollisionShape2D``. Use the Godot \"icon.svg\" as the "
"Sprite2D's texture (drag it from the Filesystem dock to the *Texture* "
"property of the ``Sprite2D``). In the ``CollisionShape2D``'s *Shape* "
"property, select \"New RectangleShape2D\" and size the rectangle to fit over "
"the sprite image."
msgstr ""
"이 예시에서 ``KinematicBody2D``\\ 를 두 자손과 함께 추가합니다: ``Sprite``\\ "
"와 ``CollisionShape2D``\\ 입니다. Godot \"icon.png\"를 Sprite의 텍스처 속성으"
"로 사용합니다 (파일 시스템 독에서 ``Sprite``\\ 의 *Texture* 속성으로 끌어다 "
"놓으십시오). ``CollisionShape2D``\\ 의 *Shape* 속성에서 \"New "
"RectangleShape2D\"를 선택하고 스프라이트 이미지에 맞게 사각형 크기를 조정합니"
"다."

msgid ""
"See :ref:`doc_2d_movement` for examples of implementing 2D movement schemes."
msgstr "2D 이동 구조를 구현하는 예제는 :ref:`doc_2d_movement`\\ 를 참고하세요."

#, fuzzy
msgid "Attach a script to the CharacterBody2D and add the following code:"
msgstr "KinematicBody2D에 스크립트를 붙이고 다음의 코드를 추가하세요:"

#, fuzzy
msgid ""
"Run this scene and you'll see that ``move_and_collide()`` works as expected, "
"moving the body along the velocity vector. Now let's see what happens when "
"you add some obstacles. Add a :ref:`StaticBody2D <class_StaticBody2D>` with "
"a rectangular collision shape. For visibility, you can use a Sprite2D, a "
"Polygon2D, or turn on \"Visible Collision Shapes\" from the \"Debug\" menu."
msgstr ""
"이 씬을 실행하고 ``move_and_collide()``\\ 가 예상대로, 바디가 속도 벡터를 따"
"라 움직이는 것을 볼 수 있습니다. 이제 장애물을 추가하면 어떻게 되는지 봅시"
"다. 직사각형 콜리전 모양을 가진 :ref:`StaticBody2D <class_StaticBody2D>`\\ "
"를 추가합니다. 가시성을 위해, 스프라이트, Polygon2D, 혹은 \"디버그\" 메뉴에"
"서 \"콜리전 모양 보이기\"를 키면 됩니다."

#, fuzzy
msgid ""
"Run the scene again and try moving into the obstacle. You'll see that the "
"``CharacterBody2D`` can't penetrate the obstacle. However, try moving into "
"the obstacle at an angle and you'll find that the obstacle acts like glue - "
"it feels like the body gets stuck."
msgstr ""
"씬을 다시 실행하고 장애물로 움직여 봅니다. ``KinematicBody2D``\\ 가 장애물을 "
"통과하지 못하는 것을 볼 수 있습니다. 하지만 장애물 안으로 움직이려고 하면 장"
"애물이 풀처럼 행동하는 것을 찾을 수 있습니다 - 바디가 끼어있는 느낌이 듭니다."

msgid ""
"This happens because there is no *collision response*. "
"``move_and_collide()`` stops the body's movement when a collision occurs. We "
"need to code whatever response we want from the collision."
msgstr ""
"이것은 *콜리전 응답*\\ 이 없기 때문에 발생한 것입니다. "
"``move_and_collide()``\\ 는 콜리전이 발생할 때 바디의 움직임을 멈춥니다. 콜리"
"전로부터 원하는 어떤 응답이라도 코딩해야 합니다."

#, fuzzy
msgid "Try changing the function to ``move_and_slide()`` and running again."
msgstr ""
"함수를 ``move_and_slide(velocity)``\\ 로 변경하고 다시 실행합니다. 우리는 속"
"도 계산에서 ``delta``\\ 를 제거했습니다."

msgid ""
"``move_and_slide()`` provides a default collision response of sliding the "
"body along the collision object. This is useful for a great many game types, "
"and may be all you need to get the behavior you want."
msgstr ""
"``move_and_slide()``\\ 는 다비가 콜리전 오브젝트를 따라 미끄러지는 기본 콜리"
"전 응답을 제공합니다. 이것은 아주 많은 게임 유형에 유용하고, 원하는 행동을 얻"
"을 때 필요할 수도 있습니다."

msgid "Bouncing/reflecting"
msgstr "튕김/반사"

#, fuzzy
msgid ""
"What if you don't want a sliding collision response? For this example "
"(\"bounce_and_collide.tscn\" in the sample project), we have a character "
"shooting bullets and we want the bullets to bounce off the walls."
msgstr ""
"미끄러지는 콜리전 응답을 원하지 않으면 어떻게 해야 할까요? (샘플 프로젝트에 "
"있는 \"BounceandCollide.tscn\") 이 예제의 경우, 총을 쏘는 캐릭터가 있고 총알"
"이 벽에 튕겨 나가게 하고 싶습니다."

msgid ""
"This example uses three scenes. The main scene contains the Player and "
"Walls. The Bullet and Wall are separate scenes so that they can be instanced."
msgstr ""
"이 예제는 세 개의 씬을 사용합니다. 메인 씬은 Player와 Wall을 갖고 있습니다. "
"Bullet과 Wall은 분리된 씬으로 그들은 인스턴스 할 수 있습니다."

#, fuzzy
msgid ""
"The Player is controlled by the ``w`` and ``s`` keys for forward and back. "
"Aiming uses the mouse pointer. Here is the code for the Player, using "
"``move_and_slide()``:"
msgstr ""
"Player는 `w`\\ 와 `s`\\ 키로 조작하며 각각 앞뒤로 움직입니다. 마우스로 조준합"
"니다. 이것이 ``move_and_slide()``\\ 를 사용하는 Player 코드입니다:"

msgid "And the code for the Bullet:"
msgstr "그리고 Bullet을 위한 코드입니다:"

#, fuzzy
msgid ""
"The action happens in ``_physics_process()``. After using "
"``move_and_collide()``, if a collision occurs, a ``KinematicCollision2D`` "
"object is returned (otherwise, the return is ``null``)."
msgstr ""
"동작은 ``_physics_process()``\\ 에서 발생합니다. ``move_and_collide()``\\ 를 "
"사용한 이후, 콜리전이 발생하면, ``KinematicCollision2D`` 오브젝트는 반환됩니"
"다 (그렇지 않으면, ``Nil``\\ 을 반환합니다)."

msgid ""
"If there is a returned collision, we use the ``normal`` of the collision to "
"reflect the bullet's ``velocity`` with the ``Vector2.bounce()`` method."
msgstr ""
"반환된 콜리전이 있다면, 우리는 콜리전의 ``normal``\\ 을 사용해 ``Vector2."
"bounce()`` 메서드로 총알의 ``velocity``\\ 를 반사합니다."

msgid ""
"If the colliding object (``collider``) has a ``hit`` method, we also call "
"it. In the example project, we've added a flashing color effect to the Wall "
"to demonstrate this."
msgstr ""
"충돌 오브젝트 (``collider``)가 ``hit`` 메서드를 가진다면, 또한 그것을 호출합"
"니다. 예제 프로젝트에서는, 이를 설명하기 위해 Wall에 반짝이는 색상 효과를 추"
"가했습니다."

msgid "Platformer movement"
msgstr "플랫포머 움직임"

#, fuzzy
msgid ""
"Let's try one more popular example: the 2D platformer. ``move_and_slide()`` "
"is ideal for quickly getting a functional character controller up and "
"running. If you've downloaded the sample project, you can find this in "
"\"platformer.tscn\"."
msgstr ""
"인기있는 예제를 하나 더 들어보겠습니다: 2D 플랫포머 입니다. "
"``move_and_slide()``\\ 가 빠르게 기능의 캐릭터 조작을 얻고 실행시키기에 이상"
"적입니다. 샘플 프로젝트를 다운로드 했다면, \"Platformer.tscn\"에서 이것을 찾"
"을 수 있습니다."

#, fuzzy
msgid ""
"For this example, we'll assume you have a level made of one or more "
"``StaticBody2D`` objects. They can be any shape and size. In the sample "
"project, we're using :ref:`Polygon2D <class_Polygon2D>` to create the "
"platform shapes."
msgstr ""
"이 예제를 위해,.``StaticBody2D`` 오브젝트로 만들어진 레벨이 있다고 가정합니"
"다. 어떤 모양이나 크기가 될 수 있습니다. 샘플 프로젝트에서, 우리는 플랫폼 모"
"양을 만들기 위해 :ref:`Polygon2D <class_Polygon2D>`\\ 를 사용합니다."

msgid "Here's the code for the player body:"
msgstr "플레이어 바디를 위한 코드입니다:"

msgid ""
"In this code we're using ``move_and_slide()`` as described above - to move "
"the body along its velocity vector, sliding along any collision surfaces "
"such as the ground or a platform. We're also using ``is_on_floor()`` to "
"check if a jump should be allowed. Without this, you'd be able to \"jump\" "
"in midair; great if you're making Flappy Bird, but not for a platformer game."
msgstr ""

msgid ""
"There is a lot more that goes into a complete platformer character: "
"acceleration, double-jumps, coyote-time, and many more. The code above is "
"just a starting point. You can use it as a base to expand into whatever "
"movement behavior you need for your own projects."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
