# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 기초"

msgid "Introduction"
msgstr "소개"

#, fuzzy
msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"이 페이지는 C#에 대한 간단한 소개와 그것이 무엇인지, 그리고 그것을 Godot에서 "
"사용하는 방법을 제공합니다. 그런 다음, :ref:`특정 기능을 사용하는 방법 "
"<doc_c_sharp_features>`\\ 을 원한다면, :ref:`C# 과 GDScript API의 차이점 "
"<doc_c_sharp_differences>`\\ 에 대해 읽고 단계별 튜토리얼의 :ref:`스크립팅 섹"
"션 <doc_scripting>`\\ 을 (다시) 확인하세요."

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"이것은  C# 언어 전체에 대한 본격적인 튜토리얼이 **아닙니다**. 문법이나 기능"
"에 익숙하지 않다면 `Microsoft C# 가이드 <https://docs.microsoft.com/en-us/"
"dotnet/csharp/index>`_\\ 를 보거나 다른 적합한 설명을 찾아보세요."

msgid "Prerequisites"
msgstr "준비사항"

#, fuzzy
msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot은 이미 컴파일된 게임을 실행하기 위해 필요한 Mono를 포함하고 있지만, "
"MSBuild처럼 게임을 빌드 및 컴파일 할 수 있는 도구는 포함하고 있지 않으므로 위"
"와 같은 도구들은 따로 설치해야 합니다. MSBuild도 Mono SDK에 포함되어 있지만, "
"새 ``csproj`` 포맷의 C# 프로젝트를 빌드 할 수 없기 때문에 Godot 3.2.3 이후부"
"터는 이 도구들을 포함하고 있는 .NET Core SDK가 필요합니다."

#, fuzzy
msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr ""
"요약하자면, .NET Core SDK와 Mono를 사용할 수 있는 버전의 Godot을 **둘 다** 설"
"치해야 합니다."

#, fuzzy
msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"안정(stable) 버전 중 가장 최신의 `.NET Core SDK <https://dotnet.microsoft."
"com/download/dotnet-core>`__(문서 작성 시점에는 3.1) 을 설치하십시오."

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr ""
"64-bit 버전의 Godot을 사용하고 있다면 64-bit 버전의 SDK를 설치해야 합니다."

#, fuzzy
msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"Godot을 소스에서 빌드할 생각이라면, 안정(stable) 버전중 최신의 `Mono "
"<https://www.mono-project.com/download/stable/>`__ 를 설치하고 :ref:"
"`doc_compiling_with_mono` 페이지의 설명을 따라 진행하십시오."

msgid "Configuring an external editor"
msgstr "외부 편집기 설정"

#, fuzzy
msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot의 스크립트 편집기에서 C# 지원은 최소한입니다. `Visual Studio Code "
"<https://code.visualstudio.com/>`_\\ 나 MonoDevelop과 같은 외부 IDE나 편집기"
"를 사용하는 것을 고려해보세요. 이들은 자동 완성, 디버깅 및 C#을 위한 기타 유"
"용한 기능이 제공됩니다. Godot에서 외부 편집기를 선택하려면, **편집기 → 편집"
"기 설정**\\ 으로 가서 **Mono**\\ 로 내려갑니다. **Mono**\\ 에서 **Editor**\\ "
"를 클릭하면 외부 편집기를 선택하는 페이지가 나타납니다. Godot이 지원하는 외"
"부 편집기는 다음과 같습니다:"

#, fuzzy
msgid "Visual Studio 2022"
msgstr "Visual Studio 2019"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "외부 편집기를 설정하는 방법은 아래 구획들을 확인하십시오:"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"\"준비사항\" 구획을 읽은 후, `JetBrains Rider <https://www.jetbrains.com/"
"rider/download>`__ 를 설치할 수 있습니다."

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "Godot의 **편집기 → 편집기 설정** 메뉴에서:"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"**Mono** -> **Editor** -> **External Editor** 를 **JetBrains Rider** 로 설정."

msgid "In Rider:"
msgstr "Rider 에서:"

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "**MSBuild version** 을 **.NET Core** 로 설정."

msgid "Install the **Godot support** plugin."
msgstr "**Godot support** 플러그인을 설치."

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"\"준비사항\" 구획을 읽은 후, `Visual Studio Code <https://code.visualstudio."
"com/download>`__ (VS Code)를 설치할 수 있습니다."

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""
"**Mono** -> **Editor** -> **External Editor** 를 **Visual Studio Code** 로 설"
"정."

msgid "In Visual Studio Code:"
msgstr "Visual Studio Code에서:"

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"`C# 확장 프로그램 <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ 을 설치하십시오."

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"Linux를 사용한다면 C# 플러그인을 사용하기 위해 `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ 를 설치해야 합니다."

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio(Windows만 가능)"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"최신 버전의 `Visual Studio <https://visualstudio.microsoft.com/downloads/"
">`__ 를 설치하십시오. 올바른 워크로드를 선택했다면 Visual Studio 내에 필요한 "
"SDK가 포함되어있을 것이므로, \"준비사항\" 구획에 설명된 것들을 직접 설치하지 "
"않아도 됩니다."

#, fuzzy
msgid "While installing Visual Studio, select this workload:"
msgstr "Visual Studio를 설치할 때, 다음 워크로드를 선택하십시오:"

#, fuzzy
msgid ".NET desktop development"
msgstr "엔진 개발"

#, fuzzy
msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"**Mono** -> **Editor** -> **External Editor** 를 **Visual Studio** 로 설정."

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""

msgid "Creating a C# script"
msgstr "C# 스크립트 만들기"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"Godot용 C# 을 성공적으로 설정한 후, 씬의 노드 메뉴에서 **스크립트 붙이기** "
"를 눌렀을 때, 다음 설정이 표시되어야 합니다:"

#, fuzzy
msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"일부 세부 사항이 변경되는 동안, 대부분의 작업은 스크립팅을 C#으로 하는 것과 "
"동일합니다. Godot를 처음 접해보신다면, 이 시점에서 :ref:`doc_scripting` 튜토"
"리얼을 정독하시는 것이 좋습니다. 문서의 일부는 C# 예제가 부족하지만, 대부분"
"은 일찍이 GDScript에서 옮길 수 있습니다."

msgid "Project setup and workflow"
msgstr "프로젝트 설정과 작업 흐름"

#, fuzzy
msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"첫 C# 스크립트를 생성하면, Godot는 Godot 프로젝트를 위한 C# 프로젝트 파일을 "
"초기화합니다. 여기에는 C# 솔루션 (``.sin``)이나 프로젝트 파일 (``.csproj``) "
"뿐만 아니라, 일부 유용 파일과 폴더들 (``.mono``\\ 와 ``Properties/"
"AssemblyInfo.cs``)을 생성하는 것도 포함합니다. ``.mono``\\ 를 제외하고는 모"
"두 중요하므로 버전 관리 시스템에 유지해 두어야 합니다. ``.mono``\\ 는 버전 관"
"리 시스템의 무시 목록에 쉽게 추가할 수 있습니다. 문제를 해결할 때, ``.mono`` "
"폴더를 삭제하고 다시 만드는 것이 때로는 도움이 됩니다."

msgid "Example"
msgstr "예제"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "여기 동작을 설명하는 주석이 붙은 C# 스크립트가 있습니다."

#, fuzzy
msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"보시다시피, Godot의 ``print`` 함수와 마찬가지로 GDScript에서 함수는 기본적으"
"로 전역 범위에 있기 때문에 ``Godot`` 네임스페이스의 일부분인 ``GD`` 클래스에"
"서 사용할 수 있습니다. ``GD`` 클래스에서의 메서드 목록을 보려면, :ref:"
"`@GDScript <class_@gdscript>`\\ 와 :ref:`@GlobalScope "
"<class_@globalscope>`\\ 에서 클래스 참조 페이지를 참고하세요."

#, fuzzy
msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"노드에 붙이고 싶은 클래스 이름이 ``.cs`` 파일과 동일해야 한다는 사실을 명심하"
"세요. 그렇지 않으면, 다음과 같은 오류를 받게 되며 씬을 실행할 수 없을 것입니"
"다: *\"스크립트 res://XXX.cs에서 클래스 XXX를 찾을 수 없음\"*"

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr ""

msgid "General differences between C# and GDScript"
msgstr "C#과 GDScript와의 일반적인 차이"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"GDScript/C++에서는 ``snake_case``\\ 를 쓰지만 C# API는 ``PascalCase``\\ 를 씁"
"니다. 가능하면 공백과 getters/setters이 속성으로 변환됩니다. 일반적으로 C# "
"Godot API는 합리적으로 가능한 것처럼 관용적이도록 노력합니다."

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "더 자세한 내용은, :ref:`doc_c_sharp_differences` 페이지를 참고하세요."

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"여러분이 C#을 사용한다면, 새로운 외부변수(export variables)나 시그널을 보기 "
"위해서 프로젝트 구성물(assemblies)을 다시 빌드할 필요가 있습니다. 이 컴파일"
"은 에디터 밑의 \"Mono\" 단어를 클릭해 Mono 패널이 나타나게 한 후 \"프로젝트 "
"빌드(Build Project)\" 버튼을 눌러서 수동으로 진행됩니다."

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr ""

msgid "Current gotchas and known issues"
msgstr "현재 문제와 알려진 문제"

#, fuzzy
msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"C# 지원이 Godot에서 꽤 새롭기 때문에, 성장통이 있고 다듬어야 할 곳이 여전히 "
"있습니다. 아래에는 중요한 문제 목록으로 Godot에서 C#으로 갈아탈 때 명심해야 "
"합니다, 하지만 의심스러운 점이 있다면 공식 `Mono 이슈를 위한 이슈 트래커 "
"<https://github.com/godotengine/godot/labels/topic%3Amono>`_\\ 를 살펴보세요."

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr ""
"편집기 플러그인을 작성하는 것은 가능하지만, 현재로썬 상당히 복잡합니다."

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr ""
"내보낸 변수를 제외하고, 현재 상태는 핫 리로드 중일 때 저장되고 복원되지 않습"
"니다."

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr ""
"첨부된 C# 스크립트가 파일 이름과 일치하는 클래스 이름을 가진 클래스를 참조해"
"야 합니다."

#, fuzzy
msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"Godot 의 ``snake_case\" API 명명 규칙에 의존하는 ``Get ()\"/\"Set()\" "
"\"Call()\"/\"CallDeferred()\"와\" 시그널 연결 메서드 ``Connect()\"와 같은 방"
"법이 있습니다. 그러므로 예를 들어 ``CallDeferred\"(\"AddChild\")를 사용할 때 "
"``AddChild\"는 API가 원래의 ``snake_case\" 버전의 ``add_child\"를 기대하기 때"
"문에 작동하지 않을 것입니다. 그러나 당신은 이러한 제한 없이 모든 맞춤 속성이"
"나 메서드를 사용할 수 있습니다."

#, fuzzy
msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"Mono 프로젝트를 내보내는 것은 데스크탑 플랫폼 (Linux, Windows, 그리고 macOS)"
"만 지원합니다. Android, iOS, HTML5 그리고 UWP는 현재는 지원하지 않습니다 "
"(`#20267 <https://github.com/godotengine/godot/issues/20267>`_, `#20268 "
"<https://github.com/godotengine/godot/issues/20268>`_ `#20270 <https://"
"github.com/godotengine/godot/issues/20270>`_ `#20271 <https://github.com/"
"godotengine/godot/issues/20271>`_)."

#, fuzzy
msgid "Common pitfalls"
msgstr "주석"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""

msgid "Performance of C# in Godot"
msgstr "Godot에서 C#의 퍼포먼스"

#, fuzzy
msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"일부 예비 `벤치마크 <https://github.com/cart/godot3-bunnymark>`_\\ 에 따르"
"면, Godot에서 C#의 퍼포먼스는 — 일반적으로 같은 순서의 크기에서 — 순수한 경우"
"에서 대략 GDScript의 **~4x**\\ 입니다. C++이 아직 조금 더 빠릅니다; 하지만 세"
"부 사항은 사용하는 경우에 따라 다릅니다. GDScript는 대부분의 일반적인 스크립"
"팅 작업에 충분히 빠릅니다. C#이 더 빠르지만, Godot과 대화하려면 비용이 큰 마"
"샬링(marshalling)이 필요합니다."

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""

msgid "Using NuGet packages in Godot"
msgstr "Godot에서 NuGet 패키지 사용하기"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ 패키지를 설치하여 프로젝트처럼, Godot와 사"
"용할 수 있습니다. 많은 IDE는 직접 패키지를 추가할 수 있습니다. 또한 프로젝트 "
"루트에 있는 ``.csproj`` 파일에 패키지 참조를 수동으로 추가할 수 있습니다:"

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"Godot 버전 3.2.3부터는 프로젝트를 빌드한 후 새로 추가된 NuGet 패키지를 자동으"
"로 다운로드 및 설정합니다."

msgid "Profiling your C# code"
msgstr "C# 코드 프로파일링"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr ""

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr ""

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr ""

#, fuzzy
msgid "Visual Studio."
msgstr "Visual Studio Code"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""

msgid "Translation status"
msgstr "번역 상태"
