# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "GDScript의 정적 타이핑(Static typing)"

msgid "In this guide, you will learn:"
msgstr "이 가이드에서 다음 내용을 배울 것입니다:"

#, fuzzy
msgid "how to use static typing in GDScript;"
msgstr "GDScript의 정적 타이핑(Static typing)"

#, fuzzy
msgid "that static types can help you avoid bugs;"
msgstr "이 **정적 타입은 버그를 방지하는 데 도움이 될 수 있습니다**"

msgid "that static typing improves your experience with the editor."
msgstr ""

#, fuzzy
msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"이 새로운 언어 기능을 어디에서 어떻게 사용하는지는 전적으로 여러분에게 달려 "
"있습니다. 일부 민감한 GDScript 파일에서만 사용하거나, 모든 곳에서 사용하거"
"나, 항상 하던 것처럼 코드를 작성할 수 있습니다!"

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"정적 타입은 변수, 상수, 함수, 매개 변수, 반환 타입에 사용될 수 있습니다."

msgid "A brief look at static typing"
msgstr "정적 타이핑에 대한 간단한 설명"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"타입형 GDScript를 사용하면 Godot는 코드를 작성할 때 더 많은 오류를 감지할 수 "
"있습니다! 메서드를 호출할 때 인수 타입이 표시되기 때문에 작업하는 동안 여러분"
"과 팀원에게 더 많은 정보를 제공합니다."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"인벤토리 시스템을 프로그래밍하고 있다고 상상해보세요. ``Item`` 노드를 코딩한 "
"다음 ``Inventory``\\ 를 코딩합니다. 인벤토리에 항목을 추가하려면 코더들이 항"
"상 ``Item``\\ 타입만 ``Inventory.add`` 메서드에 전달해야 합니다. 타입을 사용"
"하면 다음을 강제할 수 있습니다:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"정적 타입은 더 나은 코드 완성(code completion) 옵션도 제공합니다. 아래에서 "
"``PlayerController``\\ 라는 클래스에 대한 동적 및 정적 타입 코드 완성 옵션의 "
"차이점을 볼 수 있습니다."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

#, fuzzy
msgid "Completion options for dynamic typed code."
msgstr "강제로 완료시키기 (선택사항)"

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"이것은 동적 코드 때문입니다. Godot는 함수에 전달하는 노드 또는 값 타입을 알 "
"수 없습니다. 그러나 타입을 명시적으로 작성하면 노드에서 모든 공용 메서드와 변"
"수를 가져옵니다:"

#, fuzzy
msgid "Completion options for static typed code."
msgstr "강제로 완료시키기 (선택사항)"

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"전반적으로 타입형 프로그래밍은 보다 구조화된 경험을 제공합니다. 오류를 방지하"
"고 스크립트의 자체 문서화 부분을 개선하는 데 도움이 됩니다. 이는 팀과 작업하"
"거나 장기 프로젝트를 작업할 때 특히 유용합니다. 연구에 따르면 개발자는 대부분"
"의 시간을 다른 사람의 코드나 과거에 작성하고 잊어버린 스크립트를 읽는 데 보낸"
"다고 합니다. 코드가 더 명확하고 구조화될수록 더 빨리 이해할 수 있고 더 빨리 "
"앞으로 나아갈 수 있습니다."

msgid "How to use static typing"
msgstr "정적 타입 사용법"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"변수나 상수의 타입을 정의하려면 변수 이름 뒤에 콜론을 쓰고 그 뒤에 타입을 씁"
"니다. 예) ``var health: int``. 이렇게 하면 변수의 타입이 항상 동일하게 강제"
"할 수 있습니다:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot은 여러분이 콜론을 입력했지만 타입을 생략한 경우 타입을 추론하기 위해서 "
"노력합니다:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr ""
"내보내기에서 버퍼 섀도우(buffer shadow)와 레이 섀도우(ray shadow)간의 차이는 "
"없습니다."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"상수의 경우 Godot가 할당된 값에서 자동으로 설정하기 때문에 타입 힌트를 작성"
"할 필요가 없습니다. 그러나 여전히 코드의 의도를 더 명확하게 하기 위해 그렇게 "
"할 수 있습니다."

#, fuzzy
msgid "What can be a type hint"
msgstr "Godot 엔진으로 무엇을 할 수 있습니까?"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "이 가이드라인을 기반으로 한 전체 클래스 예제입니다:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

#, fuzzy
msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`내장 타입 <doc_gdscript_builtin_types>`"

#, fuzzy
msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr ""
"핵심 클래스와 노드 (``Object``, ``Node``, ``Area2D``, ``Camera2D``, 등등)"

#, fuzzy
msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"

#, fuzzy
msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`스크립트 클래스 <doc_scripting_continued_class_name>`"

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"여러분이 만든 클래스를 포함한 모든 클래스를 타입으로 사용할 수 있습니다. 스크"
"립트에서 사용할 수 있는 두 가지 방법이 있습니다. 첫 번째는 사용하려는 스크립"
"트를 상수 타입으로 미리 불러오는 방법입니다:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"두 번째는 생성할 때 ``class_name`` 키워드를 사용하는 방법입니다. 위의 예제에"
"서 Rifle.gd는 다음과 같습니다:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"``class_name``\\ 을 사용하면 Godot는 Rifle 타입을 에디터에 전역적으로 등록하"
"기 때문에 상수에 미리 불러올 필요 없이 어디서나 사용할 수 있습니다:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "-> 화살표로 함수의 반환 타입 정의하기"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"함수의 반환 타입을 정의하려면 함수 선언 뒤에 대시와 오른쪽 꺾쇠 괄호 ``-"
">``\\ 를 쓰고 그 뒤에 반환 타입을 적으세요:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"``void`` 타입은 함수가 아무것도 반환하지 않는 것을 의미합니다. 변수와 마찬가"
"지로 어떤 타입도 반환 타입으로 사용할 수 있습니다:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "또한 여러분의 노드를 반환 타입으로 사용할 수 있습니다:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "예시:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "-> 화살표로 함수의 반환 타입 정의하기"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "타입 캐스팅"

#, fuzzy
msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""
"타입 캐스팅(Type casting)은 타입 언어의 핵심 개념입니다. 캐스팅은 어떤 값의 "
"타입을 다른 타입으로 변환하는 것입니다."

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"게임에 ``Area2D를 확장(extend)하는`` 적이 있다고 상상해보세요. 적이 "
"``PlayerController`` 스크립트가 붙은 플레이어 ``KinematicBody2D``\\ 에 충돌하"
"게 하고 싶습니다. ``on_body_entered`` 시그널을 사용하면 콜리전을 감지할 수 있"
"습니다. 타입형 코드에서, 감지한 물체는 ``_on_body_entered`` 콜백의 "
"``PlayerController``\\ 가 아니라 일반 ``PhysicsBody2D``\\ 가 됩니다."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"``as`` 캐스팅 키워드로 ``PhysicsBody2D``\\ 가 플레이어인지 확인할 수 있으며, "
"콜론 ``:``\\ 을 다시 사용해서 변수가 이 타입을 사용하도록 강제할 수 있습니"
"다. 이렇게 하면 변수가 ``PlayerController`` 타입에 고정됩니다:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"커스텀 타입을 다룰 때 ``body``\\ 가 ``PlayerController``\\ 를 확장하지 않으"
"면 ``player``\\ 변수가 ``null``\\ 로 설정됩니다. 이를 사용해 본체가 플레이어"
"인지 확인할 수 있습니다. 우리는 이 캐스트 덕분에 플레이어 변수에 대한 완전한 "
"자동 완성도 얻습니다."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"내장 타입으로 캐스트를 시도하다가 실패한다면 Godot는 오류를 내보낼 것입니다."

msgid "Safe lines"
msgstr "안전한 라인(safe line)"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"안전한 라인임을 보장하기 위해 캐스팅을 사용할 수도 있습니다. 안전한 라인은 코"
"드의 모호한 줄이 타입 안전한지 알려주는 Godot 3.1의 새로운 도구입니다. 때때"
"로 여러분이 타입형 코드와 동적 코드를 혼합하고 일치시킬 수 있기 때문에 Godot"
"에는 명령어가 실행 시간에 오류를 유발하는지 여부를 알 수 있는 충분한 정보가 "
"없습니다."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"이는 자식 노드를 가져올 때 발생합니다. 타이머를 예로 들어 보겠습니다. 동적 코"
"드를 사용하면 ``$Timer``\\ 로 노드를 가져올 수 있습니다. GDScript는 `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__\\ 을 지원하므로 타이"
"머가 ``Timer`` 유형인 경우에도 ``Node``\\ 와 ``Object``\\ 의 두 개의 클래스"
"를 확장합니다. 동적 GDScript를 사용하면 호출에 필요한 메서드가 있는 한 여러분"
"은 노드 타입을 신경 쓰지 않아도 됩니다."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"캐스팅을 사용하면 ``($Timer as Timer)``, ``($Player as KinematicBody2D)`` 등 "
"노드를 가져올 때 예상되는 타입을 Godot에게 알릴 수 있습니다. Godot는 타입이 "
"작동하는지 확인하고 만약 그렇다면 , 스크립트 에디터 왼쪽 줄 번호가 초록색으"
"로 바뀝니다."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "안전하지 않은 라인(line 7) vs 안전한 라인(line 6 and 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"에디터 설정에서 안전한 라인을 끌 수 있고 혹은 색상을 바꿀 수도 있습니다."

msgid "Typed or dynamic: stick to one style"
msgstr "타입형 혹은 동적: 하나의 스타일을 고수하기"

msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"타입형 GDScript와 동적 GDScript는 같은 프로젝트에 공존할 수 있습니다. 하지만 "
"코드베이스의 일관성과 동료들을 위해, 둘 중 하나의 스타일을 고수하는 것을 권장"
"합니다. 같은 가이드라인을 따른다면 모두가 함께 일하기 더 쉬워지고, 다른 사람"
"의 코드를 더 빠르게 읽고 이해하게 될 것입니다."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"타입형 코드는 조금 더 작성해야 할 것이 많지만 위에서 말한 이득을 얻을 수 있습"
"니다. 여기에 동일한 빈 스크립트 예제가 있습니다. 동적 스타일은 이렇습니다:"

#, fuzzy
msgid "And with static typing::"
msgstr "그리고 정적 타입형 스타일은 이렇습니다:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"보시다시피, 엔진의 가상 메서드로 타입형 스타일을 사용할 수도 있습니다. 시그"
"널 콜백도 다른 메서드처럼 타입형 스타일을 사용할 수 있습니다. 동적 스타일의 "
"``body_entered`` 시그널입니다:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "그리고 타입 힌트를 쓴 같은 콜백입니다:"

msgid "Warning system"
msgstr "경고 시스템(Warning system)"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"GDScript의 경고 시스템에 대한 관한 문서는 :ref:`doc_gdscript_exports`\\ 로 옮"
"겨졌습니다."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"타입형 GDScript의 또 다른 중요한 장점은 새로운 **경고 시스템**\\ 입니다. 버"
"전 3.1부터 Godot는 코드를 작성할 때 코드에 대한 경고를 제공합니다. 엔진은 실"
"행 시간에 문제를 일으킬 수 있는 코드 섹션을 식별하지만 여러분이 코드를 그대"
"로 둘지 여부를 결정할 수 있습니다. 잠시 후에 자세히 알아봅시다."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "타입을 지정할 수 없는 경우"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"이 소개를 마무리하며, 타입형 힌트를 사용할 수 없는 몇몇 경우를 알아봅시다. 밑"
"의 모든 예제는 **오류를 유발합니다**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"배열에서 각 멤버의 타입을 지정할 수 없습니다. 그렇게 할 경우 오류를 유발합니"
"다:"

#, fuzzy
msgid "Nested types are not currently supported::"
msgstr "**모바일 브라우저는 현재 지원되지 않습니다.**"

#, fuzzy
msgid "Typed dictionaries are not currently supported::"
msgstr "**모바일 브라우저는 현재 지원되지 않습니다.**"

msgid "Summary"
msgstr "요약"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"타입형 GDScript는 강력한 툴입니다. Godot 3.1 버전부터 이용할 수 있으며, 일반"
"적인 오류들을 방지하면서 더 구조화된 코드와 확장성 있는 체계를 만드는 것을 도"
"와줍니다. 미래에는 정적 타입도 향후 컴파일러 최적화로 좋은 퍼포먼스 향상을 제"
"공할 것입니다."

msgid "Translation status"
msgstr "번역 상태"
