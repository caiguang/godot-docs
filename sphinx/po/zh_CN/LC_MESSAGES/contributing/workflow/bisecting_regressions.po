# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Bisecting regressions"
msgstr "Regression 的二分查找"

msgid ""
"Bisecting is a way to find regressions in software. After reporting a bug on "
"the `Godot repository on GitHub <https://github.com/godotengine/godot>`__, "
"you may be asked by a contributor to *bisect* the issue. Bisecting makes it "
"possible for contributors to fix bugs faster, as they can know in advance "
"which commit caused the regression. Your effort will be widely appreciated :)"
msgstr ""
"二分查找是在软件中查找回归的一种方法。在 GitHub 上的 `Godot 仓库 <https://"
"github.com/godotengine/godot>`__\\ 中报告了一个错误之后，贡献者可能会要求你去"
"做\\ *二分查找*\\ 。二分查找可以让贡献者更快地修复错误，因为他们可以提前知道"
"是哪个提交导致了回归。你的努力将受到广泛赞赏 :)"

msgid "The guide below explains how to find a regression by bisecting."
msgstr "以下指南说明了如何通过二等分查找回归."

msgid "What is bisecting?"
msgstr "什么是两分法？"

msgid ""
"Godot developers use the `Git <https://git-scm.com/>`__ version control "
"system. In the context of Git, bisecting is the process of performing a "
"manual `binary search <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ to determine when a regression appeared. While "
"it's typically used for bugs, it can also be used to find other kinds of "
"unexpected changes such as performance regressions."
msgstr ""
"Godot开发人员使用 `Git <https://git-scm.com/>`__ 版本控制系统. 在Git的上下文"
"中, 二等分是执行手动 `二进制搜索 <https://en.wikipedia.org/wiki/"
"Binary_search_algorithm>`__ 的过程, 以确定什么时候出现了回归. 尽管它通常用于"
"错误, 但也可以用于查找其他种类的意外更改, 例如性能下降."

msgid "Using official builds to speed up bisecting"
msgstr "使用官方版本加快平分"

msgid ""
"Before using Git's ``bisect`` command, we strongly recommend trying to "
"reproduce the bug with an older (or newer) official release. This greatly "
"reduces the range of commits that potentially need to be built from source "
"and tested. You can find binaries of official releases, as well as alphas, "
"betas, and release candidates `here <https://downloads.tuxfamily.org/"
"godotengine/>`__."
msgstr ""
"在使用Git的 ``bisect`` 命令之前, 我们强烈建议尝试使用较旧的(或较新的)正式版本"
"重现该错误. 这大大减少了可能需要从源构建和测试的提交范围. 你可以在 `此处 "
"<https://downloads.tuxfamily.org/godotengine/>`__ 找到官方发行版的二进制文件"
"以及alpha,beta和发行候选文件."

msgid ""
"If you have experience with Godot 3.x and can reproduce an issue with Godot "
"4.0, we recommend trying to reproduce the issue in the latest Godot 3.x "
"version (if the feature exhibiting the bug is present in 3.x). This can be "
"used to check whether the issue is a regression in 4.0 or not."
msgstr ""

msgid ""
"If the issue **is present** in 3.x, then you'll need to check whether the "
"issue occurs in older 3.x versions as well."
msgstr ""

msgid ""
"If the issue is **not present** in 3.x, then you can try older 4.0 alphas "
"and betas to determine when the regression started."
msgstr ""

msgid ""
"Project files may be incompatible between Godot versions. **Make a backup of "
"your project** before starting the bisection process."
msgstr ""

msgid ""
"Going from the oldest to the newest build generally reduces the risk of the "
"project not being able to successfully open in the editor, thanks to "
"backwards compatibility. Try to reduce your project to the smallest "
"repeatable example too. The more minimal the project is, the more likely "
"you'll be able to open it without compatibility issues in newer engine "
"versions."
msgstr ""

msgid "The Git bisect command"
msgstr "Git bisect 命令"

msgid ""
"If you've found a build that didn't exhibit the bug in the above testing "
"process, you can now start bisecting the regression. The Git version control "
"system offers a built-in command for this: ``git bisect``. This makes the "
"process semi-automated as you only have to build the engine, run it and try "
"to reproduce the bug."
msgstr ""
"如果你发现在上述测试过程中未显示该错误的构建，则可以立即将回归二等分。Git 版"
"本控制系统为此提供了一个内置命令：\\ ``git bisect``\\ 。这使过程成为半自动化"
"的过程，因为你只需要构建引擎，运行它并尝试重现该错误即可。"

msgid ""
"Before bisecting a regression, you need to set up a build environment to "
"compile Godot from source. To do so, read the :ref:`Compiling <toc-devel-"
"compiling>` page for your target platform. (Compiling Godot from source "
"doesn't require C++ programming knowledge.)"
msgstr ""
"在平分回归之前, 你需要设置一个构建环境以从源代码编译Godot. 为此, 请阅读目标平"
"台的 :ref:`Compiling <toc-devel-compiling>` 页面. (从源代码编译Godot不需要C +"
"+编程知识.)"

msgid ""
"Note that compiling Godot can take a while on slow hardware (up an hour for "
"each full rebuild on a slow dual-core CPU). This means the full process can "
"take up to several hours. If your hardware is too slow, you may want to stop "
"there and report the results of your \"pre-bisecting\" on the GitHub issue "
"so another contributor can continue bisecting from there."
msgstr ""
"请注意, 编译 Godot 可能需要在缓慢的硬件上一段时间(在缓慢的双核 CPU 上, 每次完"
"全重建需要一个小时). 这意味着整个过程最多可能需要几个小时. 如果你的硬件太慢, "
"你可能希望停止并报告 GitHub 问题的 \"预分节\" 结果, 以便其他参与者可以继续从"
"该部分开始参与."

msgid "Determine the commit hashes"
msgstr "确定提交哈希"

msgid ""
"To start bisecting, you must first determine the commit hashes (identifiers) "
"of the \"bad\" and \"good\" build. \"bad\" refers to the build that exhibits "
"the bug, whereas \"good\" refers to the version that doesn't exhibit the "
"bug. If you're using a pre-release build as the \"good\" or \"bad\" build, "
"browse the `download mirror <https://downloads.tuxfamily.org/godotengine/"
">`__, go to the folder that contains the pre-release you downloaded and look "
"for the ``README.txt`` file. The commit hash is written inside that file."
msgstr ""
"要开始划分, 你必须首先确定 \"坏\" 和 \"好\" 的版本提交散列值(标识符).\"坏\" "
"指的是表现出错误的版本, 而 \"好\" 指的是没有表现出错误的版本. 如果你使用一个"
"预发布版本作为 \"好\" 或 \"坏\" `下载镜像 <https://downloads.tuxfamily.org/"
"godotengine/>`__, 进入包含你下载的预发布版本的文件夹, 寻找 ``README.txt`` 文"
"件. 提交的哈希值就写在该文件中."

msgid ""
"If you're using a stable release as the \"good\" or \"bad\" build, use one "
"of the following commit hashes depending on the version:"
msgstr "如果你使用稳定版本作为“好”或“坏”版本，请根据版本使用以下提交哈希之一："

msgid ""
"You can also use this Bash function to retrieve the Git commit hash of a pre-"
"release build (add it to your ``$HOME/.bashrc`` or similar):"
msgstr ""

msgid "Example usage:"
msgstr "示例用法："

#, fuzzy
msgid ""
"To refer to the latest state of the master branch, you can use ``master`` "
"instead of a commit hash. Note that unlike tagged releases or snapshot "
"commit hashes, ``master`` is a perpetually moving target."
msgstr "要引用 master 分支的最新状态，可以使用 ``master`` 代替提交哈希。"

msgid "Build the engine"
msgstr "构建引擎"

msgid ""
":ref:`Get Godot's source code using Git <doc_getting_source>`. Once this is "
"done, in the terminal window, use ``cd`` to reach the Godot repository "
"folder and enter the following command:"
msgstr ""
":ref:`使用 Git 获取 Godot 的源代码 <doc_getting_source>`\\ 。完成后，在终端窗"
"口中，使用 ``cd`` 进入 Godot 仓库文件夹并输入以下命令："

msgid "Compile Godot. This assumes you've set up a build environment:"
msgstr "编译 Godot。这假定你已经设置好了构建环境："

msgid "Run the engine"
msgstr "运行引擎"

msgid ""
"Run the binary located in the ``bin/`` folder and try to reproduce the bug."
msgstr "运行位于 ``bin/`` 文件夹中的二进制文件并尝试重现该错误。"

msgid ""
":ref:`Double-check the output file name "
"<doc_introduction_to_the_buildsystem_resulting_binary>` in ``bin/`` to make "
"sure you're actually running the binary you've just compiled. Different "
"Godot versions will output binaries with different names."
msgstr ""

msgid "If the build **still** exhibits the bug, run the following command:"
msgstr "如果构建\\ **仍然**\\ 显示错误，请运行以下命令："

msgid "If the build **does not** exhibit the bug, run the following command:"
msgstr "如果构建\\ **没有**\\ 显示错误，请运行以下命令："

msgid ""
"After entering one of the commands above, Git will switch to a different "
"commit. You should now build Godot again, try to reproduce the bug, then "
"enter ``git bisect good`` or ``git bisect bad`` depending on the result. "
"You'll have to repeat this several times. The longer the commit range, the "
"more steps will be required. 5 to 10 steps are usually sufficient to find "
"most regressions; Git will remind you of the number of steps remaining (in "
"the worst case scenario)."
msgstr ""
"输入上述命令之一后,Git 将切换到其他提交. 现在, 你应该再次构建 Godot, 尝试重"
"现 Bug, 然后根据结果输入\"git 一部分好 \"或\"git 一次坏\". 你必须重复几次. 提"
"交范围越长, 所需的步骤就越多.5 到 10 个步骤通常足以查找大多数回归;Git 将提醒"
"你剩余步骤数(在最坏的情况下)."

msgid ""
"Once you've completed enough steps, Git will display the commit hash where "
"the regression appeared. Write this commit hash as a comment to the GitHub "
"issue you've bisected. This will help in solving the issue. Thanks again for "
"contributing to Godot :)"
msgstr ""
"完成足够的步骤后,Git将在出现回归的位置显示提交哈希. 将此提交哈希值写成对一分"
"为二的GitHub问题的评论. 这将有助于解决问题. 再次感谢你对Godot的贡献:)"

msgid ""
"You can read the full documentation on ``git bisect`` `here <https://git-scm."
"com/docs/git-bisect>`__."
msgstr ""
"你可以在 ``git bisect`` 上阅读完整文档, `这里 <https://git-scm.com/docs/git-"
"bisect>`__ ."

msgid "Translation status"
msgstr "翻译状态"
