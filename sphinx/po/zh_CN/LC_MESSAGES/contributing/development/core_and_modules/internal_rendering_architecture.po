# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Internal rendering architecture"
msgstr "内部渲染架构"

msgid ""
"This page is a high-level overview of Godot 4's internal renderer design. It "
"does not apply to previous Godot versions."
msgstr ""
"这个页面是对 Godot 4 内部渲染器设计的高阶概述。不适用于旧版本的 Godot。"

msgid ""
"The goal of this page is to document design decisions taken to best suit :"
"ref:`Godot's design philosophy "
"<doc_best_practices_for_engine_contributors>`, while providing a starting "
"point for new rendering contributors."
msgstr ""
"这个页面的目标是记述最符合 :ref:`Godot 设计理念 "
"<doc_best_practices_for_engine_contributors>`\\ 的设计决策，为新的渲染贡献者"
"提供入手点。"

msgid ""
"If you have questions about rendering internals not answered here, feel free "
"to ask in the ``#rendering`` channel of the `Godot Contributors Chat "
"<https://chat.godotengine.org/channel/rendering>`__."
msgstr ""
"如果你有关于内部渲染的问题在此未得到解答，欢迎在 `Godot 贡献者聊天 <https://"
"chat.godotengine.org/channel/rendering>`__\\ 的 ``#rendering`` 频道中进行提"
"问。"

msgid ""
"If you have difficulty understanding concepts on this page, it is "
"recommended to go through an OpenGL tutorial such as `LearnOpenGL <https://"
"learnopengl.com/>`__."
msgstr ""
"如果你在理解这个页面上的概念时遇到了困难，建议先过一遍 `LearnOpenGL <https://"
"learnopengl.com/>`__ 等 OpenGL 教程。"

msgid ""
"Modern low-level APIs (Vulkan/Direct3D 12) require intermediate knowledge of "
"higher-level APIs (OpenGL/Direct3D 11) to be used effectively. Thankfully, "
"contributors rarely need to work directly with low-level APIs. Godot's "
"renderers are built entirely on OpenGL and RenderingDevice, which is our "
"abstraction over Vulkan/Direct3D 12."
msgstr ""
"要想高效使用现代低阶 API（Vulkan/Direct3D 12）需要具备中等水平的更高阶 API"
"（OpenGL/Direct3D 11）知识。值得庆幸的是，贡献者很少需要直接使用底层 API。"
"Godot 的渲染器完全基于 OpenGL 和 RenderingDevice，后者是我们对 Vulkan/"
"Direct3D 12 的抽象。"

msgid "Rendering methods"
msgstr "渲染方法"

msgid "Forward+"
msgstr "Forward+"

msgid ""
"This is a forward renderer that uses a *clustered* approach to lighting."
msgstr "这是一种前向渲染器，使用\\ *集群*\\ 方法实现光照。"

msgid ""
"Clustered lighting uses a compute shader to group lights into a 3D frustum "
"aligned grid. Then, at render time, pixels can lookup what lights affect the "
"grid cell they are in and only run light calculations for lights that might "
"affect that pixel."
msgstr ""
"集群光照使用计算着色器将灯光按照 3D 视锥栅格进行分组。然后在渲染时，像素就能"
"够查询影响某个栅格单元的有哪些灯光，仅对影响该像素的灯光进行光照计算。"

msgid ""
"This approach can greatly speed up rendering performance on desktop "
"hardware, but is substantially less efficient on mobile."
msgstr "这种方法能够大幅提升在桌面硬件上的渲染性能，但是在移动端会略为低效。"

msgid "Forward Mobile"
msgstr "Forward 移动"

msgid ""
"This is a forward renderer that uses a traditional single-pass approach to "
"lighting."
msgstr "这是使用传统单阶段光照方法的向前渲染器。"

msgid ""
"Intended for mobile platforms, but can also run on desktop platforms. This "
"rendering method is optimized to perform well on mobile GPUs. Mobile GPUs "
"have a very different architecture compared to desktop GPUs due to their "
"unique constraints around battery usage, heat, and overall bandwidth "
"limitations of reading and writing data. Compute shaders also have very "
"limited support or aren't supported at all. As a result, the mobile renderer "
"purely uses raster-based shaders (fragment/vertex)."
msgstr ""
"针对移动平台设计，但是也能够在桌面平台运行。这种渲染方法针对移动 GPU 进行了优"
"化。移动 GPU 的架构与桌面 GPU 有很大的区别，因为需要考虑电池使用、散热、读写"
"数据时的总体带宽限制等约束。对计算着色器的支持也非常有限，甚至完全不支持。因"
"此，移动渲染器单纯使用基于光栅的着色器（片段/顶点）。"

msgid ""
"Unlike desktop GPUs, mobile GPUs perform *tile-based rendering*. Instead of "
"rendering the whole image as a single unit, the image is divided in smaller "
"tiles that fit within the faster internal memory of the mobile GPU. Each "
"tile is rendered and then written out to the destination texture. This all "
"happens automatically on the graphics driver."
msgstr ""
"与桌面 GPU 不同，移动 GPU 执行的是\\ *基于图块的渲染*\\ 。整个图像不是作为整"
"体渲染的，而是会细分为较小的图块，适合放置到移动 GPU 更快的内部存储中。图块单"
"独渲染后就会写入到目标纹理上。图形驱动会自动进行这一步操作。"

msgid ""
"The problem is that this introduces bottlenecks in our traditional approach. "
"For desktop rendering, we render all opaque geometry, then handle the "
"background, then transparent geometry, then post-processing. Each pass will "
"need to read the current result into tile memory, perform its operations and "
"then write it out again. We then wait for all tiles to be completed before "
"moving on to the next pass."
msgstr ""
"问题在于，这种做法会在我们的传统方法中造成瓶颈。对于桌面渲染，我们会先渲染所"
"有不透明的几何体，然后处理背景，再处理透明的几何体，最后进行后期处理。每个步"
"骤都需要将当前的结果读进图块内存，执行对应的运算后再写出。我们需要等待所有图"
"块都完成后才能继续下一个阶段。"

msgid ""
"The first important change in the mobile renderer is that the mobile "
"renderer does not use the RGBA16F texture formats that the desktop renderer "
"does. Instead, it is using a R10G10B10A2 UNORM texture format. This halves "
"the bandwidth required and has further improvements as mobile hardware often "
"further optimizes for 32-bit formats. The tradeoff is that the mobile "
"renderer has limited HDR capabilities due to the reduced precision and "
"maximum values in the color data."
msgstr ""
"移动渲染器的第一个重要更改就是不使用桌面渲染器所使用的 RGBA16F 纹理格式，改"
"用 R10G10B10A2 UNORM 纹理格式。这样就把所需的带宽减半，并且由于移动硬件通常针"
"对 32 位格式做了优化，所以还会带来进一步的提升。这样做的代价是移动渲染器的 "
"HDR 能力有限，因为颜色数据降低了精度和最大值。"

msgid ""
"The second important change is the use of sub-passes whenever possible. Sub-"
"passes allows us to perform the rendering steps end-to-end per tile saving "
"on the overhead introduced by reading from and writing to the tiles between "
"each rendering pass. The ability to use sub-passes is limited by the "
"inability to read neighboring pixels, as we're constrained to working within "
"a single tile."
msgstr ""
"第二个重要更改就是尽可能使用子阶段（sub-pass）。子阶段能够按照图块来执行渲染"
"步骤，节省每个渲染阶段之间读写图块带来的开销。使用子阶段带来的限制是无法读取"
"相邻像素，因为我们只能针对单一图块进行处理。"

msgid ""
"This limitation of subpasses results in not being able to implement features "
"such as glow and depth of field efficiently. Similarly, if there is a "
"requirement to read from the screen texture or depth texture, we must fully "
"write out the rendering result limiting our ability to use sub-passes. When "
"such features are enabled, a mix of sub-passes and normal passes are used, "
"and these features result in a notable performance penalty."
msgstr ""
"子阶段的这一限制导致我们无法高效实现辉光、景深等特性。类似地，如果需要读取屏"
"幕纹理或者深度纹理，我们就必须将渲染结果完全写出，限制对子阶段的使用。启用这"
"种特性时，会混用子阶段和正常阶段，因此会带来明显的性能损失。"

msgid ""
"On desktop platforms, the use of sub-passes won't have any impact on "
"performance. However, this rendering method can still perform better than "
"Clustered Forward in simple scenes thanks to its lower complexity and lower "
"bandwidth usage. This is especially noticeable on low-end GPUs, integrated "
"graphics or in VR applications."
msgstr ""
"在桌面平台，使用子阶段对性能不会有任何影响。但对于简单的场景而言，这种渲染方"
"法仍然比集群 Forward 要高效，因为复杂度和带宽占用都相对较低。这种情况在低端 "
"GPU、集成显卡、VR 应用中尤为明显。"

msgid ""
"Given its low-end focus, this rendering method does not provide high-end "
"rendering features such as SDFGI and :ref:`doc_volumetric_fog`. Several post-"
"processing effects are also not available."
msgstr ""
"由于关注点在于低端设备，这种渲染方法并不提供 SDFGI、\\ :ref:"
"`doc_volumetric_fog`\\ 等高端渲染特性。部分后期处理效果也不可用。"

msgid "Compatibility"
msgstr "兼容"

msgid ""
"This is the only rendering method available when using the OpenGL driver. "
"This rendering method is not available when using Vulkan or Direct3D 12."
msgstr ""
"这是使用 OpenGL 驱动时唯一可用的渲染方法。这种渲染方法在使用 Vulkan 和 "
"Direct3D 12 时不可用。"

msgid ""
"This is a traditional (non-clustered) forward renderer. It's intended for "
"old GPUs that don't have Vulkan support, but still works very efficiently on "
"newer hardware. Specifically, it is optimized for older and lower-end mobile "
"devices However, many optimizations carry over making it a good choice for "
"older and lower-end desktop as well."
msgstr ""
"这是传统的（非集群）向前渲染器，针对的是不支持 Vulkan 的老旧 GPU，但在较新的"
"硬件上仍然能够非常高效地工作。确切地说，这种渲染器针对较旧、较低端的移动设备"
"进行了优化。不过，很多优化也适用于较旧、较低端的桌面设备，因此也是不错的选"
"择。"

msgid ""
"Like the Mobile renderer, the Compatibility renderer uses an R10G10B10A2 "
"UNORM texture for 3D rendering. Unlike the mobile renderer, colors are "
"tonemapped and stored in sRGB format so there is no HDR support. This avoids "
"the need for a tonemapping pass and allows us to use the lower bit texture "
"without substantial banding."
msgstr ""
"与“移动”渲染器类似，“兼容”渲染器在进行 3D 渲染时使用的也是 R10G10B10A2 UNORM "
"纹理。与移动渲染器不同的是，颜色都经过了色调映射，以 sRGB 格式存储，因此不支"
"持 HDR。这样就不需要再执行色调映射阶段，能够使用低位纹理，不会产生明显的条"
"带。"

msgid ""
"The Compatibility renderer uses a traditional forward single-pass approach "
"to drawing objects with lights, but it uses a multi-pass approach to draw "
"lights with shadows. Specifically, in the first pass, it can draw multiple "
"lights without shadows and up to one DirectionalLight3D with shadows. In "
"each subsequent pass, it can draw up to one OmniLight3D, one SpotLight3D and "
"one DirectionalLight3D with shadows. Lights with shadows will affect the "
"scene differently than lights without shadows, as the lighting is blended in "
"sRGB space instead of linear space. This difference in lighting will impact "
"how the scene looks and needs to be kept in mind when designing scenes for "
"the Compatibility renderer."
msgstr ""
"“兼容”渲染器在绘制带光照的对象时使用的传统的单阶段向前方法，但是带阴影的灯光"
"会使用多阶段方法。确切地说，第一个阶段能够绘制多个不带阴影的灯光以及一个带阴"
"影的 DirectionalLight3D。后续的各个阶段中，最多只能分别绘制一个带阴影的 "
"OmniLight3D、 SpotLight3D、 DirectionalLight3D。带阴影的灯光对场景的影响与不"
"带阴影的灯光不同，因为光照的混合使用的是 sRGB 空间而不是线性空间。这种区别会"
"影响场景的外观，针对“兼容”渲染器设计场景时需要谨记于心。"

msgid ""
"Given its low-end focus, this rendering method does not provide high-end "
"rendering features (even less so compared to Forward Mobile). Most post-"
"processing effects are not available."
msgstr ""
"由于关注点在于低端设备，这种渲染方法并不提供高端渲染特性（与 Forward 移动相比"
"更少）。大多数后期处理效果不可用。"

msgid "Why not deferred rendering?"
msgstr "为什么不使用延迟渲染？"

msgid ""
"Forward rendering generally provides a better tradeoff for performance "
"versus flexibility, especially when a clustered approach to lighting is "
"used. While deferred rendering can be faster in some cases, it's also less "
"flexible and requires using hacks to be able to use MSAA. Since games with a "
"less realistic art style can benefit a lot from MSAA, we chose to go with "
"forward rendering for Godot 4 (like Godot 3)."
msgstr ""
"向前渲染通常能够在性能和灵活性之间达到更好的平衡，尤其是在灯光使用了集群方法"
"的情况下。延迟渲染虽然在某些情况下更快，但是灵活性较低、使用 MSAA 需要特殊处"
"理。MSAA 能够为非写实画风的游戏带来很大提升，因此我们选择在 Godot 4 使用向前"
"渲染（Godot 3 也一样）。"

msgid ""
"That said, parts of the forward renderer *are* performed with a deferred "
"approach to allow for some optimizations when possible. This applies to "
"VoxelGI and SDFGI in particular."
msgstr ""
"话虽如此，向前渲染器中\\ *确实*\\ 有一部分是使用延迟方法执行的，以便在可能的"
"情况下进行一些优化。这一点尤其适用于 VoxelGI 和 SDFGI。"

msgid ""
"A clustered deferred renderer may be developed in the future. This renderer "
"could be used in situations where performance is favored over flexibility."
msgstr ""
"未来可能会开发集群延迟渲染器。这种渲染器可以在对性能的要求大于灵活性的场合使"
"用。"

msgid "Rendering drivers"
msgstr "渲染驱动"

msgid "Godot 4 supports the following graphics APIs:"
msgstr "Godot 4 支持以下图形 API："

msgid "Vulkan"
msgstr "Vulkan"

msgid ""
"This is the main driver in Godot 4, with most of the development focus going "
"towards this driver."
msgstr "这是 Godot 4 的主要驱动，大部分开发集中在这个驱动上。"

msgid ""
"Vulkan 1.0 is required as a baseline, with optional Vulkan 1.1 and 1.2 "
"features used when available. `volk <https://github.com/zeux/volk>`__ is "
"used as a Vulkan loader, and `Vulkan Memory Allocator <https://github.com/"
"GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator>`__ is used for memory "
"management."
msgstr ""
"Vulkan 1.0 是必要的基准，Vulkan 1.1 和 1.2 的特性会有可用时使用。我们使用 "
"`volk <https://github.com/zeux/volk>`__ 作为 Vulkan 加载器，使用 `Vulkan "
"Memory Allocator <https://github.com/GPUOpen-LibrariesAndSDKs/"
"VulkanMemoryAllocator>`__ 进行内存管理。"

msgid ""
"Both the Forward+ and Mobile :ref:"
"`doc_internal_rendering_architecture_methods` are supported when using the "
"Vulkan driver."
msgstr ""
"使用 Vulkan 驱动时支持 Forward+ 和移动 :ref:"
"`doc_internal_rendering_architecture_methods`\\ 。"

msgid "**Vulkan context creation:**"
msgstr "**Vulkan 上下文的创建：**"

#, fuzzy
msgid ""
"`drivers/vulkan/vulkan_context.cpp <https://github.com/godotengine/godot/"
"blob/4.2/drivers/vulkan/vulkan_context.cpp>`__"
msgstr ""
"`drivers/vulkan/vulkan_context.cpp <https://github.com/godotengine/godot/"
"blob/4.0/drivers/vulkan/vulkan_context.cpp>`__"

#, fuzzy
msgid "**Direct3D 12 context creation:**"
msgstr "**Vulkan 上下文的创建：**"

#, fuzzy
msgid ""
"`drivers/d3d12/d3d12_context.cpp <https://github.com/godotengine/godot/blob/"
"master/drivers/d3d12/d3d12_context.cpp>`__"
msgstr ""
"`drivers/vulkan/vulkan_context.cpp <https://github.com/godotengine/godot/"
"blob/4.0/drivers/vulkan/vulkan_context.cpp>`__"

msgid "Direct3D 12"
msgstr "Direct3D 12"

msgid ""
"Like Vulkan, the Direct3D 12 driver targets modern platforms only. It is "
"designed to target both Windows and Xbox (whereas Vulkan can't be used "
"directly on Xbox)."
msgstr ""
"与 Vulkan 类似，Direct3D 12 驱动仅支持现代平台，是针对 Windows 和 Xbox 设计的"
"（鉴于 Xbox 上无法直接使用 Vulkan）。"

msgid ""
"Both the Forward+ and Mobile :ref:"
"`doc_internal_rendering_architecture_methods` can be used with Direct3D 12."
msgstr ""
"使用 Direct3D 12 时支持 Forward+ 和移动 :ref:"
"`doc_internal_rendering_architecture_methods`\\ 。"

msgid ""
":ref:`doc_internal_rendering_architecture_core_shaders` are shared with the "
"Vulkan renderer. Shaders are transpiled from GLSL to HLSL using Mesa NIR "
"(`more information <https://godotengine.org/article/d3d12-adventures-in-"
"shaderland/>`__). This means you don't need to know HLSL to work on the "
"Direct3D 12 renderer, although knowing the language's basics is recommended "
"to ease debugging."
msgstr ""

msgid ""
"**This driver is still experimental and only available in Godot 4.3 and "
"later.** While Direct3D 12 allows supporting Direct3D-exclusive features on "
"Windows 11 such as windowed optimizations and Auto HDR, Vulkan is still "
"recommended for most projects. See the `pull request that introduced "
"Direct3D 12 support <https://github.com/godotengine/godot/pull/70315>`__ for "
"more information."
msgstr ""

msgid "Metal"
msgstr "Metal"

msgid ""
"Godot supports Metal rendering via `MoltenVK <https://github.com/"
"KhronosGroup/MoltenVK>`__, as macOS and iOS do not support Vulkan natively. "
"This is done automatically when specifying the Vulkan driver in the Project "
"Settings."
msgstr ""

msgid ""
"MoltenVK makes driver maintenance easy at the cost of some performance "
"overhead. Also, MoltenVK has several limitations that a native Metal driver "
"implementation wouldn't have. Both the clustered and mobile :ref:"
"`doc_internal_rendering_architecture_methods` can be used with a Metal "
"backend via MoltenVK."
msgstr ""

msgid ""
"A native Metal driver is planned in the future for better performance and "
"compatibility."
msgstr ""

msgid "OpenGL"
msgstr "OpenGL"

msgid ""
"This driver uses OpenGL ES 3.0 and targets legacy and low-end devices that "
"don't support Vulkan. OpenGL 3.3 Core Profile is used on desktop platforms "
"to run this driver, as most graphics drivers on desktop don't support OpenGL "
"ES. WebGL 2.0 is used for web exports."
msgstr ""
"这个驱动使用 OpenGL ES 3.0，针对的是不支持 Vulkan 的旧有设备以及低端设备。桌"
"面平台运行该驱动时使用的是 OpenGL 3.3 Core Profile，因为桌面平台的大部分图形"
"驱动不支持 OpenGL ES。Web 导出使用的是 WebGL 2.0。"

msgid ""
"Only the :ref:`doc_internal_rendering_architecture_compatibility` rendering "
"method can be used with the OpenGL driver."
msgstr ""
"使用 OpenGL 驱动是只能使用 :ref:"
"`doc_internal_rendering_architecture_compatibility` 渲染方法。"

msgid ""
":ref:`doc_internal_rendering_architecture_core_shaders` are entirely "
"different from the Vulkan renderer."
msgstr ""
":ref:`doc_internal_rendering_architecture_core_shaders` 与 Vulkan 渲染器完全"
"不同。"

msgid ""
"**As of May 2023, this driver is still in development.** Many features are "
"still not implemented, especially in 3D."
msgstr ""
"**截止到 2023 年五月，该驱动仍然处于开发状态。**\\ 许多特性仍未实现，尤其是 "
"3D 特性。"

msgid "Summary of rendering drivers/methods"
msgstr "渲染驱动/方法总结"

msgid ""
"The following rendering API + rendering method combinations are currently "
"possible:"
msgstr "目前可用的渲染 API + 渲染方法组合如下："

msgid "Vulkan + Forward+"
msgstr "Vulkan + Forward+"

msgid "Vulkan + Forward Mobile"
msgstr "Vulkan + Forward 移动"

msgid "Direct3D 12 + Forward+"
msgstr "Direct3D 12 + Forward+"

msgid "Direct3D 12 + Forward Mobile"
msgstr "Direct3D 12 + Forward 移动"

msgid "Metal + Forward+ (via MoltenVK)"
msgstr "Metal + Forward+（通过 MoltenVK）"

msgid "Metal + Forward Mobile (via MoltenVK)"
msgstr "Metal + Forward 移动（通过 MoltenVK）"

msgid "OpenGL + Compatibility"
msgstr "OpenGL + 兼容"

msgid ""
"Each combination has its own limitations and performance characteristics. "
"Make sure to test your changes on all rendering methods if possible before "
"opening a pull request."
msgstr ""

msgid "RenderingDevice abstraction"
msgstr "RenderingDevice 抽象"

msgid "The OpenGL driver does not use the RenderingDevice abstraction."
msgstr "OpenGL 驱动不使用 RenderingDevice 抽象。"

msgid ""
"To make the complexity of modern low-level graphics APIs more manageable, "
"Godot uses its own abstraction called RenderingDevice."
msgstr ""

msgid ""
"This means that when writing code for modern rendering methods, you don't "
"actually use the Vulkan or Direct3D 12 APIs directly. While this is still "
"lower-level than an API like OpenGL, this makes working on the renderer "
"easier, as RenderingDevice will abstract many API-specific quirks for you. "
"The RenderingDevice presents a similar level of abstraction as Metal or "
"WebGPU."
msgstr ""

msgid "**Vulkan RenderingDevice implementation:**"
msgstr "**Vulkan RenderingDevice 实现：**"

#, fuzzy
msgid ""
"`drivers/vulkan/rendering_device_driver_vulkan.cpp <https://github.com/"
"godotengine/godot/blob/4.2/drivers/vulkan/rendering_device_driver_vulkan."
"cpp>`__"
msgstr ""
"`drivers/vulkan/rendering_device_vulkan.cpp <https://github.com/godotengine/"
"godot/blob/4.0/drivers/vulkan/rendering_device_vulkan.cpp>`__"

#, fuzzy
msgid "**Direct3D 12 RenderingDevice implementation:**"
msgstr "**Vulkan RenderingDevice 实现：**"

#, fuzzy
msgid ""
"`drivers/d3d12/rendering_device_driver_d3d12.cpp <https://github.com/"
"godotengine/godot/blob/master/drivers/d3d12/rendering_device_driver_d3d12."
"cpp>`__"
msgstr ""
"`drivers/vulkan/rendering_device_vulkan.cpp <https://github.com/godotengine/"
"godot/blob/4.0/drivers/vulkan/rendering_device_vulkan.cpp>`__"

msgid "Core rendering classes architecture"
msgstr "核心渲染类架构"

msgid ""
"This diagram represents the structure of rendering classes in Godot, "
"including the RenderingDevice abstraction:"
msgstr ""

msgid ""
"`View at full size <https://raw.githubusercontent.com/godotengine/godot-docs/"
"master/contributing/development/core_and_modules/img/"
"rendering_architecture_diagram.webp>`__"
msgstr ""

msgid "Core shaders"
msgstr "核心着色器"

#, fuzzy
msgid ""
"While shaders in Godot projects are written using a :ref:`custom language "
"inspired by GLSL <doc_shading_language>`, core shaders are written directly "
"in GLSL."
msgstr ""
"基于文本的着色器，使用\\ :ref:`由 GLSL 启发的着色器语言 "
"<doc_shading_language>`\\ 。"

msgid ""
"These core shaders are embedded in the editor and export template binaries "
"at compile-time. To see any changes you've made to those GLSL shaders, you "
"need to recompile the editor or export template binary."
msgstr ""

msgid ""
"Some material features such as height mapping, refraction and proximity fade "
"are not part of core shaders, and are performed in the default "
"BaseMaterial3D using the Godot shader language instead (not GLSL). This is "
"done by procedurally generating the required shader code depending on the "
"features enabled in the material."
msgstr ""

msgid ""
"By convention, shader files with ``_inc`` in their name are included in "
"other GLSL files for better code reuse. Standard GLSL preprocessing is used "
"to achieve this."
msgstr ""

msgid ""
"Core material shaders will be used by every material in the scene – both "
"with the default BaseMaterial3D and custom shaders. As a result, these "
"shaders must be kept as simple as possible to avoid performance issues and "
"ensure shader compilation doesn't become too slow."
msgstr ""

msgid ""
"If you use ``if`` branching in a shader, performance may decrease as :abbr:"
"`VGPR (Vector General-Purpose Register)` usage will increase in the shader. "
"This happens even if all pixels evaluate to ``true`` or ``false`` in a given "
"frame."
msgstr ""

msgid ""
"If you use ``#if`` preprocessor branching, the number of required shader "
"versions will increase in the scene. In a worst-case scenario, adding a "
"single boolean ``#define`` can *double* the number of shader versions that "
"may need to be compiled in a given scene. In some cases, Vulkan "
"specialization constants can be used as a faster (but more limited) "
"alternative."
msgstr ""

msgid ""
"This means there is a high barrier to adding new built-in material features "
"in Godot, both in the core shaders and BaseMaterial3D. While BaseMaterial3D "
"can make use of dynamic code generation to only include the shader code if "
"the feature is enabled, it'll still require generating more shader versions "
"when these features are used in a project. This can make shader compilation "
"stutter more noticeable in complex 3D scenes."
msgstr ""

msgid ""
"See `The Shader Permutation Problem <https://therealmjp.github.io/posts/"
"shader-permutations-part1/>`__ and `Branching on a GPU <https://medium.com/"
"@jasonbooth_86226/branching-on-a-gpu-18bfc83694f2>`__ blog posts for more "
"information."
msgstr ""

msgid "**Core GLSL material shaders:**"
msgstr "**核心 GLSL 材质着色器：**"

#, fuzzy
msgid ""
"Forward+: `servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl>`__"
msgstr ""
"Forward+：\\ `servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl <https://github.com/godotengine/godot/blob/4.0/"
"servers/rendering/renderer_rd/shaders/forward_clustered/"
"scene_forward_clustered.glsl>`__"

#, fuzzy
msgid ""
"Forward Mobile: `servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl <https://github.com/godotengine/godot/blob/4.2/"
"servers/rendering/renderer_rd/shaders/forward_mobile/scene_forward_mobile."
"glsl>`__"
msgstr ""
"Forward Mobile：\\ `servers/rendering/renderer_rd/shaders/forward_mobile/"
"scene_forward_mobile.glsl <https://github.com/godotengine/godot/blob/4.0/"
"servers/rendering/renderer_rd/shaders/forward_mobile/scene_forward_mobile."
"glsl>`__"

#, fuzzy
msgid ""
"Compatibility: `drivers/gles3/shaders/scene.glsl <https://github.com/"
"godotengine/godot/blob/4.2/drivers/gles3/shaders/scene.glsl>`__"
msgstr ""
"Compatibility：\\ `drivers/gles3/shaders/scene.glsl <https://github.com/"
"godotengine/godot/blob/4.0/drivers/gles3/shaders/scene.glsl>`__"

msgid "**Material shader generation:**"
msgstr "**材质着色器生成：**"

#, fuzzy
msgid ""
"`scene/resources/material.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/material.cpp>`__"
msgstr ""
"`scene/resources/material.cpp <https://github.com/godotengine/godot/blob/4.0/"
"scene/resources/material.cpp>`__"

msgid ""
"**Other GLSL shaders for Forward+ and Forward Mobile rendering methods:**"
msgstr "**Forward+ 和 Forward Mobile 渲染方法的其他 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/ <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_rd/shaders/>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/ <https://github.com/godotengine/"
"godot/blob/4.0/servers/rendering/renderer_rd/shaders/>`__"

#, fuzzy
msgid ""
"`modules/lightmapper_rd/ <https://github.com/godotengine/godot/blob/4.2/"
"modules/lightmapper_rd>`__"
msgstr ""
"`modules/lightmapper_rd/ <https://github.com/godotengine/godot/blob/4.0/"
"modules/lightmapper_rd>`__"

msgid "**Other GLSL shaders for the Compatibility rendering method:**"
msgstr "**Compatibility 渲染方法的其他 GLSL 着色器：**"

#, fuzzy
msgid ""
"`drivers/gles3/shaders/ <https://github.com/godotengine/godot/blob/4.2/"
"drivers/gles3/shaders/>`__"
msgstr ""
"`drivers/gles3/shaders/ <https://github.com/godotengine/godot/blob/4.0/"
"drivers/gles3/shaders/>`__"

msgid "2D and 3D rendering separation"
msgstr "2D 与 3D 渲染的拆分"

msgid ""
"The following is only applicable in the Forward+ and Forward Mobile "
"rendering methods, not in Compatibility. Multiple Viewports can be used to "
"emulate this when using the Compatibility backend, or to perform 2D "
"resolution scaling."
msgstr ""

msgid ""
"2D and 3D are rendered to separate buffers, as 2D rendering in Godot is "
"performed in :abbr:`LDR (Low Dynamic Range)` sRGB-space while 3D rendering "
"uses :abbr:`HDR (High Dynamic Range)` linear space."
msgstr ""

msgid ""
"The color format used for 2D rendering is RGB8 (RGBA8 if the **Transparent** "
"property on the Viewport is enabled). 3D rendering uses a 24-bit unsigned "
"normalized integer depth buffer, or 32-bit signed floating-point if a 24-bit "
"depth buffer is not supported by the hardware. 2D rendering does not use a "
"depth buffer."
msgstr ""

msgid ""
"3D resolution scaling is performed differently depending on whether bilinear "
"or FSR 1.0 scaling is used. When bilinear scaling is used, no special "
"upscaling shader is run. Instead, the viewport's texture is stretched and "
"displayed with a linear sampler (which makes the filtering happen directly "
"on the hardware). This allows maximizing the performance of bilinear 3D "
"scaling."
msgstr ""

msgid ""
"The ``configure()`` function in RenderSceneBuffersRD reallocates the 2D/3D "
"buffers when the resolution or scaling changes."
msgstr ""

msgid ""
"Dynamic resolution scaling isn't supported yet, but is planned in a future "
"Godot release."
msgstr ""

msgid "**2D and 3D rendering buffer configuration C++ code:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/storage_rd/render_scene_buffers_rd.cpp "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"storage_rd/render_scene_buffers_rd.cpp>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "**FSR 1.0:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/effects/fsr.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/effects/ss_effects."
"cpp>`__"

#, fuzzy
msgid ""
"`thirdparty/amd-fsr/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr>`__"
msgstr ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"

msgid "2D rendering techniques"
msgstr "2D 渲染技术"

msgid ""
"2D light rendering is performed in a single pass to allow for better "
"performance with large amounts of lights."
msgstr ""

msgid ""
"The Forward+ and Mobile rendering methods don't feature 2D batching yet, but "
"it's planned for a future release."
msgstr ""

msgid ""
"The Compatibility backend features 2D batching to improve performance, which "
"is especially noticeable with lots of text on screen."
msgstr ""

msgid ""
"MSAA can be enabled in 2D to provide \"automatic\" line and polygon "
"antialiasing, but FXAA does not affect 2D rendering as it's calculated "
"before 2D rendering begins. Godot's 2D drawing methods such as the Line2D "
"node or some CanvasItem ``draw_*()`` methods provide their own way of "
"antialiasing based on triangle strips and vertex colors, which don't require "
"MSAA to work."
msgstr ""

msgid ""
"A 2D signed distance field representing LightOccluder2D nodes in the "
"viewport is automatically generated if an user shader requests it. This can "
"be used for various effects in custom shaders, such as 2D global "
"illumination. It is also used to calculate particle collisions in 2D."
msgstr ""

msgid "**2D SDF generation GLSL shader:**"
msgstr "**2D SDF 生成 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/canvas_sdf.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/canvas_sdf."
"glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"

msgid "3D rendering techniques"
msgstr "3D 渲染技术"

msgid "Batching and instancing"
msgstr "分批和实例"

msgid ""
"In the Forward+ backend, Vulkan instancing is used to group rendering of "
"identical objects for performance. This is not as fast as static mesh "
"merging, but it still allows instances to be culled individually."
msgstr ""

msgid "Light, decal and reflection probe rendering"
msgstr "精灵、多边形和线条渲染"

msgid ""
"Reflection probe and decal rendering are currently not available in the "
"Compatibility backend."
msgstr ""

msgid ""
"As its name implies, the Forward+ backend uses clustered lighting. This "
"allows using as many lights as you want; performance largely depends on "
"screen coverage. Shadow-less lights can be almost free if they don't occupy "
"much space on screen."
msgstr ""

msgid ""
"All rendering methods also support rendering up to 8 directional lights at "
"the same time (albeit with lower shadow quality when more than one light has "
"shadows enabled)."
msgstr ""

msgid ""
"The Forward Mobile backend uses a single-pass lighting approach, with a "
"limitation of 8 OmniLights + 8 SpotLights affecting each Mesh *resource* "
"(plus a limitation of 256 OmniLights + 256 SpotLights in the camera view). "
"These limits are hardcoded and can't be adjusted in the project settings."
msgstr ""

msgid ""
"The Compatibility backend uses a hybrid single-pass + multi-pass lighting "
"approach. Lights without shadows are rendered in a single pass. Lights with "
"shadows are rendered in multiple passes. This is required for performance "
"reasons on mobile devices. As a result, performance does not scale well with "
"many shadow-casting lights. It is recommended to only have a handful of "
"lights with shadows in the camera frustum at a time and for those lights to "
"be spread apart so that each object is only touched by 1 or 2 shadowed "
"lights at a time. The maximum number of lights visible at once can be "
"adjusted in the project settings."
msgstr ""

msgid ""
"In all 3 methods, lights without shadows are much cheaper than lights with "
"shadows. To improve performance, lights are only updated when the light is "
"modified or when objects in its radius are modified. Godot currently doesn't "
"separate static shadow rendering from dynamic shadow rendering, but this is "
"planned in a future release."
msgstr ""

msgid ""
"Clustering is also used for reflection probes and decal rendering in the "
"Forward+ backend."
msgstr ""

msgid "Shadow mapping"
msgstr "阴影贴图"

msgid ""
"Both Forward+ and Forward Mobile methods use :abbr:`PCF (Percentage Closer "
"Filtering)` to filter shadow maps and create a soft penumbra. Instead of "
"using a fixed PCF pattern, these methods use a vogel disk pattern which "
"allows for changing the number of samples and smoothly changing the quality."
msgstr ""

msgid ""
"Godot also supports percentage-closer soft shadows (PCSS) for more realistic "
"shadow penumbra rendering. PCSS shadows are limited to the Forward+ backend "
"as they're too demanding to be usable in the Forward Mobile backend. PCSS "
"also uses a vogel-disk shaped kernel."
msgstr ""

msgid ""
"Additionally, both shadow-mapping techniques rotate the kernel on a per-"
"pixel basis to help soften under-sampling artifacts."
msgstr ""

msgid ""
"The Compatibility backend doesn't support shadow mapping for any light types "
"yet."
msgstr ""

#, fuzzy
msgid "Temporal antialiasing"
msgstr "多采样抗锯齿"

msgid ""
"Only available in the Forward+ backend, not the Forward Mobile or "
"Compatibility methods."
msgstr ""

msgid ""
"Godot uses a custom TAA implementation based on the old TAA implementation "
"from `Spartan Engine <https://github.com/PanosK92/SpartanEngine>`__."
msgstr ""

msgid ""
"Temporal antialiasing requires motion vectors to work. If motion vectors are "
"not correctly generated, ghosting will occur when the camera or objects move."
msgstr ""

msgid ""
"Motion vectors are generated on the GPU in the main material shader. This is "
"done by running the vertex shader corresponding to the previous rendered "
"frame (with the previous camera transform) in addition to the vertex shader "
"for the current rendered frame, then storing the difference between them in "
"a color buffer."
msgstr ""

msgid ""
"Alternatively, FSR 2.2 can be used as an upscaling solution that also "
"provides its own temporal antialiasing algorithm. FSR 2.2 is implemented on "
"top of the RenderingDevice abstraction as opposed to using AMD's reference "
"code directly."
msgstr ""

msgid "**TAA resolve:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/taa_resolve.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/taa_resolve.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "**FSR 2.2:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/effects/fsr2.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/fsr2.cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/effects/ss_effects."
"cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/fsr2/ <https://github.com/"
"godotengine/godot/tree/master/servers/rendering/renderer_rd/shaders/effects/"
"fsr2>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"

#, fuzzy
msgid ""
"`thirdparty/amd-fsr2/ <https://github.com/godotengine/godot/tree/master/"
"thirdparty/amd-fsr2>`__"
msgstr ""
"`Android <https://github.com/godotengine/godot/tree/master/platform/"
"android>`__"

msgid "Global illumination"
msgstr "全局光照"

msgid ""
"VoxelGI and SDFGI are only available in the Forward+ backend, not the "
"Forward Mobile or Compatibility methods."
msgstr ""

msgid ""
"LightmapGI *baking* is only available in the Forward+ and Forward Mobile "
"methods, and can only be performed within the editor (not in an exported "
"project). LightmapGI *rendering* will eventually be supported by the "
"Compatibility backend."
msgstr ""

msgid ""
"Godot supports voxel-based GI (VoxelGI), signed distance field GI (SDFGI) "
"and lightmap baking and rendering (LightmapGI). These techniques can be used "
"simultaneously if desired."
msgstr ""

msgid ""
"Lightmap baking happens on the GPU using Vulkan compute shaders. The GPU-"
"based lightmapper is implemented in the LightmapperRD class, which inherits "
"from the Lightmapper class. This allows for implementing additional "
"lightmappers, paving the way for a future port of the CPU-based lightmapper "
"present in Godot 3.x. This would allow baking lightmaps while using the "
"Compatibility backend."
msgstr ""

msgid "**Core GI C++ code:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/environment/gi.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/gi."
"cpp>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`scene/3d/voxel_gi.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/voxel_gi.cpp>`__ - VoxelGI node"
msgstr ""
"`scene/audio/audioplayer.cpp <https://github.com/godotengine/godot/blob/"
"master/scene/audio/audio_player.cpp>`__"

#, fuzzy
msgid ""
"`editor/plugins/voxel_gi_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/4.2/editor/plugins/voxel_gi_editor_plugin.cpp>`__ - Editor UI for "
"the VoxelGI node"
msgstr ""
"`editor/plugins/spatial_editor_plugin.cpp <https://github.com/godotengine/"
"godot/blob/3.x/editor/plugins/spatial_editor_plugin.cpp>`__\\ ：3D 编辑器视口"
"及相关功能（顶部的工具栏、编辑模式、叠加面板……）"

msgid "**Core GI GLSL shaders:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/voxel_gi.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/voxel_gi_debug.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/voxel_gi_debug.glsl>`__ - VoxelGI debug draw mode"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"environment/sdfgi_debug.glsl>`__ - SDFGI Cascades debug draw mode"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_debug_probes.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_debug_probes.glsl>`__ - SDFGI Probes debug draw "
"mode"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_integrate.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_integrate.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_preprocess.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_preprocess.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/sdfgi_direct_light.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/sdfgi_direct_light.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "**Lightmapper C++ code:**"
msgstr "**光照贴图器 C++ 代码：**"

#, fuzzy
msgid ""
"`scene/3d/lightmap_gi.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmap_gi.cpp>`__ - LightmapGI node"
msgstr ""
"`scene/3d/lightmap_gi.cpp <https://github.com/godotengine/godot/blob/4.0/"
"scene/3d/lightmap_gi.cpp>`__ - LightmapGI 节点"

#, fuzzy
msgid ""
"`editor/plugins/lightmap_gi_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/4.2/editor/plugins/lightmap_gi_editor_plugin.cpp>`__ "
"- Editor UI for the LightmapGI node"
msgstr ""
"`editor/plugins/lightmap_gi_editor_plugin.cpp <https://github.com/"
"godotengine/godot/blob/4.0/editor/plugins/lightmap_gi_editor_plugin.cpp>`__ "
"- LightmapGI 节点的编辑器 UI"

#, fuzzy
msgid ""
"`scene/3d/lightmapper.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/lightmapper.cpp>`__ - Abstract class"
msgstr ""
"`scene/3d/lightmapper.cpp <https://github.com/godotengine/godot/blob/4.0/"
"scene/3d/lightmapper.cpp>`__ - 抽象类"

#, fuzzy
msgid ""
"`modules/lightmapper_rd/lightmapper_rd.cpp <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lightmapper_rd.cpp>`__ - GPU-based "
"lightmapper implementation"
msgstr ""
"`modules/lightmapper_rd/lightmapper_rd.cpp <https://github.com/godotengine/"
"godot/blob/4.0/modules/lightmapper_rd/lightmapper_rd.cpp>`__ - 基于 GPU 的光"
"照贴图器实现"

msgid "**Lightmapper GLSL shaders:**"
msgstr "**光照贴图器 GLSL 着色器：**"

#, fuzzy
msgid ""
"`modules/lightmapper_rd/lm_raster.glsl <https://github.com/godotengine/godot/"
"blob/4.2/modules/lightmapper_rd/lm_raster.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_raster.glsl <https://github.com/godotengine/godot/"
"blob/4.0/modules/lightmapper_rd/lm_raster.glsl>`__"

#, fuzzy
msgid ""
"`modules/lightmapper_rd/lm_compute.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_compute.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_compute.glsl <https://github.com/godotengine/"
"godot/blob/4.0/modules/lightmapper_rd/lm_compute.glsl>`__"

#, fuzzy
msgid ""
"`modules/lightmapper_rd/lm_blendseams.glsl <https://github.com/godotengine/"
"godot/blob/4.2/modules/lightmapper_rd/lm_blendseams.glsl>`__"
msgstr ""
"`modules/lightmapper_rd/lm_blendseams.glsl <https://github.com/godotengine/"
"godot/blob/4.0/modules/lightmapper_rd/lm_blendseams.glsl>`__"

msgid "Depth of field"
msgstr "景深"

msgid ""
"Only available in the Forward+ and Forward Mobile methods, not the "
"Compatibility backend."
msgstr ""

msgid ""
"The Forward+ and Forward Mobile methods use different approaches to DOF "
"rendering, with different visual results. This is done to best match the "
"performance characteristics of the target hardware. In Clustered Forward, "
"DOF is performed using a compute shader. In Forward Mobile, DOF is performed "
"using a fragment shader (raster)."
msgstr ""

msgid ""
"Box, hexagon and circle bokeh shapes are available (from fastest to "
"slowest). Depth of field can optionally be jittered every frame to improve "
"its appearance when temporal antialiasing is enabled."
msgstr ""

#, fuzzy
msgid "**Depth of field C++ code:**"
msgstr "景深"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/effects/bokeh_dof.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/bokeh_dof."
"cpp>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "**Depth of field GLSL shader (compute - used for Forward+):**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/bokeh_dof.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

msgid "**Depth of field GLSL shader (raster - used for Forward Mobile):**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/bokeh_dof_raster.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/bokeh_dof_raster.glsl>`__"
msgstr ""
"`servers/register_server_types.cpp <https://github.com/godotengine/godot/"
"blob/master/servers/register_server_types.cpp>`__"

#, fuzzy
msgid "Screen-space effects (SSAO, SSIL, SSR, SSS)"
msgstr "屏幕空间反射(SSR)"

msgid ""
"The Forward+ backend supports screen-space ambient occlusion, screen-space "
"indirect lighting, screen-space reflections and subsurface scattering."
msgstr ""

msgid ""
"SSAO uses an implementation derived from Intel's `ASSAO <https://www.intel."
"com/content/www/us/en/developer/articles/technical/adaptive-screen-space-"
"ambient-occlusion.html>`__ (converted to Vulkan). SSIL is derived from SSAO "
"to provide high-performance indirect lighting."
msgstr ""

msgid ""
"When both SSAO and SSIL are enabled, parts of SSAO and SSIL are shared to "
"reduce the performance impact."
msgstr ""

msgid ""
"SSAO and SSIL are performed at half resolution by default to improve "
"performance. SSR is always performed at half resolution to improve "
"performance."
msgstr ""

msgid "**Screen-space effects C++ code:**"
msgstr "**屏幕空间效果 C++ 代码：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/effects/ss_effects."
"cpp>`__"
msgstr ""
"`servers/rendering/renderer_rd/effects/ss_effects.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/effects/ss_effects."
"cpp>`__"

msgid "**Screen-space ambient occlusion GLSL shader:**"
msgstr "**屏幕空间环境光遮蔽 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao.glsl <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/effects/"
"ssao.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_blur.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/"
"effects/ssao_blur.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssao_interleave.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/"
"effects/ssao_interleave.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssao_importance_map.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssao_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/"
"shaders/effects/ssao_importance_map.glsl>`__"

msgid "**Screen-space indirect lighting GLSL shader:**"
msgstr "**屏幕空间间接光照 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil.glsl <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"ssil.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil.glsl <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/effects/"
"ssil.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_blur.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_blur.glsl <https://"
"github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/"
"effects/ssil_blur.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/shaders/"
"effects/ssil_interleave.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_interleave.glsl <https://"
"github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/shaders/"
"effects/ssil_interleave.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/ssil_importance_map.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/ssil_importance_map.glsl "
"<https://github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/"
"shaders/effects/ssil_importance_map.glsl>`__"

msgid "**Screen-space reflections GLSL shader:**"
msgstr "**屏幕空间反射 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/screen_space_reflection.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection.glsl "
"<https://github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/"
"shaders/effects/screen_space_reflection.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_scale."
"glsl <https://github.com/godotengine/godot/blob/4.2/servers/rendering/"
"renderer_rd/shaders/effects/screen_space_reflection_scale.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/screen_space_reflection_scale."
"glsl <https://github.com/godotengine/godot/blob/4.0/servers/rendering/"
"renderer_rd/shaders/effects/screen_space_reflection_scale.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl <https://github.com/godotengine/godot/"
"blob/4.2/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl <https://github.com/godotengine/godot/"
"blob/4.0/servers/rendering/renderer_rd/shaders/effects/"
"screen_space_reflection_filter.glsl>`__"

msgid "**Subsurface scattering GLSL:**"
msgstr "**次表面散射 GLSL：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/effects/subsurface_scattering.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/effects/subsurface_scattering.glsl "
"<https://github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/"
"shaders/effects/subsurface_scattering.glsl>`__"

msgid "Sky rendering"
msgstr "天空渲染"

msgid ":ref:`doc_sky_shader`"
msgstr ":ref:`doc_sky_shader`"

msgid ""
"Godot supports using shaders to render the sky background. The radiance map "
"(which is used to provide ambient light and reflections for PBR materials) "
"is automatically updated based on the sky shader."
msgstr ""

msgid ""
"The SkyMaterial resources such as ProceduralSkyMaterial, PhysicalSkyMaterial "
"and PanoramaSkyMaterial generate a built-in shader for sky rendering. This "
"is similar to what BaseMaterial3D provides for 3D scene materials."
msgstr ""

msgid ""
"A detailed technical implementation can be found in the `Custom sky shaders "
"in Godot 4.0 <https://godotengine.org/article/custom-sky-shaders-"
"godot-4-0>`__ article."
msgstr ""

msgid "**Sky rendering C++ code:**"
msgstr "**天空渲染 C++ 代码：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/environment/sky.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/sky."
"cpp>`__ - Sky rendering"
msgstr ""
"`servers/rendering/renderer_rd/environment/sky.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/environment/sky."
"cpp>`__ - 天空渲染"

#, fuzzy
msgid ""
"`scene/resources/sky.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/resources/sky.cpp>`__ - Sky resource (not to be confused with sky "
"rendering)"
msgstr ""
"`scene/resources/sky.cpp <https://github.com/godotengine/godot/blob/4.0/"
"scene/resources/sky.cpp>`__ - Sky 资源（不要与天空渲染混淆）"

#, fuzzy
msgid ""
"`scene/resources/sky_material.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/resources/sky_material.cpp>`__ SkyMaterial resources (used in "
"the Sky resource)"
msgstr ""
"`scene/resources/sky_material.cpp <https://github.com/godotengine/godot/"
"blob/4.0/scene/resources/sky_material.cpp>`__ SkyMaterial 资源（Sky 资源中使"
"用）"

msgid "**Sky rendering GLSL shader:**"
msgstr "**天空渲染 GLSL 着色器：**"

msgid "Volumetric fog"
msgstr "体积雾"

msgid ":ref:`doc_fog_shader`"
msgstr ":ref:`doc_fog_shader`"

msgid ""
"Godot supports a frustum-aligned voxel (froxel) approach to volumetric fog "
"rendering. As opposed to a post-processing filter, this approach is more "
"general-purpose as it can work with any light type. Fog can also use shaders "
"for custom behavior, which allows animating the fog or using a 3D texture to "
"represent density."
msgstr ""

msgid ""
"The FogMaterial resource generates a built-in shader for FogVolume nodes. "
"This is similar to what BaseMaterial3D provides for 3D scene materials."
msgstr ""

msgid ""
"A detailed technical explanation can be found in the `Fog Volumes arrive in "
"Godot 4.0 <https://godotengine.org/article/fog-volumes-arrive-in-godot-4>`__ "
"article."
msgstr ""

msgid "**Volumetric fog C++ code:**"
msgstr "**体积雾 C++ 代码：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/environment/fog.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_rd/environment/fog."
"cpp>`__ - General volumetric fog"
msgstr ""
"`servers/rendering/renderer_rd/environment/fog.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_rd/environment/fog."
"cpp>`__ - 常规体积雾"

#, fuzzy
msgid ""
"`scene/3d/fog_volume.cpp <https://github.com/godotengine/godot/blob/4.2/"
"scene/3d/fog_volume.cpp>`__ - FogVolume node"
msgstr ""
"`scene/3d/fog_volume.cpp <https://github.com/godotengine/godot/blob/4.0/"
"scene/3d/fog_volume.cpp>`__ - FogVolume 节点"

#, fuzzy
msgid ""
"`scene/resources/fog_material.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/resources/fog_material.cpp>`__ - FogMaterial resource (used "
"by FogVolume)"
msgstr ""
"`scene/resources/fog_material.cpp <https://github.com/godotengine/godot/"
"blob/4.0/scene/resources/fog_material.cpp>`__ - FogMaterial 资源（FogVolume "
"中使用）"

msgid "**Volumetric fog GLSL shaders:**"
msgstr "**体积雾 GLSL 着色器：**"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl "
"<https://github.com/godotengine/godot/blob/4.2/servers/rendering/renderer_rd/"
"shaders/environment/volumetric_fog.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog.glsl "
"<https://github.com/godotengine/godot/blob/4.0/servers/rendering/renderer_rd/"
"shaders/environment/volumetric_fog.glsl>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog_process."
"glsl <https://github.com/godotengine/godot/blob/4.2/servers/rendering/"
"renderer_rd/shaders/environment/volumetric_fog_process.glsl>`__"
msgstr ""
"`servers/rendering/renderer_rd/shaders/environment/volumetric_fog_process."
"glsl <https://github.com/godotengine/godot/blob/4.0/servers/rendering/"
"renderer_rd/shaders/environment/volumetric_fog_process.glsl>`__"

msgid "Occlusion culling"
msgstr "遮挡剔除"

msgid ""
"While modern GPUs can handle drawing a lot of triangles, the number of draw "
"calls in complex scenes can still be a bottleneck (even with Vulkan and "
"Direct3D 12)."
msgstr ""

msgid ""
"Godot 4 supports occlusion culling to reduce overdraw (when the depth "
"prepass is disabled) and reduce vertex throughput. This is done by "
"rasterizing a low-resolution buffer on the CPU using `Embree <https://github."
"com/embree/embree>`__. The buffer's resolution depends on the number of CPU "
"threads on the system, as this is done in parallel. This buffer includes "
"occluder shapes that were baked in the editor or created at run-time."
msgstr ""

msgid ""
"As complex occluders can introduce a lot of strain on the CPU, baked "
"occluders can be simplified automatically when generated in the editor."
msgstr ""

msgid ""
"Godot's occlusion culling doesn't support dynamic occluders yet, but "
"OccluderInstance3D nodes can still have their visibility toggled or be "
"moved. However, this will be slow when updating complex occluders this way. "
"Therefore, updating occluders at run-time is best done only on simple "
"occluder shapes such as quads or cuboids."
msgstr ""

msgid ""
"This CPU-based approach has a few advantages over other solutions, such as "
"portals and rooms or a GPU-based culling solution:"
msgstr ""

msgid ""
"No manual setup required (but can be tweaked manually for best performance)."
msgstr ""

msgid ""
"No frame delay, which is problematic in cutscenes during camera cuts or when "
"the camera moves fast behind a wall."
msgstr ""

msgid ""
"Works the same on all rendering drivers and methods, with no unpredictable "
"behavior depending on the driver or GPU hardware."
msgstr ""

msgid ""
"Occlusion culling is performed by registering occluder meshes, which is done "
"using OccluderInstance3D *nodes* (which themselves use Occluder3D "
"*resources*). RenderingServer then performs occlusion culling by calling "
"Embree in RendererSceneOcclusionCull."
msgstr ""

msgid "**Occlusion culling C++ code:**"
msgstr "**遮挡剔除 C++ 代码：**"

#, fuzzy
msgid ""
"`scene/3d/occluder_instance_3d.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/3d/occluder_instance_3d.cpp>`__"
msgstr ""
"`scene/3d/occluder_instance_3d.cpp <https://github.com/godotengine/godot/"
"blob/4.0/scene/3d/occluder_instance_3d.cpp>`__"

#, fuzzy
msgid ""
"`servers/rendering/renderer_scene_occlusion_cull.cpp <https://github.com/"
"godotengine/godot/blob/4.2/servers/rendering/renderer_scene_occlusion_cull."
"cpp>`__"
msgstr ""
"`servers/rendering/renderer_scene_occlusion_cull.cpp <https://github.com/"
"godotengine/godot/blob/4.0/servers/rendering/renderer_scene_occlusion_cull."
"cpp>`__"

#, fuzzy
msgid "Visibility range (LOD)"
msgstr "Visibility Rect(可见性区域)"

msgid ""
"Godot supports manually authored hierarchical level of detail (HLOD), with "
"distances specified by the user in the inspector."
msgstr ""

msgid ""
"In RenderingSceneCull, the ``_scene_cull()`` and ``_render_scene()`` "
"functions are where most of the LOD determination happens. Each viewport can "
"render the same mesh with different LODs (to allow for split screen "
"rendering to look correct)."
msgstr ""

msgid "**Visibility range C++ code:**"
msgstr ""

#, fuzzy
msgid ""
"`servers/rendering/renderer_scene_cull.cpp <https://github.com/godotengine/"
"godot/blob/4.2/servers/rendering/renderer_scene_cull.cpp>`__"
msgstr ""
"`servers/rendering/renderer_scene_cull.cpp <https://github.com/godotengine/"
"godot/blob/4.0/servers/rendering/renderer_scene_cull.cpp>`__"

#, fuzzy
msgid "Automatic mesh LOD"
msgstr "自动重新导入"

msgid ""
"The ImporterMesh class is used for the 3D mesh import workflow in the "
"editor. Its ``generate_lods()`` function handles generating using the "
"`meshoptimizer <https://meshoptimizer.org/>`__ library."
msgstr ""

msgid ""
"LOD mesh generation also generates shadow meshes at the same time. These are "
"meshes that have their vertices welded regardless of smoothing and "
"materials. This is used to improve shadow rendering performance by lowering "
"the vertex throughput required to render shadows."
msgstr ""

msgid ""
"The RenderingSceneCull class's ``_render_scene()`` function determines which "
"mesh LOD should be used when rendering. Each viewport can render the same "
"mesh with different LODs (to allow for split screen rendering to look "
"correct)."
msgstr ""

msgid ""
"The mesh LOD is automatically chosen based on a screen coverage metric. This "
"takes resolution and camera FOV changes into account without requiring user "
"intervention. The threshold multiplier can be adjusted in the project "
"settings."
msgstr ""

msgid ""
"To improve performance, shadow rendering and reflection probe rendering also "
"choose their own mesh LOD thresholds (which can be different from the main "
"scene rendering)."
msgstr ""

msgid "**Mesh LOD generation on import C++ code:**"
msgstr ""

#, fuzzy
msgid ""
"`scene/resources/importer_mesh.cpp <https://github.com/godotengine/godot/"
"blob/4.2/scene/resources/importer_mesh.cpp>`__"
msgstr ""
"`core/io/resource_loader.cpp <https://github.com/godotengine/godot/blob/"
"master/core/io/resource_loader.cpp>`_"

msgid "**Mesh LOD determination C++ code:**"
msgstr ""

msgid "Translation status"
msgstr "翻译状态"
