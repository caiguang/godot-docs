# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Compiling for Linux, \\*BSD"
msgstr "为 Linux、\\*BSD 平台编译"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""
"这个页面描述的是如何从源码编译 Linux 编辑器和导出模板二进制文件。如果你要找的"
"是导出项目到 Linux，请阅读 :ref:`doc_exporting_for_linux`\\ 。"

msgid "Requirements"
msgstr "需求"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr "要在Linux或其他类Unix系统下进行编译, 需要满足以下条件:"

msgid "GCC 7+ or Clang 6+."
msgstr "GCC 7+ 或 Clang 6+."

msgid "`Python 3.6+ <https://www.python.org/downloads/>`_."
msgstr "`Python 3.6+ <https://www.python.org/downloads/>`_."

msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr "`SCons 3.0+ <https://scons.org/pages/download.html>`_ 构建系统."

#, fuzzy
msgid ""
"If your distribution uses Python 2 by default, or you are using a version of "
"SCons prior to 3.1.2, you will need to change the version of Python that "
"SCons uses by changing the shebang (the first line) of the SCons script file "
"to ``#! /usr/bin/python3``. Use the command ``which scons`` to find the "
"location of the SCons script file."
msgstr ""
"SCons 3.0+ 构建系统. 如果你的发行版默认使用Python 2, 或者你使用的是SCons "
"3.1.2之前的版本, 你需要通过修改SCons脚本文件的shebang (第一行)来改变SCons使用"
"的Python版本, 改为 ``#!/usr/bin/python3``. 使用命令``which scons``来找到SCons"
"脚本文件的位置."

msgid "pkg-config (used to detect the development libraries listed below)."
msgstr "pkg-config（用于检测下面这些开发库）。"

msgid "Development libraries:"
msgstr "开发库："

msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr "X11、Xcursor、Xinerama、Xi、XRandR。"

msgid "MesaGL."
msgstr "MesaGL."

msgid "ALSA."
msgstr "ALSA."

msgid "PulseAudio."
msgstr "PulseAudio。"

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "*可选*\\ ——libudev（使用 ``udev = yes`` 构建）。"

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr "要获取编译所需的 Godot 源码，请参阅 :ref:`doc_getting_source`\\ 。"

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""
"有关 Godot 的 SCons 用法的一般概述，请参阅 :ref:"
"`doc_introduction_to_the_buildsystem`。"

msgid "Distro-specific one-liners"
msgstr "针对各个发行版的单行命令"

msgid "Alpine Linux"
msgstr "Alpine Linux"

msgid "Arch Linux"
msgstr "Arch Linux"

msgid "Debian/Ubuntu"
msgstr "Debian/Ubuntu"

msgid "Fedora"
msgstr "Fedora"

msgid "FreeBSD"
msgstr "FreeBSD"

msgid "Gentoo"
msgstr "Gentoo"

msgid "Mageia"
msgstr "Mageia"

msgid "OpenBSD"
msgstr "OpenBSD"

msgid "openSUSE"
msgstr "openSUSE"

msgid "NetBSD"
msgstr "NetBSD"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr "对于音频支持，你可以选择安装 ``pulseaudio``\\ 。"

msgid "Solus"
msgstr "Solus"

msgid "Compiling"
msgstr "编译"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr "启动终端，然后进入引擎源代码的根目录，输入："

msgid ""
"Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of "
"``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the "
"`3.x branch of this documentation <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__."
msgstr ""
"在 Godot 4.0 之前，Linux/\\*BSD 目标被称为 ``x11`` 而非 ``linuxbsd`` 。如果你"
"希望编译 Godot 3.x，请确保使用本文档的 `3.x 分支 <https://docs.godotengine."
"org/en/3.6/development/compiling/compiling_for_x11.html>`__ 。"

#, fuzzy
msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"如果一切顺利, 生成的二进制可执行文件将放在 `` bin`` 子目录中. 该可执行文件包"
"含整个引擎, 并且运行时无需任何依赖项. 执行它将会启动项目管理器."

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr "如果你希望使用 Clang 而不是 GCC 编译器, 可以使用这个命令:"

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr "使用Clang似乎是OpenBSD的要求, 否则字体将无法生成."

#, fuzzy
msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons options "
"``target=template_release production=yes``."
msgstr ""
"如果您正在编译Godot用于生产用途, 那么您可以通过添加SCons选项 "
"``target=release_debug`` 来使最终的可执行文件更小更快."

#, fuzzy
msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``lto=full``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""
"如果你用GCC编译Godot, 你可以通过添加SCons选项 ``use_lto=yes`` 来使可执行文件"
"更小更快. 由于链接时优化是一个内存密集的过程, 在编译时需要大约7GB的可用内存."

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""
"如果你想为自己的 Godot 构建和官方发布使用单独的编辑器设置，你可以通过在 "
"``bin/`` 文件夹中创建一个名为 ``._sc_`` 或 ``_sc_`` 的文件来启用 :ref:"
"`doc_data_paths_self_contained_mode`\\ 。"

msgid "Running a headless/server build"
msgstr "运行无头/服务器构建"

#, fuzzy
msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr "要编译\\ *无头*\\ 构建，支持编辑器的自动化导出项目功能，请使用： ::"

msgid "And then use the ``--headless`` command line argument::"
msgstr "然后使用 ``--headless`` 命令行参数： ::"

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"如果要编译调试版本的\\ *服务器*\\ ，支持\\ :ref:`远程调试工具 "
"<doc_command_line_tutorial>`\\ ，那么请使用： ::"

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""
"要编译一个经过优化以运行专用游戏的\\ *服务器*\\ 版本，请使用以下构建选项： ::"

msgid "Building export templates"
msgstr "构建导出模板"

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""
"Linux二进制文件通常不会在早于其构建版本的发行版上运行. 如果你希望分发适用于大"
"多数发行版的二进制文件, 则应在较旧的发行版(例如Ubuntu 16.04)上构建它们. 你可"
"以使用虚拟机或容器来设置合适的构建环境."

#, fuzzy
msgid ""
"To build Linux or \\*BSD export templates, run the build system with the "
"following parameters:"
msgstr "要构建X11(Linux, \\*BSD)导出模板, 请使用以下参数运行构建系统:"

msgid "(32 bits)"
msgstr "（32 位）"

msgid "(64 bits)"
msgstr "（64 位）"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""
"请注意, 与你的主机平台相反的位(64/32)交叉编译并不总是直接的, 并且可能需要"
"chroot环境."

#, fuzzy
msgid ""
"To create standard export templates, the resulting files in the ``bin/`` "
"folder must be copied to:"
msgstr "要创建标准导出模板, 必须将生成的文件复制到:"

#, fuzzy
msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux/X11\" by "
"Godot):"
msgstr "并以此命名(即使对于\\*BSD, 它也被Godot视为\" Linux X11\"):"

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""
"此外, 如果要编写自定义模块或自定义C ++代码, 则可能需要在此处将二进制文件配置"
"为自定义导出模板:"

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""
"你甚至不需要复制它们, 只需引用在Godot源文件夹的 ``bin/`` 目录中生成的文件, 因"
"此下次构建时, 将自动引用自定义模板."

msgid "Using Clang and LLD for faster development"
msgstr "使用 Clang 和 LLD 可以加快开发速度"

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""
"你也可以使用Clang和LD来构建Godot. 与默认的GCC + GNU ld设置相比, 这有两个好处:"

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr "与GNU ld或gold相比,LD链接Godot的速度明显更快. 这导致更快的迭代时间."

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr "与GCC相比,Clang倾向于给出更多有用的错误信息."

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""
"为此，请从分发的包管理器中安装 Clang 和 ``lld`` 包，然后使用以下 SCons 命"
"令： ::"

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""
"构建完成后，将在 ``bin/`` 文件夹中创建一个以 ``.llvm`` 为后缀的新的二进制文"
"件。"

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""
"仍然建议使用GCC进行生产构建, 因为它们可以使用链接时间优化进行编译, 使产生的二"
"进制文件更小, 更快."

msgid "If this error occurs::"
msgstr "如果发生了这个错误： ::"

msgid "There are two solutions:"
msgstr "有两种解决方法:"

msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr "在 Scon 命令中，添加 ``use_static_cpp=no`` 参数。"

#, fuzzy
msgid ""
"Follow `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ to configure, build, and install "
"``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/"
"libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln -"
"s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure "
"the latest ``libatomic_ops`` will be used without the need to copy it "
"everytime when it is updated."
msgstr ""
"请按照这些说明 `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ 来设置, 构建并安装 "
"``libatomic_ops``. 之后，复制 ``/usr/lib/libatomic_ops.a`` 到 ``/usr/lib/"
"libatomic.a`` 。"

msgid "Using mold for faster development"
msgstr "使用 mold 加快开发速度"

msgid ""
"For even faster linking compared to LLD, you can use `mold <https://github."
"com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""

msgid ""
"As of January 2023, mold is not readily available in Linux distribution "
"repositories, so you will have to install its binaries manually."
msgstr ""

msgid ""
"Download mold binaries from its `releases page <https://github.com/rui314/"
"mold/releases/latest>`__."
msgstr ""
"从\\ `发布页面 <https://github.com/rui314/mold/releases/latest>`__\\ 下载 "
"mold 二进制文件。"

msgid ""
"Extract the ``.tar.gz`` file, then move the extraced folder to a location "
"such as ``.local/share/mold``."
msgstr ""
"解压 ``.tar.gz`` 文件，然后将得到的文件夹移动到类似于 ``.local/share/mold`` "
"的位置。"

msgid ""
"Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment "
"variable. For example, you can add the following line at the end of your "
"``$HOME/.bash_profile`` file:"
msgstr ""
"将 ``$HOME/.local/share/mold/bin`` 添加到用户的 ``PATH`` 环境变量中。例如可以"
"在 ``$HOME/.bash_profile`` 文件的末尾加上以下内容："

msgid ""
"Open a new terminal (or run ``source \"$HOME/.bash_profile\"``), then use "
"the following SCons command when compiling Godot::"
msgstr ""
"打开新的终端（或者运行 ``source \"$HOME/.bash_profile\"``\\ ），然后使用以下 "
"SCons 命令编译 Godot：\\ ::"

msgid "Using system libraries for faster development"
msgstr "使用系统库加快开发速度"

msgid ""
"`Godot bundles the source code of various third-party libraries. <https://"
"github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to "
"use system versions of third-party libraries instead. This makes the Godot "
"binary faster to link, as third-party libraries are dynamically linked. "
"Therefore, they don't need to be statically linked every time you build the "
"engine (even on small incremental changes)."
msgstr ""

msgid ""
"However, not all Linux distributions have packages for third-party libraries "
"available (or they may not be up-to-date)."
msgstr ""
"然而，并非所有 Linux 发行版都有可用的第三方库（或这些库不是最新版本）。"

msgid ""
"Moving to system libraries can reduce linking times by several seconds on "
"slow CPUs, but it requires manual testing depending on your Linux "
"distribution. Also, you may not be able to use system libraries for "
"everything due to bugs in the system library packages (or in the build "
"system, as this feature is less tested)."
msgstr ""

msgid ""
"To compile Godot with system libraries, install these dependencies *on top* "
"of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""
"要使用系统库编译 Godot，安装 :ref:`doc_compiling_for_linuxbsd_oneliners` *顶"
"部* 列出的依赖："

msgid "**Fedora**"
msgstr "**Fedora**"

msgid ""
"After installing all required packages, use the following command to build "
"Godot:"
msgstr "在安装了所有必要依赖后，使用下面的命令来构建 Godot："

msgid ""
"You can view a list of all built-in libraries that have system alternatives "
"by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""

msgid ""
"When using system libraries, the resulting library is **not** portable "
"across Linux distributions anymore. Do not use this approach for creating "
"binaries you intend to distribute to others, unless you're creating a "
"package for a Linux distribution."
msgstr ""

msgid "Using Pyston for faster development"
msgstr "使用 Pyston 加快开发速度"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""
"你可以使用 `Pyston <https://www.pyston.org/>`__ 来运行 SCons。Pyston 是一种利"
"用了 JIT 的 Python 语言实现（SCons 就是使用 Python 编写的）。目前它只兼容 "
"Linux。Pyston 可以显著加速增量构建，经常可以达到 1.5× 和 2× 倍。可以将 "
"Pyston 与 Clang 和 LLD 组合，进行更快的构建。"

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""
"下载 `Pyston 的最新绿色版本 <https://github.com/pyston/pyston/releases/"
"latest>`__\\ 。"

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""
"将绿色的 ``.tar.gz`` 解压到特定的位置，比如 `$HOME/.local/opt/pyston/`\\ （必"
"要时请创建文件夹）。"

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""
"在命令行中，使用 ``cd`` 达到 Pyston 解压出的文件夹，然后运行 ``./pyston -m "
"pip install scons``\\ ，在 Pyston 中安装 SCons。"

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""
"为了便于通过 Pyston 运行 SCons，请创建一个指向其封装脚本的符号链接，符号链接"
"的位置必须在你的 ``PATH`` 环境变量中： ::"

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""
"现在就不是执行 ``scons <构建参数>`` 了，要编译 Godot 请执行 ``pyston-scons <"
"构建参数>``\\ 。"

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""
"如果创建符号链接后无法执行 ``pyston-scons``\\ ，请确定 ``$HOME/.local/bin/`` "
"是当前用户的 ``PATH`` 环境变量的一部分。"

msgid ""
"Alternatively, you can run ``python -m pip install pyston_lite_autoload`` "
"then run SCons as usual. This will automatically load a subset of Pyston's "
"optimizations in any Python program you run. However, this won't bring as "
"much of a performance improvement compared to installing \"full\" Pyston."
msgstr ""

msgid "Translation status"
msgstr "翻译状态"
