# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Introduction to the buildsystem"
msgstr "构建系统介绍"

msgid ""
"Godot is a primarily C++ project and it :ref:`uses the SCons build system. "
"<doc_faq_why_scons>` We love SCons for how maintainable and easy to set up "
"it makes our buildsystem. And thanks to that compiling Godot from source can "
"be as simple as running::"
msgstr ""

msgid ""
"This produces an *export template* for your current platform, operating "
"system, and architecture. An export template is a build of the engine that "
"is used for running exported projects. To build the *editor* instead you can "
"run the following command::"
msgstr ""

msgid ""
"If you plan to debug or develop the engine, then you might want to add "
"another option to the command::"
msgstr ""

msgid ""
"Following sections in the article will explain these and other universal "
"options in more detail. But before you can compile Godot, you need to "
"install a few prerequisites. Please refer to the platform documentation to "
"learn more:"
msgstr ""

msgid ":ref:`doc_compiling_for_android`"
msgstr ":ref:`doc_compiling_for_android`"

msgid ":ref:`doc_compiling_for_ios`"
msgstr ":ref:`doc_compiling_for_ios`"

msgid ":ref:`doc_compiling_for_linuxbsd`"
msgstr ":ref:`doc_compiling_for_linuxbsd`"

msgid ":ref:`doc_compiling_for_macos`"
msgstr ":ref:`doc_compiling_for_macos`"

msgid ":ref:`doc_compiling_for_web`"
msgstr ":ref:`doc_compiling_for_web`"

msgid ":ref:`doc_compiling_for_windows`"
msgstr ":ref:`doc_compiling_for_windows`"

msgid ""
"These articles cover in great detail both how to setup your environment to "
"compile Godot on a specific platform, and how to compile for that platform. "
"Please feel free to go back and forth between them and this article to "
"reference platform-specific and universal configuration options."
msgstr ""

#, fuzzy
msgid "Using multi-threading"
msgstr "使用多线程"

msgid ""
"The build process may take a while, depending on how powerful your system "
"is. By default, Godot's SCons setup is configured to use all CPU threads but "
"one (to keep the system responsive during compilation). If you want to "
"adjust how many CPU threads SCons will use, use the ``-j <threads>`` "
"parameter to specify how many threads will be used for the build."
msgstr ""

#, fuzzy
msgid "Example for using 4 threads::"
msgstr "使用 4 核的示例："

msgid "Platform selection"
msgstr "选择平台"

msgid ""
"Godot's build system will begin by detecting the platforms it can build for. "
"If not detected, the platform will simply not appear on the list of "
"available platforms. The build requirements for each platform are described "
"in the rest of this tutorial section."
msgstr ""
"Godot的构建系统将从检测可构建的平台开始. 如果未检测到, 该平台将不会出现在可用"
"平台列表中. 本教程后续部分将介绍每种平台的构建要求."

msgid ""
"SCons is invoked by just calling ``scons``. If no platform is specified, "
"SCons will detect the target platform automatically based on the host "
"platform. It will then start building for the target platform right away."
msgstr ""
"仅通过调用 ``scons`` 即可调用SCons. 如果未指定平台,SCons将基于主机平台自动检"
"测目标平台. 然后它将立即开始为目标平台构建."

msgid "To list the available target platforms, use ``scons platform=list``::"
msgstr "要列出可用的目标平台，请使用 ``scons platform=list``\\ ： ::"

#, fuzzy
msgid ""
"To build for a platform (for example, ``linuxbsd``), run with the "
"``platform=`` (or ``p=`` to make it short) argument:"
msgstr ""
"运行时使用 ``platform=`` (或简称为 ``p=``)参数, 为特定平台构建(例如x11):"

msgid "Resulting binary"
msgstr "生成的二进制文件"

msgid ""
"The resulting binaries will be placed in the ``bin/`` subdirectory, "
"generally with this naming convention::"
msgstr ""
"生成的二进制文件将被放置在 ``bin/`` 子目录中，通常使用这种命名约定： ::"

msgid "For the previous build attempt, the result would look like this::"
msgstr "对于先前的构建尝试，结果将如下所示： ::"

#, fuzzy
msgid ""
"This means that the binary is for Linux *or* \\*BSD (*not* both), is not "
"optimized, has the whole editor compiled in, and is meant for 64 bits."
msgstr ""
"这意味着该二进制文件适用于X11, 未经过优化, 具有已编译的工具(整个编辑器), 并且"
"适用于64位."

msgid "A Windows binary with the same configuration will look like this:"
msgstr "一个具有相同配置的Windows二进制文件将如下所示:"

#, fuzzy
msgid ""
"Copy that binary to any location you like, as it contains the Project "
"Manager, editor and all means to execute the game. However, it lacks the "
"data to export it to the different platforms. For that the export templates "
"are needed (which can be either downloaded from `godotengine.org <https://"
"godotengine.org/>`__, or you can build them yourself)."
msgstr ""
"将该二进制文件复制到您喜欢的任何位置, 因为它包含项目管理器, 编辑器和执行游戏"
"的所有方法. 但是, 它缺少将其导出到不同平台的数据. 为此, 需要导出模板(可以从 "
"`godotengine.org <https://godotengine.org/>`__ 下载, 或者您可以自己构建它们)."

msgid ""
"Aside from that, there are a few standard options that can be set in all "
"build targets, and which will be explained below."
msgstr ""
"除此之外, 在所有的构建目标平台中有几个标准选项可以进行设置, 下面将对此进行说"
"明."

msgid "Target"
msgstr "目标"

#, fuzzy
msgid ""
"Target controls if the editor is contained and debug flags are used. All "
"builds are optimized. Each mode means:"
msgstr "构建目标控制着优化和调试标志. 每种模式表示:"

msgid ""
"``target=editor``: Build with editor, optimized, with debugging code "
"(defines: ``TOOLS_ENABLED``, ``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

msgid ""
"``target=template_debug``: Build with C++ debugging symbols (defines: "
"``DEBUG_ENABLED``, ``-O2``/``/O2``)"
msgstr ""

msgid ""
"``target=template_release``: Build without symbols (defines: ``-O3``/``/O2``)"
msgstr ""

#, fuzzy
msgid ""
"The editor is enabled by default in all PC targets (Linux, Windows, macOS), "
"disabled for everything else. Disabling the editor produces a binary that "
"can run projects but does not include the editor or the Project Manager."
msgstr ""
"在所有PC平台(Linux, Windows, macOS)上工具默认被启用, 在其他平台上默认被禁用. "
"禁用工具会生成可以运行项目的二进制文件, 但不包括编辑器和项目管理器."

msgid "Development and production aliases"
msgstr "开发别名与生产别名"

msgid ""
"When creating builds for development (running debugging/:ref:`profiling "
"<doc_using_cpp_profilers>` tools), you often have different goals compared "
"to production builds (making binaries as fast and small as possible)."
msgstr ""

#, fuzzy
msgid "Godot provides two aliases for this purpose:"
msgstr "Godot 还提供了一系列通用的容器:"

msgid ""
"``dev_mode=yes`` is an alias for ``verbose=yes warnings=extra werror=yes "
"tests=yes``. This enables warnings-as-errors behavior (similar to Godot's "
"continuous integration setup) and also builds :ref:`unit tests "
"<doc_unit_testing>` so you can run them locally."
msgstr ""

msgid ""
"``production=yes`` is an alias for ``use_static_cpp=yes debug_symbols=no "
"lto=auto``. Statically linking libstdc++ allows for better binary "
"portability when compiling for Linux. This alias also enables link-time "
"optimization when compiling for Linux, Web and Windows with MinGW, but keeps "
"LTO disabled when compiling for macOS, iOS or Windows with MSVC. This is "
"because LTO on those platforms is very slow to link or has issues with the "
"generated code."
msgstr ""

msgid ""
"You can manually override options from those aliases by specifying them on "
"the same command line with different values. For example, you can use "
"``scons production=yes debug_symbols=yes`` to create production-optimized "
"binaries with debugging symbols included."
msgstr ""

msgid "Dev build"
msgstr "开发构建"

msgid ""
"``dev_build`` should **not** be confused with ``dev_mode``, which is an "
"alias for several development-related options (see above)."
msgstr ""

msgid ""
"When doing engine development the ``dev_build`` option can be used together "
"with ``target`` to enable dev-specific code. ``dev_build`` defines "
"``DEV_ENABLED``, disables optimization (``-O0``/``/0d``), enables generating "
"debug symbols, and does not define ``NDEBUG`` (so ``assert()`` works in "
"thirdparty libraries)."
msgstr ""

msgid ""
"This flag appends the ``.dev`` suffix (for development) to the generated "
"binary name."
msgstr ""

msgid ""
"There are additional SCons options to enable *sanitizers*, which are tools "
"you can enable at compile-time to better debug certain engine issues. See :"
"ref:`doc_using_sanitizers` for more information."
msgstr ""

msgid "Debugging symbols"
msgstr "调试符号"

msgid ""
"By default, ``debug_symbols=no`` is used, which means **no** debugging "
"symbols are included in compiled binaries. Use ``debug_symbols=yes`` to "
"include debug symbols within compiled binaries, which allows debuggers and "
"profilers to work correctly. Debugging symbols are also required for Godot's "
"crash stacktraces to display with references to source code files and lines."
msgstr ""

msgid ""
"The downside is that debugging symbols are large files (significantly larger "
"than the binaries themselves). As a result, official binaries currently do "
"not include debugging symbols. This means you need to compile Godot yourself "
"to have access to debugging symbols."
msgstr ""

msgid ""
"When using ``debug_symbols=yes``, you can also use "
"``separate_debug_symbols=yes`` to put debug information in a separate file "
"with a ``.debug`` suffix. This allows distributing both files independently. "
"Note that on Windows, when compiling with MSVC, debugging information is "
"*always* written to a separate ``.pdb`` file regardless of "
"``separate_debug_symbols``."
msgstr ""

msgid ""
"Use the ``strip <path/to/binary>`` command to remove debugging symbols from "
"a binary you've already compiled."
msgstr ""

msgid "Optimization level"
msgstr "优化级别"

msgid "Several compiler optimization levels can be chosen from:"
msgstr ""

msgid ""
"``optimize=speed_trace`` *(default when targeting non-Web platforms)*: "
"Favors execution speed at the cost of larger binary size. Optimizations may "
"sometimes negatively impact debugger usage (stack traces may be less "
"accurate. If this occurs to you, use ``optimize=debug`` instead."
msgstr ""

msgid ""
"``optimize=speed``: Favors even more execution speed, at the cost of even "
"larger binary size compared to ``optimize=speed_trace``. Even less friendly "
"to debugging compared to ``optimize=debug``, as this uses the most "
"aggressive optimizations available."
msgstr ""

msgid ""
"``optimize=size`` *(default when targeting the Web platform)*: Favors small "
"binaries at the cost of slower execution speed."
msgstr ""

msgid ""
"``optimize=debug``: Only enables optimizations that do not impact debugging "
"in any way. This results in faster binaries than ``optimize=none``, but "
"slower binaries than ``optimize=speed_trace``."
msgstr ""

msgid ""
"``optimize=none``: Do not perform any optimization. This provides the "
"fastest build times, but the slowest execution times."
msgstr ""

msgid ""
"``optimize=custom`` *(advanced users only)*: Do not pass optimization "
"arguments to the C/C++ compilers. You will have to pass arguments manually "
"using the ``CFLAGS``, ``CCFLAGS`` and ``CXXFLAGS`` SCons options."
msgstr ""

msgid "Architecture"
msgstr "架构"

#, fuzzy
msgid ""
"The ``arch`` option is meant to control the CPU or OS version intended to "
"run the binaries. It is focused mostly on desktop platforms and ignored "
"everywhere else."
msgstr ""
"位用于控制要运行二进制文件的CPU或OS版本. 它主要针对在桌面平台, 而在其他平台都"
"会被忽略."

msgid ""
"Supported values for the ``arch`` option are **auto**, **x86_32**, "
"**x86_64**, **arm32**, **arm64**, **rv64**, **ppc32**, **ppc64** and "
"**wasm32**."
msgstr ""

#, fuzzy
msgid ""
"This flag appends the value of ``arch`` to resulting binaries when "
"relevant.  The default value ``arch=auto`` detects the architecture that "
"matches the host platform."
msgstr ""
"相关时, 此标志在生成的二进制文件后附加 ``.32`` 或 ``.64`` 后缀. 如果使用 "
"``bits=default``, 则后缀将匹配检测到的体系结构."

msgid "Custom modules"
msgstr "自定义模块"

msgid ""
"It's possible to compile modules residing outside of Godot's directory tree, "
"along with the built-in modules."
msgstr "可以编译驻扎在Godot目录树之外的模块, 以及内置模块."

msgid ""
"A ``custom_modules`` build option can be passed to the command line before "
"compiling. The option represents a comma-separated list of directory paths "
"containing a collection of independent C++ modules that can be seen as C++ "
"packages, just like the built-in ``modules/`` directory."
msgstr ""
"在编译之前, 可以在命令行中传递一个 ``custom_modules`` 构建选项. 这个选项代表"
"了一个以逗号分隔的目录路径列表, 其中包含了一系列独立的C++模块, 这些模块可以被"
"看作是C++包, 就像内置的 ``modules/`` 目录一样."

msgid ""
"For instance, it's possible to provide both relative, absolute, and user "
"directory paths containing such modules:"
msgstr "例如, 可以同时提供包含此类模块的相对, 绝对和用户目录路径:"

msgid ""
"If there's any custom module with the exact directory name as a built-in "
"module, the engine will only compile the custom one. This logic can be used "
"to override built-in module implementations."
msgstr ""
"如果有任何自定义模块的目录名与内置模块的目录名完全相同, 引擎将只编译自定义模"
"块. 这个逻辑可以用来覆盖内置模块的实现."

msgid ":ref:`doc_custom_modules_in_cpp`"
msgstr ":ref:`doc_custom_modules_in_cpp`"

msgid "Cleaning generated files"
msgstr "清理生成的文件"

msgid ""
"Sometimes, you may encounter an error due to generated files being present. "
"You can remove them by using ``scons --clean <options>``, where "
"``<options>`` is the list of build options you've used to build Godot "
"previously."
msgstr ""
"有时, 你可能会遇到一个错误, 因为生成的文件存在. 你可以使用``scons --clean "
"<options>``删除它们, 其中 ``<options>`` 是你之前用来构建Godot的构建选项列表."

msgid ""
"Alternatively, you can use ``git clean -fixd`` which will clean build "
"artifacts for all platforms and configurations. Beware, as this will remove "
"all untracked and ignored files in the repository. Don't run this command if "
"you have uncommitted work!"
msgstr ""
"或者, 你也可以使用``git clean -fixd``来清理所有平台和配置的构建工件. 注意, 这"
"将删除版本库中所有未跟踪和忽略的文件. 如果你有未提交的工作, 请不要运行这个命"
"令！"

msgid "Other build options"
msgstr "其他构建选项"

msgid ""
"There are several other build options that you can use to configure the way "
"Godot should be built (compiler, debug options, etc.) as well as the "
"features to include/disable."
msgstr ""
"你还可以使用其他几个构建选项来配置Godot的构建方式(编译器, 调试选项等), 以及要"
"包含/禁用的功能."

msgid ""
"Check the output of ``scons --help`` for details about each option for the "
"version you are willing to compile."
msgstr ""
"检查 ``scons --help`` 的输出, 以获取有关你愿意编译的版本的每个选项的详细信息."

msgid "Overriding the build options"
msgstr "重写构建选项"

msgid "Using a file"
msgstr "使用文件"

msgid ""
"The default ``custom.py`` file can be created at the root of the Godot "
"Engine source to initialize any SCons build options passed via the command "
"line:"
msgstr ""
"默认的 ``custom.py`` 文件可以在Godot引擎源的根部创建, 以初始化任何通过命令行"
"传递的SCons构建选项:"

msgid ""
"You can also disable some of the builtin modules before compiling, saving "
"some time it takes to build the engine. See :ref:`doc_optimizing_for_size` "
"page for more details."
msgstr ""
"你也可以在编译前禁用一些内置模块，节省一些构建引擎的时间。详情请参阅 :ref:"
"`doc_optimizing_for_size` 页面。"

msgid ""
"You can use the online `Godot build options generator <https://godot-build-"
"options-generator.github.io/>`__ to generate a ``custom.py`` file containing "
"SCons options. You can then save this file and place it at the root of your "
"Godot source directory."
msgstr ""
"你可以使用在线 `Godot 构建选项生成器 <https://godot-build-options-generator."
"github.io/>`__ , 生成一个包含SCons选项的 ``custom.py`` 文件. 然后你可以保存这"
"个文件, 并将其放在Godot源目录的根目录下."

msgid ""
"Another custom file can be specified explicitly with the ``profile`` command "
"line option, both overriding the default build configuration:"
msgstr ""
"另一个自定义文件可以用 ``profile`` 命令行选项明确指定, 都会覆盖默认的构建配"
"置:"

msgid ""
"Build options set from the file can be overridden by the command line "
"options."
msgstr "从文件中设置的构建选项可以被命令行选项所覆盖."

msgid "It's also possible to override the options conditionally:"
msgstr "也可以有条件地重写这些选项:"

msgid "Using the SCONSFLAGS"
msgstr "使用SCONSFLAGS"

msgid ""
"``SCONSFLAGS`` is an environment variable which is used by the SCons to set "
"the options automatically without having to supply them via the command line."
msgstr ""
"``SCONSFLAGS`` 是一个环境变量,SCons用来自动设置选项, 而无需通过命令行提供."

#, fuzzy
msgid ""
"For instance, you may want to force a number of CPU threads with the "
"aforementioned ``-j`` option for all future builds:"
msgstr "例如, 你可能希望在未来的所有构建中, 与上述 ``-j`` 选项并行构建Godot:"

msgid "SCU (single compilation unit) build"
msgstr ""

msgid ""
"Regular builds tend to be bottlenecked by including large numbers of headers "
"in each compilation translation unit. Primarily to speed up development "
"(rather than for production builds), Godot offers a \"single compilation "
"unit\" build (aka \"Unity / Jumbo\" build)."
msgstr ""

msgid ""
"For the folders accelerated by this option, multiple ``.cpp`` files are "
"compiled in each translation unit, so headers can be shared between multiple "
"files, which can dramatically decrease build times."
msgstr ""

msgid "To make a SCU build, use the ``scu_build=yes`` SCons option."
msgstr ""

msgid ""
"When developing a Pull Request using SCU builds, be sure to make a regular "
"build prior to submitting the PR. This is because SCU builds by nature "
"include headers from earlier ``.cpp`` files in the translation unit, "
"therefore won't catch all the includes you will need in a regular build. The "
"CI will catch these errors but it will usually be faster to catch them on a "
"local build on your machine."
msgstr ""

msgid "Export templates"
msgstr "导出模板"

msgid ""
"Official export templates are downloaded from the Godot Engine site: "
"`godotengine.org <https://godotengine.org/>`__. However, you might want to "
"build them yourself (in case you want newer ones, you are using custom "
"modules, or simply don't trust your own shadow)."
msgstr ""
"官方的导出模板可以从 `Godot 的官方网站 <https://godotengine.org/>`__ 下载到. "
"此外, 你可能想要自己构建它们(可能想要构建更新的版本, 要使用自定义模块, 不信任"
"我们编译的包是否安全)."

msgid ""
"If you download the official export templates package and unzip it, you will "
"notice that most files are optimized binaries or packages for each platform:"
msgstr ""
"如果下载官方导出模板程序包并解压缩, 你会注意到大多数文件都是针对每个平台的优"
"化二进制文件或程序包:"

msgid ""
"To create those yourself, follow the instructions detailed for each platform "
"in this same tutorial section. Each platform explains how to create its own "
"template."
msgstr ""
"要自己创建它们, 请按照该教程中针对每个平台的详细说明的部分进行操作. 每个平台"
"都说明了如何创建自己的模板."

msgid ""
"The ``version.txt`` file should contain the corresponding Godot version "
"identifier. This file is used to install export templates in a version-"
"specific directory to avoid conflicts. For instance, if you are building "
"export templates for Godot 3.1.1, ``version.txt`` should contain ``3.1.1."
"stable`` on the first line (and nothing else). This version identifier is "
"based on the ``major``, ``minor``, ``patch`` (if present) and ``status`` "
"lines of the `version.py file in the Godot Git repository <https://github."
"com/godotengine/godot/blob/master/version.py>`__."
msgstr ""
"``version.txt`` 文件应包含相应的 Godot 版本标识符。该文件用于在特定于版本的目"
"录中安装导出模板，以避免冲突。例如，如果你要为 Godot 3.1.1 构建导出模板，则 "
"``version.txt`` 文件的第一行应包含 ``3.1.1.stable``\\ （没有其他内容）。该版"
"本标识符\\ `在 Godot Git 仓库库中的 version.py 文件 <https://github.com/"
"godotengine/godot/blob/master/version.py>`__\\ 的 ``major``\\ 、\\ "
"``minor``\\ 、\\ ``patch``\\ （如果存在）和 ``status`` 行。"

#, fuzzy
msgid ""
"If you are developing for multiple platforms, macOS is definitely the most "
"convenient host platform for cross-compilation, since you can cross-compile "
"for every target. Linux and Windows come in second place, but Linux has the "
"advantage of being the easier platform to set this up."
msgstr ""
"如果要针对多个平台进行开发, 则macOS绝对是用于交叉编译的最方便的主机平台, 因为"
"你可以针对几乎每个目标(UWP除外)进行交叉编译.Linux和Windows位居第二, 但是Linux"
"的优势是易于设置."

msgid "Translation status"
msgstr "翻译状态"
