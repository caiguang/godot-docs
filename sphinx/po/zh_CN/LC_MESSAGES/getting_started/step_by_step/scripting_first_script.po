# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating your first script"
msgstr "创建第一个脚本"

msgid ""
"In this lesson, you will code your first script to make the Godot icon turn "
"in circles using GDScript. As we mentioned :ref:`in the introduction <toc-"
"learn-introduction>`, we assume you have programming foundations. The "
"equivalent C# code has been included in another tab for convenience."
msgstr ""
"在本课中，你将用 GDScript 编写第一个脚本，使 Godot 图标转圈。正如我们\\ :ref:"
"`在介绍中 <toc-learn-introduction>`\\ 提到的，我们假设你有编程基础。方便起"
"见，我们在单独的选项卡中包含了等价的 C# 代码。"

msgid ""
"To learn more about GDScript, its keywords, and its syntax, head to the :ref:"
"`GDScript reference<doc_gdscript>`."
msgstr ""
"要了解更多关于GDScript、其关键字和语法的信息，请前往 :ref:`GDScript 参考"
"<doc_gdscript>`\\ 。"

msgid ""
"To learn more about C#, head to the :ref:`C# basics <doc_c_sharp>` page."
msgstr "要了解更多关于 C# 的信息，请前往 :ref:`C# 基础 <doc_c_sharp>`\\ 页面。"

msgid "Project setup"
msgstr "项目设置"

msgid ""
"Please :ref:`create a new project <doc_creating_and_importing_projects>` to "
"start with a clean slate. Your project should contain one picture: the Godot "
"icon, which we often use for prototyping in the community."
msgstr ""
"请从头开始\\ :ref:`创建一个新项目<doc_creating_and_importing_projects>`\\ 。"
"你的项目应该包含一张图片：Godot 图标，我们经常在社区中使用它来制作原型。"

msgid ""
"We need to create a Sprite2D node to display it in the game. In the Scene "
"dock, click the Other Node button."
msgstr ""
"我们需要创建一个 Sprite2D 节点来在游戏中显示它。在“场景”面板中，点击“其他节"
"点”按钮。"

msgid ""
"Type \"Sprite2D\" in the search bar to filter nodes and double-click on "
"Sprite2D to create the node."
msgstr "在搜索栏中输入“Sprite2D”来过滤节点，双击 Sprite2D 来创建节点。"

msgid "Your Scene tab should now only have a Sprite2D node."
msgstr "你的“场景”选项卡现在应该只有一个 Sprite2D 节点。"

msgid ""
"A Sprite2D node needs a texture to display. In the Inspector on the right, "
"you can see that the Texture property says \"[empty]\". To display the Godot "
"icon, click and drag the file ``icon.svg`` from the FileSystem dock onto the "
"Texture slot."
msgstr ""
"Sprite2D 节点需要用于显示的纹理。在右边的“检查器”中，你可以看到 Texture（纹"
"理）属性写着“[空]”。要显示 Godot 图标，请点击并拖拽“文件系统”面板中的 ``icon."
"svg`` 文件到 Texture 插槽上。"

msgid ""
"You can create Sprite2D nodes automatically by dragging and dropping images "
"on the viewport."
msgstr "你可以通过将图像拖放到视口上来自动创建 Sprite2D 节点。"

msgid ""
"Then, click and drag the icon in the viewport to center it in the game view."
msgstr "然后，点击并拖动视口中的图标，使其在游戏视图中居中。"

msgid "Creating a new script"
msgstr "新建脚本"

msgid ""
"To create and attach a new script to our node, right-click on Sprite2D in "
"the scene dock and select \"Attach Script\"."
msgstr ""
"在场景面板的 Sprite2D 上点击右键并选择“添加脚本”，来创建或附加一个新的脚本到"
"我们的节点上。"

msgid ""
"The Attach Node Script window appears. It allows you to select the script's "
"language and file path, among other options."
msgstr "弹出“附加节点脚本”窗口。你可以选择脚本的语言和文件路径，以及其他选项。"

msgid ""
"Change the Template field from \"Node: Default\" to \"Object: Empty\" to "
"start with a clean file. Leave the other options set to their default values "
"and click the Create button to create the script."
msgstr ""
"把模板字段从“Node: Default”改为“Object: Empty”从而得到一个干净的脚本文件。其"
"他选项保持默认，然后点击“创建”按钮来创建脚本。"

msgid ""
"C# script names need to match their class name. In this case, you should "
"name the file ``MySprite2D.cs``."
msgstr ""

msgid ""
"The Script workspace should appear with your new ``sprite_2d.gd`` file open "
"and the following line of code:"
msgstr ""
"此时 Script 工作区将自动打开并显示你新建的 ``sprite_2d.gd`` 文件，显示以下代"
"码行："

msgid ""
"Every GDScript file is implicitly a class. The ``extends`` keyword defines "
"the class this script inherits or extends. In this case, it's ``Sprite2D``, "
"meaning our script will get access to all the properties and functions of "
"the Sprite2D node, including classes it extends, like ``Node2D``, "
"``CanvasItem``, and ``Node``."
msgstr ""
"每个 GDScript 文件都是一个隐含的类。\\ ``extends`` 关键字定义了这个脚本所继承"
"或扩展的类。本例中它是 ``Sprite2D``\\ ，意味着我们的脚本将获得 Sprite2D 节点"
"的所有属性和函数，包括它继承的 ``Node2D``\\ 、\\ ``CanvasItem``\\ 、\\ "
"``Node`` 等类。"

msgid ""
"In GDScript, if you omit the line with the ``extends`` keyword, your class "
"will implicitly extend :ref:`RefCounted <class_RefCounted>`, which Godot "
"uses to manage your application's memory."
msgstr ""
"在GDScript中，如果你没有写带有 ``extends`` 关键字的一行，你的类将隐式地扩展"
"自 :ref:`RefCounted <class_RefCounted>`，Godot使用这个类来管理你的应用程序的"
"内存。"

msgid ""
"Inherited properties include the ones you can see in the Inspector dock, "
"like our node's ``texture``."
msgstr ""
"继承的属性包括你可以在“检查器”面板中看到的属性，例如节点的 ``texture``\\ 。"

msgid ""
"By default, the Inspector displays a node's properties in \"Title Case\", "
"with capitalized words separated by a space. In GDScript code, these "
"properties are in \"snake_case\", which is lowercase with words separated by "
"an underscore."
msgstr ""
"“检查器”默认使用“Title Case”形式展示节点的属性，将单词的首字母大写、用空格分"
"隔。在 GDScript 代码中，这些属性使用的是“snake_case”，全小写、单词之间使用下"
"划线分隔。"

msgid ""
"You can hover over any property's name in the Inspector to see a description "
"and its identifier in code."
msgstr "你可以在检查器中悬停任何属性的名称来查看它的描述和在代码中的标识符。"

msgid "Hello, world!"
msgstr "你好，世界！"

msgid ""
"Our script currently doesn't do anything. Let's make it print the text "
"\"Hello, world!\" to the Output bottom panel to get started."
msgstr ""
"我们的脚本目前没有做任何事情。让我们开始打印文本“Hello, world!”到底部输出面"
"板。"

msgid "Add the following code to your script:"
msgstr "往脚本中添加以下代码："

msgid ""
"Let's break it down. The ``func`` keyword defines a new function named "
"``_init``. This is a special name for our class's constructor. The engine "
"calls ``_init()`` on every object or node upon creating it in memory, if you "
"define this function."
msgstr ""
"让我们把它分解一下。 ``func`` 关键字定义了一个名为 ``_init`` 的新函数。这是类"
"构造函数的一个特殊名称。如果你定义了这个函数，引擎会在内存中创建每个对象或节"
"点时调用 ``_init()`` 。"

msgid ""
"GDScript is an indent-based language. The tab at the start of the line that "
"says ``print()`` is necessary for the code to work. If you omit it or don't "
"indent a line correctly, the editor will highlight it in red and display the "
"following error message: \"Indented block expected\"."
msgstr ""
"GDScript 是基于缩进的语言。行首的制表符是 ``print()`` 代码正常工作的必要条"
"件。如果你省略了它或者没有正确缩进一行，编辑器将以红色高亮显示，并显示以下错"
"误信息：“Indented block expected”（应有缩进块）。"

msgid ""
"Save the scene as ``sprite_2d.tscn`` if you haven't already, then press :kbd:"
"`F6` (:kbd:`Cmd + R` on macOS) to run it. Look at the **Output** bottom "
"panel that expands. It should display \"Hello, world!\"."
msgstr ""
"如果你还没有保存场景为 ``sprite_2d.tscn``\\ ，请保存，然后按 :kbd:`F6`\\ "
"（macOS 上为 :kbd:`Cmd + R`\\ ）来运行它。看一下底部展开的\\ **输出**\\ 面"
"板。它应该显示“Hello, world!”。"

msgid ""
"Delete the ``_init()`` function, so you're only left with the line ``extends "
"Sprite2D``."
msgstr "将 ``_init()`` 函数删除，这样你就只有一行 ``extends Sprite2D`` 了。"

msgid "Turning around"
msgstr "四处旋转"

msgid ""
"It's time to make our node move and rotate. To do so, we're going to add two "
"member variables to our script: the movement speed in pixels per second and "
"the angular speed in radians per second.  Add the following after the "
"``extends Sprite2D`` line."
msgstr ""
"是时候让我们的节点移动和旋转了。为此，我们将向脚本中添加两个成员变量：以像素"
"每秒为单位的移动速度，和以弧度每秒为单位的角速度。将下述内容添加到 ``extends "
"Sprite2D`` 行的后面。"

msgid ""
"Member variables sit near the top of the script, after any \"extends\" "
"lines, but before functions. Every node instance with this script attached "
"to it will have its own copy of the ``speed`` and ``angular_speed`` "
"properties."
msgstr ""
"成员变量位于脚本的顶部，在“extends”之后、函数之前。附加了此脚本的每个节点实例"
"都将具有自己的 ``speed`` 和 ``angular_speed`` 属性副本。"

msgid ""
"Angles in Godot work in radians by default, but you have built-in functions "
"and properties available if you prefer to calculate angles in degrees "
"instead."
msgstr ""
"与其他一些引擎一样，Godot 中的角度默认使用弧度为单位，但如果你更喜欢以度为单"
"位计算角度，则可以使用内置函数和属性。"

msgid ""
"To move our icon, we need to update its position and rotation every frame in "
"the game loop. We can use the ``_process()`` virtual function of the "
"``Node`` class. If you define it in any class that extends the Node class, "
"like Sprite2D, Godot will call the function every frame and pass it an "
"argument named ``delta``, the time elapsed since the last frame."
msgstr ""
"为了移动我们的图标，我们需要在游戏循环中每一帧更新其位置和旋转。我们可以使用 "
"``Node`` 类中的虚函数 ``_process()`` 。如果你在任何扩展自 Node 类的类中定义"
"它，如 Sprite2D，Godot将在每一帧调用该函数，并传递给它一个名为 ``delta`` 的参"
"数，即从上一帧开始经过的时间。"

msgid ""
"Games work by rendering many images per second, each called a frame, and "
"they do so in a loop. We measure the rate at which a game produces images in "
"Frames Per Second (FPS). Most games aim for 60 FPS, although you might find "
"figures like 30 FPS on slower mobile devices or 90 to 240 for virtual "
"reality games."
msgstr ""
"游戏的工作方式是每秒钟渲染许多图像，每幅图像称为一帧，而且是循环进行的。我们"
"用每秒帧数（FPS）来衡量一个游戏产生图像的速度。大多数游戏的目标是60FPS，尽管"
"你可能会发现在较慢的移动设备上的数字是30FPS，或者是虚拟现实游戏的90至240。"

msgid ""
"The engine and game developers do their best to update the game world and "
"render images at a constant time interval, but there are always small "
"variations in frame render times. That's why the engine provides us with "
"this delta time value, making our motion independent of our framerate."
msgstr ""
"引擎和游戏开发者尽最大努力以恒定的时间间隔更新游戏世界和渲染图像，但在帧的渲"
"染时间上总是存在着微小的变化。这就是为什么引擎为我们提供了这个delta时间值，使"
"我们的运动与我们的帧速率无关。"

msgid "At the bottom of the script, define the function:"
msgstr "在脚本的底部，定义该函数："

msgid ""
"The ``func`` keyword defines a new function. After it, we have to write the "
"function's name and arguments it takes in parentheses. A colon ends the "
"definition, and the indented blocks that follow are the function's content "
"or instructions."
msgstr ""
"``func`` 关键字定义了一个新函数。在它之后，我们必须在括号里写上函数的名称和它"
"所接受的参数。冒号结束定义，后面的缩进块是函数的内容或指令。"

msgid ""
"Notice how ``_process()``, like ``_init()``, starts with a leading "
"underscore. By convention, Godot's virtual functions, that is to say, built-"
"in functions you can override to communicate with the engine, start with an "
"underscore."
msgstr ""
"请注意 ``_process()`` 和 ``_init()`` 一样都是以下划线开头的。按照约定，这是 "
"Godot 的虚函数，也就是你可以覆盖的与引擎通信的内置函数。"

msgid ""
"The line inside the function, ``rotation += angular_speed * delta``, "
"increments our sprite's rotation every frame. Here, ``rotation`` is a "
"property inherited from the class ``Node2D``, which ``Sprite2D`` extends. It "
"controls the rotation of our node and works with radians."
msgstr ""
"函数内部的那一行 ``rotation += angular_speed * delta`` 每一帧都会增加我们的精"
"灵的旋转量。这里 ``rotation`` 是从 ``Sprite2D`` 所扩展的 ``Node2D`` 类继承的"
"属性。它可以控制我们节点的旋转，以弧度为单位。"

msgid ""
"In the code editor, you can ctrl-click on any built-in property or function "
"like ``position``, ``rotation``, or ``_process`` to open the corresponding "
"documentation in a new tab."
msgstr ""
"在代码编辑器中，你可以按住 ctrl 单击任何内置的属性或函数，如 "
"``position``\\ 、\\ ``rotation``\\ 、\\ ``_process`` 以在新标签页中打开相应的"
"文档。"

msgid "Run the scene to see the Godot icon turn in-place."
msgstr "运行该场景，可以看到 Godot 的图标在原地转动。"

msgid ""
"In C#, notice how the ``delta`` argument taken by ``_Process()`` is a "
"``double``. We therefore need to convert it to ``float`` when we apply it to "
"the rotation."
msgstr ""
"在 C# 中，请注意 ``_Process()`` 所采用的 ``delta`` 参数类型是 ``double`` 。 "
"故当我们将其应用于旋转时，需要将其转换为 ``float`` \\。"

msgid "Moving forward"
msgstr "前进"

msgid ""
"Let's now make the node move. Add the following two lines inside of the "
"``_process()`` function, ensuring the new lines are indented the same way as "
"the ``rotation += angular_speed * delta`` line before them."
msgstr ""
"现在我们来让节点移动。在 ``_process()`` 函数中添加下面两行代码，确保每一行都"
"和之前的 ``rotation += angular_speed * delta`` 行的缩进保持一致。"

msgid ""
"As we already saw, the ``var`` keyword defines a new variable. If you put it "
"at the top of the script, it defines a property of the class. Inside a "
"function, it defines a local variable: it only exists within the function's "
"scope."
msgstr ""
"正如我们所看到的，\\ ``var`` 关键字可以定义新变量。如果你把它放在脚本顶部，定"
"义的就是类的属性。在函数内部，定义的则是局部变量：只在函数的作用域中存在。"

msgid ""
"We define a local variable named ``velocity``, a 2D vector representing both "
"a direction and a speed. To make the node move forward, we start from the "
"Vector2 class's constant ``Vector2.UP``, a vector pointing up, and rotate it "
"by calling the Vector2 method ``rotated()``. This expression, ``Vector2.UP."
"rotated(rotation)``, is a vector pointing forward relative to our icon. "
"Multiplied by our ``speed`` property, it gives us a velocity we can use to "
"move the node forward."
msgstr ""
"我们定义一个名为 ``velocity`` 的局部变量，该变量是用于表示方向和速度的 2D 向"
"量。要让节点向前移动，我们可以从 Vector2 类的常量 ``Vector2.UP`` 入手，这个向"
"量指向上方，调用 ``Vector2`` 的 ``rotated()`` 方法可以将其进行旋转。表达式 "
"``Vector2.UP.rotated(rotation)`` 表示的是指向图标前方的向量。用这个方向与我们"
"的 ``speed`` 属性相乘后，得到的就是用来移动节点的速度。"

msgid ""
"We add ``velocity * delta`` to the node's ``position`` to move it. The "
"position itself is of type :ref:`Vector2 <class_Vector2>`, a built-in type "
"in Godot representing a 2D vector."
msgstr ""
"我们在节点的 ``position`` 里加上 ``velocity * delta`` 来实现移动。位置本身"
"是 :ref:`Vector2 <class_Vector2>` 类型的，是 Godot 用于表示 2D 向量的内置类"
"型。"

msgid "Run the scene to see the Godot head run in circles."
msgstr "运行场景就可以看到 Godot 头像在绕圈圈。"

msgid ""
"Moving a node like that does not take into account colliding with walls or "
"the floor. In :ref:`doc_your_first_2d_game`, you will learn another approach "
"to moving objects while detecting collisions."
msgstr ""
"使用这样的方法不会考虑与墙壁和地面的碰撞。在 :ref:`doc_your_first_2d_game` "
"中，你会学到另一种移动对象的方法，可以检测碰撞。"

msgid ""
"Our node currently moves by itself. In the next part, :ref:"
"`doc_scripting_player_input`, we'll use player input to control it."
msgstr ""
"我们的节点目前是自行移动的。在下一部分 :ref:`doc_scripting_player_input` 中，"
"我们会让玩家的输入来控制它。"

msgid "Complete script"
msgstr "完整脚本"

msgid "Here is the complete ``sprite_2d.gd`` file for reference."
msgstr "这是完整的 ``sprite_2d.gd`` 文件，仅供参考。"

msgid "Translation status"
msgstr "翻译状态"
