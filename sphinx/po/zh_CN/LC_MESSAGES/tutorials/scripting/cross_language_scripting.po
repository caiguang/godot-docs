# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Cross-language scripting"
msgstr "跨语言脚本"

msgid ""
"Godot allows you to mix and match scripting languages to suit your needs. "
"This means a single project can define nodes in both C# and GDScript. This "
"page will go through the possible interactions between two nodes written in "
"different languages."
msgstr ""
"Godot 允许混合、匹配使用脚本语言以满足你的需求，也就是说，一个项目可以同时用 "
"C# 和 GDScript 定义节点。本页将用不同语言编写的两个脚本来介绍这两种语言之间可"
"进行的交互。"

msgid ""
"The following two scripts will be used as references throughout this page."
msgstr "以下两个脚本在整个页面中用作参考。"

msgid "Instantiating nodes"
msgstr "实例化节点"

msgid ""
"If you're not using nodes from the scene tree, you'll probably want to "
"instantiate nodes directly from the code."
msgstr "如果不想通过场景树来使用节点，则可能需要直接通过代码来实例化节点。"

msgid "Instantiating C# nodes from GDScript"
msgstr "在 GDScript 中实例化 C# 节点"

msgid ""
"Using C# from GDScript doesn't need much work. Once loaded (see :ref:"
"`doc_gdscript_classes_as_resources`), the script can be instantiated with :"
"ref:`new() <class_CSharpScript_method_new>`."
msgstr ""
"在 GDScript 中使用 C# 脚本并不麻烦，C# 脚本经加载后（见 :ref:"
"`doc_gdscript_classes_as_resources`）便可使用 :ref:`new() "
"<class_CSharpScript_method_new>` 来进行实例化。"

msgid ""
"When creating ``.cs`` scripts, you should always keep in mind that the class "
"Godot will use is the one named like the ``.cs`` file itself. If that class "
"does not exist in the file, you'll see the following error: ``Invalid call. "
"Nonexistent function `new` in base``."
msgstr ""
"创建 ``.cs`` 脚本时，要始终记住：Godot 会使用和这个 ``.cs`` 文件名相同的类进"
"行相关操作。如果文件中不存在该类，那么你将会看到以下错误: ``Invalid call. "
"Nonexistent function `new` in base`` 。"

msgid "For example, MyCoolNode.cs should contain a class named MyCoolNode."
msgstr "例如：MyCoolNode.cs 应该包含一个名为 MyCoolNode 的类。"

msgid ""
"The C# class needs to derive a Godot class, for example ``GodotObject``. "
"Otherwise, the same error will occur."
msgstr ""
"C# 类也需要获取 Godot 类，如\\ ``GodotObject``\\，否则将触发同样的错误。"

msgid ""
"You also need to check your ``.cs`` file is referenced in the project's ``."
"csproj`` file. Otherwise, the same error will occur."
msgstr ""
"你还需要检查在项目的 ``.csproj`` 文件中是否引用了该 ``.cs`` 文件的内容，否则"
"将触发同样的错误。"

msgid "Instantiating GDScript nodes from C#"
msgstr "在 C# 中实例化 GDScript 节点"

msgid ""
"From the C# side, everything work the same way. Once loaded, the GDScript "
"can be instantiated with :ref:`GDScript.New() <class_GDScript_method_new>`."
msgstr ""
"在 C# 侧的实例化方式与 GDScript 的基本相同，加载 GDScript 脚本后，该 "
"GDScript 脚本就可以使用\\ :ref:`GDScript.New() "
"<class_GDScript_method_new>`\\实例化。"

msgid ""
"Here we are using an :ref:`class_Object`, but you can use type conversion "
"like explained in :ref:`doc_c_sharp_features_type_conversion_and_casting`."
msgstr ""
"在这里我们用 :ref:`class_Object` 进行转型，但是也可以使用 Godot 所提供的类型"
"转换语法转型，见\\ :ref:`doc_c_sharp_features_type_conversion_and_casting`\\ "
"章节。"

msgid "Accessing fields"
msgstr "访问字段"

msgid "Accessing C# fields from GDScript"
msgstr "从 GDScript 中访问 C# 字段"

msgid ""
"Accessing C# fields from GDScript is straightforward, you shouldn't have "
"anything to worry about."
msgstr "从 GDScript 访问 C# 字段非常简单，大可不必担心会出现什么问题。"

msgid "Accessing GDScript fields from C#"
msgstr "从 C# 中访问 GDSscript"

msgid ""
"As C# is statically typed, accessing GDScript from C# is a bit more "
"convoluted, you will have to use :ref:`GodotObject.Get() "
"<class_Object_method_get>` and :ref:`GodotObject.Set() "
"<class_Object_method_set>`. The first argument is the name of the field you "
"want to access."
msgstr ""
"由于 C# 是静态类型语言，因此在 C# 脚本里访问 GDScript 字段会有点复杂，此时必"
"须使用 :ref:`Object.Get() <class_Object_method_get>` 和 :ref:`Object.Set() "
"<class_Object_method_set>` 来读写字段，其首个参数为要访问的字段的名称。"

msgid ""
"Keep in mind that when setting a field value you should only use types the "
"GDScript side knows about. Essentially, you want to work with built-in types "
"as described in :ref:`doc_gdscript` or classes extending :ref:`class_Object`."
msgstr ""
"需要牢记：在给字段赋值时只能使用 GDScript 已知的类型，实际上指的就是 "
"GDScript 的内置类型 :ref:`doc_gdscript` 或 :ref:`class_Object` 的子类型。"

msgid "Calling methods"
msgstr "调用方法"

msgid "Calling C# methods from GDScript"
msgstr "在 GDScript 中调用 C# 方法"

msgid ""
"Again, calling C# methods from GDScript should be straightforward. The "
"marshalling process will do its best to cast the arguments to match function "
"signatures. If that's impossible, you'll see the following error: ``Invalid "
"call. Nonexistent function `FunctionName```."
msgstr ""
"在 GDScript 里调用 C# 方法同样非常简单，调用 C# 脚本的方法时将尽可能地将你的"
"参数类型进行强制转型以匹配函数签名。如果调用失败，则会看到以下错误 ``Invalid "
"call. Nonexistent function `FunctionName```\\。"

msgid "Calling GDScript methods from C#"
msgstr "从 C# 中 调用 GDScript 方法"

msgid ""
"To call GDScript methods from C# you'll need to use :ref:`GodotObject.Call() "
"<class_Object_method_call>`. The first argument is the name of the method "
"you want to call. The following arguments will be passed to said method."
msgstr ""
"在 C# 脚本中调用 GDScript 脚本的方法时需要使用 :ref:`Object.Call() "
"<class_Object_method_call>` 函数，该方法的第一个参数为想要调用方法的名称，之"
"后的其他参数会顺次传递给被调用的方法。"

msgid ""
"As you can see, if the first argument of the called method is an array, "
"you'll need to cast it as ``object``. Otherwise, each element of your array "
"will be treated as a single argument and the function signature won't match."
msgstr ""
"如你所见，若被调用方法的第一个参数为数组类型，则需要强制转为 ``object``\\ 类"
"型，否则该数组内的每个元素都将会被当做单个参数传入，导致与被调用的参数不匹"
"配。"

msgid "Inheritance"
msgstr "继承"

msgid ""
"A GDScript file may not inherit from a C# script. Likewise, a C# script may "
"not inherit from a GDScript file. Due to how complex this would be to "
"implement, this limitation is unlikely to be lifted in the future. See `this "
"GitHub issue <https://github.com/godotengine/godot/issues/38352>`__ for more "
"information."
msgstr ""
"GDScript 脚本无法继承 C＃脚本。同样，C＃脚本也无法继承 GDScript 脚本。由于该"
"机制实现起来非常复杂，故未来不太可能取消此限制，详见 `该 GitHub issue "
"<https://github.com/godotengine/godot/issues/38352>`_ 。"

msgid "Translation status"
msgstr "翻译状态"
