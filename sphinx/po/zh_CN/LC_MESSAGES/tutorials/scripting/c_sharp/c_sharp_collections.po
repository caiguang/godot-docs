# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# collections"
msgstr "C# 集合"

msgid ""
"The .NET base class library contains multiple collection types that can be "
"used to store and manipulate data. Godot also provide some collection types "
"that are tightly integrated with the rest of the engine."
msgstr ""
".NET 基类库包含多种集合类型，可以用来存储和操作数据。Godot 也提供了一些集合类"
"型，它们与引擎的其他部分紧密集成。"

msgid "Choose a collection"
msgstr "选择一种集合"

msgid ""
"The main difference between the `.NET collections <https://learn.microsoft."
"com/en-us/dotnet/standard/collections/>`_ and the Godot collections is that "
"the .NET collections are implemented in C# while the Godot collections are "
"implemented in C++ and the Godot C# API is a wrapper over it, this is an "
"important distinction since it means every operation on a Godot collection "
"requires marshaling which can be expensive especially inside a loop."
msgstr ""
"`.NET 集合 <https://learn.microsoft.com/zh-cn/dotnet/standard/collections/"
">`_ 和 Godot 集合的主要区别是 .NET 集合是用 C# 实现的，而 Godot 集合是用 C++ "
"实现的，Godot C# API 是对它的一个封装，这是一个重要的区别，因为它意味着对 "
"Godot 集合的每一个操作都需要进行封送（marshaling），这可能会非常耗费资源，尤"
"其是在循环中。"

msgid ""
"Due to the performance implications, using Godot collections is only "
"recommended when absolutely necessary (such as interacting with the Godot "
"API). Godot only understands its own collection types, so it's required to "
"use them when talking to the engine."
msgstr ""
"由于性能影响，仅在绝对必要时（例如与 Godot API 交互）才建议使用 Godot 集合。"
"Godot 只能理解其自己的集合类型，因此在与引擎交互时需要使用它们。"

msgid ""
"If you have a collection of elements that don't need to be passed to a Godot "
"API, using a .NET collection would be more performant."
msgstr "如果你有一组元素，不需要传递给 Godot API，使用 .NET 集合会更高效。"

msgid ""
"It's also possible to convert between .NET collections and Godot "
"collections. The Godot collections contain constructors from generic .NET "
"collection interfaces that copy their elements, and the Godot collections "
"can be used with the `LINQ <https://learn.microsoft.com/en-us/dotnet/"
"standard/linq>`_ ``ToList``, ``ToArray`` and ``ToDictionary`` methods. But "
"keep in mind this conversion requires marshaling every element in the "
"collection and copies it to a new collection so it can be expensive."
msgstr ""
".NET 集合和 Godot 集合之间也可以进行转换。Godot 集合包含从通用 .NET 集合接口"
"复制元素的构造函数，而且 Godot 集合可以与 `LINQ <https://learn.microsoft.com/"
"zh-cn/dotnet/standard/linq>`_ ``ToList`` 、 ``ToArray`` 和 ``ToDictionary`` "
"方法一起使用。但要注意，这种转换需要对集合中的每个元素进行封送并将其复制到新"
"集合中，因此可能会很耗费资源。"

msgid ""
"Despite this, the Godot collections are optimized to try and avoid "
"unnecessary marshaling, so methods like ``Sort`` or ``Reverse`` are "
"implemented with a single interop call and don't need to marshal every "
"element. Keep an eye out for generic APIs that take collection interfaces "
"like `LINQ <https://learn.microsoft.com/en-us/dotnet/standard/linq>`_ "
"because every method requires iterating the collection and, therefore, "
"marshaling every element. Prefer using the instance methods of the Godot "
"collections when possible."
msgstr ""
"尽管如此，Godot 集合经过优化，试图避免不必要的封送，因此如 ``Sort`` 或 "
"``Reverse`` 等方法通过单个交互调用实现，无需封送每个元素。要注意那些接受像 "
"`LINQ <https://learn.microsoft.com/zh-cn/dotnet/standard/linq>`_ 这样的集合接"
"口的通用 API，因为每个方法都需要遍历集合，因此需要封送每个元素。尽量在可能的"
"情况下使用 Godot 集合的实例方法。"

msgid ""
"To choose which collection type to use for each situation, consider the "
"following questions:"
msgstr "为了选择在不同情况下使用哪种集合类型，请考虑以下问题："

msgid ""
"Does your collection need to interact with the Godot engine? (e.g.: the type "
"of an exported property, calling a Godot method)."
msgstr ""
"你的集合是否需要与 Godot 引擎交互？（例如：导出属性的类型，调用 Godot 方"
"法）。"

msgid ""
"If yes, since Godot only supports :ref:`Variant-compatible "
"<doc_c_sharp_variant>` types, use a Godot collection."
msgstr ""
"如果是，由于 Godot 只支持 :ref:`Variant 兼容 <doc_c_sharp_variant>` 类型，所"
"以请使用 Godot 集合。"

msgid ""
"If not, consider `choosing an appropriate .NET collection <https://learn."
"microsoft.com/en-us/dotnet/standard/collections/selecting-a-collection-"
"class>`_."
msgstr ""
"如果不是，请考虑 ` 选择一个合适的 .NET 集合 <https://learn.microsoft.com/zh-"
"cn/dotnet/standard/collections/selecting-a-collection-class>`_ 。"

msgid ""
"Do you need a Godot collection that represents a list or sequential set of "
"data?"
msgstr "你是否需要一个 Godot 集合，用来表示一个列表或顺序的数据集？"

msgid ""
"Godot :ref:`arrays <doc_c_sharp_collections_array>` are similar to the C# "
"collection ``List<T>``."
msgstr ""
"Godot :ref:`数组 <doc_c_sharp_collections_array>` 与 C# 集合 ``List<T>`` 类"
"似。"

msgid ""
"Godot :ref:`packed arrays <doc_c_sharp_collections_packedarray>` are more "
"memory-efficient arrays, in C# use one of the supported ``System.Array`` "
"types."
msgstr ""
"Godot :ref:`紧缩数组 <doc_c_sharp_collections_packedarray>` 是更高效的内存数"
"组，在 C# 中使用一个支持 ``System.Array`` 的类型。"

msgid ""
"Do you need a Godot collection that maps a set of keys to a set of values?"
msgstr "你需一个 Godot 集合将一组键映射到一组值吗？"

msgid ""
"Godot :ref:`dictionaries <doc_c_sharp_collections_dictionary>` store pairs "
"of keys and values and allow easy access to the values by their associated "
"key."
msgstr ""
"Godot :ref:`字典 <doc_c_sharp_collections_dictionary>` 存储键值对，并通过其关"
"联的键轻松访问值。"

msgid "Godot collections"
msgstr "Godot 集合"

msgid "PackedArray"
msgstr "紧缩数组"

msgid ""
"Godot packed arrays are implemented as an array of a specific type, allowing "
"it to be more tightly packed as each element has the size of the specific "
"type, not ``Variant``."
msgstr ""
"Godot 中的紧缩数组以指定类型的数组形式实现，这样就能够更加紧实，每个元素都只"
"有各自类型的大小，而不是 ``Variant`` 的大小。"

msgid "In C#, packed arrays are replaced by ``System.Array``:"
msgstr "在 C# 中，紧缩数组由 ``System.Array`` 代替："

msgid "GDScript"
msgstr "GDScript"

msgid "C#"
msgstr "C#"

msgid "``PackedInt32Array``"
msgstr "``PackedInt32Array``"

msgid "``int[]``"
msgstr "``int[]``"

msgid "``PackedInt64Array``"
msgstr "``PackedInt64Array``"

msgid "``long[]``"
msgstr "``long[]``"

msgid "``PackedByteArray``"
msgstr "``PackedByteArray``"

msgid "``byte[]``"
msgstr "``byte[]``"

msgid "``PackedFloat32Array``"
msgstr "``PackedFloat32Array``"

msgid "``float[]``"
msgstr "``float[]``"

msgid "``PackedFloat64Array``"
msgstr "``PackedFloat64Array``"

msgid "``double[]``"
msgstr "``double[]``"

msgid "``PackedStringArray``"
msgstr "``PackedStringArray``"

msgid "``string[]``"
msgstr "``string[]``"

msgid "``PackedColorArray``"
msgstr "``PackedColorArray``"

msgid "``Color[]``"
msgstr "``Color[]``"

msgid "``PackedVector2Array``"
msgstr "``PackedVector2Array``"

msgid "``Vector2[]``"
msgstr "``Vector2[]``"

msgid "``PackedVector3Array``"
msgstr "``PackedVector3Array``"

msgid "``Vector3[]``"
msgstr "``Vector3[]``"

msgid ""
"Other C# arrays are not supported by the Godot C# API since a packed array "
"equivalent does not exist. See :ref:`Variant <doc_c_sharp_variant>` for a "
"list of all the compatible types."
msgstr ""
"其他 C# 数组在 Godot C# API 中不受支持，因为没有等效的紧缩数组。请查看 :ref:"
"`Variant <doc_c_sharp_variant>` 以获取所有兼容类型的列表。"

msgid "Array"
msgstr "数组"

msgid ""
"Godot arrays are implemented as an array of ``Variant`` and can contain "
"several elements of any type. In C#, the equivalent type is ``Godot."
"Collections.Array``."
msgstr ""
"Godot 数组被实现为一个包含多个任意类型元素的 ``Variant`` 数组。在 C# 中，对应"
"的类型是 ``Godot.Collections.Array`` 。"

msgid ""
"The generic ``Godot.Collections.Array<T>`` type allows restricting the "
"element type to a :ref:`Variant-compatible <doc_c_sharp_variant>` type."
msgstr ""
"泛型 ``Godot.Collections.Array<T>`` 类型允许将元素类型限制为 :ref:`Variant 兼"
"容 <doc_c_sharp_variant>` 类型。"

msgid ""
"An untyped ``Godot.Collections.Array`` can be converted to a typed array "
"using the ``Godot.Collections.Array<T>(Godot.Collections.Array)`` "
"constructor."
msgstr ""
"一个未指定类型的 ``Godot.Collections.Array`` 可以使用 ``Godot.Collections."
"Array<T>(Godot.Collections.Array)`` 构造函数转换为一个指定类型的数组。"

msgid ""
"Despite the name, Godot arrays are more similar to the C# collection "
"``List<T>`` than ``System.Array``. Their size is not fixed and can grow or "
"shrink as elements are added/removed from the collection."
msgstr ""
"尽管名字如此，Godot 数组与 C# 集合 ``List<T>`` 更相似，而不是 ``System."
"Array`` 。它们的大小不固定，随着集合中添加/删除元素而增长或缩小。"

msgid "List of Godot's Array methods and their equivalent in C#:"
msgstr "Godot Array 方法列表及其在 C# 中的对应："

msgid "all"
msgstr "all"

msgid "`System.Linq.Enumerable.All`_"
msgstr "`System.Linq.Enumerable.All`_"

msgid "any"
msgstr "any"

msgid "`System.Linq.Enumerable.Any`_"
msgstr "`System.Linq.Enumerable.Any`_"

msgid "append"
msgstr "append"

msgid "Add"
msgstr "Add"

msgid "append_array"
msgstr "append_array"

msgid "AddRange"
msgstr "AddRange"

msgid "assign"
msgstr "assign"

msgid "Clear and AddRange"
msgstr "Clear 和 AddRange"

msgid "back"
msgstr "back"

msgid ""
"``Array[^1]`` or `System.Linq.Enumerable.Last`_ or `System.Linq.Enumerable."
"LastOrDefault`_"
msgstr ""
"``Array[^1]`` 或 `System.Linq.Enumerable.Last`_ 或 `System.Linq.Enumerable."
"LastOrDefault`_"

msgid "bsearch"
msgstr "bsearch"

msgid "BinarySearch"
msgstr "BinarySearch"

msgid "bsearch_custom"
msgstr "bsearch_custom"

msgid "N/A"
msgstr "N/A"

msgid "clear"
msgstr "clear"

msgid "Clear"
msgstr "Clear"

msgid "count"
msgstr "count"

msgid "`System.Linq.Enumerable.Count`_"
msgstr "`System.Linq.Enumerable.Count`_"

msgid "duplicate"
msgstr "duplicate"

msgid "Duplicate"
msgstr "Duplicate"

msgid "erase"
msgstr "erase"

msgid "Remove"
msgstr "Remove"

msgid "fill"
msgstr "fill"

msgid "Fill"
msgstr "Fill"

msgid "filter"
msgstr "filter"

msgid "Use `System.Linq.Enumerable.Where`_"
msgstr "使用 `System.Linq.Enumerable.Where`_"

msgid "find"
msgstr "find"

msgid "IndexOf"
msgstr "IndexOf"

msgid "front"
msgstr "front"

msgid ""
"``Array[0]`` or `System.Linq.Enumerable.First`_ or `System.Linq.Enumerable."
"FirstOrDefault`_"
msgstr ""
"``Array[0]`` 或 `System.Linq.Enumerable.First`_ 或 `System.Linq.Enumerable."
"FirstOrDefault`_"

msgid "get_typed_builtin"
msgstr "get_typed_builtin"

msgid "get_typed_class_name"
msgstr "get_typed_class_name"

msgid "get_typed_script"
msgstr "get_typed_script"

msgid "has"
msgstr "has"

msgid "Contains"
msgstr "Contains"

msgid "hash"
msgstr "hash"

msgid "GD.Hash"
msgstr "GD.Hash"

msgid "insert"
msgstr "insert"

msgid "Insert"
msgstr "Insert"

msgid "is_empty"
msgstr "is_empty"

msgid "Use ``Count == 0``"
msgstr "使用 ``Count == 0``"

msgid "is_read_only"
msgstr "is_read_only"

msgid "IsReadOnly"
msgstr "IsReadOnly"

msgid "is_same_typed"
msgstr "is_same_typed"

msgid "is_typed"
msgstr "is_typed"

msgid "make_read_only"
msgstr "make_read_only"

msgid "MakeReadOnly"
msgstr "MakeReadOnly"

msgid "map"
msgstr "map"

msgid "`System.Linq.Enumerable.Select`_"
msgstr "`System.Linq.Enumerable.Select`_"

msgid "max"
msgstr "max"

msgid "Max"
msgstr "Max"

msgid "min"
msgstr "min"

msgid "Min"
msgstr "Min"

msgid "pick_random"
msgstr "pick_random"

msgid "PickRandom (Consider using `System.Random`_)"
msgstr "PickRandom（请考虑用 `System.Random`_ ）"

msgid "pop_at"
msgstr "pop_at"

msgid "``Array[i]`` with ``RemoveAt(i)``"
msgstr "``Array[i]`` 用 ``RemoveAt(i)``"

msgid "pop_back"
msgstr "pop_back"

msgid "``Array[^1]`` with ``RemoveAt(Count - 1)``"
msgstr "``Array[^1]`` 用 ``RemoveAt(Count - 1)``"

msgid "pop_front"
msgstr "pop_front"

msgid "``Array[0]`` with ``RemoveAt(0)``"
msgstr "``Array[0]`` 用 ``RemoveAt(0)``"

msgid "push_back"
msgstr "push_back"

msgid "``Insert(Count, item)``"
msgstr "``Insert(Count, item)``"

msgid "push_front"
msgstr "push_front"

msgid "``Insert(0, item)``"
msgstr "``Insert(0, item)``"

msgid "reduce"
msgstr "reduce"

msgid "`System.Linq.Enumerable.Aggregate`_"
msgstr "`System.Linq.Enumerable.Aggregate`_"

msgid "remove_at"
msgstr "remove_at"

msgid "RemoveAt"
msgstr "RemoveAt"

msgid "resize"
msgstr "resize"

msgid "Resize"
msgstr "Resize"

msgid "reverse"
msgstr "reverse"

msgid "Reverse"
msgstr "Reverse"

msgid "rfind"
msgstr "rfind"

msgid "LastIndexOf"
msgstr "LastIndexOf"

msgid "shuffle"
msgstr "shuffle"

msgid "Shuffle"
msgstr "Shuffle"

msgid "size"
msgstr "size"

msgid "Count"
msgstr "Count"

msgid "slice"
msgstr "slice"

msgid "Slice"
msgstr "Slice"

msgid "sort"
msgstr "sort"

msgid "Sort"
msgstr "Sort"

msgid "sort_custom"
msgstr "sort_custom"

msgid "`System.Linq.Enumerable.OrderBy`_"
msgstr "`System.Linq.Enumerable.OrderBy`_"

msgid "operator !="
msgstr "操作符 !="

msgid "!RecursiveEqual"
msgstr "!RecursiveEqual"

msgid "operator +"
msgstr "操作符 +"

msgid "operator <"
msgstr "操作符 <"

msgid "operator <="
msgstr "操作符 <="

msgid "operator =="
msgstr "操作符 =="

msgid "RecursiveEqual"
msgstr "RecursiveEqual"

msgid "operator >"
msgstr "操作符 >"

msgid "operator >="
msgstr "操作符 >="

msgid "operator []"
msgstr "操作符 []"

msgid "Array[int] indexer"
msgstr "Array[int] 索引器"

msgid "Dictionary"
msgstr "字典"

msgid ""
"Godot dictionaries are implemented as a dictionary with ``Variant`` keys and "
"values. In C#, the equivalent type is ``Godot.Collections.Dictionary``."
msgstr ""
"Godot 字典是用 ``Variant`` 类型的键和值实现的。在 C# 中，对应的类型是 "
"``Godot.Collections.Dictionary`` 。"

msgid ""
"The generic ``Godot.Collections.Dictionary<TKey, TValue>`` type allows "
"restricting the key and value types to a :ref:`Variant-compatible "
"<doc_c_sharp_variant>` type."
msgstr ""
"泛型 ``Godot.Collections.Dictionary<TKey, TValue>`` 类型允许将键和值的类型限"
"制为 :ref:`Variant 兼容 <doc_c_sharp_variant>` 类型。"

msgid ""
"An untyped ``Godot.Collections.Dictionary`` can be converted to a typed "
"dictionary using the ``Godot.Collections.Dictionary<TKey, TValue>(Godot."
"Collections.Dictionary)`` constructor."
msgstr ""
"一个无类型的 ``Godot.Collections.Dictionary`` 可以用 ``Godot.Collections."
"Dictionary<TKey, TValue>(Godot.Collections.Dictionary)`` 构造函数转换为一个有"
"类型的字典。"

msgid ""
"If you need a dictionary where the key is typed but not the value, use "
"``Variant`` as the ``TValue`` generic parameter of the typed dictionary."
msgstr ""
"如果你需要一个字典，其中键是有类型的，但值没有类型，那么使用 ``Variant`` 作为"
"有类型字典的 ``TValue`` 泛型参数。"

msgid "List of Godot's Dictionary methods and their equivalent in C#:"
msgstr "Godot Dictionary 的方法列表及其在 C# 中的对应方法："

msgid "find_key"
msgstr "find_key"

msgid "get"
msgstr "get"

msgid "Dictionary[Variant] indexer or TryGetValue"
msgstr "Dictionary[Variant] 索引器 或 TryGetValue"

msgid "ContainsKey"
msgstr "ContainsKey"

msgid "has_all"
msgstr "has_all"

msgid "keys"
msgstr "keys"

msgid "Keys"
msgstr "Keys"

msgid "merge"
msgstr "merge"

msgid "Merge"
msgstr "Merge"

msgid "values"
msgstr "values"

msgid "Values"
msgstr "Values"

msgid "Dictionary[Variant] indexer, Add or TryGetValue"
msgstr "Dictionary[Variant] 索引器，Add 或 TryGetValue"

msgid "Translation status"
msgstr "翻译状态"
