# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "C# basics"
msgstr "C# 基础"

msgid "Introduction"
msgstr "前言"

msgid ""
"This page provides a brief introduction to C#, both what it is and how to "
"use it in Godot. Afterwards, you may want to look at :ref:`how to use "
"specific features <doc_c_sharp_features>`, read about the :ref:`differences "
"between the C# and the GDScript API <doc_c_sharp_differences>`, and "
"(re)visit the :ref:`Scripting section <doc_scripting>` of the step-by-step "
"tutorial."
msgstr ""
"这个页面简单介绍了 C# 是什么，以及如何在 Godot 中使用 C#。然后，你可能想看"
"看 :ref:`如何使用特定功能 <doc_c_sharp_features>` ，阅读有关 :ref:`C# 和 "
"GDScript API 之间的差异 <doc_c_sharp_differences>` 并（重新）访问逐步教程的 :"
"ref:`编写脚本部分 <doc_scripting>` 。"

msgid ""
"C# is a high-level programming language developed by Microsoft. In Godot, it "
"is implemented with .NET 6.0."
msgstr ""
"C# 是由 Microsoft 开发的高级编程语言。在 Godot 中，它是使用 .NET 6.0 实现的。"

msgid ""
"Projects written in C# using Godot 4 currently cannot be exported to the web "
"platform. To use C# on the web platform, consider Godot 3 instead. Android "
"and iOS platform support is available as of Godot 4.2, but is experimental "
"and :ref:`some limitations apply <doc_c_sharp_platforms>`."
msgstr ""
"在 Godot 4 中用 C# 编写的项目目前无法导出到 Web 平台。如果要在 Web 平台上使"
"用 C#，请考虑使用 Godot 3。 （C# 的）Android 和 iOS 平台支持从 Godot 4.2 开始"
"提供，但仍处于实验阶段，并且 :ref:`存在一些限制 <doc_c_sharp_platforms>` 。"

msgid ""
"This is **not** a full-scale tutorial on the C# language as a whole. If you "
"aren't already familiar with its syntax or features, see the `Microsoft C# "
"guide <https://docs.microsoft.com/en-us/dotnet/csharp/index>`_ or look for a "
"suitable introduction elsewhere."
msgstr ""
"这 **不是** 一个关于 C# 语言整体的全面教程。如果你还不熟悉其语法或功能，请参"
"阅 `Microsoft C# 指南 <https://docs.microsoft.com/en-us/dotnet/csharp/"
"index>`_ 或在其他地方寻找合适的介绍。"

msgid "Prerequisites"
msgstr "先决条件"

msgid ""
"Godot bundles the parts of .NET needed to run already compiled games. "
"However, Godot does not bundle the tools required to build and compile "
"games, such as MSBuild and the C# compiler. These are included in the .NET "
"SDK, and need to be installed separately."
msgstr ""
"Godot 捆绑了运行已经编译好的游戏所需的 .NET 部分，但 Godot 不包括构建和编译游"
"戏所需的 MSBuild 和 C# 编译器等工具。这些工具包含在 .NET SDK 中，需要单独安"
"装。"

msgid ""
"In summary, you must have installed the .NET SDK **and** the .NET-enabled "
"version of Godot."
msgstr "综上所述，你必须安装了 .NET SDK **和**\\ 支持 .NET 的 Godot 版本。"

msgid ""
"Download and install the latest stable version of the SDK from the `.NET "
"download page <https://dotnet.microsoft.com/download>`__."
msgstr ""
"从 `.NET 下载页面 <https://dotnet.microsoft.com/download>`__ 下载并安装SDK的"
"最新稳定版本。"

msgid ""
"Be sure to install the 64-bit version of the SDK(s) if you are using the 64-"
"bit version of Godot."
msgstr "如果你使用 64 位版本的 Godot，请务必安装 64 位版本的 SDK。"

msgid ""
"If you are building Godot from source, make sure to follow the steps to "
"enable .NET support in your build as outlined in the :ref:"
"`doc_compiling_with_dotnet` page."
msgstr ""
"如果你正在从源代码构建 Godot，请确保按照 :ref:`doc_compiling_with_dotnet` 页"
"面中概述的步骤来启用 .NET 支持。"

msgid "Configuring an external editor"
msgstr "配置外部编辑器"

msgid ""
"C# support in Godot's built-in script editor is minimal. Consider using an "
"external IDE or editor, such as  `Visual Studio Code <https://code."
"visualstudio.com/>`__ or MonoDevelop. These provide autocompletion, "
"debugging, and other useful features for C#. To select an external editor in "
"Godot, click on **Editor → Editor Settings** and scroll down to **Dotnet**. "
"Under **Dotnet**, click on **Editor**, and select your external editor of "
"choice. Godot currently supports the following external editors:"
msgstr ""
"Godot 内置的脚本编辑器对 C# 的支持是最小的。考虑使用外部 IDE 或编辑器，如 "
"`Visual Studio Code <https://code.visualstudio.com/>`__ 或 MonoDevelop。这些"
"都为 C# 提供了自动完成、调试和其他有用的功能。要在 Godot 中选择一个外部编辑"
"器，点击 **Editor(编辑器) → Editor Settings(编辑器设置)** ，向下滚动到 "
"**Dotnet(.NET)** 。在 **Dotnet(.NET)** 下，点击 **Editor(编辑器)** ，然后选择"
"你的外部编辑器。Godot 目前支持以下外部编辑器："

msgid "Visual Studio 2022"
msgstr "Visual Studio 2022"

msgid "Visual Studio Code"
msgstr "Visual Studio Code"

msgid "MonoDevelop"
msgstr "MonoDevelop"

msgid "Visual Studio for Mac"
msgstr "Visual Studio for Mac"

msgid "JetBrains Rider"
msgstr "JetBrains Rider"

msgid "See the following sections for how to configure an external editor:"
msgstr "关于如何配置外部编辑器，请参见以下章节："

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`JetBrains Rider <https://www.jetbrains.com/rider/download>`__."
msgstr ""
"阅读完 \"预备知识\" 部分，就可以下载安装 `JetBrains Rider <https://www."
"jetbrains.com/rider/download>`__ 。"

msgid "In Godot's **Editor → Editor Settings** menu:"
msgstr "在 Godot 的 **Editor(编辑器) → Editor Settings(编辑器设置)** 菜单中："

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **JetBrains Rider**."
msgstr ""
"设置 **Dotnet(.NET)** -> **Editor(编辑器)** -> **External Editor(外部编辑"
"器)** 为 **JetBrains Rider** 。"

msgid "In Rider:"
msgstr "在 Rider 中："

msgid "Set **MSBuild version** to **.NET Core**."
msgstr "设置 **MSBuild version** 为 **.NET Core** 。"

msgid "Install the **Godot support** plugin."
msgstr "安装 **Godot support** 插件。"

msgid ""
"After reading the \"Prerequisites\" section, you can download and install "
"`Visual Studio Code <https://code.visualstudio.com/download>`__ (aka VS "
"Code)."
msgstr ""
"看完 \"预备知识\" 部分，就可以下载安装 `Visual Studio Code <https://code."
"visualstudio.com/download>`__ （又名 VS Code）。"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio "
"Code**."
msgstr ""
"设置 **Dotnet(.NET)** -> **Editor(编辑器)** -> **External Editor(外部编辑"
"器)** 为 **Visual Studio Code** 。"

msgid "In Visual Studio Code:"
msgstr "在 Visual Studio Code 中："

msgid ""
"Install the `C# <https://marketplace.visualstudio.com/items?itemName=ms-"
"dotnettools.csharp>`__ extension."
msgstr ""
"安装 `C# <https://marketplace.visualstudio.com/items?itemName=ms-dotnettools."
"csharp>`__ 扩展。"

msgid ""
"If you are using Linux you need to install the `Mono SDK <https://www.mono-"
"project.com/download/stable/#download-lin>`__ for the C# tools plugin to "
"work."
msgstr ""
"如果你使用的是 Linux，需要安装 `Mono SDK <https://www.mono-project.com/"
"download/stable/#download-lin>`__ 才能使用 C# 工具插件。"

msgid ""
"To configure a project for debugging, you need a ``tasks.json`` and ``launch."
"json`` file in the ``.vscode`` folder with the necessary configuration. An "
"example configuration can be found `here <https://github.com/godotengine/"
"godot-csharp-vscode/issues/43#issuecomment-1258321229>`__ . In the ``launch."
"json`` file, make sure the ``program`` parameter in the relevant "
"configuration points to your Godot executable, either by changing it to the "
"path of the executable or by defining a ``GODOT4`` environment variable that "
"points to the executable. Now, when you start the debugger in Visual Studio "
"Code, your Godot project will run."
msgstr ""
"为了配置一个用于调试的项目，你需要在 ``.vscode`` 文件夹中拥有一个 ``tasks."
"json`` 和 ``launch.json`` 文件，并进行必要的配置。一个示例配置可以在 `这里 "
"<https://github.com/godotengine/godot-csharp-vscode/"
"issues/43#issuecomment-1258321229>`__ 找到。在 ``launch.json`` 文件中，请确保"
"相关配置中的 ``program`` 参数指向你的 Godot 可执行文件，你可以通过将它更改为"
"可执行文件的路径或定义一个指向可执行文件的 ``GODOT4`` 环境变量来实现。现在，"
"当你在 Visual Studio Code 中启动调试器时，你的 Godot 项目将会运行。"

msgid "Visual Studio (Windows only)"
msgstr "Visual Studio（仅限 Windows）"

msgid ""
"Download and install the latest version of `Visual Studio <https://"
"visualstudio.microsoft.com/downloads/>`__. Visual Studio will include the "
"required SDKs if you have the correct workloads selected, so you don't need "
"to manually install the things listed in the \"Prerequisites\" section."
msgstr ""
"下载并安装最新版本的 `Visual Studio <https://visualstudio.microsoft.com/"
"downloads/>`__ 。如果你选择了正确的工作负载，Visual Studio 将包含所需的 SDK，"
"所以你不需要手动安装 \"预先告知\" 部分列出的内容。"

msgid "While installing Visual Studio, select this workload:"
msgstr "在安装 Visual Studio 时，请选择以下工作负载："

msgid ".NET desktop development"
msgstr ".NET 桌面开发"

msgid ""
"Set **Dotnet** -> **Editor** -> **External Editor** to **Visual Studio**."
msgstr ""
"设置 **Dotnet(.NET)** -> **Editor(编辑器)** -> **External Editor(外部编辑"
"器)** 为 **Visual Studio** 。"

msgid ""
"If you see an error like \"Unable to find package Godot.NET.Sdk\", your "
"NuGet configuration may be incorrect and need to be fixed."
msgstr ""
"如果你看到了类似“Unable to find package Godot.NET.Sdk”的错误，你的 NuGet 配置"
"可能有问题，需要进行修复。"

msgid ""
"A simple way to fix the NuGet configuration file is to regenerate it. In a "
"file explorer window, go to ``%AppData%\\NuGet``. Rename or delete the "
"``NuGet.Config`` file. When you build your Godot project again, the file "
"will be automatically created with default values."
msgstr ""
"修复 NuGet 配置文件的简单方法就是重新生成一个。在文件浏览器窗口中前往 "
"``%AppData%\\NuGet``\\ 。将 ``NuGet.Config`` 文件重命名或删除。重新构建 "
"Godot 项目时，就会自动用默认值创建该文件。"

msgid "Creating a C# script"
msgstr "创建 C# 脚本"

msgid ""
"After you successfully set up C# for Godot, you should see the following "
"option when selecting **Attach Script** in the context menu of a node in "
"your scene:"
msgstr ""
"成功为 Godot 设置 C# 之后，在场景的节点的上下文菜单中选择 **Attach Script (添"
"加脚本)** 时，应该看到以下选项："

msgid ""
"Note that while some specifics change, most concepts work the same when "
"using C# for scripting. If you're new to Godot, you may want to follow the "
"tutorials on :ref:`doc_scripting` at this point. While some documentation "
"pages still lack C# examples, most notions can be transferred from GDScript."
msgstr ""
"请注意，虽然在某些细节上有所差别，但在使用C#进行脚本编写时，大多数概念都是相"
"通的。如果你是 Godot 的新手，你可能希望在这个时候查看 :ref:`doc_scripting` 上"
"的教程。虽然在文档中缺乏详细的 C# 示例，但大多数概念可以从 GDScript 中转移过"
"来。"

msgid "Project setup and workflow"
msgstr "项目设置和工作流程"

msgid ""
"When you create the first C# script, Godot initializes the C# project files "
"for your Godot project. This includes generating a C# solution (``.sln``) "
"and a project file (``.csproj``), as well as some utility files and folders "
"(``.godot/mono``). All of these but ``.godot/mono`` are important and should "
"be committed to your version control system. Everything under ``.godot`` can "
"be safely added to the ignore list of your VCS. When troubleshooting, it can "
"sometimes help to delete the ``.godot/mono`` folder and let it regenerate."
msgstr ""
"当你创建第一个 C# 脚本时，Godot 会为你的 Godot 项目初始化 C# 项目文件。这包括"
"生成 C# 解决方案（ ``.sln`` ）和项目文件（ ``.csproj`` ），以及一些实用文件和"
"文件夹（ ``.godot/mono`` ） 。除了 ``.godot/mono`` 之外，所有这些文件都很重"
"要，应该提交到你的版本控制系统中。 ``.godot`` 文件夹下的所有内容都可以安全地"
"添加到你的版本控制系统的忽略列表中。在排除故障时, 有时删除 ``.godot/mono`` 文"
"件夹并让它重新生成可能有所帮助。"

msgid "Example"
msgstr "示例"

msgid ""
"Here's a blank C# script with some comments to demonstrate how it works."
msgstr "这是一个空白的 C# 脚本，带有一些注释，以演示其工作方式。"

msgid ""
"As you can see, functions normally in global scope in GDScript like Godot's "
"``print`` function are available in the ``GD`` static class which is part of "
"the ``Godot`` namespace. For a full list of methods in the ``GD`` class, see "
"the class reference pages for :ref:`@GDScript <class_@gdscript>` and :ref:"
"`@GlobalScope <class_@globalscope>`."
msgstr ""
"如你所见，在 GDScript 中的全局作用域中，像 Godot 的 ``print`` 这样的函数可以"
"在 ``GD`` 静态类中使用，该类是 ``Godot`` 命名空间的一部分。要查看 ``GD`` 类中"
"所有方法的完整列表，请参阅： :ref:`@GDScript <class_@gdscript>` 和 :ref:"
"`@GlobalScope <class_@globalscope>` 的类参考页面。"

msgid ""
"Keep in mind that the class you wish to attach to your node should have the "
"same name as the ``.cs`` file. Otherwise, you will get the following error:"
msgstr ""
"请记住，你希望附加到节点上的类应与 ``.cs`` 文件的名称相同。否则，你将会遇到以"
"下错误："

msgid "*\"Cannot find class XXX for script res://XXX.cs\"*"
msgstr "*\"Cannot find class XXX for script res://XXX.cs\"*"

msgid "General differences between C# and GDScript"
msgstr "C# 和 GDScript 之间的一般差异"

msgid ""
"The C# API uses ``PascalCase`` instead of ``snake_case`` in GDScript/C++. "
"Where possible, fields and getters/setters have been converted to "
"properties. In general, the C# Godot API strives to be as idiomatic as is "
"reasonably possible."
msgstr ""
"C# API 使用 ``PascalCase`` 而不是 GDScript/C++ 中使用的 ``snake_case`` 。 在"
"可能的情况下，字段和 getters/setters 已转换为属性。一般来说，C# Godot API 一"
"贯力求尽可能合理。"

msgid "For more information, see the :ref:`doc_c_sharp_differences` page."
msgstr "有关更多信息，请参见 :ref:`doc_c_sharp_differences` 页面。"

#, fuzzy
msgid ""
"You need to (re)build the project assemblies whenever you want to see new "
"exported variables or signals in the editor. This build can be manually "
"triggered by clicking the **Build** button in the top right corner of the "
"editor."
msgstr ""
"如果你在使用 C# ，想要查看新的导出变量或信号，就需要重新构建项目程序集。可以"
"通过点击编辑器右上角的构建按钮手动触发构建过程。"

msgid ""
"You will also need to rebuild the project assemblies to apply changes in "
"\"tool\" scripts."
msgstr "你还需要重新构建项目集，以应用 \"工具\" 脚本中的更改。"

msgid "Current gotchas and known issues"
msgstr "目前的陷阱和已知问题"

msgid ""
"As C# support is quite new in Godot, there are some growing pains and things "
"that need to be ironed out. Below is a list of the most important issues you "
"should be aware of when diving into C# in Godot, but if in doubt, also take "
"a look over the official `issue tracker for .NET issues <https://github.com/"
"godotengine/godot/labels/topic%3Adotnet>`_."
msgstr ""
"由于 Godot 中 C# 支持相对较新，因此存在一些发展过程中的问题和需要解决的事项。"
"以下是在 Godot 中使用 C# 时应注意的最重要问题的列表，但如果有疑问，还可以查看"
"官方的 `.NET 问题的跟踪 <https://github.com/godotengine/godot/labels/"
"topic%3Adotnet>`_ 。"

msgid ""
"Writing editor plugins is possible, but it is currently quite convoluted."
msgstr "编写编辑器插件是可能的，但是目前相当复杂。"

msgid ""
"State is currently not saved and restored when hot-reloading, with the "
"exception of exported variables."
msgstr "热重载时，当前状态不被保存和恢复，导出变量除外。"

msgid ""
"Attached C# scripts should refer to a class that has a class name that "
"matches the file name."
msgstr "附加 C# 脚本需要引用一个类，该类名需要匹配其文件名。"

msgid ""
"There are some methods such as ``Get()``/``Set()``, ``Call()``/"
"``CallDeferred()`` and signal connection method ``Connect()`` that rely on "
"Godot's ``snake_case`` API naming conventions. So when using e.g. "
"``CallDeferred(\"AddChild\")``, ``AddChild`` will not work because the API "
"is expecting the original ``snake_case`` version ``add_child``. However, you "
"can use any custom properties or methods without this limitation. Prefer "
"using the exposed ``StringName`` in the ``PropertyName``, ``MethodName`` and "
"``SignalName`` to avoid extra ``StringName`` allocations and worrying about "
"snake_case naming."
msgstr ""
"``Get()``/``Set()`` 、 ``Call()``/``CallDeferred()`` 等方法，以及信号连接方"
"法 ``Connect()`` 都依赖于 Godot 的 ``snake_case`` API 命名规范。所以， "
"``CallDeferred(\"AddChild\")`` 无法调用 ``AddChild`` ，因为API需要原始 "
"``snake_case`` 版本的 ``add_child`` 。不过，自定义属性和方法没有此限制。建议"
"在 ``PropertyName`` 、 ``MethodName`` 和 ``SignalName`` 中使用公开的 "
"``StringName`` ，以避免额外的 ``StringName`` 分配以及担心蛇形（snake_case）命"
"名。"

msgid ""
"As of Godot 4.0, exporting .NET projects is supported for desktop platforms "
"(Linux, Windows and macOS). Other platforms will gain support in future 4.x "
"releases."
msgstr ""
"截止到 Godot 4.0 版本，支持将 .NET 项目导出到桌面平台（Linux、Windows和"
"macOS）。其他平台将在未来的 4.x 版本中获得支持。"

msgid "Common pitfalls"
msgstr "常见陷阱"

msgid ""
"You might encounter the following error when trying to modify some values in "
"Godot objects, e.g. when trying to change the X coordinate of a ``Node2D``:"
msgstr ""
"你可能会在尝试修改 Godot 对象中的一些值时遇到以下错误，例如在尝试改变一个 "
"``Node2D`` 的 X 坐标时："

msgid ""
"This is perfectly normal. Structs (in this example, a ``Vector2``) in C# are "
"copied on assignment, meaning that when you retrieve such an object from a "
"property or an indexer, you get a copy of it, not the object itself. "
"Modifying said copy without reassigning it afterwards won't achieve anything."
msgstr ""
"这是完全正常的。C# 中的结构体（在这个例子中，是一个 ``Vector2`` ）在赋值时会"
"被复制，意味着当你从一个属性或索引器中获取这样一个对象时，你得到的是它的一个"
"副本，而不是它本身。修改这个副本而不重新赋值是没有任何效果的。"

msgid ""
"The workaround is simple: retrieve the entire struct, modify the value you "
"want to modify, and reassign the property."
msgstr ""
"解决方法很简单：获取整个结构体，修改你想要修改的值，然后重新赋值给属性。"

msgid ""
"Since C# 10, it is also possible to use `with expressions <https://learn."
"microsoft.com/en-us/dotnet/csharp/language-reference/operators/with-"
"expression>`_ on structs, allowing you to do the same thing in a single line."
msgstr ""
"自 C# 10 起，还可以在结构体上使用 `with 表达式 <https://learn.microsoft.com/"
"zh-cn/dotnet/csharp/language-reference/operators/with-expression>`_ ，让你只"
"需一行实现相同的效果。"

msgid ""
"You can read more about this error on the `C# language reference <https://"
"learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/"
"cs1612>`_."
msgstr ""
"你可以在 `C# 语言参考 <https://learn.microsoft.com/zh-cn/dotnet/csharp/"
"language-reference/compiler-messages/cs1612>`_ 中了解更多关于这个错误的信息。"

msgid "Performance of C# in Godot"
msgstr "C# 在 Godot 中的性能"

msgid ""
"According to some preliminary `benchmarks <https://github.com/cart/godot3-"
"bunnymark>`_, the performance of C# in Godot — while generally in the same "
"order of magnitude — is roughly **~4×** that of GDScript in some naive "
"cases. C++ is still a little faster; the specifics are going to vary "
"according to your use case. GDScript is likely fast enough for most general "
"scripting workloads."
msgstr ""
"根据一些初步的 `基准测试 <https://github.com/cart/godot3-bunnymark>`_ ，C# "
"在 Godot 中的性能，虽然总体在相同数量级，但在某些简单情况下大约是 GDScript "
"的 **~4×** 。C++ 仍然稍微快一些；具体情况将根据你的使用情况而变化。对于大多数"
"常规脚本工作负载而言，GDScript 可能足够快。"

msgid ""
"Most properties of Godot C# objects that are based on ``GodotObject`` (e.g. "
"any ``Node`` like ``Control`` or ``Node3D`` like ``Camera3D``) require "
"native (interop) calls as they talk to Godot's C++ core. Consider assigning "
"values of such properties into a local variable if you need to modify or "
"read them multiple times at a single code location:"
msgstr ""
"大多数基于 ``GodotObject`` 的 Godot C# 对象（例如任何像 ``Control`` 这样的 "
"``Node`` 或 ``Camera3D`` 这样的 ``Node3D`` ）的属性，需要使用本地（互操作）调"
"用，因为它们与 Godot 的 C++ 核心进行通信。如果你需要在单个代码位置多次修改或"
"读取这些属性的值，请考虑将其分配给本地变量："

msgid ""
"Passing raw arrays (such as ``byte[]``) or ``string`` to Godot's C# API "
"requires marshalling which is comparatively pricey."
msgstr ""
"将原始数组（例如 ``byte[]`` ）或 ``string`` 传递给 Godot 的 C# API 需要进行数"
"据封装，这在性能上相对较昂贵。"

msgid ""
"The implicit conversion from ``string`` to ``NodePath`` or ``StringName`` "
"incur both the native interop and marshalling costs as the ``string`` has to "
"be marshalled and passed to the respective native constructor."
msgstr ""
"将 ``string`` 隐式转换为 ``NodePath`` 或 ``StringName`` 会产生本地互操作和数"
"据封装的成本，因为必须将 ``string`` 封装并传递到相应的本地构造函数。"

msgid "Using NuGet packages in Godot"
msgstr "在 Godot 中使用 NuGet 包"

msgid ""
"`NuGet <https://www.nuget.org/>`_ packages can be installed and used with "
"Godot, as with any C# project. Many IDEs are able to add packages directly. "
"They can also be added manually by adding the package reference in the ``."
"csproj`` file located in the project root:"
msgstr ""
"`NuGet <https://www.nuget.org/>`_ 包可以与 Godot 一起安装和使用，就像任何 C# "
"项目一样。许多 IDE 都可以直接添加软件包，也可以通过在项目根目录下的 ``."
"csproj`` 文件中添加软件包引用来手动添加它们："

msgid ""
"As of Godot 3.2.3, Godot automatically downloads and sets up newly added "
"NuGet packages the next time it builds the project."
msgstr ""
"从 Godot 3.2.3 开始，Godot 在下次构建项目时自动下载并设置新添加的 NuGet 包。"

msgid "Profiling your C# code"
msgstr "分析 C# 代码"

msgid ""
"The following tools may be used for performance and memory profiling of your "
"managed code:"
msgstr "以下工具可用于对托管代码进行性能和内存分析："

msgid "JetBrains Rider with dotTrace/dotMemory plugin."
msgstr "JetBrains Rider 配合 dotTrace/dotMemory 插件。"

msgid "Standalone JetBrains dotTrace/dotMemory."
msgstr "独立版的 JetBrains dotTrace/dotMemory。"

msgid "Visual Studio."
msgstr "Visual Studio。"

msgid ""
"Profiling managed and unmanaged code at once is possible with both JetBrains "
"tools and Visual Studio, but limited to Windows."
msgstr ""
"使用 JetBrains tools 和 Visual Studio 可以同时对托管和非托管代码进行分析，但"
"仅限于 Windows。"

msgid "Translation status"
msgstr "翻译状态"
