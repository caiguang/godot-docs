# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDExtension C++ example"
msgstr "GDExtension C++ 示例"

msgid "Introduction"
msgstr "前言"

#, fuzzy
msgid ""
"The C++ bindings for GDExtension are built on top of the C GDExtension API "
"and provide a nicer way to \"extend\" nodes and other built-in classes in "
"Godot using C++. This new system allows the extension of Godot to nearly the "
"same level as statically linked C++ modules."
msgstr ""
"GDNative的C++绑定构建在NativeScript GDNative API之上, 并提供了一种使用C++在"
"Godot中 \"扩展\" 节点的更好方法. 这相当于在GDScript中编写脚本, 而是在C++中编"
"写脚本."

#, fuzzy
msgid ""
"You can download the included example in the test folder of the godot-cpp "
"repository `on GitHub <https://github.com/godotengine/godot-cpp>`__."
msgstr ""
"`godot-cpp 仓库 <https://github.com/godotengine/godot-cpp>`__\\ 的副本。"

msgid "Setting up the project"
msgstr "设置项目"

msgid "There are a few prerequisites you'll need:"
msgstr "你需要一些先决条件："

msgid "a Godot 4 executable,"
msgstr "Godot 4 可执行文件，"

msgid "a C++ compiler,"
msgstr "C++ 编译器，"

msgid "SCons as a build tool,"
msgstr "SCons 作为构建工具，"

msgid ""
"a copy of the `godot-cpp repository <https://github.com/godotengine/godot-"
"cpp>`__."
msgstr ""
"`godot-cpp 仓库 <https://github.com/godotengine/godot-cpp>`__\\ 的副本。"

msgid ""
"See also :ref:`Compiling <toc-devel-compiling>` as the build tools are "
"identical to the ones you need to compile Godot from source."
msgstr ""
"另请参阅\\ :ref:`《编译》 <toc-devel-compiling>`\\ ，因为构建工具与从源代码编"
"译 Godot 所需的构建工具相同。"

#, fuzzy
msgid ""
"You can download the `godot-cpp repository <https://github.com/godotengine/"
"godot-cpp>`__ from GitHub or let Git do the work for you. Note that this "
"repository has different branches for different versions of Godot. "
"GDExtensions will not work in older versions of Godot (only Godot 4 and up) "
"and vice versa, so make sure you download the correct branch."
msgstr ""
"您可以从 GitHub 下载这些仓库，或让 Git 为您完成这些工作。请注意，这些仓库现在"
"对于不同版本的 Godot 具有不同的分支。为早期版本的 Godot 编写的 GDNative 模块"
"可以在较新版本中运行（除了 3.0 和 3.1 之间的 ARVR 接口的一次重大更改），但反"
"之则不行，因此请确保下载正确的分支。还要注意，您用于生成 ``api.json`` 的 "
"Godot 版本将成为最低版本。"

#, fuzzy
msgid ""
"To use `GDExtension <https://godotengine.org/article/introducing-gd-"
"extensions>`__ you need to use the godot-cpp branch that matches the version "
"of Godot that you are targeting. For example, if you're targeting Godot 4.1, "
"use the ``4.1`` branch, which is what is shown through out this tutorial."
msgstr ""
"`GDExtension <https://godotengine.org/article/introducing-gd-extensions>`__ "
"已经被合并到 godot-cpp 的 ``master`` 分支中，但它只与即将推出的 Godot 4.0 兼"
"容。因此，您需要使用 GDNative ，需使用 godot-cpp 的 ``3.x`` 分支，并按照此示"
"例进行操作。"

msgid ""
"The ``master`` branch is the development branch which is updated regularly "
"to work with Godot's ``master`` branch."
msgstr ""

msgid ""
"Our long-term goal is that GDExtensions targeting an earlier version of "
"Godot will work in later minor versions, but not vice-versa. For example, a "
"GDExtension targeting Godot 4.2 should work just fine in Godot 4.3, but one "
"targeting Godot 4.3 won't work in Godot 4.2."
msgstr ""
"我们的长期目标是，面向早先版本的 GDExtension 在后续的小版本中依然能够运作，但"
"反之则不然。例如，一个面向 Godot 4.2 的 GDExtension 应当在 Godot 4.3 中正常运"
"作，但面向 Godot 4.3 的则不能在 Godot 4.2 中运作。"

msgid ""
"However, GDExtension is currently *experimental*, which means that we may "
"break compatibility in order to fix major bugs or include critical features. "
"For example, GDExtensions created for Godot 4.0 aren't compatible with Godot "
"4.1 (see :ref:`updating_your_gdextension_for_godot_4_1`)."
msgstr ""
"不过，GDExtension 目前仍是 *实验性的*，这就意味着我们为了修复严重的 bug 或引"
"入重大的特性，可能会牺牲兼容性。例如，为 Godot 4.0 创建的 GDExtension 与 "
"Godot 4.1 并不兼容（参见 :ref:`updating_your_gdextension_for_godot_4_1` ）。"

#, fuzzy
msgid ""
"If you are versioning your project using Git, it is recommended to add it as "
"a Git submodule:"
msgstr "如果您使用 Git 对项目进行版本控制，最好将它们添加为 Git 子模块："

msgid "Alternatively, you can also clone it to the project folder:"
msgstr ""

#, fuzzy
msgid ""
"If you decide to download the repository or clone it into your folder, make "
"sure to keep the folder layout the same as we've setup here. Much of the "
"code we'll be showcasing here assumes the project has this layout."
msgstr ""
"如果您决定只下载仓库或将它们克隆到项目文件夹中，请确保文件夹布局与此处描述的"
"相同，因为我们将在此处展示的代码假定项目遵循此布局。"

msgid ""
"If you cloned the example from the link specified in the introduction, the "
"submodules are not automatically initialized. You will need to execute the "
"following commands:"
msgstr ""
"如果从介绍中指定的链接克隆示例, 子模块不会自动初始化. 你需要执行以下命令:"

#, fuzzy
msgid "This will initialize the repository in your project folder."
msgstr "这会将这两个仓库克隆到您的项目文件夹中。"

msgid "Building the C++ bindings"
msgstr "构建 C++ 绑定"

msgid ""
"Now that we've downloaded our prerequisites, it is time to build the C++ "
"bindings."
msgstr "现在我们已经下载了我们的先决条件, 现在是构建C++绑定的时候了."

msgid ""
"The repository contains a copy of the metadata for the current Godot "
"release, but if you need to build these bindings for a newer version of "
"Godot, simply call the Godot executable:"
msgstr ""
"仓库包含当前 Godot 版本的元数据副本，但如果你需要为较新版本的 Godot 构建这些"
"绑定，只需调用 Godot 可执行文件："

#, fuzzy
msgid ""
"The resulting ``extension_api.json`` file will be created in the "
"executable's directory. Copy it to the project folder and add "
"``custom_api_file=<PATH_TO_FILE>`` to the scons command below."
msgstr ""
"将生成的 ``api.json`` 文件放在项目文件夹中, 并将 ``use_custom_api_file = yes "
"custom_api_file = .. / api.json`` 添加到下面的scons命令中."

#, fuzzy
msgid ""
"To generate and compile the bindings, use this command (replacing "
"``<platform>`` with ``windows``, ``linux`` or ``macos`` depending on your "
"OS):"
msgstr ""
"要生成和编译绑定, 使用这个命令(根据你的操作系统, 用 ``windows`` , ``linux`` "
"或 ``osx`` 代替 ``<platform>`` ):"

msgid ""
"The build process automatically detects the number of CPU threads to use for "
"parallel builds. To specify a number of CPU threads to use, add ``-jN`` at "
"the end of the SCons command line where ``N`` is the number of CPU threads "
"to use."
msgstr ""

msgid ""
"This step will take a while. When it is completed, you should have static "
"libraries that can be compiled into your project stored in ``godot-cpp/bin/"
"``."
msgstr ""
"这一步将需要一段时间. 完成后, 你应该有一个静态库, 可以编译到你的项目中, 存储"
"在 ``godot-cpp / bin /`` 中."

msgid "You may need to add ``bits=64`` to the command on Windows or Linux."
msgstr "你可能需要在 Windows 或 Linux 的命令行中添加 ``bits=64``\\ 。"

msgid "Creating a simple plugin"
msgstr "创建一个简单的插件"

msgid ""
"Now it's time to build an actual plugin. We'll start by creating an empty "
"Godot project in which we'll place a few files."
msgstr ""
"现在是构建实际插件的时候了. 我们首先创建一个空的Godot项目, 我们将在其中放置一"
"些文件."

#, fuzzy
msgid ""
"Open Godot and create a new project. For this example, we will place it in a "
"folder called ``demo`` inside our GDExtension's folder structure."
msgstr ""
"打开Godot并创建一个新项目. 对于这个示例, 我们将它放在我们的GDNative模块的文件"
"夹结构中名为 ``demo`` 的文件夹中."

msgid ""
"In our demo project, we'll create a scene containing a Node called \"Main\" "
"and we'll save it as ``main.tscn``. We'll come back to that later."
msgstr ""
"在我们的演示项目中, 我们将创建一个包含名为 \"Main\" 的节点的场景, 我们将其保"
"存为 ``main.tscn`` . 我们稍后再回过头来看看."

#, fuzzy
msgid ""
"Back in the top-level GDExtension module folder, we're also going to create "
"a subfolder called ``src`` in which we'll place our source files."
msgstr ""
"回到顶级GDNative模块文件夹, 我们还将创建一个名为 ``src`` 的子文件夹, 我们将在"
"其中放置源文件."

#, fuzzy
msgid ""
"You should now have ``demo``, ``godot-cpp``, and ``src`` directories in your "
"GDExtension module."
msgstr ""
"您现在应该在您的GDNative模块中有 ``demo`` , ``godot-cpp``, ``godot_headers`` "
"和 ``src`` 目录."

#, fuzzy
msgid "Your folder structure should now look like this:"
msgstr "您的场景应如下所示:"

#, fuzzy
msgid ""
"In the ``src`` folder, we'll start with creating our header file for the "
"GDExtension node we'll be creating. We will name it ``gdexample.h``:"
msgstr ""
"在 ``src`` 文件夹中, 我们将首先为我们将要创建的GDNative节点创建头文件. 我们将"
"它命名为 ``gdexample.h`` :"

#, fuzzy
msgid ""
"There are a few things of note to the above. We include ``sprite2d.hpp`` "
"which contains bindings to the Sprite2D class. We'll be extending this class "
"in our module."
msgstr ""
"以上有一些注意事项. 我们包括 ``Godot.hpp`` , 其中包含我们所有的基本定义. 之"
"后, 我们包含 ``Sprite.hpp`` , 它包含对Sprite类的绑定. 我们将在我们的模块中扩"
"展这个类."

#, fuzzy
msgid ""
"We're using the namespace ``godot``, since everything in GDExtension is "
"defined within this namespace."
msgstr ""
"我们使用命名空间 ``godot`` , 因为GDNative中的所有内容都在此命名空间中定义."

#, fuzzy
msgid ""
"Then we have our class definition, which inherits from our Sprite2D through "
"a container class. We'll see a few side effects of this later on. The "
"``GDCLASS`` macro sets up a few internal things for us."
msgstr ""
"然后我们有了我们的类定义, 它通过容器类从我们的Sprite继承. 我们稍后会看到一些"
"副作用. 这也是NativeScript 1.1中将要改进的主要部分. ``GODOT_CLASS`` 宏为我们"
"设置了一些内部事物."

msgid "After that, we declare a single member variable called ``time_passed``."
msgstr "之后, 我们声明一个名为 ``time_passed`` 的成员变量."

#, fuzzy
msgid ""
"In the next block we're defining our methods, we have our constructor and "
"destructor defined, but there are two other functions that will likely look "
"familiar to some, and one new method."
msgstr ""
"在下一个块中我们定义了我们的方法, 我们显然已经定义了构造函数和析构函数, 但是"
"还有其他两个函数可能看起来很熟悉."

#, fuzzy
msgid ""
"The first is ``_bind_methods``, which is a static function that Godot will "
"call to find out which methods can be called and which properties it "
"exposes. The second is our ``_process`` function, which will work exactly "
"the same as the ``_process`` function you're used to in GDScript."
msgstr ""
"第一个是 ``_register_methods`` , 这是一个静态函数,Godot将调用它来找出可以在我"
"们的NativeScript上调用哪些方法以及它暴露的属性. 第二个是我们的 ``_process`` "
"函数, 它与您在GDScript中习惯的 ``_process`` 函数完全相同. 第三个是我们的 "
"``_init`` 函数, 它是在Godot正确设置我们的对象之后调用的. 即使您没有在其中放置"
"任何代码, 它也必须存在."

msgid "Let's implement our functions by creating our ``gdexample.cpp`` file:"
msgstr "所以, 让我们通过创建 ``gdexample.cpp`` 文件来实现我们的函数:"

msgid ""
"This one should be straightforward. We're implementing each method of our "
"class that we defined in our header file."
msgstr ""

msgid ""
"Note our ``_process`` function, which keeps track of how much time has "
"passed and calculates a new position for our sprite using a sine and cosine "
"function."
msgstr ""

#, fuzzy
msgid ""
"There is one more C++ file we need; we'll name it ``register_types.cpp``. "
"Our GDExtension plugin can contain multiple classes, each with their own "
"header and source file like we've implemented ``GDExample`` up above. What "
"we need now is a small bit of code that tells Godot about all the classes in "
"our GDExtension plugin."
msgstr ""
"还有一个我们需要的C++文件; 我们将它命名为 ``gdlibrary.cpp`` . 我们的GDNative"
"插件可以包含多个NativeScripts, 每个都有自己的头文件和源文件, 就像我们在上面实"
"现了 ``GDExample`` 一样. 我们现在需要的是一小段代码, 告诉Godot我们的GDNative"
"插件中的所有NativeScripts."

#, fuzzy
msgid ""
"The ``initialize_example_module`` and ``uninitialize_example_module`` "
"functions get called respectively when Godot loads our plugin and when it "
"unloads it. All we're doing here is parse through the functions in our "
"bindings module to initialize them, but you might have to set up more things "
"depending on your needs. We call the function ``register_class`` for each of "
"our classes in our library."
msgstr ""
"当Godot加载我们的插件并卸载它时, 分别调用 ``godot_gdnative_init`` 和 "
"``godot_gdnative_terminate`` 函数. 我们在这里所做的只是解析我们的绑定模块中的"
"函数来初始化它们, 但您可能需要根据需要设置更多内容."

#, fuzzy
msgid ""
"The important function is the third function called "
"``example_library_init``. We first call a function in our bindings library "
"that creates an initialization object. This object registers the "
"initialization and termination functions of the GDExtension. Furthermore, it "
"sets the level of initialization (core, servers, scene, editor, level)."
msgstr ""
"重要的功能是第三个函数叫做 ``godot_nativescript_init`` . 我们首先在我们的绑定"
"库中调用一个函数来执行它常用的东西. 之后, 我们为库中的每个类调用函数 "
"``register_class`` ."

msgid ""
"At last, we need the header file for the ``register_types.cpp`` named "
"``register_types.h``."
msgstr ""

msgid "Compiling the plugin"
msgstr "编译插件"

msgid ""
"We cannot easily write by hand a ``SConstruct`` file that SCons would use "
"for building. For the purpose of this example, just use :download:`this "
"hardcoded SConstruct file <files/cpp_example/SConstruct>` we've prepared. "
"We'll cover a more customizable, detailed example on how to use these build "
"files in a subsequent tutorial."
msgstr ""
"手工编写 SCons 用于构建的 ``SConstruct`` 文件并不容易。出于这个示例的目的，只"
"需使用我们已经准备好的\\ :download:`这个硬编码的 SConstruct 文件 <files/"
"cpp_example/SConstruct>`\\ 。我们将在后续教程中介绍如何使用这些构建文件的更可"
"定制的详细示例。"

#, fuzzy
msgid ""
"This ``SConstruct`` file was written to be used with the latest ``godot-"
"cpp`` master, you may need to make small changes using it with older "
"versions or refer to the ``SConstruct`` file in the Godot 4.0 documentation."
msgstr ""
"这个 ``SConstruct`` 文件被编写为与最新的godot-cpp master分支一起使用, 您可能"
"需要使用旧版本进行小的更改, 或者参考Godot 3.0文档中的 ``SConstruct`` 文件."

#, fuzzy
msgid ""
"Once you've downloaded the ``SConstruct`` file, place it in your GDExtension "
"folder structure alongside ``godot-cpp``, ``src`` and ``demo``, then run:"
msgstr ""
"一旦你下载了 ``SConstruct`` 文件，把它放在你的GDNative模块文件夹中，除了 "
"``godot-cpp`` 、 ``godot-headers`` 和 ``demo`` 之外，然后运行:"

msgid "You should now be able to find the module in ``demo/bin/<platform>``."
msgstr "你现在应该能够在 ``demo / bin / <platform>`` 中找到该模块."

#, fuzzy
msgid ""
"Here, we've compiled both godot-cpp and our gdexample library as debug "
"builds. For optimized builds, you should compile them using the "
"``target=template_release`` switch."
msgstr ""
"在这里, 我们编译了godot-cpp和我们的gdexample库作为调试版本. 对于优化的构建, "
"您应该使用 ``target = release`` 开关编译它们."

#, fuzzy
msgid "Using the GDExtension module"
msgstr "使用 GDNative 模块"

#, fuzzy
msgid ""
"Before we jump back into Godot, we need to create one more file in ``demo/"
"bin/``."
msgstr ""
"在我们跳回Godot之前, 我们需要在 ``demo / bin /`` 中再创建两个文件. 两者都可以"
"使用Godot编辑器创建, 但直接创建它们可能会更快."

#, fuzzy
msgid ""
"This file lets Godot know what dynamic libraries should be loaded for each "
"platform and the entry function for the module. It is called ``gdexample."
"gdextension``."
msgstr ""
"第一个是一个文件, 让Godot知道应该为每个平台加载什么动态库, 并称为 "
"``gdexample.gdnlib`` ."

msgid ""
"This file contains a ``configuration`` section that controls the entry "
"function of the module. You should also set the minimum compatible Godot "
"version with ``compatability_minimum``, which prevents older version of "
"Godot from trying to load your extension."
msgstr ""

#, fuzzy
msgid ""
"The ``libraries`` section is the important bit: it tells Godot the location "
"of the dynamic library in the project's filesystem for each supported "
"platform. It will also result in *just* that file being exported when you "
"export the project, which means the data pack won't contain libraries that "
"are incompatible with the target platform."
msgstr ""
"``entry`` 部分是重要的一点: 它告诉Godot每个支持平台的项目文件系统中动态库的位"
"置. 导出项目时, 这也将导致 *仅* 导出该文件, 这意味着数据包不会包含与目标平台"
"不兼容的库."

#, fuzzy
msgid ""
"Finally, the ``dependencies`` section allows you to name additional dynamic "
"libraries that should be included as well. This is important when your "
"GDExtension plugin implements someone else's library and requires you to "
"supply a third-party dynamic library with your project."
msgstr ""
"最后, ``dependencies`` 部分允许您命名应包含的其他动态库. 当您的GDNative插件实"
"现其他人的库并要求您为项目提供第三方动态库时, 这一点非常重要."

msgid "Here is another overview to check the correct file structure:"
msgstr ""

#, fuzzy
msgid ""
"Time to jump back into Godot. We load up the main scene we created way back "
"in the beginning and now add a newly available GDExample node to the scene:"
msgstr ""
"是时候跳回Godot了. 我们在开始时加载我们创建的主场景, 现在为场景添加一个"
"Sprite:"

#, fuzzy
msgid ""
"We're going to assign the Godot logo to this node as our texture, disable "
"the ``centered`` property:"
msgstr ""
"我们要将Godot徽标指定给这个精灵作为我们的纹理, 禁用 ``centered`` 属性并将我们"
"的 ``gdexample.gdns`` 文件拖到精灵的 ``script`` 属性中:"

msgid "We're finally ready to run the project:"
msgstr "我们终于准备好运行这个项目了:"

msgid "Custom editor icon"
msgstr "自定义编辑器图标"

msgid ""
"By default, Godot uses the node icon in the scene dock for GDExtension "
"nodes. The custom icon can be added via the ``gdextension`` file. The node's "
"icon is set by reference to its name and resource path of an SVG file."
msgstr ""

msgid "For example:"
msgstr "例如："

msgid ""
"The path should point to a 16 by 16 pixel SVG image. Read the guide for :ref:"
"`creating icons <doc_editor_icons>` for more information."
msgstr ""

msgid "Adding properties"
msgstr "添加属性"

#, fuzzy
msgid ""
"GDScript allows you to add properties to your script using the ``export`` "
"keyword. In GDExtension you have to register the properties with a getter "
"and setter function or directly implement the ``_get_property_list``, "
"``_get`` and ``_set`` methods of an object (but that goes far beyond the "
"scope of this tutorial)."
msgstr ""
"还有第三种选择, 就像在GDScript中一样, 您可以直接实现一个对象的 "
"``_get_property_list`` , ``_get`` 和 ``_set`` 方法, 但这远远超出了本教程的范"
"围."

#, fuzzy
msgid ""
"Lets add a property that allows us to control the amplitude of our wave."
msgstr ""
"我们将从直接绑定开始检查两者. 让我们添加一个允许我们控制波浪幅度的属性."

#, fuzzy
msgid ""
"In our ``gdexample.h`` file we need to add a member variable and getter and "
"setter functions:"
msgstr "在我们的 ``gdexample.h`` 文件中, 我们只需添加一个成员变量, 如下所示:"

msgid ""
"In our ``gdexample.cpp`` file we need to make a number of changes, we will "
"only show the methods we end up changing, don't remove the lines we're "
"omitting:"
msgstr ""
"在我们的 ``gdexample.cpp`` 文件中, 我们需要进行一些更改, 我们只会显示我们最终"
"更改的方法, 不要删除我们省略的行:"

msgid ""
"Once you compile the module with these changes in place, you will see that a "
"property has been added to our interface. You can now change this property "
"and when you run your project, you will see that our Godot icon travels "
"along a larger figure."
msgstr ""
"使用这些更改编译模块后，就会看到界面上加入了一个属性。你现在可以更改此属性，"
"当运行项目时，你将看到我们的 Godot 图标沿着更大的数字移动。"

msgid ""
"Let's do the same but for the speed of our animation and use a setter and "
"getter function. Our ``gdexample.h`` header file again only needs a few more "
"lines of code:"
msgstr ""
"让我们做同样的事情但是为了我们动画的速度并使用 setter 和 getter 函数。我们的 "
"``gdexample.h`` 头文件再次只需要几行代码："

msgid ""
"This requires a few more changes to our ``gdexample.cpp`` file, again we're "
"only showing the methods that have changed so don't remove anything we're "
"omitting:"
msgstr ""
"这需要对我们的 ``gdexample.cpp`` 文件进行一些更改, 同样我们只显示已更改的方"
"法, 所以不要删除我们忽略的任何内容:"

#, fuzzy
msgid ""
"Now when the project is compiled, we'll see another property called speed. "
"Changing its value will make the animation go faster or slower. Furthermore, "
"we added a property range which describes in which range the value can be. "
"The first two arguments are the minimum and maximum value and the third is "
"the step size."
msgstr ""
"编译完项目后，我们就会看到另一个名为 speed 的属性。更改其值将使动画更快或更"
"慢。"

#, fuzzy
msgid ""
"For simplicity, we've only used the hint_range of the property method. There "
"are a lot more options to choose from. These can be used to further "
"configure how properties are displayed and set on the Godot side."
msgstr ""
"为简单起见，我们在 register_property<class, type> 方法调用中省略了可选的参"
"数。这些参数有 ``rpc_mode``\\ 、\\ ``usage``\\ 、\\ ``hint``\\ 、\\ "
"``hint_string``\\ 。这些可用于进一步配置属性在 Godot 方面的显示和设置方式。"

msgid "Signals"
msgstr "信号"

#, fuzzy
msgid ""
"Last but not least, signals fully work in GDExtension as well. Having your "
"extension react to a signal given out by another object requires you to call "
"``connect`` on that object. We can't think of a good example for our "
"wobbling Godot icon, we would need to showcase a far more complete example."
msgstr ""
"最后但同样重要的是, 信号也完全适用于GDNative. 让模块对另一个对象发出的信号作"
"出反应, 需要在该对象上调用 ``connect`` . 我们想不出一个摆动Godot图标的好示"
"例, 我们需要展示一个更完整的示例."

msgid "This is the required syntax:"
msgstr "这是必需的语法："

msgid ""
"To connect our signal ``the_signal`` from some other node with our method "
"``my_method``, we need to provide the ``connect`` method with the name of "
"the signal and a ``Callable``. The ``Callable`` holds information about an "
"object on which a method can be called. In our case, it associates our "
"current object instance ``this`` with the method ``my_method`` of the "
"object. Then the ``connect`` method will add this to the observers of "
"``the_signal``. Whenever ``the_signal`` is now emitted, Godot knows which "
"method of which object it needs to call."
msgstr ""

#, fuzzy
msgid ""
"Note that you can only call ``my_method`` if you've previously registered it "
"in your ``_bind_methods`` method. Otherwise Godot will not know about the "
"existence of ``my_method``."
msgstr ""
"请注意, 如果您之前在 ``_register_methods`` 方法中注册了它, 则只能调用 "
"``my_method`` ."

msgid ""
"To learn more about ``Callable``, check out the class reference here: :ref:"
"`Callable <class_Callable>`."
msgstr ""

msgid ""
"Having your object sending out signals is more common. For our wobbling "
"Godot icon, we'll do something silly just to show how it works. We're going "
"to emit a signal every time a second has passed and pass the new location "
"along."
msgstr ""
"让对象发出信号更为常见。对于我们摇摆不定的 Godot 图标，我们会做一些愚蠢的事情"
"来展示它是如何工作的。每过一秒钟我们就会发出一个信号并传递新的位置。"

msgid ""
"In our ``gdexample.h`` header file, we need to define a new member "
"``time_emit``:"
msgstr ""
"在我们的 ``gdexample.h`` 头文件中，我们需要定义一个新成员 ``time_emit``\\ ："

msgid ""
"This time, the changes in ``gdexample.cpp`` are more elaborate. First, "
"you'll need to set ``time_emit = 0.0;`` in either our ``_init`` method or in "
"our constructor. We'll look at the other 2 needed changes one by one."
msgstr ""
"``gdexample.cpp`` 这次的修改有点复杂。首先，你需要在我们的 ``_init`` 方法或构"
"造函数中设置 ``time_emit = 0.0``\\ 。另外两个修改我们将逐一查看。"

#, fuzzy
msgid ""
"In our ``_bind_methods`` method, we need to declare our signal. This is done "
"as follows:"
msgstr ""
"在我们的 ``_register_methods`` 方法中，我们需要声明我们的信号。按如下方式实"
"现："

msgid ""
"Here, our ``ADD_SIGNAL`` macro can be a single call with a ``MethodInfo`` "
"argument. ``MethodInfo``'s first parameter will be the signal's name, and "
"its remaining parameters are ``PropertyInfo`` types which describe the "
"essentials of each of the method's parameters. ``PropertyInfo`` parameters "
"are defined with the data type of the parameter, and then the name that the "
"parameter will have by default."
msgstr ""

msgid ""
"So here, we add a signal, with a ``MethodInfo`` which names the signal "
"\"position_changed\". The ``PropertyInfo`` parameters describe two essential "
"arguments, one of type ``Object``, the other of type ``Vector2``, "
"respectively named \"node\" and \"new_pos\"."
msgstr ""

msgid "Next, we'll need to change our ``_process`` method:"
msgstr "接下来我们需要修改我们的 ``_process`` 方法："

msgid ""
"After a second has passed, we emit our signal and reset our counter. We can "
"add our parameter values directly to ``emit_signal``."
msgstr ""
"经过一秒钟后， 我们发出信号并重置我们的计数器。我们可以将参数值直接添加给 "
"``emit_signal``\\ 。"

#, fuzzy
msgid ""
"Once the GDExtension library is compiled, we can go into Godot and select "
"our sprite node. In the **Node** dock, we can find our new signal and link "
"it up by pressing the **Connect** button or double-clicking the signal. "
"We've added a script on our main node and implemented our signal like this:"
msgstr ""
"完成 GDNative 库的编译后，我们可以进入 Godot 并选择我们的精灵节点。在\\ **节"
"点**\\ 面板上，我们可以找到我们新建的信号，并通过点按\\ **连接**\\ 按钮或双击"
"信号将其链接起来。我们在主节点上添加了一个脚本并实现了这样的信号："

msgid "Every second, we output our position to the console."
msgstr "每一秒，我们都会将我们的位置输出到控制台。"

msgid "Next steps"
msgstr "下一步"

#, fuzzy
msgid ""
"We hope the above example showed you the basics. You can build upon this "
"example to create full-fledged scripts to control nodes in Godot using C++."
msgstr ""
"以上只是一个简单的示例, 但我们希望它向您展示基础知识. 您可以在此示例的基础上"
"构建完整的脚本, 以使用C++控制Godot中的节点."

msgid "Translation status"
msgstr "翻译状态"
