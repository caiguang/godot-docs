# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript style guide"
msgstr "GDScript 编写风格指南"

msgid ""
"This style guide lists conventions to write elegant GDScript. The goal is to "
"encourage writing clean, readable code and promote consistency across "
"projects, discussions, and tutorials. Hopefully, this will also support the "
"development of auto-formatting tools."
msgstr ""
"本编写风格指南列出了几条规定，能够让用户将 GDScript 代码编写得更加优雅。本指"
"南旨在让用户编写更为整洁、可读的代码，促进项目、讨论和教程之间的一致性。本教"
"程也希望能够因此鼓励开发者们能够开发出来代码自动格式化工具。"

msgid ""
"Since GDScript is close to Python, this guide is inspired by Python's `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ programming style guide."
msgstr ""
"由于 GDScript 与 Python 非常接近，因此本指南的灵感来自 Python 的 `PEP 8 "
"<https://www.python.org/dev/peps/pep-0008/>`__ 编程风格指南。"

msgid ""
"Style guides aren't meant as hard rulebooks. At times, you may not be able "
"to apply some of the guidelines below. When that happens, use your best "
"judgment, and ask fellow developers for insights."
msgstr ""
"风格指南并不是硬性的规则教条，有些情况下，你可能无法施行下面的一些规范。如果"
"这种情况发生在你身上，最好自行进行选择，并询问其他开发人员的见解。"

msgid ""
"In general, keeping your code consistent in your projects and within your "
"team is more important than following this guide to a tee."
msgstr ""
"一般来说，在项目和团队中保持代码风格的一致性，比一板一眼地遵循本指南更为重"
"要。"

msgid ""
"Godot's built-in script editor uses a lot of these conventions by default. "
"Let it help you."
msgstr ""
"Godot的内置脚本编辑器默认使用了很多这些规范，那么就让这内置脚本编辑器来帮助你"
"吧。"

msgid "Here is a complete class example based on these guidelines:"
msgstr "下面是基于这些规范的完整的类的示例："

msgid "Formatting"
msgstr "格式"

msgid "Encoding and special characters"
msgstr "编码与特殊字符"

msgid ""
"Use line feed (**LF**) characters to break lines, not CRLF or CR. *(editor "
"default)*"
msgstr "使用换行符（\\ **LF**\\ ）换行，而非 CRLF 或 CR。\\ *（编辑器默认）*"

msgid "Use one line feed character at the end of each file. *(editor default)*"
msgstr "在每个文件的末尾使用一个换行符。\\ *（编辑器默认）*"

msgid ""
"Use **UTF-8** encoding without a `byte order mark <https://en.wikipedia.org/"
"wiki/Byte_order_mark>`_. *(editor default)*"
msgstr ""
"使用不带\\ `字节顺序标记 <https://zh.wikipedia.org/zh-cn/"
"%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F>`_\\ 的 "
"**UTF-8** 编码。\\ *（编辑器默认）*"

msgid "Use **Tabs** instead of spaces for indentation. *(editor default)*"
msgstr "使用\\ **制表符**\\ 代替空格进行缩进。\\ *（编辑器默认）*"

msgid "Indentation"
msgstr "缩进"

msgid "Each indent level should be one greater than the block containing it."
msgstr "每个缩进的缩进级别必须大于包含该缩进的代码块的缩进级别。"

msgid "**Good**:"
msgstr "**规范示例** :"

msgid "**Bad**:"
msgstr "**不规范示例** :"

msgid ""
"Use 2 indent levels to distinguish continuation lines from regular code "
"blocks."
msgstr "使用2个缩进级别来区分续行代码块与常规代码块。"

msgid ""
"Exceptions to this rule are arrays, dictionaries, and enums. Use a single "
"indentation level to distinguish continuation lines:"
msgstr "此规则的例外：数组、字典和枚举。使用单个缩进级别来区分续行代码块："

msgid "Trailing comma"
msgstr "行尾逗号"

msgid ""
"Use a trailing comma on the last line in arrays, dictionaries, and enums. "
"This results in easier refactoring and better diffs in version control as "
"the last line doesn't need to be modified when adding new elements."
msgstr ""
"请在数组、字典和枚举的最后一行使用逗号，这样，在添加新元素时就不需要修改最后"
"一行了，既能让版本控制中的重构更容易，也会让 Diff 也更美观。"

msgid ""
"Trailing commas are unnecessary in single-line lists, so don't add them in "
"this case."
msgstr "单行列表中不需要行尾逗号，故在此情况下不要添加逗号。"

msgid "Blank lines"
msgstr "空白行"

msgid "Surround functions and class definitions with two blank lines:"
msgstr "用两个空行来包围函数和类定义："

msgid "Use one blank line inside functions to separate logical sections."
msgstr "函数内部使用一个空行来分隔每个逻辑片段。"

msgid ""
"We use a single line between classes and function definitions in the class "
"reference and in short code snippets in this documentation."
msgstr "在类参考和本文档的短代码片段中，我们会在类和函数定义之间使用单个空行。"

msgid "Line length"
msgstr "行的长度"

msgid "Keep individual lines of code under 100 characters."
msgstr "把每行代码控制在100个字符以内。"

msgid ""
"If you can, try to keep lines under 80 characters. This helps to read the "
"code on small displays and with two scripts opened side-by-side in an "
"external text editor. For example, when looking at a differential revision."
msgstr ""
"如果可以的话，尽量把行控制在80个字符以下，既有助于在小屏幕上阅读代码，也有利"
"于在外部文本编辑器中并排打开两个脚本。例如，在查看差异修订时。"

msgid "One statement per line"
msgstr "一条语句一行"

msgid ""
"Never combine multiple statements on a single line. No, C programmers, not "
"even with a single line conditional statement."
msgstr "不要在同一行上合并多个语句。不要像 C 语言那样使用单行条件语句。"

msgid "The only exception to that rule is the ternary operator:"
msgstr "该规则的唯一例外便是三元运算符："

msgid "Format multiline statements for readability"
msgstr "对多行语句进行排版以提高可读性"

msgid ""
"When you have particularly long ``if`` statements or nested ternary "
"expressions, wrapping them over multiple lines improves readability. Since "
"continuation lines are still part of the same expression, 2 indent levels "
"should be used instead of one."
msgstr ""
"如果你的 ``if`` 语句特别长，亦或如果一条语句是嵌套的三元表达式，把它们拆分成"
"多行可以提高可读性。由于这几行连续的代码仍属于同一个表达式，故应该缩进两级而"
"非一级。"

msgid ""
"GDScript allows wrapping statements using multiple lines using parentheses "
"or backslashes. Parentheses are favored in this style guide since they make "
"for easier refactoring. With backslashes, you have to ensure that the last "
"line never contains a backslash at the end. With parentheses, you don't have "
"to worry about the last line having a backslash at the end."
msgstr ""
"GDScript 允许使用括号或反斜杠将语句拆成多行，本指南倾向于使用括号，重构起来更"
"简单。使用反斜杠的话，必须保证最后一行的末尾没有反斜杠；而如果是括号，则不必"
"担心最后一行的反斜杠问题。"

msgid ""
"When wrapping a conditional expression over multiple lines, the ``and``/"
"``or`` keywords should be placed at the beginning of the line continuation, "
"not at the end of the previous line."
msgstr ""
"把条件表达式拆分成多行时，\\ ``and`` 和 ``or`` 关键字应当放在下一行的开头，而"
"非上一行的结尾。"

msgid "Avoid unnecessary parentheses"
msgstr "避免冗余的圆括号"

msgid ""
"Avoid parentheses in expressions and conditional statements. Unless "
"necessary for order of operations or wrapping over multiple lines, they only "
"reduce readability."
msgstr ""
"避免在表达式和条件语句中使用括号，除非需要修改操作顺序或者将语句拆分多行编"
"写，否则只会降低可读性。"

msgid "Boolean operators"
msgstr "布尔运算"

msgid ""
"Prefer the plain English versions of boolean operators, as they are the most "
"accessible:"
msgstr "推荐使用英文布尔运算符，简单易懂："

msgid "Use ``and`` instead of ``&&``."
msgstr "用 ``and`` 代替 ``&&``\\ 。"

msgid "Use ``or`` instead of ``||``."
msgstr "用 ``or`` 代替 ``||``\\ 。"

msgid "Use ``not`` instead of ``!``."
msgstr "用 ``not`` 代替 ``!``\\ 。"

msgid ""
"You may also use parentheses around boolean operators to clear any "
"ambiguity. This can make long expressions easier to read."
msgstr ""
"也可以在布尔运算符周围使用括号来消除歧义，这样还可以使长表达式更有可读性。"

msgid "Comment spacing"
msgstr "注释间距"

msgid ""
"Regular comments (``#``) and documentation comments (``##``) should start "
"with a space, but not code that you comment out. Additionally, code region "
"comments (``#region``/``#endregion``) must follow that precise syntax, so "
"they should not start with a space."
msgstr ""
"普通注释（ ``#`` ）与文档注释（ ``##`` ）均应与注释正文保持一个空格的距离，而"
"被注释掉的代码开头则不需要空格间隙。需要注意：代码区域注释（ ``#region`` / "
"``#endregion`` ）为保持其作用需要，不可以在井号后使用空格。"

msgid ""
"Using a space for regular and documentation comments helps differentiate "
"text comments from disabled code."
msgstr ""
"普通注释开头应该留一个空格，但如果是为了停用代码而将其注释掉则不需要留，以此"
"区分文本注释和停用的代码。"

#, fuzzy
msgid ""
"In the script editor, to toggle commenting of the selected code, press :kbd:"
"`Ctrl + K`. This feature adds/removes a single ``#`` sign before any code on "
"the selected lines."
msgstr ""
"在脚本编辑器中，要切换已注释的选定代码，请按 :kbd:`Ctrl + K`\\ 。此功能会在选"
"定行的开头添加一个 ``#`` 注释符号。"

msgid "Whitespace"
msgstr "空格"

msgid ""
"Always use one space around operators and after commas. Also, avoid extra "
"spaces in dictionary references and function calls."
msgstr ""
"时刻记得在运算符前后和逗号后使用一个空格。同时，请避免在字典引用和函数调用中"
"使用多余的空格。"

msgid "Don't use spaces to align expressions vertically:"
msgstr "不要用空格去垂直对齐表达式："

msgid "Quotes"
msgstr "引号"

msgid ""
"Use double quotes unless single quotes make it possible to escape fewer "
"characters in a given string. See the examples below:"
msgstr ""
"尽量使用双引号，除非单引号可以让字符串中需要转义的字符变少。见如下示例："

msgid "Numbers"
msgstr "数字"

msgid ""
"Don't omit the leading or trailing zero in floating-point numbers. "
"Otherwise, this makes them less readable and harder to distinguish from "
"integers at a glance."
msgstr ""
"不要忽略浮点数中的前导和后缀零，否则会降低这些数字的可读性，很难一眼与整数区"
"分开。"

msgid ""
"Use lowercase for letters in hexadecimal numbers, as their lower height "
"makes the number easier to read."
msgstr "对于十六进制数字，请使用小写字母。小写字母较矮，使数字更易读。"

msgid ""
"Take advantage of GDScript's underscores in literals to make large numbers "
"more readable."
msgstr "利用 GDScript 的文字下划线，让大数字更易读。"

msgid "Naming conventions"
msgstr "命名规定"

msgid ""
"These naming conventions follow the Godot Engine style. Breaking these will "
"make your code clash with the built-in naming conventions, leading to "
"inconsistent code."
msgstr ""
"这些命名规定遵循 Godot 引擎风格，不遵循这些规定都会使你的代码与内置的命名规定"
"相冲突，导致风格不一致的代码."

msgid "File names"
msgstr "文件命名"

msgid ""
"Use snake_case for file names. For named classes, convert the PascalCase "
"class name to snake_case::"
msgstr ""
"文件名用 snake_case （蛇形）命名法，对于具名类，将其名字从帕斯卡命名（大驼峰"
"命名，PascalCase）转化为 snake_case 命名： ::"

msgid ""
"This is consistent with how C++ files are named in Godot's source code. This "
"also avoids case sensitivity issues that can crop up when exporting a "
"project from Windows to other platforms."
msgstr ""
"这种命名与 Godot 源码中的 C++ 文件命名保持一致，也避免了由 Windows 导出到其他"
"大小写敏感平台时所发生的问题。"

msgid "Classes and nodes"
msgstr "类与节点"

msgid "Use PascalCase for class and node names:"
msgstr "对类和节点名称使用帕斯卡命名法（大驼峰命名法，PascalCase）:"

msgid "Also use PascalCase when loading a class into a constant or a variable:"
msgstr "将类加载到常量或变量时也同样适用："

msgid "Functions and variables"
msgstr "函数与变量"

msgid "Use snake\\_case to name functions and variables:"
msgstr "函数与变量使用 snake\\_case 命名："

msgid ""
"Prepend a single underscore (\\_) to virtual methods functions the user must "
"override, private functions, and private variables:"
msgstr ""
"在用户必须覆盖的虚方法、私有函数、私有变量的名称前加一个下划线（\\_）："

msgid "Signals"
msgstr "信号"

msgid "Use the past tense to name signals:"
msgstr "用过去时态（英文）来命名信号："

msgid "Constants and enums"
msgstr "常量与枚举"

msgid ""
"Write constants with CONSTANT\\_CASE, that is to say in all caps with an "
"underscore (\\_) to separate words:"
msgstr "使用 CONSTANT\\_CASE，全部大写，并用下划线（\\_）来分隔单词："

msgid ""
"Use PascalCase for enum *names* and CONSTANT\\_CASE for their members, as "
"they are constants:"
msgstr ""
"对枚举的\\ *名称*\\ 使用 PascalCase，对其成员使用 CONSTANT\\_CASE， 因为这些"
"成员是常量："

msgid "Code order"
msgstr "代码顺序"

msgid ""
"This first section focuses on code order. For formatting, see :ref:"
"`formatting`. For naming conventions, see :ref:`naming_conventions`."
msgstr ""
"第一节主要讨论代码顺序。有关代码格式，请参见 :ref:`formatting`。有关命名规"
"定，请参见 :ref:`naming_conventions`。"

msgid "We suggest to organize GDScript code this way:"
msgstr "我们建议按以下方式来组织 GDScript 代码："

msgid ""
"We optimized the order to make it easy to read the code from top to bottom, "
"to help developers reading the code for the first time understand how it "
"works, and to avoid errors linked to the order of variable declarations."
msgstr ""
"我们优化了代码顺序，从上往下阅读代码更加容易，帮助第一次阅读代码的开发人员了"
"解代码的工作原理，同时避免与变量声明顺序相关的错误。"

msgid "This code order follows four rules of thumb:"
msgstr "此代码顺序遵循四个经验法则："

msgid "Properties and signals come first, followed by methods."
msgstr "先写信号和属性，然后再写方法。"

msgid "Public comes before private."
msgstr "先写公共成员，然后再写私有成员。"

msgid "Virtual callbacks come before the class's interface."
msgstr "先写虚函数回调，然后再写类的接口。"

msgid ""
"The object's construction and initialization functions, ``_init`` and "
"``_ready``, come before functions that modify the object at runtime."
msgstr ""
"先写对象的构造函数和初始化函数 ``_init`` 和 ``_ready`` ，然后再写修改对象的函"
"数。"

msgid "Class declaration"
msgstr "类声明"

msgid ""
"If the code is meant to run in the editor, place the ``@tool`` annotation on "
"the first line of the script."
msgstr "如果代码要在编辑器中运行，请将 ``@tool`` 注解写在脚本的第一行。"

msgid ""
"Follow with the ``class_name`` if necessary. You can turn a GDScript file "
"into a global type in your project using this feature. For more information, "
"see :ref:`doc_gdscript`."
msgstr ""
"如有必要，在后面加上 ``class_name``。你可以使用该特性将 GDScript 文件转换为项"
"目中的全局类型。有关更多信息，请参阅 :ref:`doc_gdscript`。"

msgid "Then, add the ``extends`` keyword if the class extends a built-in type."
msgstr "然后，如果该类扩展了内置类型，请添加 ``extends`` 关键字。"

msgid ""
"Following that, you should have the class's optional :ref:`documentation "
"comments <doc_gdscript_documentation_comments>`. You can use that to explain "
"the role of your class to your teammates, how it works, and how other "
"developers should use it, for example."
msgstr ""
"接下来，你应该有该类的可选 :ref:`文档注释 "
"<doc_gdscript_documentation_comments>`。例如，你可以用它来向你的队友解释你的"
"类的作用、它是如何工作的、以及其他开发人员应该如何使用它。"

msgid "Signals and properties"
msgstr "信号和属性"

msgid ""
"Write signal declarations, followed by properties, that is to say, member "
"variables, after the docstring."
msgstr ""
"先声明信号，然后声明属性（即成员变量），这些都写在文档注释（docstring）之后。"

msgid ""
"Enums should come after signals, as you can use them as export hints for "
"other properties."
msgstr "在信号之后声明枚举，枚举可以用作其他属性的导出提示。"

msgid ""
"Then, write constants, exported variables, public, private, and onready "
"variables, in that order."
msgstr ""
"然后，按该顺序依次写入常量、导出变量、公共变量、私有变量和就绪加载（onready）"
"变量。"

msgid ""
"The GDScript compiler evaluates onready variables right before the "
"``_ready`` callback. You can use that to cache node dependencies, that is to "
"say, to get child nodes in the scene that your class relies on. This is what "
"the example above shows."
msgstr ""
"GDScript编译器在 ``_ready`` 函数回调之前计算就绪加载（onready）变量，因此可以"
"使用该虚函数来缓存节点依赖项，在你的类所依赖的场景中获取子节点。这便是上面的"
"例子所展示的内容。"

msgid "Member variables"
msgstr "成员变量"

msgid ""
"Don't declare member variables if they are only used locally in a method, as "
"it makes the code more difficult to follow. Instead, declare them as local "
"variables in the method's body."
msgstr ""
"如果变量只在方法中使用，请勿将该变量声明为成员变量，因为难以定位在何处使用了"
"该变量。相反，你应该将这些变量在方法内部定义为局部变量。"

msgid "Local variables"
msgstr "局部变量"

msgid ""
"Declare local variables as close as possible to their first use. This makes "
"it easier to follow the code, without having to scroll too much to find "
"where the variable was declared."
msgstr ""
"局部变量的声明位置离首次使用该局部变量的位置越近越好，让人更容易跟上代码的思"
"路，而不需要上翻下找该变量的声明位置。"

msgid "Methods and static functions"
msgstr "方法和静态函数"

msgid "After the class's properties come the methods."
msgstr "先声明类的属性，再声明类的方法。"

msgid ""
"Start with the ``_init()`` callback method, that the engine will call upon "
"creating the object in memory. Follow with the ``_ready()`` callback, that "
"Godot calls when it adds a node to the scene tree."
msgstr ""
"从 ``_init()`` 回调方法开始，引擎将在内存创建对象时调用该方法，然后是 "
"``_ready()`` 回调，Godot 在向场景树添加一个节点时会调用该回调。"

msgid ""
"These functions should come first because they show how the object is "
"initialized."
msgstr "这些函数应声明在脚本最前面，以便显示该对象的初始化方式。"

msgid ""
"Other built-in virtual callbacks, like ``_unhandled_input()`` and "
"``_physics_process``, should come next. These control the object's main loop "
"and interactions with the game engine."
msgstr ""
"``_unhandling_input()`` 和 ``_physics_process`` 等其他内置的虚回调则应该放在"
"后面，控制对象的主循环和与游戏引擎的交互。"

msgid ""
"The rest of the class's interface, public and private methods, come after "
"that, in that order."
msgstr "类的其余接口、公共和私有方法，均按照这个顺序呈现。"

msgid "Static typing"
msgstr "静态类型"

msgid ""
"Since Godot 3.1, GDScript supports :ref:`optional static "
"typing<doc_gdscript_static_typing>`."
msgstr ""
"从 Godot 3.1 开始，GDScript 支持 :ref:`可选的静态类型 "
"<doc_gdscript_static_typing>`。"

msgid "Declared types"
msgstr "声明类型"

msgid "To declare a variable's type, use ``<variable>: <type>``:"
msgstr "要声明变量的类型，请使用 ``<variable>: <type>`` ："

msgid "To declare the return type of a function, use ``-> <type>``:"
msgstr "要声明函数的返回类型，请使用 ``-> <type>`` ："

msgid "Inferred types"
msgstr "推断类型"

msgid ""
"In most cases you can let the compiler infer the type, using ``:=``. Prefer "
"``:=`` when the type is written on the same line as the assignment, "
"otherwise prefer writing the type explicitly."
msgstr ""
"大部分情况下，你可以让编译器自行推断变量类型，用 ``:=`` 来实现。在变量声明与"
"变量类型写在同一行时使用该语法，除此之外还请显式指定变量类型。"

msgid ""
"Include the type hint when the type is ambiguous, and omit the type hint "
"when it's redundant."
msgstr "在类型不明确时指定类型，在类型提示多余时省略类型指定。"

msgid ""
"In some cases, the type must be stated explicitly, otherwise the behavior "
"will not be as expected because the compiler will only be able to use the "
"function's return type. For example, ``get_node()`` cannot infer a type "
"unless the scene or file of the node is loaded in memory. In this case, you "
"should set the type explicitly."
msgstr ""
"但在少数情况下，上下文缺失时，编译器会回退到函数的返回类型。例如，在节点的场"
"景或文件被加载到内存中之前， ``get_node()`` 无法自动推断类型。在这种情况下，"
"应明确指定类型。"

msgid ""
"Alternatively, you can use the ``as`` keyword to cast the return type, and "
"that type will be used to infer the type of the var."
msgstr "也可以使用 ``as`` 关键字来转换返回类型，该类型会用于推导变量类型。"

msgid ""
"This option is also considered more :ref:`type-"
"safe<doc_gdscript_static_typing_safe_lines>` than the first."
msgstr ""
"这种做法也比第一种更加\\ :ref:`类型安全"
"<doc_gdscript_static_typing_safe_lines>`。"

msgid "Translation status"
msgstr "翻译状态"
