# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "GDScript: An introduction to dynamic languages"
msgstr "GDScript：动态语言入门"

msgid "About"
msgstr "关于"

msgid ""
"This tutorial aims to be a quick reference for how to use GDScript more "
"efficiently. It focuses on common cases specific to the language, but also "
"covers a lot of information on dynamically typed languages."
msgstr ""
"本教程旨在快速介绍如何更有效地使用GDScript，且只关注特定于该语言的常见情况，"
"同时也会涉及许多关于动态类型语言的信息。"

msgid ""
"It's meant to be especially useful for programmers with little or no "
"previous experience with dynamically typed languages."
msgstr ""
"对于完全没有或几乎没有动态类型语言编程经验的程序员而言，本教程将会十分有用。"

msgid "Dynamic nature"
msgstr "动态性"

msgid "Pros & cons of dynamic typing"
msgstr "动态类型的优缺点"

msgid ""
"GDScript is a Dynamically Typed language. As such, its main advantages are "
"that:"
msgstr "GDScript 是一种动态类型语言，其主要优点为："

msgid "The language is easy to get started with."
msgstr "语言简单易学。"

msgid "Most code can be written and changed quickly and without hassle."
msgstr "大部分代码均可进行快速编写与更改，无任何麻烦。"

msgid "Less code written means less errors & mistakes to fix."
msgstr "更少的代码编写量，需要修复的错误也更少。"

msgid "The code is easy to read (little clutter)."
msgstr "代码简单易读（但可能会有些许杂乱）。"

msgid "No compilation is required to test."
msgstr "无需编译，即用即测。"

msgid "Runtime is tiny."
msgstr "运行时（Runtime）小。"

msgid "It has duck-typing and polymorphism by nature."
msgstr "从骨子上就注定了会有鸭子类型和多态这两个特性。"

msgid "While the main disadvantages are:"
msgstr "主要缺点有："

msgid "Less performance than statically typed languages."
msgstr "性能要低于静态类型语言。"

msgid "More difficult to refactor (symbols can't be traced)."
msgstr "重构会更加困难（无法追踪符号）。"

msgid ""
"Some errors that would typically be detected at compile time in statically "
"typed languages only appear while running the code (because expression "
"parsing is more strict)."
msgstr ""
"由于表达式解析更为严格，使得一些通常会在静态类型语言编译时可以检测到的错误只"
"会在运行代码时出现。"

msgid ""
"Less flexibility for code-completion (some variable types are only known at "
"run-time)."
msgstr "由于某些变量的类型只能在运行时确定，导致代码补全的灵活性较低。"

msgid ""
"This, translated to reality, means that Godot used with GDScript is a "
"combination designed to create games quickly and efficiently. For games that "
"are very computationally intensive and can't benefit from the engine built-"
"in tools (such as the Vector types, Physics Engine, Math library, etc), the "
"possibility of using C++ is present too. This allows you to still create "
"most of the game in GDScript and add small bits of C++ in the areas that "
"need a performance boost."
msgstr ""
"其实，这也说明 Godot 旨在通过 GDScript 来快速高效地创建游戏，而对于计算量巨大"
"并且无法从引擎内置工具（如向量类型、物理引擎、数学库等）中获得性能提升的游"
"戏，Godot 也提供了使用 C++ 的可能性， 且依旧允许你使用 GDScript 创建游戏的绝"
"大部分代码，只是在需要性能的地方添加少量 C++ 代码而已。"

msgid "Variables & assignment"
msgstr "变量与赋值"

msgid ""
"All variables in a dynamically typed language are \"variant\"-like. This "
"means that their type is not fixed, and is only modified through assignment. "
"Example:"
msgstr ""
"动态类型语言中的所有变量都可以是“变体”类型的变量，即这些变量的类型不是固定"
"的，只能通过赋值修改。例如："

msgid "Static:"
msgstr "静态类型编写示例："

msgid "Dynamic:"
msgstr "动态类型编写示例："

msgid "As function arguments:"
msgstr "函数参数的动态类型化："

msgid ""
"Functions are of dynamic nature too, which means they can be called with "
"different arguments, for example:"
msgstr "函数也是动态类型的，即这些函数可以用不同类型的参数调用，例如："

msgid "Pointers & referencing:"
msgstr "指针与引用："

msgid ""
"In static languages, such as C or C++ (and to some extent Java and C#), "
"there is a distinction between a variable and a pointer/reference to a "
"variable. The latter allows the object to be modified by other functions by "
"passing a reference to the original one."
msgstr ""
"在 C、C++ 等静态语言中（Java 和 C# 某种程度上也是）存在变量和变量的指针/引用"
"的区别，而指针/引用的作用是：如果传的是对原始对象的引用，那么其他函数就可以修"
"改这个对象。"

msgid ""
"In C# or Java, everything not a built-in type (int, float, sometimes String) "
"is always a pointer or a reference. References are also garbage-collected "
"automatically, which means they are erased when no longer used. Dynamically "
"typed languages tend to use this memory model, too. Some Examples:"
msgstr ""
"在 C# 或 Java 中，非内置类型（int、float 以及某些情况下 String）的任何类型都"
"要依靠指针或引用，而引用会被自动垃圾回收，也就是这些类型的数据会在不再被使用"
"时删除掉。动态类型的语言也倾向于使用这种内存模型，如："

msgid "C++:"
msgstr "C++："

msgid "Java:"
msgstr "Java："

msgid "GDScript:"
msgstr "GDScript："

msgid ""
"In GDScript, only base types (int, float, string and the vector types) are "
"passed by value to functions (value is copied). Everything else (instances, "
"arrays, dictionaries, etc) is passed as reference. Classes that inherit :ref:"
"`class_RefCounted` (the default if nothing is specified) will be freed when "
"not used, but manual memory management is allowed too if inheriting manually "
"from :ref:`class_Object`."
msgstr ""
"在 GDScript 中，只有基础类型（int、float、string 和向量类型）会按值传递给函数"
"（通过复制值来传递），而其他所有类型（对象实例、数组、字典等）都会按引用进行"
"传递。继承自 :ref:`class_RefCounted` 的类（未指定父类时会默认继承该类）的实例"
"在不被使用时释放，而对于继承自 :ref:`class_Object` 的类则需要手动管理内存。"

msgid "Arrays"
msgstr "数组"

msgid ""
"Arrays in dynamically typed languages can contain many different mixed "
"datatypes inside and are always dynamic (can be resized at any time). "
"Compare for example arrays in statically typed languages:"
msgstr ""
"动态类型语言中的数组，其内部可包含许多混合在一起的不同类型的数据，且始终动态"
"（可以随时调整大小）。 拿静态类型语言中的数组示例作个比较:"

msgid "And in GDScript:"
msgstr "而在 GDScript 中："

msgid ""
"In dynamically typed languages, arrays can also double as other datatypes, "
"such as lists:"
msgstr "在动态类型语言中，数组还可兼作其他数据类型使用，比如列表："

msgid "Or unordered sets:"
msgstr "或无序集合："

msgid "Dictionaries"
msgstr "字典"

msgid ""
"Dictionaries are a powerful tool in dynamically typed languages. Most "
"programmers that come from statically typed languages (such as C++ or C#) "
"ignore their existence and make their life unnecessarily more difficult. "
"This datatype is generally not present in such languages (or only in limited "
"form)."
msgstr ""
"字典是动态类型语言中一个十分强大的工具。大多数用静态类型语言（例如 C++ 或 "
"C#）编写代码的程序员都忽略了字典的存在，而不必要地增加了他们的工作难度。字典"
"这种数据类型通常不存在于此类语言中（或仅以受限的形式出现）。"

msgid ""
"Dictionaries can map any value to any other value with complete disregard "
"for the datatype used as either key or value. Contrary to popular belief, "
"they are efficient because they can be implemented with hash tables. They "
"are, in fact, so efficient that some languages will go as far as "
"implementing arrays as dictionaries."
msgstr ""
"字典可以完全忽略键或值的数据类型，从而将任意一个值映射到其他值上。由于这些映"
"射可以通过哈希表实现，因此字典十分高效，这一点与目前流行的观点相反。事实上，"
"由于字典的高效性，在一些编程语言里甚至可以用数组的方式来实现字典。"

msgid "Example of Dictionary:"
msgstr "字典示例："

msgid ""
"Dictionaries are also dynamic, keys can be added or removed at any point at "
"little cost:"
msgstr "字典也是动态的，可随时添加或删除一个键，但性能开销很低："

msgid ""
"In most cases, two-dimensional arrays can often be implemented more easily "
"with dictionaries. Here's a battleship game example:"
msgstr ""
"大多数情况下，使用字典可以更容易地实现二维数组。这里以一个简单的战舰游戏为"
"例："

msgid ""
"Dictionaries can also be used as data markup or quick structures. While "
"GDScript's dictionaries resemble python dictionaries, it also supports Lua "
"style syntax and indexing, which makes it useful for writing initial states "
"and quick structs:"
msgstr ""
"字典还可以用作数据标记或快速结构。GDScript 的字典虽然跟 Python 的字典比较相"
"似，却也支持Lua风格的语法和索引，这一点使得字典对于编写初始状态和快速结构而言"
"非常有用："

msgid "For & while"
msgstr "For 循环与 while 循环"

msgid ""
"Iterating using the C-style for loop in C-derived languages can be quite "
"complex:"
msgstr "在一些静态类型的语言中，循环迭代可能会写得非常复杂："

msgid ""
"Because of this, GDScript makes the opinionated decision to have a for-in "
"loop over iterables instead:"
msgstr ""
"因此，GDScript 做出了大胆的决定——在可迭代项上使用 for 循环，配合 in 关键字来"
"指定迭代范围："

msgid ""
"Container datatypes (arrays and dictionaries) are iterable. Dictionaries "
"allow iterating the keys:"
msgstr "容器数据类型（数组和字典）是可迭代的，其中，字典允许通过键来进行迭代："

msgid "Iterating with indices is also possible:"
msgstr "迭代索引也是可以的："

msgid "The range() function can take 3 arguments:"
msgstr "range() 函数可包含 3 个参数："

msgid "Some examples involving C-style for loops:"
msgstr "C 语言风格的一些 for 循环示例："

msgid "Translate to:"
msgstr "用动态类型语言翻译一下："

msgid "And backwards looping done through a negative counter:"
msgstr "通过指定一个负数来进行反向的循环迭代计数:"

msgid "Becomes:"
msgstr "用动态类型语言就可以写成："

msgid "While"
msgstr "While 循环"

msgid "while() loops are the same everywhere:"
msgstr "while() 循环的用法在任何地方都是相同的："

msgid "Custom iterators"
msgstr "自定义迭代器"

msgid ""
"You can create custom iterators in case the default ones don't quite meet "
"your needs by overriding the Variant class's ``_iter_init``, ``_iter_next``, "
"and ``_iter_get`` functions in your script. An example implementation of a "
"forward iterator follows:"
msgstr ""
"在默认迭代器无法完全满足你的需求的情况下，你可以通过重写脚本中 ``Variant`` 类"
"的 ``_iter_init`` 、 ``_iter_next`` 和 ``_iter_get`` 这三个函数来创建自定义迭"
"代器。下面是一个正向迭代器的示例："

msgid "And it can be used like any other iterator:"
msgstr "可以像其他迭代器一样使用："

msgid ""
"Make sure to reset the state of the iterator in ``_iter_init``, otherwise "
"nested for-loops that use custom iterators will not work as expected."
msgstr ""
"不过要确保在 ``_iter_init`` 中重置迭代器的状态，否则使用了自定义迭代器的嵌套 "
"for 循环将无法正常工作。"

msgid "Duck typing"
msgstr "鸭子类型"

msgid ""
"One of the most difficult concepts to grasp when moving from a statically "
"typed language to a dynamic one is duck typing. Duck typing makes overall "
"code design much simpler and straightforward to write, but it's not obvious "
"how it works."
msgstr ""
"从静态类型语言编程迁移到动态类型语言编程，最难掌握的一个概念便是鸭子类型。鸭"
"子类型让整个代码设计更加简单直接，然而其工作方式却并不明显。"

msgid ""
"As an example, imagine a situation where a big rock is falling down a "
"tunnel, smashing everything on its way. The code for the rock, in a "
"statically typed language would be something like:"
msgstr ""
"举个例子，想象一块大石头从隧道顶上掉下来，把路上的所有东西都砸得粉碎。在静态"
"类型语言中，石头的代码有点像："

msgid ""
"This way, everything that can be smashed by a rock would have to inherit "
"Smashable. If a character, enemy, piece of furniture, small rock were all "
"smashable, they would need to inherit from the class Smashable, possibly "
"requiring multiple inheritance. If multiple inheritance was undesired, then "
"they would have to inherit a common class like Entity. Yet, it would not be "
"very elegant to add a virtual method ``smash()`` to Entity only if a few of "
"them can be smashed."
msgstr ""
"这样，任何能被岩石砸碎的东西都必须继承 ``Smashable``\\ 。如果角色、敌人、家"
"具、小石块都易被大石块砸得粉碎，那么这些类均需要继承 ``Smashable`` 类，（在 "
"C++ 里）甚至可能还需要多重继承。如果不希望进行多重继承，那么这些类就必须继承"
"像 ``Entity`` 这样的公共类。可如果只是其中几个能被大石块粉碎掉的话，那就要在 "
"``Entity`` 中添加一个虚方法 ``smash()`` ，这样写并不十分优雅。"

msgid ""
"With dynamically typed languages, this is not a problem. Duck typing makes "
"sure you only have to define a ``smash()`` function where required and "
"that's it. No need to consider inheritance, base classes, etc."
msgstr ""
"用动态类型的语言来写这段代码，问题也就迎刃而解了。 在鸭子类型的编程环境下，只"
"需确保在需要的地方定义一个 ``smash()`` 函数就行了，无需考虑继承、基类等问题。"

msgid ""
"And that's it. If the object that hit the big rock has a smash() method, it "
"will be called. No need for inheritance or polymorphism. Dynamically typed "
"languages only care about the instance having the desired method or member, "
"not what it inherits or the class type. The definition of Duck Typing should "
"make this clearer:"
msgstr ""
"就是这样，如果被大石块集中的对象有 ``smash()`` 方法，那么就会调用该方法，就不"
"需要考虑继承、多态。动态类型语言只在意实例是否具有所需方法或成员，而不在意该"
"实例继承自什么类及该实例的对象类型。鸭子类型的定义会使这一点更加清晰明了："

msgid ""
"*\"When I see a bird that walks like a duck and swims like a duck and quacks "
"like a duck, I call that bird a duck\"*"
msgstr ""
"*“当我看到一只鸟像鸭子一样走路、像鸭子一样游泳、像鸭子一样呱呱叫时，我就管这"
"只鸟叫鸭子”*"

msgid "In this case, it translates to:"
msgstr "在这种情况下，这句话就可以翻译成："

msgid ""
"*\"If the object can be smashed, don't care what it is, just smash it.\"*"
msgstr ""
"*“如果物体可以被砸碎，那就不要在意这个物体是啥了，只管把这个物体砸碎就完事儿"
"了。”*"

msgid "Yes, we should call it Hulk typing instead."
msgstr "没错，称它为浩克（Hulk，即绿巨人）类型适乎更合适。"

msgid ""
"It's possible that the object being hit doesn't have a smash() function. "
"Some dynamically typed languages simply ignore a method call when it doesn't "
"exist, but GDScript is stricter, so checking if the function exists is "
"desirable:"
msgstr ""
"不过，被击中的对象可能并没有 smash() 函数。虽然一些动态类型语言在被调用方法不"
"存在时会直接忽略该方法的调用，但GDScript在这方面更为严格，因此有必要检查目标"
"函数是否存在："

msgid ""
"Then, simply define that method and anything the rock touches can be smashed."
msgstr ""
"然后，稍微定义下这个方法之后，大石块所触碰的任何东西都可以被大石块砸碎了。"

msgid "Translation status"
msgstr "翻译状态"
