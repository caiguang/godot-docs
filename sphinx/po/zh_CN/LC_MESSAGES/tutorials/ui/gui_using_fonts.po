# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using Fonts"
msgstr "使用字体"

msgid "Godot allows you to set specific fonts for different UI nodes."
msgstr "Godot 中能够为不同的 UI 节点设置指定的字体。"

msgid ""
"There are three different places where you can setup font usage. The first "
"is the theme editor. Choose the node you want to set the font for and select "
"the font tab. The second is in the inspector for control nodes under **Theme "
"Overrides > Fonts**. Lastly, in the inspector settings for themes under "
"**Default Font**."
msgstr ""

msgid ""
"If no font override is specified anywhere, `Open Sans <https://fonts.google."
"com/specimen/Open+Sans>`__ SemiBold is used as the default project font."
msgstr ""

msgid ""
"Since Godot 4.0, font sizes are no longer defined in the font itself but are "
"instead defined in the node that uses the font. This is done in the **Theme "
"Overrides > Font Sizes** section of the inspector."
msgstr ""

msgid ""
"This allows changing the font size without having to duplicate the font "
"resource for every different font size."
msgstr ""

msgid ""
"There are 2 kinds of font files: *dynamic* (TTF/OTF/WOFF/WOFF2 formats) and "
"*bitmap* (BMFont ``.fnt`` format or monospaced image). Dynamic fonts are the "
"most commonly used option, as they can be resized and still look crisp at "
"higher sizes. Thanks to their vector-based nature, they can also contain a "
"lot more glyphs while keeping a reasonable file size compared to bitmap "
"fonts. Dynamic fonts also support some advanced features that bitmap fonts "
"cannot support, such as *ligatures* (several characters transforming into a "
"single different design)."
msgstr ""

msgid ""
"You can find freely licensed font files on websites such as `Google Fonts "
"<https://fonts.google.com/>`__ and `Font Library <https://fontlibrary.org/"
">`__."
msgstr ""

msgid ""
"Fonts are covered by copyright. Double-check the license of a font before "
"using it, as not all fonts allow commercial use without purchasing a license."
msgstr ""

#, fuzzy
msgid ""
"You can see how fonts work in action using the `BiDI and Font Features demo "
"project <https://github.com/godotengine/godot-demo-projects/tree/master/gui/"
"bidi_and_font_features>`__."
msgstr ""
"如果您更善于通过查看示例学习，可以在\\ `这里 <https://github.com/godotengine/"
"godot-demo-projects/tree/master/mobile/android_iap>`__\\ 找到演示项目。"

msgid "Dynamic fonts"
msgstr "动态字体"

msgid "Godot supports the following dynamic font formats:"
msgstr "Godot 支持以下动态字体格式："

msgid "TrueType Font or Collection (``.ttf``, ``.ttc``)"
msgstr "TrueType 字体或合集（\\ ``.ttf``\\ 、\\ ``.ttc``\\ ）"

msgid "OpenType Font or Collection (``.otf``, ``.otc``)"
msgstr "OpenType 字体或合集（\\ ``.otf``\\ 、\\ ``.otc``\\ ）"

msgid "Web Open Font Format 1 (``.woff``)"
msgstr "Web 开放字体格式 1（\\ ``.woff``\\ ）"

msgid "Web Open Font Format 2 (``.woff2``, since Godot 3.5)"
msgstr "Web 开放字体格式 2（\\ ``.woff2``\\ ，从 Godot 3.5 开始支持）"

msgid ""
"While ``.woff`` and especially ``.woff2`` tend to result in smaller file "
"sizes, there is no universally \"better\" font format. In most situations, "
"it's recommended to use the font format that was shipped on the font "
"developer's website."
msgstr ""

msgid "Bitmap fonts"
msgstr "位图字体"

msgid ""
"Godot supports the BMFont (``.fnt``) bitmap font format. This is a format "
"created by the `BMFont <https://www.angelcode.com/products/bmfont/>`__ "
"program. Many BMFont-compatible programs also exist, like `BMGlyph <https://"
"www.bmglyph.com/>`__."
msgstr ""

msgid ""
"Alternatively, you can import any image to be used as a bitmap font. This is "
"only supported for **monospaced** fonts (fonts where each character has the "
"same width). To do so, select the image in the FileSystem dock, go to the "
"Import dock, change its import type to **Font Data (Monospace Image Font)** "
"then click **Reimport**:"
msgstr ""

msgid "Changing import type to Font Data (Monospace Image Font)"
msgstr "将导入类型修改为 Font Data (Monospace Image Font)"

msgid "Changing import type to **Font Data (Monospace Image Font)**"
msgstr "将导入类型修改为 **Font Data (Monospace Image Font)**"

msgid ""
"The font's character set layout can be in any order, but orders that match "
"standard Unicode are recommended as they'll require far less configuration "
"to import. For example, the bitmap font below contains `ASCII <https://en."
"wikipedia.org/wiki/ASCII>`__ characters and follows standard ASCII ordering:"
msgstr ""
"字体可以使用任意顺序的字符集布局，但建议使用与标准 Unicode 一致的顺序，这样导"
"入所需的配置就会少很多。例如，下面的位图字体包含了 `ASCII <https://zh."
"wikipedia.org/zh-cn/ASCII>`__ 字符，与标准 ASCII 顺序一致："

msgid "Bitmap font example"
msgstr "位图字体示例"

msgid ""
"Credit: `LibreQuake <https://github.com/MissLav/LibreQuake/blob/master/lq1/"
"gfx-wad/CONCHARS.png>`__ (scaled and cropped to exclude extended range)"
msgstr ""

#, fuzzy
msgid ""
"The following import options can be used to import the above font image "
"successfully:"
msgstr "这个节点有如下属性可供设置："

msgid "Import options to use for the above example font"
msgstr "上面的示例字体使用的导入选项"

msgid ""
"The **Character Ranges** option is an array that maps each position on the "
"image (in tile coordinates, not pixels). The font atlas is traversed from "
"left to right and top to bottom. Characters can be specified with decimal "
"numbers (``127``), hexadecimal numbers (``0x007f``) or between *single* "
"quotes (``'~'``). Ranges can be specified with a hyphen between characters."
msgstr ""

msgid ""
"For instance, ``0-127`` (or ``0x0000-0x007f``) denotes the full ASCII range. "
"As another example, ``' '-'~'`` is equivalent to ``32-127`` and denotes the "
"range of *printable* (visible) ASCII characters."
msgstr ""

msgid ""
"Make sure the **Character Ranges** option doesn't exceed the number of "
"**Columns** × **Rows** defined. Otherwise, the font will fail to import."
msgstr ""

msgid ""
"If your font image contains margins not used for font glyphs (such as "
"attribution information), try adjusting **Image Margin**. This is a margin "
"applied only once around the whole image."
msgstr ""

msgid ""
"If your font image contains guides (in the form of lines between glyphs) or "
"if spacing between characters appears incorrect, try adjusting **Character "
"Margin**. This margin is applied for every imported glyph."
msgstr ""

msgid "Loading a font file"
msgstr "加载字体文件"

msgid ""
"To load a font file (dynamic or bitmap), use the resource dropdown's **Quick "
"Load** or **Load** option next to a font property, then navigate to the font "
"file in question:"
msgstr ""

msgid ""
"You can also drag-and-drop a font file from the FileSystem dock to the "
"inspector property that accepts a Font resource."
msgstr ""

msgid ""
"In Godot 4.0 and later, texture filter and repeat properties are defined in "
"the location where the texture is used, rather than on the texture itself. "
"This also applies to fonts (both dynamic fonts and bitmap fonts)."
msgstr ""

msgid ""
"Fonts that have a pixel art appearance should have bilinear filtering "
"disabled by changing the **Rendering > Textures > Canvas Textures > Default "
"Texture Filter** project setting to **Nearest**."
msgstr ""

msgid ""
"The font size must also be an integer multiple of the design size (which "
"varies on a per-font basis), and the Control node using the font must be "
"scaled by an integer multiple as well. Otherwise, the font may look blurry. "
"Font sizes in Godot are specified in pixels (px), not points (pt). Keep this "
"in mind when comparing font sizes across different software."
msgstr ""

msgid ""
"The texture filter mode can also be set on individual nodes that inherit "
"from CanvasItem by setting :ref:`CanvasItem.texture_filter "
"<class_CanvasItem_property_texture_filter>`."
msgstr ""

msgid "Font outlines and shadows"
msgstr "字体轮廓与阴影"

msgid ""
"Font outlines and shadows can be used to improve readability when the "
"background color isn't known in advance. For instance, this is the case for "
"HUD elements that are drawn over a 2D/3D scene."
msgstr ""

msgid ""
"Font outlines are available in most nodes that derive from Control, in "
"addition to :ref:`class_Label3D`."
msgstr ""

msgid ""
"To enable outline for a font on a given node, configure the theme overrides "
"**Font Outline Color** and **Outline Size** in the inspector. The result "
"should look like this:"
msgstr ""

msgid "Font outline example"
msgstr "字体轮廓示例"

msgid ""
"If using a font with MSDF rendering, its **MSDF Pixel Range** import option "
"be set to at least *twice* the value of the outline size for outline "
"rendering to look correct. Otherwise, the outline may appear to be cut off "
"earlier than intended."
msgstr ""

msgid ""
"Support for font shadows is more limited: they are only available in :ref:"
"`class_Label` and :ref:`class_RichTextLabel`. Additionally, font shadows "
"always have a hard edge (but you can reduce their opacity to make them look "
"more subtle). To enable font shadows on a given node, configure the **Font "
"Shadow Color**, **Shadow Offset X**, and **Shadow Offset Y** theme overrides "
"in a Label or RichTextLabel node accordingly:"
msgstr ""

#, fuzzy
msgid "Configuring font shadow in a Label node"
msgstr "配置构建"

#, fuzzy
msgid "The result should look like this:"
msgstr "最终结果应如下所示:"

msgid "Font shadow example"
msgstr "字体阴影示例"

msgid ""
"You can create local overrides to font display in Label nodes by creating a :"
"ref:`class_LabelSettings` resource that you reuse across Label nodes. This "
"resource takes priority over :ref:`theme properties <doc_gui_skinning>`."
msgstr ""

msgid "Advanced font features"
msgstr "高级字体特性"

msgid "Antialiasing"
msgstr "抗锯齿"

msgid ""
"You can adjust how the font should be smoothed out when rendering by "
"adjusting *antialiasing* and *hinting*. These are different properties, with "
"different use cases."
msgstr ""

msgid ""
"Antialiasing controls how glyph edges should be smoothed out when "
"rasterizing the font. The default antialiasing method (**Grayscale**) works "
"well on every display technology. However, at small sizes, grayscale "
"antialiasing may result in fonts looking blurry."
msgstr ""

msgid ""
"The antialiasing sharpness can be improved by using LCD subpixel "
"optimization, which exploits the subpixel patterns of most LCD displays by "
"offsetting the font antialiasing on a per-channel basis (red/green/blue). "
"The downside is that this can introduce \"fringing\" on edges, especially on "
"display technologies that don't use standard RGB subpixels (such as OLED "
"displays)."
msgstr ""

msgid ""
"In most games, it's recommended to stick to the default **Grayscale** "
"antialiasing. For non-game applications, LCD subpixel optimization is worth "
"exploring."
msgstr ""

msgid "Font antialiasing comparison"
msgstr "字体抗锯齿对比"

msgid "From top to bottom: Disabled, Grayscale, LCD Subpixel (RGB)"
msgstr ""

msgid ""
"Antialiasing cannot be changed on :ref:`MSDF-rendered fonts "
"<doc_using_fonts_msdf>` – these are always rendered with grayscale "
"antialiasing."
msgstr ""
":ref:`MSDF 渲染的字体 <doc_using_fonts_msdf>`\\ 无法修改抗锯齿——这种字体始终"
"使用灰度抗锯齿进行渲染。"

msgid "Hinting"
msgstr "微调"

msgid ""
"Hinting controls how aggressively glyph edges should be snapped to pixels "
"when rasterizing the font. **None** results in the smoothest appearance, "
"which can make the font look blurry at small sizes. **Light** (default) is "
"sharper by snapping glyph edges to pixels on the Y axis only, while **Full** "
"is even sharper by snapping glyph edges to pixels on both X and Y axes. "
"Depending on personal preference, you may prefer using one hinting mode over "
"the other."
msgstr ""
"微调控制的是对字体进行栅格化的时候，字形边缘吸附到像素的程度。\\ **None**\\ "
"看上去最平滑，字体较小时会看上去比较模糊。\\ **Light**\\ （默认值）只会在 Y "
"轴上对字形的边缘进行吸附，看上去会比较锐利，而 **Full** 则更加锐利，X 轴和 Y "
"轴都会进行边缘的吸附。对微调模式的选择取决于你个人的口味。"

msgid "Font hinting comparison"
msgstr "字体微调对比"

msgid "From top to bottom: None, Light, Full hinting"
msgstr ""

msgid ""
"If changing the hinting mode has no visible effect after clicking "
"**Reimport**, it's usually because the font doesn't include hinting "
"instructions. This can be resolved by looking for a version of the font file "
"that includes hinting instructions, or enabling **Force Autohinter** in the "
"Import dock. This will use `FreeType <https://freetype.org/>`__'s autohinter "
"to automatically add hinting instructions to the imported font."
msgstr ""

msgid "Subpixel positioning"
msgstr "次像素定位"

msgid ""
"Subpixel positioning can be adjusted. This is a `FreeType <https://freetype."
"org/>`__ feature that allows glyphs to be rendered more closely to their "
"intended form. The default setting of **Auto** automatically enables "
"subpixel positioning at small sizes, but disables it at large font sizes to "
"improve rasterization performance."
msgstr ""

msgid ""
"You can force the subpixel positioning mode to **Disabled**, **One half of a "
"pixel** or **One quarter of a pixel**. **One quarter of a pixel** provides "
"the best quality, at the cost of longer rasterization times."
msgstr ""

msgid ""
"Changing antialiasing, hinting and subpixel positioning has the most visible "
"effect at smaller font sizes."
msgstr ""

msgid ""
"Fonts that have a pixel art appearance should have their subpixel "
"positioning mode set to **Disabled**. Otherwise, the font may appear to have "
"uneven pixel sizes."
msgstr ""

msgid ""
"This step is not required for bitmap fonts, as subpixel positioning is only "
"relevant for dynamic fonts (which are usually made of vector elements)."
msgstr ""

msgid "Mipmaps"
msgstr "Mipmap"

msgid ""
"By default, fonts do not have mipmaps generated to reduce memory usage and "
"speed up rasterization. However, this can cause downscaled fonts to become "
"grainy. This can be especially noticeable with :ref:`doc_3d_text` that "
"doesn't have **Fixed Size** enabled. This can also occur when displaying "
"text with a traditional rasterized (non-:ref:`MSDF <doc_using_fonts_msdf>`) "
"font in a Control node that has its scale lower than ``(1, 1)``."
msgstr ""
"默认情况下字体不会生成 Mipmap，这样就能够降低内存占用、加速栅格化。但这样一"
"来，缩小后的字体就会变成一坨。\\ :ref:`doc_3d_text` 不启用 **Fixed Size** 的"
"时候尤为明显。如果在 Control 节点中使用传统的栅格化字体（非 :ref:`MSDF "
"<doc_using_fonts_msdf>` 字体）显示文本，并且该节点的缩放比 ``(1, 1)`` 要小，"
"也会出现这种情况。"

msgid ""
"After selecting a font in the FileSystem dock, you can enable the "
"**Mipmaps** in the Import dock to improve downscaled font rendering "
"appearance."
msgstr ""
"在“文件系统”面板中选中字体后，你可以在“导入”面板中启用 **Mipmap**\\ ，从而改"
"善字体缩小渲染后的外观。"

msgid ""
"Mipmaps can be enabled on MSDF fonts as well. This can improve font "
"rendering quality a little at smaller-than-default sizes, but MSDF fonts are "
"already resistant to graininess out of the box."
msgstr ""
"MSDF 字体也可以启用 Mipmap。在字体大小小于默认值时，这可以稍稍改善字体的渲染"
"质量，但 MSDF 字体在放大后原本就是没有颗粒度问题的。"

msgid "MSDF font rendering"
msgstr "MSDF 字体渲染"

msgid ""
"Multi-channel signed distance field (MSDF) font rendering allows rendering "
"fonts at any size, without having to re-rasterize them when their size "
"changes."
msgstr ""
"多通道带符号距离场（Multi-channel signed distance field，MSDF）字体渲染能够将"
"字体渲染为任意大小，无需在大小发生变化时重新栅格化。"

msgid ""
"MSDF font rendering has 2 upsides over traditional font rasterization, which "
"Godot uses by default:"
msgstr "与 Godot 默认使用的传统字体栅格化相比，MSDF 字体渲染有两个优点："

msgid "The font will always look crisp, even at huge sizes."
msgstr "即便文字非常巨大，字体看上去也总是清晰的。"

msgid ""
"There is less stuttering when rendering characters *at large font sizes* for "
"the first time, as there is no rasterization performed."
msgstr "首次渲染\\ *大字号字体*\\ 的字符时卡顿更短，因为无须执行栅格化。"

msgid "The downsides of MSDF font rendering are:"
msgstr "MSDF 字体渲染的缺点有："

msgid ""
"Higher baseline cost for font rendering. This is usually not noticeable on "
"desktop platforms, but it can have an impact on low-end mobile devices."
msgstr ""
"字体渲染的基础开销较高。桌面平台上通常无法察觉，但是会影响低端移动设备。"

msgid ""
"Fonts at small sizes will not look as clear as rasterized fonts, due to the "
"lack of hinting."
msgstr "由于缺少微调，较小的字体没有栅格化字体清晰。"

msgid ""
"Rendering new glyphs for the first time *at small font sizes* may be more "
"expensive compared to traditional rasterized fonts. :ref:"
"`doc_using_fonts_font_prerendering` can be used to alleviate this."
msgstr ""
"与传统的栅格化字体相比，首次为新字形渲染\\ *小字号字体*\\ 的开销可能更大。可"
"以使用 :ref:`doc_using_fonts_font_prerendering` 缓解。"

msgid "LCD subpixel optimization cannot be enabled for MSDF fonts."
msgstr "无法为 MSDF 字体启用 LCD 次像素优化。"

msgid ""
"Fonts with self-intersecting outlines will not render correctly in MSDF "
"mode. If you notice rendering issues on fonts downloaded from websites such "
"as `Google Fonts <https://fonts.google.com>`__, try downloading the font "
"from the font author's official website instead."
msgstr ""
"MSDF 模式下无法正确渲染轮廓自相交的字体。如果使用从 `Google Fonts <https://"
"fonts.google.com>`__ 等处下载到的字体时出现渲染问题，请尝试改为从作者的官方网"
"站下载。"

msgid "Comparison of font rasterization methods"
msgstr ""

msgid ""
"Comparison of font rasterization methods. From top to bottom: rasterized "
"without oversampling, rasterized with oversampling, MSDF"
msgstr ""

#, fuzzy
msgid ""
"To enable MSDF rendering for a given font, select it in the FileSystem dock, "
"go to the Import dock, enable **Multichannel Signed Distance Field**, then "
"click **Reimport**:"
msgstr ""
"为了使OBJ文件具有为其生成的网格LOD，在文件系统面板中选择它，去到导入面板，将"
"其 **导入为** 选项更改为 **场景** ，然后单击 **重新导入** ："

msgid "Enabling MSDF in the font's import options"
msgstr ""

msgid "Using emoji"
msgstr "使用 Emoji"

msgid "Godot has limited support for emoji fonts:"
msgstr "Godot 对 Emoji 字体的支持有限："

msgid "CBDT/CBLC (embedded PNGs) and SVG emoji fonts are supported."
msgstr "支持 CBDT/CBLC（内嵌 PNG）和 SVG Emoji 字体。"

msgid "COLR/CPAL emoji fonts (custom vector format) are **not** supported."
msgstr "**不支持** COLR/CPAL Emoji 字体（自定义矢量格式）。"

msgid ""
"EMJC bitmap image compression (used by iOS' system emoji font) is **not** "
"supported. This means that to support emoji on iOS, you must use a custom "
"font that uses SVG or PNG bitmap compression instead."
msgstr ""
"**不支持** EMJC 位图压缩（iOS 系统 Emoji 字体需要用到）。这意味着如果要在 "
"iOS 上支持 Emoji，你就必须改用自定义的使用 SVG 或 PNG 位图压缩的字体。"

msgid ""
"For Godot to be able to display emoji, the font used (or one of its :ref:"
"`fallbacks <doc_using_fonts_font_fallbacks>`) needs to include them. "
"Otherwise, emoji won't be displayed and placeholder \"tofu\" characters will "
"appear instead:"
msgstr ""

msgid "Default appearance when trying to use emoji in a label"
msgstr "尝试在标签中使用 Emoji 的默认外观"

msgid ""
"After adding a font to display emoji such as `Noto Color Emoji <https://"
"fonts.google.com/noto/specimen/Noto+Color+Emoji>`__, you get the expected "
"result:"
msgstr ""

msgid "Correct appearance after adding an emoji font to the label"
msgstr "为标签添加 Emoji 字体后的正确外观"

msgid ""
"To use a regular font alongside emoji, it's recommended to specify a :ref:"
"`fallback font <doc_using_fonts_font_fallbacks>` that points to the emoji "
"font in the regular font's advanced import options. If you wish to use the "
"default project font while displaying emoji, leave the **Base Font** "
"property in FontVariation empty while adding a font fallback pointing to the "
"emoji font:"
msgstr ""

msgid ""
"Emoji fonts are quite large in size, so you may want to :ref:`load a system "
"font <doc_using_fonts_system_fonts>` to provide emoji glyphs rather than "
"bundling it with your project. This allows providing full emoji support in "
"your project without increasing the size of its exported PCK. The downside "
"is that emoji will look different depending on the platform, and loading "
"system fonts is not supported on all platforms."
msgstr ""

msgid "It's possible to use a system font as a fallback font too."
msgstr "也可以将系统字体用作回退字体。"

msgid "Using icon fonts"
msgstr "使用图标字体"

msgid ""
"Tools like `Fontello <https://fontello.com/>`__ can be used to generate font "
"files containing vectors imported from SVG files. This can be used to render "
"custom vector elements as part of your text, or to create extruded 3D icons "
"with :ref:`doc_3d_text` and TextMesh."
msgstr ""

msgid ""
"Fontello currently does not support creating multicolored fonts (which Godot "
"can render). As of November 2022, support for multicolored fonts in icon "
"font generation tools remains scarce."
msgstr ""

msgid ""
"Depending on your use cases, this may lead to better results compared to "
"using the ``img`` tag in :ref:`RichTextLabel <doc_bbcode_in_richtextlabel>`. "
"Unlike bitmap images (including SVGs which are rasterized on import by "
"Godot), true vector data can be resized to any size without losing quality."
msgstr ""

msgid ""
"After downloading the generated font file, load it in your Godot project "
"then specify it as a custom font for a Label, RichTextLabel or Label3D node. "
"Switch over to the Fontello web interface, then copy the character by "
"selecting it then pressing :kbd:`Ctrl + C` (:kbd:`Cmd + C` on macOS). Paste "
"the character in the **Text** property of your Label node. The character "
"will appear as a placeholder glyph in the inspector, but it should appear "
"correctly in the 2D/3D viewport."
msgstr ""

msgid ""
"To use an icon font alongside a traditional font in the same Control, you "
"can specify the icon font as a :ref:`fallback "
"<doc_using_fonts_font_fallbacks>`. This works because icon fonts use the "
"Unicode *private use area*, which is reserved for use by custom fonts and "
"doesn't contain standard glyphs by design."
msgstr ""

msgid ""
"Several modern icon fonts such as `Font Awesome 6 <https://fontawesome.com/"
"download>`__ have a desktop variant that uses *ligatures* to specify icons. "
"This allows you to specify icons by entering their name directly in the "
"**Text** property of any node that can display fonts. Once the icon's name "
"is fully entered as text (such as ``house``), it will be replaced by the "
"icon."
msgstr ""

msgid ""
"While easier to use, this approach cannot be used with font fallbacks as the "
"main font's characters will take priority over the fallback font's ligatures."
msgstr ""

msgid "Font fallbacks"
msgstr "字体回退"

msgid ""
"Godot supports defining one or more fallbacks when the main font lacks a "
"glyph to be displayed. There are 2 main use cases for defining font "
"fallbacks:"
msgstr ""

msgid ""
"Use a font that only supports Latin character sets, but use another font to "
"be able to display text another character set such as Cyrillic."
msgstr ""

msgid "Use a font to render text, and another font to render emoji or icons."
msgstr ""

msgid ""
"Open the Advanced Import Settings dialog by double-clicking the font file in "
"the FileSystem dock. You can also select the font in the FileSystem dock, go "
"to the Import dock then choose **Advanced…** at the bottom:"
msgstr ""

msgid "Import dock"
msgstr "导入面板"

msgid ""
"In the dialog that appears, look for **Fallbacks** section on the sidebar on "
"the right, click the **Array[Font] (size 0)** text to expand the property, "
"then click **Add Element**:"
msgstr ""

msgid "Adding font fallback"
msgstr "添加字体回退"

msgid ""
"Click the dropdown arrow on the new element, then choose a font file using "
"the **Quick Load** or **Load** options:"
msgstr ""

msgid "Loading font fallback"
msgstr "加载字体回退"

msgid ""
"It is possible to add fallback fonts while using the default project font. "
"To do so, leave the **Base Font** property empty while adding one or more "
"font fallbacks."
msgstr ""

msgid ""
"Font fallbacks can also be defined on a local basis similar to :ref:"
"`doc_using_fonts_opentype_font_features`, but this is not covered here for "
"brevity reasons."
msgstr ""

msgid "Variable fonts"
msgstr "可变字体"

msgid ""
"Godot has full support for `variable fonts <https://variablefonts.io/>`__, "
"which allow you to use a single font file to represent various font weights "
"and styles (regular, bold, italic, …). This must be supported by the font "
"file you're using."
msgstr ""

msgid ""
"To use a variable font, create a :ref:`class_FontVariation` resource in the "
"location where you intend to use the font, then load a font file within the "
"FontVariation resource:"
msgstr ""

msgid "Creating a FontVariation resource"
msgstr "创建 FontVariation 资源"

msgid "Loading a font file into the FontVariation resource"
msgstr "为 FontVariation 资源加载字体文件"

msgid ""
"Scroll down to the FontVariation's **Variation** section, then click the "
"**Variation Coordinates** text to expand the list of axes that can be "
"adjusted:"
msgstr ""

msgid "List of variation axes"
msgstr "可变轴列表"

msgid ""
"The set of axes you can adjust depends on the font loaded. Some variable "
"fonts only support one axis of adjustment (typically *weight* or *slant*), "
"while others may support multiple axes of adjustment."
msgstr ""

msgid ""
"For example, here's the `Inter V <https://rsms.me/inter/>`__ font with a "
"*weight* of ``900`` and a *slant* of ``-10``:"
msgstr ""

msgid "Variable font example (Inter V)"
msgstr "可变字体示例（Inter V）"

msgid ""
"While variable font axis names and scales aren't standardized, some common "
"conventions are usually followed by font designers. For instance, the "
"*weight* axis typically uses ``400`` as the \"regular\" font weight and "
"``700`` as the \"bold\" font weight."
msgstr ""

msgid ""
"You can save the FontVariation to a ``.tres`` resource file to reuse it in "
"other places:"
msgstr ""

msgid "Saving FontVariation to an external resource file"
msgstr "将 FontVariation 保存为外部资源文件"

msgid "Faux bold and italic"
msgstr "假粗体和假斜体"

msgid ""
"When writing text in bold or italic, using font variants specifically "
"designed for this looks better. Spacing between glyphs will be more "
"consistent when using a bold font, and certain glyphs' shapes may change "
"entirely in italic variants (compare \"a\" and *\"a\"*)."
msgstr ""

msgid ""
"However, real bold and italic fonts require shipping more font files, which "
"increases distribution size. A single :ref:`variable font "
"<doc_using_fonts_variable_fonts>` file can also be used, but this file will "
"be larger than a single non-variable font. While file size is usually not an "
"issue for desktop projects, it can be a concern for mobile/web projects that "
"strive to keep distribution size as low as possible."
msgstr ""

msgid ""
"To allow bold and italic fonts to be displayed without having to ship "
"additional fonts (or use a variable font that is larger in size), Godot "
"supports *faux* bold and italic."
msgstr ""

msgid ""
"Faux bold/italic (top), real bold/italic (bottom). Normal font used: Open "
"Sans SemiBold"
msgstr ""

msgid ""
"Faux bold and italic is automatically used in :ref:`class_RichTextLabel`'s "
"bold and italic tags if no custom fonts are provided for bold and/or italic."
msgstr ""

msgid ""
"To use faux bold, create a FontVariation resource in a property where a Font "
"resource is expected. Set **Variation > Embolden** to a positive value to "
"make a font bolder, or to a negative value to make it less bold. Recommended "
"values are between ``0.5`` and ``1.2`` depending on the font."
msgstr ""

msgid ""
"Faux italic is created by skewing the text, which is done by modifying the "
"per-character transform. This is also provided in FontVariation using the "
"**Variation > Transform** property. Setting the ``yx`` component of the "
"character transform to a positive value will italicize the text. Recommended "
"values are between ``0.2`` and ``0.4`` depending on the font."
msgstr ""

msgid "Adjusting font spacing"
msgstr "调整字体间距"

msgid ""
"For stylistic purposes or for better readability, you may want to adjust how "
"a font is presented in Godot."
msgstr ""

msgid ""
"Create a FontVariation resource in a property where a Font resource is "
"expected. There are 4 properties available in the **Variation > Extra "
"Spacing** section, which accept positive and negative values:"
msgstr ""

msgid "**Glyph:** Additional spacing between every glyph."
msgstr ""

msgid "**Space:** Additional spacing between words."
msgstr ""

msgid ""
"**Top:** Additional spacing above glyphs. This is used for multiline text, "
"but also to calculate the minimum size of controls such as :ref:"
"`class_Label` and :ref:`class_Button`."
msgstr ""

msgid ""
"**Top:** Additional spacing below glyphs. This is used for multiline text, "
"but also to calculate the minimum size of controls such as :ref:"
"`class_Label` and :ref:`class_Button`."
msgstr ""

msgid ""
"The **Variation > Transform** property can also be adjusted to stretch "
"characters horizontally or vertically. This is specifically done by "
"adjusting the ``xx`` (horizontal scale) and ``yy`` (vertical scale) "
"components. Remember to adjust glyph spacing to account for any changes, as "
"glyph transform doesn't affect how much space each glyph takes in the text. "
"Non-uniform scaling of this kind should be used sparingly, as fonts are "
"generally not designed to be displayed with stretching."
msgstr ""

msgid "OpenType font features"
msgstr "OpenType 字体特性"

msgid ""
"Godot supports enabling OpenType font features, which are a standardized way "
"to define alternate characters that can be toggled without having to swap "
"font files entirely. Despite being named OpenType font features, these are "
"also supported in TrueType (``.ttf``) and WOFF/WOFF2 font files."
msgstr ""

msgid ""
"Support for OpenType features highly depends on the font used. Some fonts "
"don't support any OpenType features, while other fonts can support dozens of "
"toggleable features."
msgstr ""

#, fuzzy
msgid "There are 2 ways to use OpenType font features:"
msgstr "使用 OpenType 字体特性有两种方法："

msgid "**Globally on a font file**"
msgstr ""

msgid ""
"In the dialog that appears, look for the **Metadata Overrides > OpenType "
"Features** section on the sidebar on the right, click the **Features (0 of N "
"set)** text to expand the property, then click **Add Feature**:"
msgstr ""

msgid "OpenType feature overrides in Advanced Import Settings"
msgstr "高级导入设置中的 OpenType 特性覆盖"

msgid "**In a specific font usage (FontVariation)**"
msgstr ""

msgid ""
"To use a font feature, create a FontVariation resource like you would do for "
"a :ref:`variable font <doc_using_fonts_variable_fonts>`, then load a font "
"file within the FontVariation resource:"
msgstr ""

msgid "Loading a font file into a FontVariation resource"
msgstr "在 FontVariation 资源中加载字体文件"

msgid ""
"Scroll down to the FontVariation's **OpenType Features** section, click the "
"**Features (0 of N set)** text to expand the property, then click **Add "
"Feature** and select the desired feature in the dropdown:"
msgstr ""

msgid "Specifying OpenType features in a FontVariation resource"
msgstr "在 FontVariation 资源中指定 OpenType 特性"

msgid ""
"For example, here's the `Inter <https://rsms.me/inter/>`__ font without the "
"*Slashed Zero* feature (top), then with the *Slashed Zero* OpenType feature "
"enabled (bottom):"
msgstr ""

msgid "OpenType feature comparison (Inter)"
msgstr "OpenType 特性比较（Inter）"

msgid ""
"You can disable ligatures and/or kerning for a specific font by adding "
"OpenType features, then unchecking them in the inspector:"
msgstr ""

msgid "Disabling ligatures and kerning for a font"
msgstr "禁用字体的合字和字偶距"

msgid "System fonts"
msgstr "系统字体"

msgid ""
"Loading system fonts is only supported on Windows, macOS, Linux, Android and "
"iOS."
msgstr "只有 Windows、macOS、Linux、Android、iOS 支持加载系统字体。"

msgid ""
"However, loading system fonts on Android is unreliable as there is no "
"official API for doing so. Godot has to rely on parsing system configuration "
"files, which can be modified by third-party Android vendors. This may result "
"in non-functional system font loading."
msgstr ""

msgid ""
"System fonts are a different type of resource compared to imported fonts. "
"They are never actually imported into the project, but are loaded at run-"
"time. This has 2 benefits:"
msgstr ""

msgid ""
"The fonts are not included within the exported PCK file, leading to a "
"smaller file size for the exported project."
msgstr ""

msgid ""
"Since fonts are not included with the exported project, this avoids "
"licensing issues that would occur if proprietary system fonts were "
"distributed alongside the project."
msgstr ""

msgid ""
"The engine automatically uses system fonts as fallback fonts, which makes it "
"possible to display CJK characters and emoji without having to load a custom "
"font. There are some restrictions that apply though, as mentioned in the :"
"ref:`Using emoji <doc_using_fonts_emoji>` section."
msgstr ""

msgid ""
"Create a :ref:`class_SystemFont` resource in the location where you desire "
"to use the system font:"
msgstr ""

#, fuzzy
msgid "Creating a SystemFont resource"
msgstr "创建 ``BitmapFont`` 字体资源"

msgid "Specifying a font name to use in a SystemFont resource"
msgstr ""

msgid ""
"You can either specify one or more font names explicitly (such as "
"``Arial``), or specify the name of a font *alias* that maps to a "
"\"standard\" default font for the system:"
msgstr ""
"你可以显式指定若干字体名称（例如 ``Arial``\\ ），也可以指定字体的\\ *别名"
"*\\ ，后者会映射到系统中的“标准”默认字体："

msgid "Font alias"
msgstr "字体别名"

msgid "Windows"
msgstr "Windows"

msgid "macOS/iOS"
msgstr "macOS/iOS"

msgid "Linux"
msgstr "Linux"

msgid "Android"
msgstr "Android"

msgid "``sans-serif``"
msgstr "``sans-serif``"

msgid "Arial"
msgstr "Arial"

msgid "Helvetica"
msgstr "Helvetica"

msgid "*Handled by fontconfig*"
msgstr "*由 fontconfig 处理*"

msgid "Roboto / Noto Sans"
msgstr "Roboto / Noto Sans"

msgid "``serif``"
msgstr "``serif``"

msgid "Times New Roman"
msgstr "Times New Roman"

msgid "Times"
msgstr "Times"

msgid "Noto Serif"
msgstr "Noto Serif"

msgid "``monospace``"
msgstr "``monospace``"

msgid "Courier New"
msgstr "Courier New"

msgid "Courier"
msgstr "Courier"

msgid "Droid Sans Mono"
msgstr "Droid Sans Mono"

msgid "``cursive``"
msgstr "``cursive``"

msgid "Comic Sans MS"
msgstr "Comic Sans MS"

msgid "Apple Chancery"
msgstr "Apple Chancery"

msgid "Dancing Script"
msgstr "Dancing Script"

msgid "``fantasy``"
msgstr "``fantasy``"

msgid "Gabriola"
msgstr "Gabriola"

msgid "Papyrus"
msgstr "Papyrus"

msgid ""
"On Android, Roboto is used for Latin/Cyrillic text and Noto Sans is used for "
"other languages' glyphs such as CJK. On third-party Android distributions, "
"the exact font selection may differ."
msgstr ""

msgid ""
"If specifying more than one font, the first font that is found on the system "
"will be used (from top to bottom). Font names and aliases are case-"
"insensitive on all platforms."
msgstr ""

msgid ""
"Like for font variations, you can save the SystemFont arrangement to a "
"resource file to reuse it in other places."
msgstr ""

msgid ""
"Remember that different system fonts have different metrics, which means "
"that text that can fit within a rectangle on one platform may not be doing "
"so on another platform. Always reserve some additional space during "
"development so that labels can extend further if needed."
msgstr ""

msgid ""
"Unlike Windows and macOS/iOS, the set of default fonts shipped on Linux "
"depends on the distribution. This means that on different Linux "
"distributions, different fonts may be displayed for a given system font name "
"or alias."
msgstr ""

msgid ""
"It is also possible to load fonts at runtime even if they aren't installed "
"on the system. See :ref:`Runtime loading and saving "
"<doc_runtime_file_loading_and_saving_fonts>` for details."
msgstr ""

msgid "Font prerendering"
msgstr "字体预渲染"

msgid ""
"When using traditional rasterized fonts, Godot caches glyphs on a per-font "
"and per-size basis. This reduces stuttering, but it can still occur the "
"first time a glyph is displayed when running the project. This can be "
"especially noticeable at higher font sizes or on mobile devices."
msgstr ""
"使用传统的栅格字体时，Godot 会针对不同字体的不同尺寸进行字形的缓存。这样做能"
"够减轻卡顿，但卡顿仍然会在项目的运行过程中首次显示某个字形时发生。如果使用的"
"是较大的字体大小，或者是在移动设备上运行，就会尤为明显。"

msgid ""
"When using MSDF fonts, they only need to be rasterized once to a special "
"signed distance field texture. This means caching can be done purely on a "
"per-font basis, without taking the font size into consideration. However, "
"the initial rendering of MSDF fonts is slower compared to a traditional "
"rasterized font at a medium size."
msgstr ""
"使用 MSDF 字体时，只需要执行一次特殊的带符号距离场纹理栅格化。这样就可以单纯"
"针对字体进行缓存，无需考虑字体大小。不过 MSDF 字体的首次渲染相对于中等大小的"
"传统栅格字体要慢。"

msgid ""
"To avoid stuttering issues related to font rendering, it is possible to "
"*prerender* certain glyphs. This can be done for all glyphs you intend to "
"use (for optimal results), or only for common glyphs that are most likely to "
"appear during gameplay (to reduce file size). Glyphs that aren't pre-"
"rendered will be rasterized on-the-fly as usual."
msgstr ""
"为了避免与字体渲染相关的卡顿问题，可以对特定的字形进行\\ *预渲染*\\ 。可以针"
"对所有需要使用的字形进行预渲染（得到最优的效果），也可以只针对游戏中可能出现"
"的常见字形进行预渲染（降低文件尺寸）。没有预渲染的字形会照常进行即时栅格化。"

msgid ""
"In both cases (traditional and MSDF), font rasterization is done on the CPU. "
"This means that the GPU performance doesn't affect how long it takes for "
"fonts to be rasterized."
msgstr ""
"无论是传统字体还是 MSDF 字体，栅格化都是在 CPU 上进行的。也就是说 GPU 的性能"
"并不会影响字体栅格化的耗时。"

msgid ""
"Move to the **Pre-render Configurations** tab of the Advanced Import "
"Settings dialog, then add a configuration by clicking the \"plus\" symbol:"
msgstr ""
"前往“高级导入设置”对话框的\\ **预渲染配置**\\ 选项卡，单击“加号”添加配置："

msgid ""
"Adding a new prerendering configuration in the Advanced Import Settings "
"dialog"
msgstr "在“高级导入设置”对话框中添加新的预渲染配置"

msgid ""
"After adding a configuration, make sure it is selected by clicking its name "
"once. You can also rename the configuration by double-clicking it."
msgstr ""
"添加配置后，请单击对应的名称，确保选中该配置。双击名称可以重命名该配置。"

msgid ""
"There are 2 ways to add glyphs to be prerendered to a given configuration. "
"It is possible to use both approaches in a cumulative manner:"
msgstr "在配置中添加字形的方法有两种。两种方法可以同时使用，效果会累积："

msgid "**Using text from translations**"
msgstr "**使用翻译中的文本**"

msgid ""
"For most projects, this approach is the most convenient to use, as it "
"automatically sources text from your language translations. The downside is "
"that it can only be used if your project supports :ref:`internationalization "
"<doc_internationalizing_games>`. Otherwise, stick to the \"Using custom "
"text\" approach described below."
msgstr ""
"对于大多数项目而言，使用这个方法最方便，因为可以从语言翻译中自动提取文本。缺"
"点是只有项目支持\\ :ref:`国际化 <doc_internationalizing_games>`\\ 时才能使"
"用。否则请使用下面“使用自定义文本”的方法。"

msgid ""
"After adding translations to the Project Settings, use the **Glyphs from the "
"Translations** tab to check translations by double-clicking them, then click "
"**Shape All Strings in the Translations and Add Glyphs** at the bottom:"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog with the Glyphs "
"from the Translations tab"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog with the "
"**Glyphs from the Translations** tab"
msgstr ""

msgid ""
"The list of prerendered glyphs is not automatically updated when "
"translations are updated, so you need to repeat this process if your "
"translations have changed significantly."
msgstr ""

msgid "**Using custom text**"
msgstr "**使用自定义文本**"

msgid ""
"While it requires manually specifying text that will appear in the game, "
"this is the most efficient approach for games which don't feature user text "
"input. This approach is worth exploring for mobile games to reduce the file "
"size of the distributed app."
msgstr ""

msgid ""
"To use existing text as a baseline for prerendering, go to the **Glyphs from "
"the Text** sub-tab of the Advanced Import Settings dialog, enter text in the "
"window on the right, then click **Shape Text and Add Glyphs** at the bottom "
"of the dialog:"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog, Glyphs from "
"the Text tab"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog with the "
"**Glyphs from the Text** tab"
msgstr ""

msgid ""
"If your project supports :ref:`internationalization "
"<doc_internationalizing_games>`, you can paste the contents of your CSV or "
"PO files in the above box to quickly prerender all possible characters that "
"may be rendered during gameplay (excluding user-provided or non-translatable "
"strings)."
msgstr ""

msgid "**By enabling character sets**"
msgstr "**通过启用字符集**"

msgid ""
"The second method requires less configuration and fewer updates if your "
"game's text changes, and is more suited to text-heavy games or multiplayer "
"games with chat. On the other hand, it may cause glyphs that never show up "
"in the game to be prerendered, which is less efficient in terms of file size."
msgstr ""

msgid ""
"To use existing text as a baseline for prerendering, go to the **Glyphs from "
"the Character Map** sub-tab of the Advanced Import Settings dialog, then "
"*double-click* character sets to be enabled on the right:"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog, Glyphs from "
"the Character Map tab"
msgstr ""

msgid ""
"Enabling prerendering in the Advanced Import Settings dialog with the "
"**Glyphs from the Character Map** tab"
msgstr ""

msgid ""
"To ensure full prerendering, the character sets you need to enable depend on "
"which languages are supported in your game. For English, only **Basic "
"Latin** needs to be enabled. Enabling **Latin-1 Supplement** as well allows "
"fully covering many more languages, such as French, German and Spanish. For "
"Russian, **Cyrillic** needs to be enabled, and so on."
msgstr ""

msgid "Default project font properties"
msgstr "默认项目字体属性"

msgid ""
"In the **GUI > Theme** section of the advanced Project Settings, you can "
"choose how the default font should be rendered:"
msgstr ""
"在高级“项目设置”的 **GUI > 主题**\\ 部分中，可以对默认字体的渲染方式进行选"
"择："

msgid ""
"**Default Font Antialiasing:** Controls the :ref:`antialiasing "
"<doc_using_fonts_antialiasing>` method used for the default project font."
msgstr ""

msgid ""
"**Default Font Hinting:** Controls the :ref:`hinting "
"<doc_using_fonts_hinting>` method used for the default project font."
msgstr ""

msgid ""
"**Default Font Subpixel Positioning:** Controls the :ref:`subpixel "
"positioning <doc_using_fonts_subpixel_positioning>` method for the default "
"project font."
msgstr ""

msgid ""
"**Default Font Multichannel Signed Distance Field:** If ``true``, makes the "
"default project font use :ref:`MSDF font rendering <doc_using_fonts_msdf>` "
"instead of traditional rasterization."
msgstr ""

msgid ""
"**Default Font Generate Mipmaps:** If ``true``, enables :ref:`mipmap "
"<doc_using_fonts_mipmaps>` generation and usage for the default project font."
msgstr ""

msgid ""
"These project settings *only* affect the default project font (the one that "
"is hardcoded in the engine binary)."
msgstr ""

msgid ""
"Custom fonts' properties are governed by their respective import options "
"instead. You can use the **Import Defaults** section of the Project Settings "
"dialog to override default import options for custom fonts."
msgstr ""

msgid "Translation status"
msgstr "翻译状态"
