# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Viewport and canvas transforms"
msgstr "视口变换与画布变换"

msgid "Introduction"
msgstr "前言"

msgid ""
"This is an overview of the 2D transforms going on for nodes from the moment "
"they draw their content locally to the time they are drawn onto the screen. "
"This overview discusses very low level details of the engine."
msgstr ""
"本文简要介绍了从本地绘制节点内容开始到这些内容绘制到屏幕上为止的 2D 变换过"
"程，对引擎非常底层的细节进行了讨论。"

msgid ""
"The goal of this tutorial is to teach a way for feeding input events to the "
"Input with a position in the correct coordinate system."
msgstr ""
"本教程的目标是介绍如何为提供给 Input 的输入事件在正确的坐标系中确定位置。"

msgid ""
"A more extensive description of all coordinate systems and 2d transforms is "
"available in :ref:`doc_2d_coordinate_systems`."
msgstr ""
"关于所有坐标系以及 2D 变换的详尽描述见 :ref:`doc_2d_coordinate_systems`\\ 。"

msgid "Canvas transform"
msgstr "画布变换"

msgid ""
"As mentioned in the previous tutorial, :ref:`doc_canvas_layers`, every "
"CanvasItem node (remember that Node2D and Control based nodes use CanvasItem "
"as their common root) will reside in a *Canvas Layer*. Every canvas layer "
"has a transform (translation, rotation, scale, etc.) that can be accessed as "
"a :ref:`Transform2D <class_Transform2D>`."
msgstr ""
"正如前面教程 :ref:`doc_canvas_layers` 中提到的那样，每个 CanvasItem 节点（要"
"记得 Node2D 和基于 Control 的节点都使用 CanvasItem 作为它们的公共根）将驻留"
"在 *Canvas Layer* 中。每个 Canvas Layer 都有一个变换（平移、旋转、缩放等），"
"可以作为 :ref:`Transform2D <class_Transform2D>` 进行访问。"

msgid ""
"Also covered in the previous tutorial, nodes are drawn by default in Layer "
"0, in the built-in canvas. To put nodes in a different layer, a :ref:"
"`CanvasLayer <class_CanvasLayer>` node can be used."
msgstr ""
"在前面的教程中也有介绍，节点默认是在 0 层上绘制，即内置的画布。如果要把节点放"
"在不同的层中，可以使用 :ref:`CanvasLayer <class_CanvasLayer>` 节点。"

msgid "Global canvas transform"
msgstr "全局画布变换"

msgid ""
"Viewports also have a Global Canvas transform (also a :ref:`Transform2D "
"<class_Transform2D>`). This is the master transform and affects all "
"individual *Canvas Layer* transforms. Generally, this is primarily used in "
"Godot's CanvasItem Editor."
msgstr ""
"Viewport 还具有全局画布变换（也是一个 :ref:`Transform2D "
"<class_Transform2D>`\\ ）。这是一个能够影响所有\\ *画布层*\\ 的主变换。一般而"
"言，主要用于 Godot 的 CanvasItem 编辑器。"

msgid "Stretch transform"
msgstr "拉伸变换"

msgid ""
"Finally, viewports have a *Stretch Transform*, which is used when resizing "
"or stretching the screen. This transform is used internally (as described "
"in :ref:`doc_multiple_resolutions`), but can also be manually set on each "
"viewport."
msgstr ""
"最后，Viewport 有\\ *拉伸变换*\\ ，用于调整大小或拉伸屏幕。此变换在内部使用"
"（见 :ref:`doc_multiple_resolutions`\\ ），但也可以在每个 Viewport 上手动设"
"置。"

msgid ""
"Input events are multiplied by this transform but lack the ones above. To "
"convert InputEvent coordinates to local CanvasItem coordinates, the :ref:"
"`CanvasItem.make_input_local() <class_CanvasItem_method_make_input_local>` "
"function was added for convenience."
msgstr ""
"输入事件会与这个变换相乘，但还缺少前面说的那些。为了方便将 InputEvent 的坐标"
"转换到 CanvasItem 局部坐标，添加了 :ref:`CanvasItem.make_input_local() "
"<class_CanvasItem_method_make_input_local>` 函数。"

msgid "Window transform"
msgstr "窗口变换"

msgid ""
"The root viewport is a :ref:`Window <class_Window>`. In order to scale and "
"position the *Window's* content as described in :ref:"
"`doc_multiple_resolutions`, each :ref:`Window <class_Window>` contains a "
"*window transform*. It is for example responsible for the black bars at the "
"*Window's* sides so that the *Viewport* is displayed with a fixed aspect "
"ratio."
msgstr ""
"根视口是一个 :ref:`Window <class_Window>`\\ 。为了能够像 :ref:"
"`doc_multiple_resolutions` 中一样将\\ *窗口*\\ 的内容进行缩放和移动，每个 :"
"ref:`Window <class_Window>` 都包含了\\ *窗口变换*\\ 。例如在 *Viewport* 使用"
"固定长宽比显示时，负责\\ *窗口*\\ 边缘的黑框。"

msgid "Transform order"
msgstr "变换顺序"

msgid ""
"To convert a CanvasItem local coordinate to an actual screen coordinate, the "
"following chain of transforms must be applied:"
msgstr "要将 CanvasItem 本地坐标转换为实际屏幕坐标，必须应用以下变换链："

msgid "Transform functions"
msgstr "变换函数"

msgid ""
"The above graphic shows some available transform functions. All transforms "
"are directed from right to left, this means multiplying a transform with a "
"coordinate results in a coordinate system further to the left, multiplying "
"the :ref:`affine inverse <class_Transform2D_method_affine_inverse>` of a "
"transform results in a coordinate system further to the right:"
msgstr ""
"上图显示了一些可用的变换函数。所有变换都是从右向左的，这意味着将一个变换与一"
"个坐标相乘会得到一个更靠左的坐标系，将一个变换的 :ref:`affine inverse "
"<class_Transform2D_method_affine_inverse>` 相乘会得到一个更靠右的坐标系："

msgid ""
"Finally, then, to convert a CanvasItem local coordinates to screen "
"coordinates, just multiply in the following order:"
msgstr "那么最后, 要将CanvasItem的本地坐标转换为屏幕坐标, 只需按以下顺序相乘:"

msgid ""
"Keep in mind, however, that it is generally not desired to work with screen "
"coordinates. The recommended approach is to simply work in Canvas "
"coordinates (``CanvasItem.get_global_transform()``), to allow automatic "
"screen resolution resizing to work properly."
msgstr ""
"但请记住, 通常情况最好不要使用屏幕坐标. 推荐的方法是, 仅仅使用画布坐标"
"( ``CanvasItem.get_global_transform()`` ), 以保证自动分辨率调整能正常工作."

msgid "Feeding custom input events"
msgstr "提供自定义输入事件"

msgid ""
"It is often desired to feed custom input events to the game. With the above "
"knowledge, to correctly do this in the focused window, it must be done the "
"following way:"
msgstr ""
"通常需要将自定义输入事件提供给场景树。要正确地做到这一点，必须通过以下方式完"
"成："

msgid "Translation status"
msgstr "翻译状态"
