# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "2D sprite animation"
msgstr "2D 精灵动画"

msgid "Introduction"
msgstr "前言"

msgid ""
"In this tutorial, you'll learn how to create 2D animated characters with the "
"AnimatedSprite2D class and the AnimationPlayer. Typically, when you create "
"or download an animated character, it will come in one of two ways: as "
"individual images or as a single sprite sheet containing all the animation's "
"frames. Both can be animated in Godot with the AnimatedSprite2D class."
msgstr ""
"在本教程中，你将学习如何使用 AnimatedSprite2D 类和 AnimationPlayer 创建 2D 动"
"画角色。 通常，当你创建或下载动画角色时，它将以两种方式之一出现：作为单独的图"
"像或作为包含所有动画帧的单个精灵表。 两者都可以在 Godot 中使用 "
"AnimatedSprite2D 类进行动画处理。"

msgid ""
"First, we'll use :ref:`AnimatedSprite2D <class_AnimatedSprite2D>` to animate "
"a collection of individual images. Then we will animate a sprite sheet using "
"this class. Finally, we will learn another way to animate a sprite sheet "
"with :ref:`AnimationPlayer <class_AnimationPlayer>` and the *Animation* "
"property of :ref:`Sprite2D <class_Sprite2D>`."
msgstr ""
"首先，我们将使用 :ref:`AnimatedSprite2D <class_AnimatedSprite2D>` 对单个图像"
"集合进行动画处理。 然后我们将使用此类对精灵表进行动画处理。 最后，我们将学习"
"另一种使用 :ref:`AnimationPlayer <class_AnimationPlayer>` 和 :ref:`Sprite2D "
"<class_Sprite2D>` 的 *Animation* 属性来制作精灵表动画的方法。"

msgid ""
"Art for the following examples by https://opengameart.org/users/ansimuz and "
"tgfcoder."
msgstr ""
"以下示例的美术资产由 https://opengameart.org/users/ansimuz 和 https://"
"opengameart.org/users/tgfcoder 共同提供。"

msgid "Individual images with AnimatedSprite2D"
msgstr "AnimateSprite2D 与若干单独的图片"

msgid ""
"In this scenario, you have a collection of images, each containing one of "
"your character's animation frames. For this example, we'll use the following "
"animation:"
msgstr ""
"在这个情况下, 你有一组图像, 每一个都包含你角色的动画的一帧. 对于这个例子, 我"
"们将使用以下动画:"

msgid ""
"You can download the images here: `2d_sprite_animation_assets.zip <https://"
"github.com/godotengine/godot-docs-project-starters/releases/download/"
"latest-4.x/2d_sprite_animation_assets.zip>`_"
msgstr ""
"你可以在这里下载图片：`2d_sprite_animation_assets.zip <https://github.com/"
"godotengine/godot-docs-project-starters/releases/download/latest-4."
"x/2d_sprite_animation_assets.zip>`_"

msgid ""
"Unzip the images and place them in your project folder. Set up your scene "
"tree with the following nodes:"
msgstr "解压缩这些图像并将它们放在项目文件夹中. 使用以下节点布置场景树:"

msgid ""
"The root node could also be :ref:`Area2D <class_Area2D>` or :ref:"
"`RigidBody2D <class_RigidBody2D>`. The animation will still be made in the "
"same way. Once the animation is completed, you can assign a shape to the "
"CollisionShape2D. See :ref:`Physics Introduction <doc_physics_introduction>` "
"for more information."
msgstr ""
"根节点也可以是 :ref:`Area2D <class_Area2D>` 或 :ref:`RigidBody2D "
"<class_RigidBody2D>`\\ 。动画仍然会以同样的方式制作。一旦动画完成，你就可以"
"为 CollisionShape2D 形状分配一个形状。更多信息请参见\\ :ref:`物理介绍 "
"<doc_physics_introduction>`\\ 。"

msgid ""
"Now select the ``AnimatedSprite2D`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"现在选中 ``AnimatedSprite2D`` ，并在它的 *SpriteFrames* 属性中，选择“新建 "
"SpriteFrames”。"

msgid ""
"Click on the new SpriteFrames resource and you'll see a new panel appear at "
"the bottom of the editor window:"
msgstr ""
"点击新的 SpriteFrames 资源，你会看到一个新的面板出现在编辑器窗口的底部："

msgid ""
"From the FileSystem dock on the left side, drag the 8 individual images into "
"the center part of the SpriteFrames panel. On the left side, change the name "
"of the animation from \"default\" to \"run\"."
msgstr ""
"将这 8 张独立的图片从左边的“文件系统”面板拖放到“动画帧”面板的中间部分。在左"
"边，将动画名称从“default”更改为“run”。"

msgid ""
"Use the \"Play\" buttons on the top-right of the *Filter Animations* input "
"to preview the animation. You should now see the animation playing in the "
"viewport. However, it is a bit slow. To fix this, change the *Speed (FPS)* "
"setting in the SpriteFrames panel to 10."
msgstr ""
"使用 *过滤动画(Filter Animations)* 输入右上角的“播放(Play)”按钮预览动画。 你"
"现在应该可以看到动画在视口中播放。 然而，它有点慢。 要解决此问题，请将 "
"SpriteFrames 面板中的 *Speed (FPS)* 设置更改为 10。"

msgid ""
"You can add additional animations by clicking the \"Add Animation\" button "
"and adding additional images."
msgstr "你可以通过单击“添加动画”按钮并添加其他图像来添加其他动画。"

msgid "Controlling the animation"
msgstr "控制动画"

msgid ""
"Once the animation is complete, you can control the animation via code using "
"the ``play()`` and ``stop()`` methods. Here is a brief example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"动画完成后, 你可以通过代码中的 ``play()`` 和 ``stop()`` 方法控制动画. 这里有"
"一个简单的例子, 按住右方向键播放动画, 松开后就停下."

msgid "Sprite sheet with AnimatedSprite2D"
msgstr "AnimateSprite2D 与精灵表"

msgid ""
"You can also easily animate from a sprite sheet with the class "
"``AnimatedSprite2D``. We will use this public domain sprite sheet:"
msgstr ""
"你还可以很方便地使用 ``AnimatedSprite2D`` 把精灵表做成动画。我们会用到这张公"
"共领域的精灵表："

msgid ""
"Right-click the image and choose \"Save Image As\" to download it, and then "
"copy the image into your project folder."
msgstr ""
"右键单击图片，选择“图片另存为”来下载图片，然后将图片复制到项目文件夹中。"

msgid ""
"Set up your scene tree the same way you did previously when using individual "
"images. Select the ``AnimatedSprite2D`` and in its *SpriteFrames* property, "
"select \"New SpriteFrames\"."
msgstr ""
"设置场景树的方法与之前使用单独图片的时候相同。选中 ``AnimatedSprite2D`` 后在 "
"*SpriteFrames* 属性里选择“新建 SpriteFrames”。"

msgid ""
"Click on the new SpriteFrames resource. This time, when the bottom panel "
"appears, select \"Add frames from a Sprite Sheet\"."
msgstr ""
"点击创建出来的 SpriteFrames 资源。底部面板出现后，这次我们选择“从精灵表中添加"
"帧”。"

msgid "You will be prompted to open a file. Select your sprite sheet."
msgstr "在弹出的打开文件对话框中，选择你的精灵表。"

msgid ""
"A new window will open, showing your sprite sheet. The first thing you will "
"need to do is to change the number of vertical and horizontal images in your "
"sprite sheet. In this sprite sheet, we have four images horizontally and two "
"images vertically."
msgstr ""
"接下来会打开一个新的窗口，里面会显示刚才的精灵表。你首先需要修改精灵表中纵向"
"和横向的图片数量，我们的这张精灵表里横向有四张图片、纵向有两张。"

msgid ""
"Next, select the frames from the sprite sheet that you want to include in "
"your animation. We will select the top four, then click \"Add 4 frames\" to "
"create the animation."
msgstr ""
"然后，在精灵表中选择动画中想要包含的帧。这里我们选中上面的四个，然后点击“添"
"加 4 帧”来创建动画。"

msgid ""
"You will now see your animation under the list of animations in the bottom "
"panel. Double click on default to change the name of the animation to jump."
msgstr ""
"现在你就可以看到在底部面板的动画列表里看到这个动画了。双击 default（默认），"
"然后把动画的名称改成 jump（跳跃）。"

msgid ""
"Finally, check the play button on the SpriteFrames editor to see your frog "
"jump!"
msgstr "最后，点击 SpriteFrames 编辑器上的播放按钮，你的青蛙就能跳起来了！"

msgid "Sprite sheet with AnimationPlayer"
msgstr "AnimationPlayer 与精灵表"

msgid ""
"Another way that you can animate when using a sprite sheet is to use a "
"standard :ref:`Sprite2D <class_Sprite2D>` node to display the texture, and "
"then animating the change from texture to texture with :ref:`AnimationPlayer "
"<class_AnimationPlayer>`."
msgstr ""
"使用 Sprite Sheet 时制作动画的另一种方法是使用标准 :ref:`Sprite2D "
"<class_Sprite2D>` 节点来显示纹理，然后使用 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 对纹理之间的变化进行动画处理 。"

msgid "Consider this sprite sheet, which contains 6 frames of animation:"
msgstr "考虑一下这个包含 6 帧动画的精灵表："

msgid ""
"Right-click the image and choose \"Save Image As\" to download, then copy "
"the image into your project folder."
msgstr "右键单击图片，选择“图片另存为”下载图片，然后将图片复制到项目文件夹中。"

msgid ""
"Our goal is to display these images one after another in a loop. Start by "
"setting up your scene tree:"
msgstr "我们的目的是, 循环着一个接一个地显示这些图像. 首先布置你的场景树:"

msgid ""
"Drag the spritesheet into the Sprite's *Texture* property, and you'll see "
"the whole sheet displayed on the screen. To slice it up into individual "
"frames, expand the *Animation* section in the Inspector and set the "
"*Hframes* to ``6``. *Hframes* and *Vframes* are the number of horizontal and "
"vertical frames in your sprite sheet."
msgstr ""
"将精灵表拖拽到 Sprite 的 *Texture* 属性里，你会看到整个清单显示在屏幕上。要把"
"它分割成单独的帧，请在“检查器”中展开 *Animation* 部分，将 *Hframes* 设置为 "
"``6``\\ 。\\ *Hframes* 和 *Vframes* 是精灵表中水平和垂直帧的数量。"

msgid ""
"Now try changing the value of the *Frame* property. You'll see that it "
"ranges from ``0`` to ``5`` and the image displayed by the Sprite2D changes "
"accordingly. This is the property we'll be animating."
msgstr ""
"现在尝试更改 *Frame* 属性的值。 你会看到它的范围从 ``0`` 到 ``5`` ，Sprite2D "
"显示的图像也会相应变化。 这是我们要设置动画的属性。"

msgid ""
"Select the ``AnimationPlayer`` and click the \"Animation\" button followed "
"by \"New\". Name the new animation \"walk\". Set the animation length to "
"``0.6`` and click the \"Loop\" button so that our animation will repeat."
msgstr ""
"选中 ``AnimationPlayer`` , 然后点击 \"动画\" 按钮, 然后点击 \"新建\" 按钮. 将"
"新动画命名为 \"walk\". 将动画长度设置为 ``0.6`` , 点击 \"Loop\" 按钮, 让动画"
"重复播放."

msgid ""
"Now select the ``Sprite2D`` node and click the key icon to add a new track."
msgstr "现在选中 ``Sprite2D`` 节点，然后单击钥匙图标，添加一个新轨道。"

msgid ""
"Continue adding frames at each point in the timeline (``0.1`` seconds by "
"default), until you have all the frames from 0 to 5. You'll see the frames "
"actually appearing in the animation track:"
msgstr ""
"继续在时间轴的每一点添加帧（默认为 ``0.1`` 秒），直到你得到了从 0 到 5 的所有"
"帧。你会看到这些帧出现在动画轨道上："

msgid "Press \"Play\" on the animation to see how it looks."
msgstr "按下动画上的“播放”键，看看效果如何。"

msgid "Controlling an AnimationPlayer animation"
msgstr "控制 AnimationPlayer 动画"

msgid ""
"Like with AnimatedSprite2D, you can control the animation via code using the "
"``play()`` and ``stop()`` methods. Again, here is an example to play the "
"animation while the right arrow key is held, and stop it when the key is "
"released."
msgstr ""
"与 AnimatedSprite2D 一样，你可以使用 ``play()`` 和 ``stop()`` 方法通过代码控"
"制动画。 同样，这里是一个在按住右箭头键时播放动画的示例，并在释放该键时停止动"
"画。"

msgid ""
"If updating both an animation and a separate property at once (for example, "
"a platformer may update the sprite's ``h_flip``/``v_flip`` properties when a "
"character turns while starting a 'turning' animation), it's important to "
"keep in mind that ``play()`` isn't applied instantly. Instead, it's applied "
"the next time the :ref:`AnimationPlayer <class_AnimationPlayer>` is "
"processed. This may end up being on the next frame, causing a 'glitch' "
"frame, where the property change was applied but the animation was not. If "
"this turns out to be a problem, after calling ``play()``, you can call "
"``advance(0)`` to update the animation immediately."
msgstr ""
"如果同时更新一个动画和一个其他的属性（比如说，平台跳跃游戏可能会更新精灵的 "
"``h_flip``/``v_flip`` 属性然后同时开始一个转身动画“turning”），要记住 "
"``play()`` 不是即时生效的。它会在下次 :ref:`AnimationPlayer "
"<class_AnimationPlayer>` 被处理时生效。也就是说可能要到下一帧才行，导致现在这"
"一帧变成“问题”帧——应用了属性的变化，但动画还没有开始。如果这会造成麻烦的话，"
"在调用 ``play()`` 后，你可以调用 ``advance(0)`` 来立即开始播放动画。"

msgid "Summary"
msgstr "总结"

msgid ""
"These examples illustrate the two classes you can use in Godot for 2D "
"animation. ``AnimationPlayer`` is a bit more complex than "
"``AnimatedSprite2D``, but it provides additional functionality, since you "
"can also animate other properties like position or scale. The class "
"``AnimationPlayer`` can also be used with an ``AnimatedSprite2D``. "
"Experiment to see what works best for your needs."
msgstr ""
"这些示例说明了可在 Godot 中用于 2D 动画的两个类。 ``AnimationPlayer`` 比 "
"``AnimatedSprite2D`` 稍微复杂一些，但它提供了额外的功能，因为你还可以为其他属"
"性（如位置或比例）设置动画。 类 ``AnimationPlayer`` 也可以与 "
"``AnimatedSprite2D`` 一起使用。 尝试看看什么最适合你的需求。"

msgid "Translation status"
msgstr "翻译状态"
