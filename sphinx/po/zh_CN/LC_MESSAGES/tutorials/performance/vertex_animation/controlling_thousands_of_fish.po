# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Controlling thousands of fish with Particles"
msgstr "用粒子控制数千条鱼"

#, fuzzy
msgid ""
"The problem with :ref:`MeshInstance3D <class_MeshInstance3D>` is that it is "
"expensive to update their transform array. It is great for placing many "
"static objects around the scene. But it is still difficult to move the "
"objects around the scene."
msgstr ""
":ref:`MeshInstance <class_MeshInstance>` 的问题是，更新转换数组的代价很高。它"
"非常适合在场景周围放置许多静态对象。但在场景中移动物体仍然很困难。"

#, fuzzy
msgid ""
"To make each instance move in an interesting way, we will use a :ref:"
"`GPUParticles3D <class_GPUParticles3D>` node. Particles take advantage of "
"GPU acceleration by computing and setting the per-instance information in a :"
"ref:`Shader <class_Shader>`."
msgstr ""
"为了使每个实例以有趣的方式移动, 我们将使用一个 :ref:`Particles "
"<class_Particles>` 节点.Particles通过在 :ref:`Shader <class_Shader>` 中计算和"
"设置每个实例的信息来利用GPU加速."

msgid ""
"First create a Particles node. Then, under \"Draw Passes\" set the "
"Particle's \"Draw Pass 1\" to your :ref:`Mesh <class_Mesh>`. Then under "
"\"Process Material\" create a new :ref:`ShaderMaterial "
"<class_ShaderMaterial>`."
msgstr ""
"首先创建一个 Particles 节点。然后在“Draw Passes”下将粒子的“Draw Pass 1”设置为"
"你的 :ref:`Mesh <class_Mesh>`\\ 。然后在“Process Material”下创建一个新的 :"
"ref:`ShaderMaterial <class_ShaderMaterial>`\\ 。"

msgid "Set the ``shader_type`` to ``particles``."
msgstr "将 ``shader_type`` 设置为 ``particles``\\ 。"

msgid "Then add the following two functions:"
msgstr "然后添加以下两个函数："

#, fuzzy
msgid ""
"These functions come from the default :ref:`ParticleProcessMaterial "
"<class_ParticleProcessMaterial>`. They are used to generate a random number "
"from each particle's ``RANDOM_SEED``."
msgstr ""
"这些函数来自默认的 :ref:`ParticlesMaterial <class_ParticlesMaterial>`\\ ，可"
"以用来根据每个粒子的 ``RANDOM_SEED`` 生成随机数。"

#, fuzzy
msgid ""
"A unique thing about particle shaders is that some built-in variables are "
"saved across frames. ``TRANSFORM``, ``COLOR``, and ``CUSTOM`` can all be "
"accessed in the shader of the mesh, and also in the particle shader the next "
"time it is run."
msgstr ""
"粒子着色器的一个独特之处在于, 一些内置的变量可以跨帧保存. ``TRANSFORM`` , "
"``COLOR`` 和 ``CUSTOM`` 都可以在网格的Spatial shader 中访问, 下次运行时也可以"
"在粒子着色器中访问."

#, fuzzy
msgid ""
"Next, setup your ``start()`` function. Particles shaders contain a "
"``start()`` function and a ``process()`` function."
msgstr ""
"接下来，设置您的 ``vertex`` 函数。粒子着色器只包含一个顶点函数，不包含其他函"
"数。"

msgid ""
"The code in the ``start()`` function only runs when the particle system "
"starts. The code in the ``process()`` function will always run."
msgstr ""

#, fuzzy
msgid ""
"We need to generate 4 random numbers: 3 to create a random position and one "
"for the random offset of the swim cycle."
msgstr ""
"接下来, 我们需要生成4个随机数:3个用于创建一个随机位置,1个用于游泳周期的随机偏"
"移量."

#, fuzzy
msgid ""
"First, generate 4 seeds inside the ``start()`` function using the ``hash()`` "
"function provided above:"
msgstr "首先，使用上面提供的 ``hash`` 函数在 ``RESTART`` 块中生成 4 个种子："

msgid ""
"Then, use those seeds to generate random numbers using ``rand_from_seed``:"
msgstr "然后，使用这些种子生成随机数，使用 ``rand_from_seed``\\ ："

msgid ""
"Finally, assign ``position`` to ``TRANSFORM[3].xyz``, which is the part of "
"the transform that holds the position information."
msgstr ""
"最后，将 ``position`` 赋值给 ``TRANSFORM[3].xyz``\\ ，它是保存位置信息的变换"
"的一部分。"

#, fuzzy
msgid "Remember, all this code so far goes inside the ``start()`` function."
msgstr "记住，到目前为止，所有这些代码都位于 ``RESTART`` 块中。"

msgid ""
"The vertex shader for your mesh can stay the exact same as it was in the "
"previous tutorial."
msgstr "网格的顶点着色器, 可以完全复用前一教程中的."

msgid ""
"Now you can move each fish individually each frame, either by adding to the "
"``TRANSFORM`` directly or by writing to ``VELOCITY``."
msgstr ""
"现在每一帧你都可以单独移动每条鱼了，可以直接增加 ``TRANSFORM`` 也可以设置 "
"``VELOCITY``\\ 。"

#, fuzzy
msgid ""
"Let's transform the fish by setting their ``VELOCITY`` in the ``start()`` "
"function."
msgstr "让我们通过设置鱼的 ``VELOCITY`` 来对它们进行变换。"

msgid ""
"This is the most basic way to set ``VELOCITY`` every particle (or fish) will "
"have the same velocity."
msgstr "这是设置 ``VELOCITY`` 的最基本方法，每个粒子（或鱼）都有相同的速度。"

msgid ""
"Just by setting ``VELOCITY`` you can make the fish swim however you want. "
"For example, try the code below."
msgstr "只要设置 ``VELOCITY``\\ ，你就可以让鱼自由游动。例如，尝试下面的代码。"

msgid "This will give each fish a unique speed between ``2`` and ``10``."
msgstr "这将为每条鱼在 ``2`` 和 ``10`` 之间设置不同的速度。"

msgid ""
"You can also let each fish change its velocity over time if you set the "
"velocity in the ``process()`` function."
msgstr ""

msgid ""
"If you used ``CUSTOM.y`` in the last tutorial, you can also set the speed of "
"the swim animation based on the ``VELOCITY``. Just use ``CUSTOM.y``."
msgstr ""
"如果你在上一个教程中使用了 ``CUSTOM.y``\\ ，你也可以基于 ``VELOCITY`` 来设置"
"游泳动画的速度。直接用 ``CUSTOM.y`` 就好了。"

msgid "This code gives you the following behavior:"
msgstr "代码产生的效果如图:"

#, fuzzy
msgid ""
"Using a ParticleProcessMaterial you can make the fish behavior as simple or "
"complex as you like. In this tutorial we only set Velocity, but in your own "
"Shaders you can also set ``COLOR``, rotation, scale (through ``TRANSFORM``). "
"Please refer to the :ref:`Particles Shader Reference <doc_particle_shader>` "
"for more information on particle shaders."
msgstr ""
"使用 ParticlesMaterial 可以随意让鱼的行为变得简单或复杂。在本教程中，我们只设"
"置了速度，但是在你自己的着色器中，你也可以设置 ``COLOR``\\ 、旋转、缩放（通"
"过 ``TRANSFORM``\\ ）。有关粒子着色器的更多信息，请参阅\\ :ref:`《粒子着色器"
"参考》 <doc_particle_shader>`\\ 。"

msgid "Translation status"
msgstr "翻译状态"
