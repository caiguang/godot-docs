# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "3D text"
msgstr "3D 文本"

msgid "Introduction"
msgstr "前言"

msgid ""
"In a project, there may be times when text needs to be created as part of a "
"3D scene and not just in the HUD. Godot provides 2 methods to do this: the "
"Label3D node and the TextMesh *resource* for a MeshInstance3D node."
msgstr ""
"项目中不仅会要在 HUD 中使用文本，有时也会需要把文本作为 3D 场景的一部分。"
"Godot 为此提供了两种方法。Label3D 节点以及 MeshInstance3D 节点的 TextMesh *资"
"源* 。"

msgid ""
"Additionally, Godot makes it possible to position Control nodes according to "
"a 3D point's position on the camera. This can be used as an alternative to "
"\"true\" 3D text in situations where Label3D and TextMesh aren't flexible "
"enough."
msgstr ""
"此外，Godot 还可以使根据 3D 顶点在相机上的位置来定位控制节点成为可能。在 "
"Label3D 和 TextMesh 不够灵活的情况下，这可以用作 \"真实的\" 3D 文本的替代方"
"案。"

msgid ""
"You can see 3D text in action using the `3D Labels and Texts demo project "
"<https://github.com/godotengine/godot-demo-projects/tree/master/3d/"
"labels_and_texts>`__."
msgstr ""
"你可以使用 `3D 标签和文本演示项目 <https://github.com/godotengine/godot-demo-"
"projects/tree/master/3d/labels_and_texts>`__ 查看3D文本的实际效果。"

msgid ""
"This page does **not** cover how to display a GUI scene within a 3D "
"environment. For information on how to achieve that, see the `GUI in 3D "
"<https://github.com/godotengine/godot-demo-projects/tree/master/viewport/"
"gui_in_3d>`__ demo project."
msgstr ""
"这个页面\\ **不会**\\ 涉及如何在 3D 环境中显示 GUI 场景。有关如何实现这个功能"
"的信息，请参考\\ `GUI in 3D <https://github.com/godotengine/godot-demo-"
"projects/tree/master/viewport/gui_in_3d>`__ \\ 演示项目。"

msgid "Label3D"
msgstr "Label3D"

msgid ""
"Label3D behaves like a Label node, but in 3D space. Unlike the Label node, "
"this Label3D node does **not** inherit properties of a GUI theme. However, "
"its look remains customizable and uses the same font subresource as Control "
"nodes (including support for :abbr:`MSDF (Multi-channel Signed Distance "
"Font)` font rendering)."
msgstr ""
"Label3D 的行为类似于 Label 节点，只不过是换到了 3D 空间中。与 Label 节点不"
"同，此 Label3D 节点\\ **不**\\ 继承 GUI 主题的属性。不过，外观还是可定制的，"
"使用的也是与 Control 节点相同的字体子资源（包括对 :abbr:`MSDF (Multi-channel "
"Signed Distance Font，多通道符号距离字体)` 字体渲染的支持）。"

msgid "Advantages"
msgstr "优势"

msgid ""
"Label3D is faster to generate than TextMesh. While both use a caching "
"mechanism to only render new glyphs once, Label3D will still be faster to "
"(re)generate, especially for long text. This can avoid stuttering during "
"gameplay on low-end CPUs or mobile."
msgstr ""
"Label3D 的生成速度比 TextMesh 快。虽然两者都使用缓存机制，只渲染一次新字形，"
"但 Label3D 的（重新）生成速度仍然更快，尤其是对于长文本。这可以避免在低端 "
"CPU 或移动设备上玩游戏时出现卡顿。"

msgid ""
"Label3D can use bitmap fonts and dynamic fonts (with and without :abbr:`MSDF "
"(Multi-channel Signed Distance Font)` or mipmaps). This makes it more "
"flexible on that aspect compared to TextMesh, especially for rendering fonts "
"with self-intersecting outlines."
msgstr ""
"Label3D 可以使用位图字体和动态字体（带或不带 :abbr:`MSDF (Multi-channel "
"Signed Distance Font)` 或 mipmap）。这使得它在这方面比 TextMesh 更灵活，尤其"
"是在渲染具有自交轮廓的字体时。"

msgid ""
"See :ref:`doc_gui_using_fonts` for guidelines on configuring font imports."
msgstr "有关配置字体导入的指南，请参阅 :ref:`doc_gui_using_fonts`。"

msgid "Limitations"
msgstr "限制"

msgid ""
"By default, Label3D has limited interaction with a 3D environment. It can be "
"occluded by geometry and lit by light sources if the **Shaded** flag is "
"enabled. However, it will not cast shadows even if **Cast Shadow** is set to "
"**On** in the Label3D's GeometryInstance3D properties. This is because the "
"node internally generates a quad mesh (one glyph per quad) with transparent "
"textures and has the same limitations as Sprite3D. Transparency sorting "
"issues can also become apparent when several Label3Ds overlap, especially if "
"they have outlines."
msgstr ""
"默认情况下，Label3D 与 3D 环境的交互有限。 *着色* 标志启用时能够接受光照、被"
"光源着色。但是，即使在 Label3D 的 GeometryInstance3D 属性中将 **阴影投射** 设"
"置为 **开启** ，它也不会投射阴影。这是因为该节点内部生成具有透明纹理的四边形"
"网格（每个四边形一个字形），并且具有与 Sprite3D 相同的限制。当多个 Label3D 重"
"叠，尤其是当它们具有轮廓时，透明度排序问题也会变得明显。"

msgid ""
"This can be mitigated by setting the Label3D's transparency mode to **Alpha "
"Cut**, at the cost of less smooth text rendering. The **Opaque Pre-Pass** "
"transparency mode can preserve text smoothness while allowing the Label3D to "
"cast shadows, but some transparency sorting issues will remain."
msgstr ""
"这可以将 Label3D 的透明度模式设置为 **Alpha Cut** 来缓解 ，但代价是文字渲染不"
"够流畅。\\ **Opaque Pre-Pass** 透明度模式可以保持文本的流畅性，同时允许 "
"Label3D 投射阴影，但仍会存在一些透明度排序问题。"

msgid ""
"See :ref:`Transparency sorting "
"<doc_3d_rendering_limitations_transparency_sorting>` section in the 3D "
"rendering limitations page for more information."
msgstr ""
"有关详细信息，请参阅 3D 渲染限制页面中的 :ref:`Transparency sorting "
"<doc_3d_rendering_limitations_transparency_sorting>` 部分。"

msgid "TextMesh"
msgstr "TextMesh"

msgid ""
"The TextMesh resource has similarities to Label3D. They both display text in "
"a 3D scene, and will use the same font subresource. However, instead of "
"generating transparent quads, TextMesh generates 3D geometry that represents "
"the glyphs' contours and has the properties of a mesh. As a result, a "
"TextMesh is shaded by default and automatically casts shadows onto the "
"environment. A TextMesh can also have a material applied to it (including "
"custom shaders)."
msgstr ""
"TextMesh（文本网格）资源和 Label3D 类似，都能够在 3D 场景中显示文本，使用的是"
"相同的字体子资源。但 TextMesh 生成的不是透明四边形，而是代表字形轮廓的 3D 网"
"格，具有和网格一样的属性。因此，TextMesh 默认是开启着色的，会自动在环境中投射"
"阴影。TextMesh 也可以设置材质（包括自定义着色器）。"

msgid ""
"Here is an example of a texture and how it's applied to the mesh. You can "
"use the texture below as a reference for the generated mesh's UV map:"
msgstr ""
"这是为网格应用纹理的示例。你可以使用下面的纹理作为生成网格 UV 贴图的参考："

msgid "TextMesh has a few advantages over Label3D:"
msgstr "相对于 Label3D 而言，TextMesh 有以下优点："

msgid "TextMesh can use a texture to modify text color on a per-side basis."
msgstr "TextMesh 可以使用纹理来修改文本各个面的颜色。"

msgid "TextMesh geometry can have actual depth to it, giving glyphs a 3D look."
msgstr "TextMesh 几何体具有深度，字形看上去是 3D 的。"

msgid "TextMesh can use custom shaders, unlike Label3D."
msgstr "TextMesh 可以使用自定义的着色器，而 Label3D 无法使用。"

msgid "There are some limitations to TextMesh:"
msgstr "TextMesh 的局限性有："

msgid ""
"No built-in outline support, unlike Label3D. This can be simulated using "
"custom shaders though."
msgstr "没有内置的轮廓支持，而 Label3D 支持。但是可以使用自定义着色器模拟。"

msgid ""
"Only dynamic fonts are supported (``.ttf``, ``.otf``, ``.woff``, ``."
"woff2``). Bitmap fonts in the ``.fnt`` or ``.font`` formats are **not** "
"supported."
msgstr ""
"仅支持动态字体（\\ ``.ttf``\\ 、\\ ``.otf``\\ 、\\ ``.woff``\\ 、\\ ``."
"woff2``\\ ）。\\ **不支持** ``.fnt`` 和 ``.font`` 格式的位图字体。"

msgid ""
"Fonts with self-intersecting outlines will not render correctly. If you "
"notice rendering issues on fonts downloaded from websites such as Google "
"Fonts, try downloading the font from the font author's official website "
"instead."
msgstr ""
"无法正确渲染轮廓自相交的字体。如果使用从 Google Fonts 等处下载到的字体时出现"
"渲染问题，请尝试改为从作者的官方网站下载。"

msgid "Projected Label node (or any other Control)"
msgstr "投影 Label 节点（或者其他 Control 节点）"

msgid ""
"There is a last solution that is more complex to set up, but provides the "
"most flexibility: projecting a 2D node onto 3D space. This can be achieved "
"using the return value of :ref:"
"`unproject_position<class_Camera3D_method_unproject_position>` method on a "
"Camera3D node in a script's ``_process()`` function. This return value "
"should then be used to set the ``position`` property of a Control node."
msgstr ""
"还有最后一种设置起来更麻烦的解决方案，但是灵活性更高：将 2D 节点投影到 3D 空"
"间中。做法是在脚本的 ``_process()`` 函数中使用 Camera3D 节点的 :ref:"
"`unproject_position<class_Camera3D_method_unproject_position>` 的返回值。使用"
"这个返回值来设置 Control 节点的 ``position`` 属性。"

msgid ""
"See the `3D waypoints <https://github.com/godotengine/godot-demo-projects/"
"tree/master/3d/waypoints>`__ demo for an example of this."
msgstr ""
"示例见 `3D 路径点 <https://github.com/godotengine/godot-demo-projects/tree/"
"master/3d/waypoints>`__\\ 演示。"

msgid ""
"Any Control node can be used, including Label, RichTextLabel or even nodes "
"such as Button. This allows for powerful formatting and GUI interaction."
msgstr ""
"Label、RichTextLabel 等任何 Control 节点，甚至 Button 这样的节点都可以用这种"
"方法。这样就能够实现强大的格式和 GUI 交互。"

msgid ""
"The script-based approach allows for complete freedom in positioning. For "
"example, this makes it considerably easier to pin Controls to the screen's "
"edges when they go off-screen (for in-game 3D markers)."
msgstr ""
"基于脚本的做法能够在定位方面做到最大的自由度。例如，这样就能够在超出屏幕范围"
"后将 Control 吸附到屏幕的边缘（用于在游戏中实现 3D 标记）。"

msgid ""
"Control theming is obeyed. This allows for easier customization that "
"globally applies to the project."
msgstr "Control 主题仍然有效。这样实现自定义项目全局的设置就更方便。"

msgid ""
"Projected Controls cannot be occluded by 3D geometry in any way. You can use "
"a RayCast to fully hide the control if its target position is occluded by a "
"collider, but this doesn't allow for partially hiding the control behind a "
"wall."
msgstr ""
"投影的 Control 无法以任何形式被 3D 几何体遮挡。目标位置被遮挡时，你可以借助 "
"RayCast 将该控件完全隐藏，但是无法实现位于墙壁后面时只隐藏部分区域的效果。"

msgid ""
"Changing text size depending on distance by adjusting the Control's "
"``scale`` property is possible, but it needs to be done manually. Label3D "
"and TextMesh automatically take care of this, at the cost of less "
"flexibility (can't set a minimum/maximum text size in pixels)."
msgstr ""
"可以根据距离调整 Control 的 ``scale`` 属性，从而调整文本的大小，但是需要手动"
"缩放。Label3D 和 TextMesh 会自动处理，但是灵活性不足（无法设置最小/最大的文本"
"像素大小）。"

msgid ""
"Handling resolution and aspect ratio changes must be taken into account in "
"the script, which can be challenging."
msgstr "必须在脚本中考虑到分辨率和纵横比的变化，这可能具有挑战性。"

msgid "Should I use Label3D, TextMesh or a projected Control?"
msgstr "我应当使用 Label3D，TextMesh 还是投影的 Control？"

msgid ""
"In most scenarios, Label3D is recommended as it's easier to set up and "
"provides higher rendering quality (especially if 3D antialiasing is "
"disabled)."
msgstr ""
"在大多数情况下，建议使用 Label3D，因为它更易于设置，并能提供更高的渲染质量"
"（尤其是在禁用 3D 抗锯齿的情况下）。"

msgid ""
"For advanced use cases, TextMesh is more flexible as it allows styling the "
"text with custom shaders. Custom shaders allow for modifying the final "
"geometry, such as curving the text along a surface. Since the text is actual "
"3D geometry, the text can optionally have depth to it and can also "
"contribute to global illumination."
msgstr ""
"对于进阶用例，TextMesh 更为灵活，因为它允许使用自定义着色器对文字进行设计。自"
"定义着色器可以修改最终几何图形，例如沿表面弯曲文字。由于文字是实际的三维几何"
"体，因此文字可以选择具有深度，也可以对全局照明做出贡献。"

msgid ""
"If you need features such as BBCode or Control theming support, then using a "
"projected RichTextLabel node is the only way to go."
msgstr ""
"如果你需要 BBCode 或 Control 主题支持等功能，则使用投影 RichTextLabel 节点是"
"唯一的方法。"

msgid "Translation status"
msgstr "翻译状态"
