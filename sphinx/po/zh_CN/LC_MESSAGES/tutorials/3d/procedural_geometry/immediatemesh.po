# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Using ImmediateMesh"
msgstr "使用 ImmediateMesh"

msgid ""
"The :ref:`ImmediateMesh <class_ImmediateMesh>` is a convenient tool to "
"create dynamic geometry using an OpenGL 1.x-style API. Which makes it both "
"approachable to use and efficient for meshes which need to be updated every "
"frame."
msgstr ""
":ref:`ImmediateMesh <class_ImmediateMesh>` 是一个使用 OpenGL 1.x 风格的 API "
"创建动态几何体的便捷工具。这使得它对于需要每帧更新的网格来说，既易于使用又高"
"效。"

msgid ""
"Generating complex geometry (several thousand vertices) with this tool is "
"inefficient, even if it's done only once. Instead, it is designed to "
"generate simple geometry that changes every frame."
msgstr ""
"使用这个工具生成复杂的几何体（几千个顶点）效率很低，即使只做一次。相反，它的"
"设计是为了生成每一帧变化的简单几何体。"

msgid ""
"First, you need to create a :ref:`MeshInstance3D <class_meshinstance3d>` and "
"add an :ref:`ImmediateMesh <class_ImmediateMesh>` to it in the Inspector."
msgstr ""
"首先，你需要创建一个 :ref:`MeshInstance3D <class_meshinstance3d>` 并在检查其"
"中向其添加一个 :ref:`ImmediateMesh <class_ImmediateMesh>`。"

msgid ""
"Next, add a script to the MeshInstance3D. The code for the ImmediateMesh "
"should go in the ``_process()`` function if you want it to update each "
"frame, or in the ``_ready()`` function if you want to create the mesh once "
"and not update it. If you only generate a surface once, the ImmediateMesh is "
"just as efficient as any other kind of mesh as the generated mesh is cached "
"and reused."
msgstr ""
"接下来，将脚本添加到 MeshInstance3D 上。如果你希望 ImmediateMesh 每帧都更新，"
"则应该把 ImmediateMesh 的代码放在 ``_process()`` 函数中；如果你想创建一次网格"
"体而后不再更新它，则代码应放在 ``_ready()`` 函数中。如果仅生成一次表面，则 "
"ImmediateMesh 与任何其他类型的网格一样高效，因为生成的网格会被缓存并重用。"

msgid ""
"To begin generating geometry you must call ``surface_begin()``. "
"``surface_begin()`` takes a ``PrimitiveType`` as an argument. "
"``PrimitiveType`` instructs the GPU how to arrange the primitive based on "
"the vertices given whether it is triangles, lines, points, etc. A complete "
"list can be found under the :ref:`Mesh <class_mesh>` class reference page."
msgstr ""
"必须调用 ``surface_begin()`` 才能开始生成几何体 。\\ ``surface_begin()`` 将一"
"个 ``PrimitiveType`` 作为参数。\\ ``PrimitiveType``\\ （图元类型）指示 GPU 如"
"何根据给定的顶点来安排图元，可以是三角形、线、点等。完整的列表可以在 :ref:"
"`Mesh <class_mesh>` 的类参考页面中找到。"

msgid ""
"Once you have called ``surface_begin()`` you are ready to start adding "
"vertices. You add vertices one at a time. First you add vertex specific "
"attributes such as normals or UVs using ``surface_set_****()`` (e.g. "
"``surface_set_normal()``). Then you call ``surface_add_vertex()`` to add a "
"vertex with those attributes. For example:"
msgstr ""
"一旦你调用了 ``surface_begin()`` ，就可以开始添加顶点了。每次添加一个顶点，首"
"先使用 ``surface_set_****()`` （例如 ``surface_set_normal()`` ）添加顶点的特"
"定属性，如法线或 UV。然后调用 ``surface_add_vertex()`` 来添加一个带有这些属性"
"的顶点。例如："

msgid ""
"Only attributes added before the call to ``surface_add_vertex()`` will be "
"included in that vertex. If you add an attribute twice before calling "
"``surface_add_vertex()``, only the second call will be used."
msgstr ""
"只有在调用 ``surface_add_vertex()`` 之前添加的属性才会被包含在该顶点中。如果"
"在调用 ``surface_add_vertex()`` 之前添加属性两次，则仅第二次调用才会被使用。"

msgid ""
"Finally, once you have added all your vertices call ``surface_end()`` to "
"signal that you have finished generating the surface. You can call "
"``surface_begin()`` and ``surface_end()`` multiple times to generate "
"multiple surfaces for the mesh."
msgstr ""
"最后，当添加了所有的顶点后，调用 ``surface_end()`` 来表示已经完成了网格的生"
"成。你可以多次调用 ``surface_begin()`` 和 ``surface_end()`` 来为网格生成多个"
"表面。"

msgid ""
"The example code below draws a single triangle in the ``_ready()`` function."
msgstr "下面的示例代码在 ``_ready()`` 函数中绘制了一个三角形。"

msgid ""
"The ImmediateMesh can also be used across frames. Each time you call "
"``surface_begin()`` and ``surface_end()``, you are adding a new surface to "
"the ImmediateMesh. If you want to recreate the mesh from scratch each frame, "
"call ``surface_clear()`` before calling ``surface_begin()``."
msgstr ""
"ImmediateMesh 也可以在帧之间使用。每次调用 ``surface_begin()`` 和 "
"``surface_end()`` 时，你都会向 ImmediateMesh 添加一个新表面。如果你想在每一帧"
"从头开始重新创建网格，请在调用 ``surface_begin()`` 之前先调用 "
"``surface_clear()`` 。"

msgid ""
"The above code will dynamically create and draw a single surface each frame."
msgstr "上面的代码将在每个帧里动态地创建并绘制一个表面。"

msgid "Translation status"
msgstr "翻译状态"
