# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Particle systems (3D)"
msgstr "粒子系统（3D）"

msgid ""
"This section of the tutorial covers (3D) GPU-accelerated particle systems. "
"Most of the things discussed here apply to CPU particles as well."
msgstr ""
"本教程的本节介绍了(3D) GPU 加速的粒子系统。这里讨论的大部分内容同样适用于 "
"CPU 粒子。"

msgid "Introduction"
msgstr "前言"

msgid ""
"You can use particle systems to simulate complex physical effects like fire, "
"sparks, smoke, magical effects, and many more. They are very well suited for "
"creating dynamic and organic behavior and adding \"life\" to your scenes."
msgstr ""
"你可以使用粒子系统来模拟复杂的物理效果，如火焰、火花、烟雾、魔法效果等等。它"
"们非常适用于创建动态而有机的行为，并为你的场景增加\"生命\"。"

msgid ""
"The idea is that a particle is emitted at a fixed interval and with a fixed "
"lifetime. During its lifetime, every particle will have the same base "
"behavior. What makes each particle different from the others and creates the "
"organic look is the randomness that you can add to most of its parameters "
"and behaviors."
msgstr ""
"这个想法是，以固定的间隔发射具有固定的寿命的“粒子”。在其生命周期中，每个粒子"
"都具有相同的基本行为。让每个粒子变得不同并提供整体更加 \"有机\" 外观的是你可"
"以添加到大多数参数和行为中的“随机性”。"

msgid ""
"Every particle system you create in Godot consists of two main parts: "
"particles and emitters."
msgstr "在Godot中，你创建的每个粒子系统由两个主要部分组成：粒子和发射器。"

msgid "Particles"
msgstr "Particles"

msgid ""
"A particle is the visible part of a particle system. It's what you see on "
"the screen when a particle system is active: The tiny specks of dust, the "
"flames of a fire, the glowing orbs of a magical effect. You can have "
"anywhere between a couple hundred and tens of thousands of particles in a "
"single system. You can randomize a particle's size, its speed and movement "
"direction, and change its color over the course of its lifetime. When you "
"think of a fire, you can think of all the little embers flying away from it "
"as individual particles."
msgstr ""
"粒子是粒子系统中可见的部分。当粒子系统处于活动状态时，它就是你在屏幕上看到的"
"东西：微小的尘埃、火焰的火苗、魔法效果的发光球体。在一个单独的系统中，你可以"
"拥有从几百个到成千上万个粒子。你可以随机设置粒子的大小、速度和运动方向，并在"
"其生命周期内改变其颜色。当你想到一堆火时，可以将所有从中飞出的小火星视为独立"
"的粒子。"

msgid "Emitters"
msgstr "发射器"

msgid ""
"An emitter is what's creating the particles. Emitters are usually not "
"visible, but they can have a shape. That shape controls where and how "
"particles are spawned, for example whether they should fill a room like dust "
"or shoot away from a single point like a fountain. Going back to the fire "
"example, an emitter would be the heat at the center of the fire that creates "
"the embers and the flames."
msgstr ""
"发射器产生粒子。发射器通常是不可见的，但它们可以有一个形状。该形状控制粒子的"
"生成位置和方式，例如它们是否应该像尘土一样填满房间，还是像喷泉一样从一个点射"
"出。回到火的例子，发射器就相当于火焰中心的炽热，产生了烟尘和火焰。"

msgid "Node overview"
msgstr "节点总览"

msgid "A list of nodes related to 3D particles"
msgstr "在分组中的节点列表"

msgid "All 3D particle nodes available in Godot"
msgstr "在Godot中可用的所有三维粒子节点"

msgid ""
"There are two types of 3D particle systems in Godot: :ref:"
"`class_GPUParticles3D`, which are processed on the GPU, and :ref:"
"`class_CPUParticles3D`, which are processed on the CPU."
msgstr ""
"在 Godot 中有两种类型的三维粒子系统：在 GPU 上进行处理的 :ref:"
"`class_GPUParticles3D`\\ ，以及在 CPU 上进行处理的 :ref:"
"`class_CPUParticles3D`\\ 。"

msgid ""
"CPU particle systems are less flexible than their GPU counterpart, but they "
"work on a wider range of hardware and provide better support for older "
"devices and mobile phones. Because they are processed on the CPU, they are "
"not as performant as GPU particle systems and can't render as many "
"individual particles. In addition they currently do not have all the "
"available options GPU particles have for control."
msgstr ""
"CPU 粒子系统相对于 GPU 粒子系统来说不够灵活，但它们适用于更广泛的硬件，并可为"
"旧设备和手机提供更好的支持。由于它们在 CPU 上进行处理，因此性能上不如 GPU 粒"
"子系统，并且无法渲染出尽可能多的单个粒子。此外，CPU 粒子系统目前不具备 GPU 粒"
"子控制的所有可用选项。"

msgid ""
"GPU particle systems run on the GPU and can render hundreds of thousands of "
"particles on modern hardware. You can write custom particle shaders for "
"them, which makes them very flexible. You can also make them interact with "
"the environment by using attractor and collision nodes."
msgstr ""
"GPU粒子系统在GPU上运行，并且可以在现代硬件上渲染成十几万个粒子。你可以为其编"
"写自定义粒子着色器，使其非常灵活。还可以通过使用吸引子节点和碰撞节点，使它们"
"与环境进行交互。"

msgid ""
"There are three particle attractor nodes: :ref:"
"`class_GPUParticlesAttractorBox3D`, :ref:"
"`class_GPUParticlesAttractorSphere3D`, and :ref:"
"`class_GPUParticlesAttractorVectorField3D`. An attractor node applies a "
"force to all particles in its reach and pulls them closer or pushes them "
"away based on the direction of that force."
msgstr ""
"有三种粒子吸引器节点：:ref:`class_GPUParticlesAttractorBox3D`、:ref:"
"`class_GPUParticlesAttractorSphere3D` 和 :ref:"
"`class_GPUParticlesAttractorVectorField3D`。吸引器节点对其作用范围内的所有粒"
"子施加力，并根据该力的方向使它们靠近或远离。"

msgid ""
"There are several particle collision nodes. :ref:"
"`class_GPUParticlesCollisionBox3D` and :ref:"
"`class_GPUParticlesCollisionSphere3D` are the simple ones. You can use them "
"to create basic shapes like boxes, a floor, or a wall that particles collide "
"with. The other two nodes provide more complex collision behavior. The :ref:"
"`class_GPUParticlesCollisionSDF3D` is useful when you want indoor scenes to "
"collide with particles without having to create all the individual box and "
"sphere colliders by hand. If you want particles to collide with large "
"outdoor scenes, you would use the :ref:"
"`class_GPUParticlesCollisionHeightField3D` node. It creates a heightmap of "
"your world and the objects in it and uses that for large-scale particle "
"collisions."
msgstr ""
"有几种粒子碰撞节点。\\ :ref:`class_GPUParticlesCollisionBox3D` 和 :ref:"
"`class_GPUParticlesCollisionSphere3D` 是较简单的节点。你可以使用它们来创建基"
"本形状，如盒子、地板或墙壁，以便粒子与其碰撞。另外两个节点提供了更复杂的碰撞"
"行为。当你希望室内场景与粒子发生碰撞，无需手动创建所有单独的盒子和球体碰撞器"
"时，\\ :ref:`class_GPUParticlesCollisionSDF3D` 非常有用。如果你希望粒子与大型"
"室外场景发生碰撞，可以使用 :ref:`class_GPUParticlesCollisionHeightField3D` 节"
"点。它会创建一个包含世界和其中对象的高度图，并将其用于大规模粒子碰撞。"

msgid "Basic usage"
msgstr "基本用法"

msgid "Advanced topics"
msgstr "高级专题"

msgid "Translation status"
msgstr "翻译状态"
