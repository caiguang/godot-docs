# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Model export considerations"
msgstr "导出模型的注意事项"

msgid ""
"Before exporting a 3D model from a 3D modeling application, such as Blender, "
"there are some considerations that should be taken into account to ensure "
"that the model follows the conventions and best practices for Godot."
msgstr ""
"从 3D 建模应用程序（例如 Blender）导出 3D 模型之前，应考虑一些注意事项，以确"
"保模型遵循 Godot 的约定和最佳实践。"

msgid "3D asset direction conventions"
msgstr "3D 资产方向约定"

msgid ""
"Godot uses a right-handed, Y-is-up coordinate system, with the -Z axis as "
"the camera's forward direction. This is the same as OpenGL. This implies "
"that +Z is back, +X is right, and -X is left for a camera."
msgstr ""
"Godot 使用 Y 朝上的右手坐标系，-Z 轴是相机的前方。这是与 OpenGL 一致的。即对"
"于相机而言，+Z 为后方、+X 为右侧、-X 为左侧。"

msgid ""
"The convention for 3D assets is to face the opposite direction as the "
"camera, so that characters and other assets are facing the camera by "
"default. This convention is extremely common in 3D modeling applications, "
"and is `codified in glTF as part of the glTF 2.0 specification <https://"
"registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-and-"
"units>`__. This means that for oriented 3D assets (such as characters), the "
"+Z axis is the direction of the front, so -Z is the rear, +X is the left "
"side, and -X is the right side for a 3D asset. In Blender, this means that "
"+Y is rear and -Y is front for an asset."
msgstr ""
"传统上，3D 资产的朝向与相机相对，所以角色和其他资产默认应该面朝相机。这种约定"
"在 3D 建模软件中极其常见，\\ `在 glTF 2.0 规范中对 glTF 有相关成文的规定 "
"<https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#coordinate-system-"
"and-units>`__\\ 。这意味着确定 3D 资产（例如角色）朝向时，3D 资产的 +Z 轴是前"
"方、-Z 轴是后方、+X 为左侧、-X 为右侧。在 Blender 中，也就是 +Y 为角色后方、-"
"Y 为角色前方。"

msgid ""
"When rotating an oriented 3D asset in Godot, use the ``use_model_front`` "
"option on the ``look_at`` functions, and use the ``Vector3.MODEL_*`` "
"constants to perform calculations in the oriented asset's local space."
msgstr ""
"在 Godot 中旋转 3D 资产时，请为 ``look_at`` 函数指定 ``use_model_front`` 选"
"项，使用 ``Vector3.MODEL_*`` 常量在资产的局部空间中进行计算。"

msgid ""
"For assets without an intrinsic front side or forward direction, such as a "
"game map or terrain, take note of the cardinal directions instead. The "
"convention in Godot and the vast majority of other applications is that +X "
"is east and -X is west. Due to Godot's right-handed Y-is-up coordinate "
"system, this implies that +Z is south and -Z is north. In Blender, this "
"means that +Y is north and -Y is south."
msgstr ""
"对于地图、地形等没有正反、前后概念的资产，请改用东南西北等基本方向。Godot 和"
"大多数其他程序都约定 +X 为东、-X 为西。由于 Godot 使用的是 Y 朝上的右手坐标"
"系，所以 +Z 为南、-Z 为北。在 Blender 中，这意味着 +Y 为北、-Y 为南。"

msgid "Exporting textures separately"
msgstr "单独导出纹理"

msgid ""
"While textures can be exported with a model in certain file formats, such as "
"glTF 2.0, you can also export them separately. Godot uses PBR (physically "
"based rendering) for its materials, so if a texturing program can export PBR "
"textures they can work in Godot. This includes the `Substance suite <https://"
"www.substance3d.com/>`__, `ArmorPaint (open source) <https://armorpaint.org/"
">`__, and `Material Maker (open source) <https://github.com/RodZill4/"
"material-maker>`__."
msgstr ""
"虽然纹理可以和模型一起以某些文件格式导出，如 glTF 2.0，但你也可以单独导出它"
"们。Godot的材质使用 PBR（基于物理的渲染），所以如果一个纹理程序可以导出 PBR "
"纹理，它们就可以在 Godot 中工作。这包括 `Substance 套件<https://www."
"substance3d.com/>`__ ，`ArmorPaint （开源） <https://armorpaint.org/>`__ ，"
"`Material Maker （开源） <https://github.com/RodZill4/material-maker>`__ 。"

msgid ""
"For more information on Godot's materials, see :ref:"
"`doc_standard_material_3d`."
msgstr "关于 Godot 材质的更多信息见 :ref:`doc_standard_material_3d`\\ 。"

msgid "Exporting considerations"
msgstr "导出注意事项"

msgid ""
"Since GPUs can only render triangles, meshes that contain quads or N-gons "
"have to be *triangulated* before they can be rendered. Godot can triangulate "
"meshes on import, but results may be unpredictable or incorrect, especially "
"with N-gons. Regardless of the target application, triangulating *before* "
"exporting the scene will lead to more consistent results and should be done "
"whenever possible."
msgstr ""
"由于 GPU 只能渲染三角形，所以包含四边形或 N 边形的网格必须在渲染前进行\\ *三"
"角剖分*\\ 。Godot 可以在导入时对网格进行三角剖分，但结果可能无法预测或不正"
"确，特别是对于 N 边形。无论目标应用是什么，在导出场景之前进行三角剖分会得到更"
"一致的结果，因此应该尽可能地进行三角剖分。"

msgid ""
"To avoid issues with incorrect triangulation after importing in Godot, it is "
"recommended to make the 3D modeling software triangulate objects on its own. "
"In Blender, this can be done by adding a Triangulate modifier to your "
"objects and making sure **Apply Modifiers** is checked in the export dialog. "
"Alternatively, depending on the exporter, you may be able to find and enable "
"a **Triangulate Faces** option in the export dialog."
msgstr ""
"为了避免在 Godot 中导入后出现三角剖分不正确的问题，建议让 3D 建模软件自行对对"
"象进行三角剖分。在Blender中，可以通过向对象添加三角剖分修改器，并确保在导出对"
"话框中勾选 **应用修改器** 来实现。另外，根据导出工具的不同，你可以在导出对话"
"框中找到并启用 **Triangulate Faces** 选项。"

msgid ""
"To avoid issues with 3D selection in the editor, it is recommended to apply "
"the object transform in the 3D modeling software before exporting the scene."
msgstr ""
"为了避免在编辑器中出现 3D 选择的问题，建议在导出场景前在 3D 建模软件中应用对"
"象变换。"

msgid ""
"It is important that the mesh is not deformed by bones when exporting. Make "
"sure that the skeleton is reset to its T-pose or default rest pose before "
"exporting with your favorite 3D editor."
msgstr ""
"在输出时，网格不会被骨骼变形很重要。在使用你喜欢的 3D 编辑器进行导出之前，请"
"确保将骨架重置为其 T 姿势或默认的放松姿势。"

msgid "Lighting considerations"
msgstr "光照注意事项"

msgid ""
"While it's possible to import lights from a 3D scene using the glTF, ``."
"blend`` or Collada formats, it's generally advised to design the scene's "
"lighting in the Godot editor after importing the scene."
msgstr ""
"虽然可以使用 glTF、 ``.blend`` 或 Collada 格式从 3D 场景中导入灯光，但通常建"
"议在导入场景后在 Godot 编辑器中设计场景的照明。"

msgid ""
"This allows you to get a more accurate feel for the final result, as "
"different engines will render lights in a different manner. This also avoids "
"any issues with lights appearing excessively strong or faint as a result of "
"the import process."
msgstr ""
"这样可以让你更准确地感受到最终结果，因为不同的引擎会以不同的方式渲染灯光。这"
"也避免了由于导入过程中灯光显示过强或过弱的问题。"

msgid "Translation status"
msgstr "翻译状态"
