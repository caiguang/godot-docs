# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "High-level multiplayer"
msgstr "Мультиплеєр високого рівня"

msgid "High-level vs low-level API"
msgstr "API високого та низького рівня"

msgid ""
"The following explains the differences of high- and low-level networking in "
"Godot as well as some fundamentals. If you want to jump in head-first and "
"add networking to your first nodes, skip to `Initializing the network`_ "
"below. But make sure to read the rest later on!"
msgstr ""
"Нижче пояснюються відмінності мереж високого та низького рівня у Godot, а "
"також деякі основи. Якщо ви хочете одразу перейти до справи і додати мережу "
"до своїх перших вузлів, перейдіть до `Ініціалізація мережі`_ нижче. Але "
"пізніше обов’язково прочитайте решту!"

#, fuzzy
msgid ""
"Godot always supported standard low-level networking via :abbr:`UDP (User "
"Datagram Protocol)`, :abbr:`TCP (Transmission Control Protocol)` and some "
"higher-level protocols such as :abbr:`HTTP (Hypertext Transfer Protocol)` "
"and :abbr:`SSL (Secure Sockets Layer)`. These protocols are flexible and can "
"be used for almost anything. However, using them to synchronize game state "
"manually can be a large amount of work. Sometimes that work can't be avoided "
"or is worth it, for example when working with a custom server implementation "
"on the backend. But in most cases, it's worthwhile to consider Godot's high-"
"level networking API, which sacrifices some of the fine-grained control of "
"low-level networking for greater ease of use."
msgstr ""
"Godot завжди підтримував стандартні мережі низького рівня через UDP, TCP і "
"деякі протоколи високого рівня, такі як SSL і HTTP. Ці протоколи є гнучкими "
"і можуть використовуватися практично для чого завгодно. Однак використання "
"їх для ручної синхронізації стану гри може вимагати великого об'єму роботи. "
"Іноді цієї роботи неможливо уникнути, або вона того варта, наприклад, при "
"роботі з власною реалізацією сервера на сервері. Але в більшості випадків "
"варто розглянути в Godot API мережі високого рівня, який нехтує частиною "
"тонкого контролю мережі низького рівня заради простоти використання."

msgid "This is due to the inherent limitations of the low-level protocols:"
msgstr "Це пов'язано з обмеженнями притаманними протоколам низького рівня:"

msgid ""
"TCP ensures packets will always arrive reliably and in order, but latency is "
"generally higher due to error correction. It's also quite a complex protocol "
"because it understands what a \"connection\" is, and optimizes for goals "
"that often don't suit applications like multiplayer games. Packets are "
"buffered to be sent in larger batches, trading less per-packet overhead for "
"higher latency. This can be useful for things like HTTP, but generally not "
"for games. Some of this can be configured and disabled (e.g. by disabling "
"\"Nagle's algorithm\" for the TCP connection)."
msgstr ""
"TCP гарантує, що пакети завжди надходитимуть надійно та в правильному "
"порядку, але затримка, як правило, вища через виправлення помилок. Це також "
"досить складний протокол, оскільки він розуміє, що таке \"з'єднання\", і "
"оптимізується для цілей, які часто не підходять для таких застосунків, як "
"багатокористувацькі ігри. Пакети буферизуються для надсилання більшими "
"пачками, що призводить до менших затрат на пакет, але більшої затримки. Це "
"може бути корисно для таких речей, як HTTP, але, зазвичай, не для ігор. Дещо "
"з цього можна налаштувати та вимкнути (наприклад, відключивши «алгоритм "
"Нейгла» для TCP-з'єднання)."

msgid ""
"UDP is a simpler protocol, which only sends packets (and has no concept of a "
"\"connection\"). No error correction makes it pretty quick (low latency), "
"but packets may be lost along the way or received in the wrong order. Added "
"to that, the MTU (maximum packet size) for UDP is generally low (only a few "
"hundred bytes), so transmitting larger packets means splitting them, "
"reorganizing them and retrying if a part fails."
msgstr ""
"UDP є простішим протоколом, який надсилає лише пакети (і не має поняття "
"\"з’єднання\"). Відсутність виправлення помилок робить його досить швидким "
"(затримка низька), але пакети можуть бути втрачені при передачі, або "
"отримані в неправильному порядку. Крім того, MTU (максимальний розмір "
"пакету) для UDP, як правило, малий (всього кілька сотень байтів), тому "
"передача більших пакетів означає їх розділення, реорганізацію та повторну "
"спробу, якщо частина дає збій."

msgid ""
"In general, TCP can be thought of as reliable, ordered, and slow; UDP as "
"unreliable, unordered and fast. Because of the large difference in "
"performance, it often makes sense to re-build the parts of TCP wanted for "
"games (optional reliability and packet order), while avoiding the unwanted "
"parts (congestion/traffic control features, Nagle's algorithm, etc). Due to "
"this, most game engines come with such an implementation, and Godot is no "
"exception."
msgstr ""
"Загалом, TCP можна вважати надійним, впорядкованим і повільним; UDP — "
"ненадійним, неупорядкованим, але швидким. Через велику різницю в "
"продуктивності часто є сенс перебудувати частини TCP, необхідні для ігор "
"(додаткова надійність і порядок пакетів), уникаючи небажаних частин (функції "
"контролю завантаженості/трафіку, алгоритм Нейгла тощо). Завдяки цьому "
"більшість ігрових рушіїв мають таку реалізацію, і Godot не виняток."

msgid ""
"In summary, you can use the low-level networking API for maximum control and "
"implement everything on top of bare network protocols or use the high-level "
"API based on :ref:`SceneTree <class_SceneTree>` that does most of the heavy "
"lifting behind the scenes in a generally optimized way."
msgstr ""
"Отже, ви можете використовувати API мережі низького рівня для максимального "
"контролю та впроваджувати все поверх відкритих протоколів мережі, або "
"використовувати API високого рівня на основі :ref:`Дерева Сцени "
"<class_SceneTree>`, яке, загалом оптимізовано, виконує більшість важких "
"завдань за лаштунками."

msgid ""
"Most of Godot's supported platforms offer all or most of the mentioned high- "
"and low-level networking features. As networking is always largely hardware "
"and operating system dependent, however, some features may change or not be "
"available on some target platforms. Most notably, the HTML5 platform "
"currently offers WebSockets and WebRTC support but lacks some of the higher-"
"level features, as well as raw access to low-level protocols like TCP and "
"UDP."
msgstr ""
"Більшість платформ, які підтримує Godot, пропонують всі або більшість "
"згаданих мережевих функцій високого та низького рівнів. Оскільки робота в "
"мережі завжди значною мірою залежить від апаратного забезпечення та "
"операційної системи, деякі функції можуть змінюватися або бути недоступними "
"на деяких цільових платформах. Зокрема, платформа HTML5 наразі пропонує "
"підтримку WebSockets і WebRTC, але не має деяких високорівневих функцій, а "
"також необробленого доступу до низькорівневих протоколів, таких як TCP і UDP."

msgid ""
"More about TCP/IP, UDP, and networking: https://gafferongames.com/post/"
"udp_vs_tcp/"
msgstr ""
"Більше про TCP/IP, UDP та мережу: https://gafferongames.com/post/udp_vs_tcp/"

msgid ""
"Gaffer On Games has a lot of useful articles about networking in Games "
"(`here <https://gafferongames.com/categories/game-networking/>`__), "
"including the comprehensive `introduction to networking models in games "
"<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."
msgstr ""
"У Gaffer On Games є багато корисних статей про мережу в іграх (`тут<https://"
"gafferongames.com/categories/game-networking/>`__), включаючи вичерпуюче "
"`введення в мережеві моделі в іграх<https://gafferongames.com/post/"
"what_every_programmer_needs_to_know_about_game_networking/>`__."

msgid ""
"If you want to use your low-level networking library of choice instead of "
"Godot's built-in networking, see here for an example: https://github.com/"
"PerduGames/gdnet3"
msgstr ""
"Якщо ви хочете використовувати свою мережеву бібліотеку низького рівня "
"замість вбудованої мережі Godot, перегляньте тут зразок: https://github.com/"
"PerduGames/gdnet3"

#, fuzzy
msgid ""
"Adding networking to your game comes with some responsibility. It can make "
"your application vulnerable if done wrong and may lead to cheats or "
"exploits. It may even allow an attacker to compromise the machines your "
"application runs on and use your servers to send spam, attack others or "
"steal your users' data if they play your game."
msgstr ""
"Додавання мережі до вашої гри пов'язане з певною відповідальністю. Це може "
"зробити вашу програму вразливою, якщо її зробити неправильно, і може "
"призвести до читів, або експлойтів. Це може навіть дозволити зловмиснику "
"скомпрометувати машини, на яких працює ваша програма, і використовувати ваші "
"сервери для розсилки спаму, нападу на інших, або крадіжки даних ваших "
"користувачів, якщо вони грають у вашу гру."

msgid ""
"This is always the case when networking is involved and has nothing to do "
"with Godot. You can of course experiment, but when you release a networked "
"application, always take care of any possible security concerns."
msgstr ""
"Таке завжди відбувається, коли задіяна мережа і це не має ніякого відношення "
"до Godot. Ви, звичайно, можете експериментувати, але завжди, коли ви "
"випускаєте мережеву програму, подбайте про всі можливі заходи безпеки."

#, fuzzy
msgid "Mid-level abstraction"
msgstr "Абстракція середнього рівня"

msgid ""
"Before going into how we would like to synchronize a game across the "
"network, it can be helpful to understand how the base network API for "
"synchronization works."
msgstr ""
"Перш ніж перейти до того, як ми можемо синхронізувати гру в мережі, може "
"бути корисно зрозуміти, як виконує синхронізацію базовий мережевий API."

#, fuzzy
msgid ""
"Godot uses a mid-level object :ref:`MultiplayerPeer "
"<class_MultiplayerPeer>`. This object is not meant to be created directly, "
"but is designed so that several C++ implementations can provide it."
msgstr ""
"Godot використовує об’єкт середнього рівня :ref:"
"`NetworkedMultiplayerPeer<class_NetworkedMultiplayerPeer>`. Цей об’єкт не "
"призначений для безпосереднього створення, він розроблений так, щоб його "
"могли надати кілька реалізацій C++."

msgid ""
"This object extends from :ref:`PacketPeer <class_PacketPeer>`, so it "
"inherits all the useful methods for serializing, sending and receiving data. "
"On top of that, it adds methods to set a peer, transfer mode, etc. It also "
"includes signals that will let you know when peers connect or disconnect."
msgstr ""
"Цей об’єкт поширюється від :ref:`PacketPeer <class_PacketPeer>`, тому він "
"успадковує всі корисні методи для серіалізації, надсилання та отримання "
"даних. Крім того, він додає методи встановлення однорангового вузла, режиму "
"передачі тощо. Він також включає сигнали, які повідомлять вам, коли "
"однорангові вузли підключаються, чи відключаються."

#, fuzzy
msgid ""
"This class interface can abstract most types of network layers, topologies "
"and libraries. By default, Godot provides an implementation based on ENet (:"
"ref:`ENetMultiplayerPeer <class_ENetMultiplayerPeer>`), one based on WebRTC "
"(:ref:`WebRTCMultiplayerPeer <class_WebRTCMultiplayerPeer>`), and one based "
"on WebSocket (:ref:`WebSocketPeer <class_WebSocketPeer>`), but this could be "
"used to implement mobile APIs (for ad hoc WiFi, Bluetooth) or custom device/"
"console-specific networking APIs."
msgstr ""
"Цей інтерфейс класу може абстрагувати більшість типів мережевих рівнів, "
"топологій і бібліотек. За замовчуванням Godot надає реалізацію на основі "
"ENet (:ref:`NetworkedMultiplayerEnet <class_NetworkedMultiplayerENet>`), "
"одну на основі WebRTC (:ref:`WebRTCMultiplayer <class_WebRTCMultiplayer>`), "
"і одну на основі WebSocket (:ref:`WebSocketMultiplayerPeer "
"<class_WebSocketMultiplayerPeer>`), але її можна використовувати для "
"реалізації мобільних API (для спеціальних WiFi, Bluetooth), або власних "
"мережевих API для пристроїв/консолей."

#, fuzzy
msgid ""
"For most common cases, using this object directly is discouraged, as Godot "
"provides even higher level networking facilities. This object is still made "
"available in case a game has specific needs for a lower-level API."
msgstr ""
"У більшості випадків не рекомендується використовувати цей об’єкт "
"безпосередньо, оскільки Godot забезпечує мережеві засоби ще більш високого "
"рівня. Проте він доступний на випадок, якщо гра має конкретні потреби в API "
"нижчого рівня."

#, fuzzy
msgid "Hosting considerations"
msgstr "Міркування щодо експорту"

msgid ""
"When hosting a server, clients on your :abbr:`LAN (Local Area Network)` can "
"connect using the internal IP address which is usually of the form ``192.168."
"*.*``. This internal IP address is **not** reachable by non-LAN/Internet "
"clients."
msgstr ""

msgid ""
"On Windows, you can find your internal IP address by opening a command "
"prompt and entering ``ipconfig``. On macOS, open a Terminal and enter "
"``ifconfig``. On Linux, open a terminal and enter ``ip addr``."
msgstr ""

msgid ""
"If you're hosting a server on your own machine and want non-LAN clients to "
"connect to it, you'll probably have to *forward* the server port on your "
"router. This is required to make your server reachable from the Internet "
"since most residential connections use a `NAT <https://en.wikipedia.org/wiki/"
"Network_address_translation>`__. Godot's high-level multiplayer API only "
"uses UDP, so you must forward the port in UDP, not just TCP."
msgstr ""

msgid ""
"After forwarding an UDP port and making sure your server uses that port, you "
"can use `this website <https://icanhazip.com/>`__ to find your public IP "
"address. Then give this public IP address to any Internet clients that wish "
"to connect to your server."
msgstr ""

msgid ""
"Godot's high-level multiplayer API uses a modified version of ENet which "
"allows for full IPv6 support."
msgstr ""

msgid "Initializing the network"
msgstr "Ініціалізація мережі"

#, fuzzy
msgid ""
"High level networking in Godot is managed by the :ref:`SceneTree "
"<class_SceneTree>`."
msgstr ""
"Об’єкт, який керує мережею в Godot, є тим самим, що керує всім, що пов’язано "
"з :ref:`Деревом Сцени <class_SceneTree>`."

msgid ""
"Each node has a ``multiplayer`` property, which is a reference to the "
"``MultiplayerAPI`` instance configured for it by the scene tree. Initially, "
"every node is configured with the same default ``MultiplayerAPI`` object."
msgstr ""

msgid ""
"It is possible to create a new ``MultiplayerAPI`` object and assign it to a "
"``NodePath`` in the the scene tree, which will override ``multiplayer`` for "
"the node at that path and all of its descendants. This allows sibling nodes "
"to be configured with different peers, which makes it possible to run a "
"server and a client simultaneously in one instance of Godot."
msgstr ""

msgid ""
"To initialize networking, a ``MultiplayerPeer`` object must be created, "
"initialized as a server or client, and passed to the ``MultiplayerAPI``."
msgstr ""

#, fuzzy
msgid "To terminate networking:"
msgstr "Закриття функцій мережі:"

msgid ""
"When exporting to Android, make sure to enable the ``INTERNET`` permission "
"in the Android export preset before exporting the project or using one-click "
"deploy. Otherwise, network communication of any kind will be blocked by "
"Android."
msgstr ""
"Під час експорту в Android обов’язково ввімкніть дозвіл ``INTERNET`` у "
"попередньо налаштованих експортах Android, перш ніж експортувати проект, або "
"використовувати розгортання одним клацанням мишки. Інакше Android заблокує "
"будь-який мережевий зв’язок."

msgid "Managing connections"
msgstr "Управління з'єднаннями"

msgid ""
"Every peer is assigned a unique ID. The server's ID is always 1, and clients "
"are assigned a random positive integer."
msgstr ""

msgid ""
"Responding to connections or disconnections is possible by connecting to "
"``MultiplayerAPI``'s signals:"
msgstr ""

msgid ""
"``peer_connected(id: int)`` This signal is emitted with the newly connected "
"peer's ID on each other peer, and on the new peer multiple times, once with "
"each other peer's ID."
msgstr ""

msgid ""
"``peer_disconnected(id: int)`` This signal is emitted on every remaining "
"peer when one disconnects."
msgstr ""

#, fuzzy
msgid "The rest are only emitted on clients:"
msgstr "Є такі застереження:"

#, fuzzy
msgid "``connected_to_server()``"
msgstr "``connected_to_server``"

#, fuzzy
msgid "``connection_failed()``"
msgstr "``connection_failed``"

#, fuzzy
msgid "``server_disconnected()``"
msgstr "``network_peer_disconnected(int id)``"

msgid "To get the unique ID of the associated peer:"
msgstr ""

#, fuzzy
msgid "To check whether the peer is server or client:"
msgstr "Перевірка того, чи дерево ініціалізовано, як сервер, чи як клієнт:"

msgid "Remote procedure calls"
msgstr ""

msgid ""
"Remote procedure calls, or RPCs, are functions that can be called on other "
"peers. To create one, use the ``@rpc`` annotation before a function "
"definition. To call an RPC, use ``Callable``'s method ``rpc()`` to call in "
"every peer, or ``rpc_id()`` to call in a specific peer."
msgstr ""

msgid "RPCs will not serialize objects or callables."
msgstr ""

msgid ""
"For a remote call to be successful, the sending and receiving node need to "
"have the same ``NodePath``, which means they must have the same name. When "
"using ``add_child()`` for nodes which are expected to use RPCs, set the "
"argument ``force_readable_name`` to ``true``."
msgstr ""

msgid ""
"If a function is annotated with ``@rpc`` on the client script (resp. server "
"script), then this function must also be declared on the server script "
"(resp. client script). Both RPCs must have the same signature which is "
"evaluated with a checksum of **all RPCs**. All RPCs in a script are checked "
"at once, and all RPCs must be declared on both the client scripts and the "
"server scripts, **even functions that are currently not in use**."
msgstr ""

msgid ""
"The signature of the RPC includes the ``@rpc()`` declaration, the function, "
"return type, AND the nodepath. If an RPC resides in a script attached to ``/"
"root/Main/Node1``, then it must reside in precisely the same path and node "
"on both the client script and the server script. Function arguments "
"(example: ``func sendstuff():`` and ``func sendstuff(arg1, arg2):`` **will "
"pass** signature matching)."
msgstr ""

msgid ""
"If these conditions are not met (if all RPCs do not pass signature "
"matching), the script may print an error or cause unwanted behavior. The "
"error message may be unrelated to the RPC function you are currently "
"building and testing."
msgstr ""

msgid ""
"See further explanation and troubleshooting on `this post <https://github."
"com/godotengine/godot/issues/57869#issuecomment-1034215138>`__."
msgstr ""

msgid ""
"The annotation can take a number of arguments, which have default values. "
"``@rpc`` is equivalent to:"
msgstr ""

#, fuzzy
msgid "The parameters and their functions are as follows:"
msgstr "Найбільш поширені випадки використання:"

msgid "``mode``:"
msgstr "``Режим``:"

msgid ""
"``\"authority\"``: Only the multiplayer authority (the server) can call "
"remotely."
msgstr ""

msgid ""
"``\"any_peer\"``: Clients are allowed to call remotely. Useful for "
"transferring user input."
msgstr ""

msgid "``sync``:"
msgstr "``синхронізація``:"

msgid "``\"call_remote\"``: The function will not be called on the local peer."
msgstr ""

msgid ""
"``\"call_local\"``: The function can be called on the local peer. Useful "
"when the server is also a player."
msgstr ""

msgid "``transfer_mode``:"
msgstr "``режим_передачі``:"

msgid ""
"``\"unreliable\"`` Packets are not acknowledged, can be lost, and can arrive "
"at any order."
msgstr ""

msgid ""
"``\"unreliable_ordered\"`` Packets are received in the order they were sent "
"in. This is achieved by ignoring packets that arrive later if another that "
"was sent after them has already been received. Can cause packet loss if used "
"incorrectly."
msgstr ""

msgid ""
"``\"reliable\"`` Resend attempts are sent until packets are acknowledged, "
"and their order is preserved. Has a significant performance penalty."
msgstr ""

msgid "``transfer_channel`` is the channel index."
msgstr ""

msgid ""
"The first 3 can be passed in any order, but ``transfer_channel`` must always "
"be last."
msgstr ""

msgid ""
"The function ``multiplayer.get_remote_sender_id()`` can be used to get the "
"unique id of an rpc sender, when used within the function called by rpc."
msgstr ""

#, fuzzy
msgid "Channels"
msgstr "Канали"

msgid ""
"Modern networking protocols support channels, which are separate connections "
"within the connection. This allows for multiple streams of packets that do "
"not interfere with each other."
msgstr ""

msgid ""
"For example, game chat related messages and some of the core gameplay "
"messages should all be sent reliably, but a gameplay message should not wait "
"for a chat message to be acknowledged. This can be achieved by using "
"different channels."
msgstr ""

msgid ""
"Channels are also useful when used with the unreliable ordered transfer "
"mode. Sending packets of variable size with this transfer mode can cause "
"packet loss, since packets which are slower to arrive are ignored. "
"Separating them into multiple streams of homogeneous packets by using "
"channels allows ordered transfer with little packet loss, and without the "
"latency penalty caused by reliable mode."
msgstr ""

msgid ""
"The default channel with index 0 is actually three different channels - one "
"for each transfer mode."
msgstr ""

#, fuzzy
msgid "Example lobby implementation"
msgstr "Реалізація"

msgid ""
"This is an example lobby that can handle peers joining and leaving, notify "
"UI scenes through signals, and start the game after all clients have loaded "
"the game scene."
msgstr ""

msgid ""
"The game scene's root node should be named Game. In the script attached to "
"it:"
msgstr ""

msgid "Exporting for dedicated servers"
msgstr "Експорт для виділених серверів"

msgid ""
"Once you've made a multiplayer game, you may want to export it to run it on "
"a dedicated server with no GPU available. See :ref:"
"`doc_exporting_for_dedicated_servers` for more information."
msgstr ""
"Після створення багатокористувацької гри ви можете експортувати її для "
"запуску на виділеному сервері без доступного графічного процесора. Дивіться :"
"ref:`doc_exporting_for_dedicated_servers` для додаткової інформації."

msgid ""
"The code samples on this page aren't designed to run on a dedicated server. "
"You'll have to modify them so the server isn't considered to be a player. "
"You'll also have to modify the game starting mechanism so that the first "
"player who joins can start the game."
msgstr ""
"Зразки коду на цій сторінці не призначені для роботи на виділеному сервері. "
"Вам доведеться змінити їх, щоб сервер не вважався гравцем. Вам також "
"доведеться змінити механізм початку гри, щоб перший гравець, який "
"приєднається, міг почати гру."

msgid "Translation status"
msgstr "Стан перекладу"
