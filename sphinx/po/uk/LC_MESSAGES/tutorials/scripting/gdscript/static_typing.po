# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Static typing in GDScript"
msgstr "Статична типізація в GDScript"

msgid "In this guide, you will learn:"
msgstr "У цьому посібнику ви дізнаєтесь:"

msgid "how to use static typing in GDScript;"
msgstr "як використовувати статичну типізацію в GDScript;"

msgid "that static types can help you avoid bugs;"
msgstr "що статичні типи можуть допомогти вам уникнути помилок;"

msgid "that static typing improves your experience with the editor."
msgstr ""

msgid ""
"Where and how you use this language feature is entirely up to you: you can "
"use it only in some sensitive GDScript files, use it everywhere, or don't "
"use it at all."
msgstr ""
"Де і як ви будете використовувати цю мовну функцію, залежить тільки від вас: "
"ви можете використовувати її тільки в деяких чутливих файлах GDScript, "
"використовувати її скрізь або не використовувати взагалі."

msgid ""
"Static types can be used on variables, constants, functions, parameters, and "
"return types."
msgstr ""
"Статичні типи можна використовувати для змінних, констант, функцій, "
"параметрів та типів повернення."

msgid "A brief look at static typing"
msgstr "Короткий огляд статичної типізації"

#, fuzzy
msgid ""
"With static typing, GDScript can detect more errors without even running the "
"code. Also type hints give you and your teammates more information as you're "
"working, as the arguments' types show up when you call a method. Static "
"typing improves editor autocompletion and :ref:`documentation "
"<doc_gdscript_documentation_comments>` of your scripts."
msgstr ""
"За допомогою типізованого GDScript, Godot може виявити ще більше помилок під "
"час написання коду! Це дає вам та вашим товаришам по команді більше "
"інформації під час роботи, оскільки типи аргументів з’являються під час "
"виклику методу."

#, fuzzy
msgid ""
"Imagine you're programming an inventory system. You code an ``Item`` class, "
"then an ``Inventory``. To add items to the inventory, the people who work "
"with your code should always pass an ``Item`` to the ``Inventory.add()`` "
"method. With types, you can enforce this::"
msgstr ""
"Уявіть, що ви програмуєте систему інвентаризації. Ви кодуєте вузол ``Item``, "
"а потім ``Inventory``. Щоб додати елементи в інвентар, люди, які працюють з "
"вашим кодом, повинні завжди передавати ``Item`` до методу ``Inventory.add``. "
"За допомогою типів ви можете застосувати це:"

#, fuzzy
msgid ""
"Static types also give you better code completion options. Below, you can "
"see the difference between a dynamic and a static typed completion options."
msgstr ""
"Статичні типи також дають кращі варіанти заповнення коду. Нижче ви можете "
"побачити різницю між динамічною та статичною типізацією варіантів завершення "
"для класу, який називається ``PlayerController``."

msgid ""
"You've probably encountered a lack of autocomplete suggestions after a dot:"
msgstr ""

msgid "Completion options for dynamic typed code."
msgstr ""

#, fuzzy
msgid ""
"This is due to dynamic code. Godot cannot know what value type you're "
"passing to the function. If you write the type explicitly however, you will "
"get all methods, properties, constants, etc. from the value:"
msgstr ""
"Це пов'язано з динамічним кодом. Godot не може знати, який вузол, або тип "
"значення, ви передаєте до функції. Якщо ви явно напишете тип, ви отримаєте "
"всі загальні методи та змінні з вузла:"

msgid "Completion options for static typed code."
msgstr ""

msgid ""
"If you prefer static typing, we recommend enabling the **Text Editor > "
"Completion > Add Type Hints** editor setting. Also consider enabling `some "
"warnings <Warning system_>`_ that are disabled by default."
msgstr ""

msgid ""
"Also, typed GDScript improves performance by using optimized opcodes when "
"operand/argument types are known at compile time. More GDScript "
"optimizations are planned in the future, such as JIT/AOT compilation."
msgstr ""

msgid ""
"Overall, typed programming gives you a more structured experience. It helps "
"prevent errors and improves the self-documenting aspect of your scripts. "
"This is especially helpful when you're working in a team or on a long-term "
"project: studies have shown that developers spend most of their time reading "
"other people's code, or scripts they wrote in the past and forgot about. The "
"clearer and the more structured the code, the faster it is to understand, "
"the faster you can move forward."
msgstr ""
"Загалом, типізоване програмування дає вам більш структурований досвід. Воно "
"допомагає запобігти помилкам і покращує само-документування аспектів ваших "
"скриптів. Це особливо корисно, коли ви працюєте в команді, або над "
"довготривалим проєктом: дослідження показали, що розробники проводять більшу "
"частину свого часу за читанням кодів інших людей, або скриптів, які вони "
"писали раніше і про які вже забули. Чим чіткіший і структурований код, тим "
"легше його зрозуміти, і тим швидше ви зможете рухатися далі."

msgid "How to use static typing"
msgstr "Як використовувати статичну типізацію"

#, fuzzy
msgid ""
"To define the type of a variable, parameter, or constant, write a colon "
"after the name, followed by its type. E.g. ``var health: int``. This forces "
"the variable's type to always stay the same::"
msgstr ""
"Щоб визначити тип змінної, або константи, напишіть двокрапку після імені "
"змінної, а потім її тип. Наприклад ``var health: int``. Це змушує тип "
"змінної завжди залишатися незмінним:"

#, fuzzy
msgid ""
"Godot will try to infer types if you write a colon, but you omit the type::"
msgstr ""
"Godot спробує визначити тип самостійно, якщо ви напишете двокрапку, але не "
"вкажете тип:"

#, fuzzy
msgid "There is no difference between ``=`` and ``:=`` for constants."
msgstr "Немає різниці між буферною тінню та променевою тінню в експорті."

#, fuzzy
msgid ""
"You don't need to write type hints for constants, as Godot sets it "
"automatically from the assigned value. But you can still do so to make the "
"intent of your code clearer. Also, this is useful for typed arrays (like "
"``const A: Array[int] = [1, 2, 3]``), since untyped arrays are used by "
"default."
msgstr ""
"Не потрібно писати підказки типу для констант, оскільки Godot встановлює їх "
"автоматично з призначеного значення. Але ви все одно можете зробити це, якщо "
"хочете прояснити зміст вашого коду."

msgid "What can be a type hint"
msgstr "Що може бути підказкою типу"

#, fuzzy
msgid "Here is a complete list of what can be used as a type hint:"
msgstr "Ось повний приклад класу на основі цих вказівок:"

msgid ""
"``Variant``. Any type. In most cases this is not much different from an "
"untyped declaration, but increases readability. As a return type, forces the "
"function to explicitly return some value."
msgstr ""

msgid ""
"*(Only return type)* ``void``. Indicates that the function does not return "
"any value."
msgstr ""

msgid ":ref:`Built-in types <doc_gdscript_builtin_types>`."
msgstr ":ref:`Вбудовані <doc_gdscript_builtin_типи>`."

msgid "Native classes (``Object``, ``Node``, ``Area2D``, ``Camera2D``, etc.)."
msgstr "Нативні класи (``Object``, ``Node``, ``Area2D``, ``Camera2D`` тощо)."

msgid ":ref:`Global classes <doc_gdscript_basics_class_name>`."
msgstr ":ref:`Глобальні класи <doc_gdscript_basics_name_class_name>`."

msgid ":ref:`Inner classes <doc_gdscript_basics_inner_classes>`."
msgstr ":ref:`Внутрішні класи <doc_gdscript_basics_внутрішні_класи>`."

msgid ""
"Global, native and custom named enums. Note that an enum type is just an "
"``int``, there is no guarantee that the value belongs to the set of enum "
"values."
msgstr ""

msgid ""
"Constants (including local ones) if they contain a preloaded class or enum."
msgstr ""

#, fuzzy
msgid ""
"You can use any class, including your custom classes, as types. There are "
"two ways to use them in scripts. The first method is to preload the script "
"you want to use as a type in a constant::"
msgstr ""
"Ви можете використовувати будь-який клас, включаючи власні класи, як типи. "
"Існує два способи їх використання в скриптах. Перший спосіб - це попередньо "
"завантажити скрипт, який ви хочете використовувати як тип, у константі:"

#, fuzzy
msgid ""
"The second method is to use the ``class_name`` keyword when you create. For "
"the example above, your ``rifle.gd`` would look like this::"
msgstr ""
"Другий спосіб - використовувати при створенні ключове слово ``class_name``. "
"У наведеному вище прикладі ваш Rifle.gd виглядатиме так:"

#, fuzzy
msgid ""
"If you use ``class_name``, Godot registers the ``Rifle`` type globally in "
"the editor, and you can use it anywhere, without having to preload it into a "
"constant::"
msgstr ""
"Якщо ви використовуєте ``class_name``, Godot реєструє тип Rifle глобально в "
"редакторі, і ви можете ним користуватися будь-де, не потребуючи попереднього "
"завантаження в константу:"

#, fuzzy
msgid "Specify the return type of a function with the arrow ``->``"
msgstr "Визначте тип повернення функції за допомогою стрілки ->"

#, fuzzy
msgid ""
"To define the return type of a function, write a dash and a right angle "
"bracket ``->`` after its declaration, followed by the return type::"
msgstr ""
"Щоб визначити тип повернення функції, наберіть стрілочку ``->`` після її "
"оголошення, а потім - тип повернення:"

#, fuzzy
msgid ""
"The type ``void`` means the function does not return anything. You can use "
"any type, as with variables::"
msgstr ""
"Тип ``void`` означає, що функція нічого не повертає. Ви можете "
"використовувати будь-який тип, як і для змінних:"

#, fuzzy
msgid "You can also use your own classes as return types::"
msgstr "Ви також можете використовувати власні вузли як типи повернення:"

msgid "Covariance and contravariance"
msgstr ""

msgid ""
"When inheriting base class methods, you should follow the `Liskov "
"substitution principle <https://en.wikipedia.org/wiki/"
"Liskov_substitution_principle>`__."
msgstr ""

msgid ""
"**Covariance:** When you inherit a method, you can specify a return type "
"that is more specific (**subtype**) than the parent method."
msgstr ""

msgid ""
"**Contravariance:** When you inherit a method, you can specify a parameter "
"type that is less specific (**supertype**) than the parent method."
msgstr ""

#, fuzzy
msgid "Example::"
msgstr "Приклад:"

#, fuzzy
msgid "Specify the element type of an ``Array``"
msgstr "Визначте тип повернення функції за допомогою стрілки ->"

msgid "To define the type of an ``Array``, enclose the type name in ``[]``."
msgstr ""

msgid ""
"An array's type applies to ``for`` loop variables, as well as some operators "
"like ``[]``, ``[]=``, and ``+``. Array methods (such as ``push_back``) and "
"other operators (such as ``==``) are still untyped. Built-in types, native "
"and custom classes, and enums may be used as element types. Nested array "
"types are not supported."
msgstr ""

msgid ""
"Since Godot 4.2, you can also specify a type for the loop variable in a "
"``for`` loop. For instance, you can write::"
msgstr ""

msgid ""
"The array will remain untyped, but the ``name`` variable within the ``for`` "
"loop will always be of ``String`` type."
msgstr ""

#, fuzzy
msgid "Type casting"
msgstr "Тестування"

msgid ""
"Type casting is an important concept in typed languages. Casting is the "
"conversion of a value from one type to another."
msgstr ""

#, fuzzy
msgid ""
"Imagine an ``Enemy`` in your game, that ``extends Area2D``. You want it to "
"collide with the ``Player``, a ``CharacterBody2D`` with a script called "
"``PlayerController`` attached to it. You use the ``body_entered`` signal to "
"detect the collision. With typed code, the body you detect is going to be a "
"generic ``PhysicsBody2D``, and not your ``PlayerController`` on the "
"``_on_body_entered`` callback."
msgstr ""
"Уявіть у своїй грі Ворога, ``extends Area2D``. Ви хочете, щоб він стикався з "
"гравцем, ``KinematicBody2D`` зі скриптом, який називається "
"``PlayerController``. Ви використовуєте сигнал ``on_body_entered`` для "
"виявлення зіткнень. З типізованим кодом, виявлене тіло, буде загальним "
"``PhysicsBody2D``, а не вашим ``PlayerController`` при зворотному виклику "
"``_on_body_entered``."

#, fuzzy
msgid ""
"You can check if this ``PhysicsBody2D`` is your ``Player`` with the ``as`` "
"keyword, and using the colon ``:`` again to force the variable to use this "
"type. This forces the variable to stick to the ``PlayerController`` type::"
msgstr ""
"Ви можете перевірити, чи є цей ``PhysicsBody2D`` вашим гравцем за допомогою "
"ключового слова ``as``, і знову використати двокрапку ``:``, щоб змусити "
"змінну використовувати цей тип. Це змушує змінну дотримуватися типу "
"``PlayerController``:"

#, fuzzy
msgid ""
"As we're dealing with a custom type, if the ``body`` doesn't extend "
"``PlayerController``, the ``player`` variable will be set to ``null``. We "
"can use this to check if the body is the player or not. We will also get "
"full autocompletion on the player variable thanks to that cast."
msgstr ""
"Оскільки ми маємо справу з власним типом, якщо ``body`` не розширення "
"``PlayerController``, змінна ``player`` буде встановлена на ``null``. Ми "
"можемо використати це, щоб перевірити, чи є тіло гравцем, чи ні. Ми також "
"отримаємо повне автодоповнення змінної гравця завдяки цьому касту."

msgid ""
"The ``as`` keyword silently casts the variable to ``null`` in case of a type "
"mismatch at runtime, without an error/warning. While this may be convenient "
"in some cases, it can also lead to bugs. Use the ``as`` keyword only if this "
"behavior is intended. A safer alternative is to use the ``is`` keyword::"
msgstr ""

msgid "or ``assert()`` statement::"
msgstr ""

#, fuzzy
msgid ""
"If you try to cast with a built-in type and it fails, Godot will throw an "
"error."
msgstr ""
"Якщо ви спробуєте виконати каст за допомогою вбудованого типу, і це не "
"вдасться, Godot видасть помилку."

msgid "Safe lines"
msgstr "Безпечні рядки"

#, fuzzy
msgid ""
"You can also use casting to ensure safe lines. Safe lines are a tool to tell "
"you when ambiguous lines of code are type-safe. As you can mix and match "
"typed and dynamic code, at times, Godot doesn't have enough information to "
"know if an instruction will trigger an error or not at runtime."
msgstr ""
"Ви також можете використовувати кастинг, щоб забезпечити безпечні рядки. "
"Безпечні рядки - це новий інструмент в Godot 3.1, який дозволяє вам "
"повідомити, коли двозначні рядки коду є безпечного типу. Оскільки ви можете "
"змішувати та зіставляти типізований та динамічний код, часом у Godot не "
"вистачає інформації, щоб знати, чи буде інструкція викликати помилку, чи ні, "
"під час виконання."

msgid ""
"This happens when you get a child node. Let's take a timer for example: with "
"dynamic code, you can get the node with ``$Timer``. GDScript supports `duck-"
"typing <https://stackoverflow.com/a/4205163/8125343>`__, so even if your "
"timer is of type ``Timer``, it is also a ``Node`` and an ``Object``, two "
"classes it extends. With dynamic GDScript, you also don't care about the "
"node's type as long as it has the methods you need to call."
msgstr ""
"Це відбувається, коли ви отримуєте дочірній вузол. Візьмемо для прикладу "
"таймер: за допомогою динамічного коду ви можете отримати вузол з "
"допомогою``$Timer``. GDScript підтримує `качину типізацію<https://"
"stackoverflow.com/a/4205163/8125343>`__, тому навіть якщо ваш таймер типу "
"``Timer``, він також є ``Node`` і ``Object``, два класи він розширює. За "
"допомогою динамічного GDScript ви також не піклуєтесь про тип вузла, якщо "
"він має методи, необхідні для виклику."

#, fuzzy
msgid ""
"You can use casting to tell Godot the type you expect when you get a node: "
"``($Timer as Timer)``, ``($Player as CharacterBody2D)``, etc. Godot will "
"ensure the type works and if so, the line number will turn green at the left "
"of the script editor."
msgstr ""
"Ви можете використовувати кастинг, щоб повідомити Godot про тип, який ви "
"очікуєте, коли ви отримаєте вузол: ``($Timer as Timer)``, ``($Player as "
"KinematicBody2D)`` і так далі. Godot забезпечить роботу типа і, якщо все "
"гаразд, число рядка стане зеленим в редакторі скриптів."

msgid "Unsafe vs Safe Line"
msgstr ""

msgid "Unsafe line (line 7) vs Safe Lines (line 6 and 8)"
msgstr "Небезпечний рядок (рядок 7) проти безпечних рядків (рядки 6 та 8)"

msgid ""
"Safe lines do not always mean better or more reliable code. See the note "
"above about the ``as`` keyword. For example::"
msgstr ""

msgid ""
"Even though ``node_2`` declaration is marked as an unsafe line, it is more "
"reliable than ``node_1`` declaration. Because if you change the node type in "
"the scene and accidentally forget to change it in the script, the error will "
"be detected immediately when the scene is loaded. Unlike ``node_1``, which "
"will be silently cast to ``null`` and the error will be detected later."
msgstr ""

msgid ""
"You can turn off safe lines or change their color in the editor settings."
msgstr ""
"Ви можете вимкнути безпечні рядки, або змінити їх колір у налаштуваннях "
"редактора."

msgid "Typed or dynamic: stick to one style"
msgstr "Типізований, або динамічний: дотримуйтеся одного стилю"

#, fuzzy
msgid ""
"Typed GDScript and dynamic GDScript can coexist in the same project. But "
"it's recommended to stick to either style for consistency in your codebase, "
"and for your peers. It's easier for everyone to work together if you follow "
"the same guidelines, and faster to read and understand other people's code."
msgstr ""
"Типізований GDScript та динамічний GDScript можуть співіснувати в одному "
"проєкті. Але я рекомендую дотримуватися якогось одного стилю в кодуванні вам "
"і вашим колегам. Всім буде простіше працювати разом, якщо дотримуватися "
"одних і тих же вказівок і швидше читати та розуміти код інших людей."

#, fuzzy
msgid ""
"Typed code takes a little more writing, but you get the benefits we "
"discussed above. Here's an example of the same, empty script, in a dynamic "
"style::"
msgstr ""
"Типізований код потребує трохи більше писанини, але ви отримуєте переваги, "
"про які ми говорили вище. Ось приклад одного й того ж порожнього скрипту в "
"динамічному стилі:"

#, fuzzy
msgid "And with static typing::"
msgstr "І в статичному стилі:"

#, fuzzy
msgid ""
"As you can see, you can also use types with the engine's virtual methods. "
"Signal callbacks, like any methods, can also use types. Here's a "
"``body_entered`` signal in a dynamic style::"
msgstr ""
"Як бачите, ви також можете використовувати типи з віртуальними методами "
"движка. Зворотні сигнали, як і будь-які методи, також можуть використовувати "
"типи. Ось сигнал ``body_entered`` у динамічному стилі:"

#, fuzzy
msgid "And the same callback, with type hints::"
msgstr "І він же в типізованому стилі:"

msgid "Warning system"
msgstr "Система попередження"

#, fuzzy
msgid ""
"Detailed documentation about the GDScript warning system has been moved to :"
"ref:`doc_gdscript_warning_system`."
msgstr ""
"Документація про систему попередження GDScript переміщена до :ref:"
"`doc_gdscript_exports`."

#, fuzzy
msgid ""
"From version 3.1, Godot gives you warnings about your code as you write it: "
"the engine identifies sections of your code that may lead to issues at "
"runtime, but lets you decide whether or not you want to leave the code as it "
"is."
msgstr ""
"Ще одна істотна перевага типізованого GDScript - нова **система "
"попередження**. З версії 3.1 Godot дає вам попередження про ваш код під час "
"його написання: движок визначає розділи вашого коду, які можуть призвести до "
"проблем під час виконання, але дозволяє вирішити, чи хочете ви залишити код "
"таким, яким він є. Більше про це за мить."

msgid ""
"We have a number of warnings aimed specifically at users of typed GDScript. "
"By default, these warnings are disabled, you can enable them in Project "
"Settings (**Debug > GDScript**, make sure **Advanced Settings** is enabled)."
msgstr ""

msgid ""
"You can enable the ``UNTYPED_DECLARATION`` warning if you want to always use "
"static types. Additionally, you can enable the ``INFERRED_DECLARATION`` "
"warning if you prefer a more readable and reliable, but more verbose syntax."
msgstr ""

msgid ""
"``UNSAFE_*`` warnings make unsafe operations more noticeable, than unsafe "
"lines. Currently, ``UNSAFE_*`` warnings do not cover all cases that unsafe "
"lines cover."
msgstr ""

msgid "Common unsafe operations and their safe counterparts"
msgstr ""

msgid "``UNSAFE_PROPERTY_ACCESS`` and ``UNSAFE_METHOD_ACCESS`` warnings"
msgstr ""

msgid ""
"In this example, we aim to set a property and call a method on an object "
"that has a script attached with ``class_name MyScript`` and that ``extends "
"Node2D``. If we have a reference to the object as a ``Node2D`` (for "
"instance, as it was passed to us by the physics system), we can first check "
"if the property and method exist and then set and call them if they do::"
msgstr ""

msgid ""
"However, this code will produce ``UNSAFE_PROPERTY_ACCESS`` and "
"``UNSAFE_METHOD_ACCESS`` warnings as the property and method are not present "
"in the referenced type - in this case a ``Node2D``. To make these operations "
"safe, you can first check if the object is of type ``MyScript`` using the "
"``is`` keyword and then declare a variable with the type ``MyScript`` on "
"which you can set its properties and call its methods::"
msgstr ""

msgid ""
"Alternatively, you can declare a variable and use the ``as`` operator to try "
"to cast the object. You'll then want to check whether the cast was "
"successful by confirming that the variable was assigned::"
msgstr ""

msgid "``UNSAFE_CAST`` warning"
msgstr ""

msgid ""
"In this example, we would like the label connected to an object entering our "
"collision area to show the area's name. Once the object enters the collision "
"area, the physics system sends a signal with a ``Node2D`` object, and the "
"most straightforward (but not statically typed) solution to do what we want "
"could be achieved like this::"
msgstr ""

msgid ""
"This piece of code produces an ``UNSAFE_PROPERTY_ACCESS`` warning because "
"``label`` is not defined in ``Node2D``. To solve this, we could first check "
"if the ``label`` property exist and cast it to type ``Label`` before "
"settings its text property like so::"
msgstr ""

msgid ""
"However, this produces an ``UNSAFE_CAST`` warning because ``body.label`` is "
"of a ``Variant`` type. To safely get the property in the type you want, you "
"can use the ``Object.get()`` method which returns the object as a "
"``Variant`` value or returns ``null`` if the property doesn't exist. You can "
"then determine whether the property contains an object of the right type "
"using the ``is`` keyword, and finally declare a statically typed variable "
"with the object::"
msgstr ""

#, fuzzy
msgid "Cases where you can't specify types"
msgstr "Випадки, коли ви не можете вказати типи"

#, fuzzy
msgid ""
"To wrap up this introduction, let's mention cases where you can't use type "
"hints. This will trigger a **syntax error**."
msgstr ""
"Щоб закінчити цей вступ, давайте розглянемо кілька випадків, коли ви не "
"можете використовувати підказки типу. Усі наведені нижче приклади "
"**спричинять помилки**."

#, fuzzy
msgid ""
"You can't specify the type of individual elements in an array or a "
"dictionary::"
msgstr ""
"Ви не можете вказати тип окремих членів у масиві. Це призведе до помилки:"

msgid "Nested types are not currently supported::"
msgstr "Вкладені типи наразі не підтримуються::"

msgid "Typed dictionaries are not currently supported::"
msgstr "Типізовані словники наразі не підтримуються::"

msgid "Summary"
msgstr "Підсумок"

#, fuzzy
msgid ""
"Typed GDScript is a powerful tool. It helps you write more structured code, "
"avoid common errors, and create scalable and reliable systems. Static types "
"improve GDScript performance and more optimizations are planned for the "
"future."
msgstr ""
"Типізований GDScript - це потужний інструмент. Доступний з версії 3.1 Godot, "
"він допомагає писати більш структурований код, уникати поширених помилок та "
"створювати масштабовані системи. В майбутньому статичні типи також принесуть "
"вам приємне підвищення продуктивності завдяки майбутнім оптимізаціям "
"компілятора."

msgid "Translation status"
msgstr "Стан перекладу"
