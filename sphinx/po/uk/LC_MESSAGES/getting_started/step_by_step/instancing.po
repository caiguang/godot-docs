# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

msgid "Creating instances"
msgstr "Створення екземплярів"

msgid ""
"In the previous part, we saw that a scene is a collection of nodes organized "
"in a tree structure, with a single node as its root. You can split your "
"project into any number of scenes. This feature helps you break down and "
"organize your game's different components."
msgstr ""
"У попередній частині ми бачили, що сцена — це набір вузлів, організованих у "
"структуру дерева, з одним вузлом як коренем. Ви можете розділити свій проект "
"на будь-яку кількість сцен. Ця функція допоможе вам розбити та організувати "
"різні компоненти вашої гри."

msgid ""
"You can create as many scenes as you'd like and save them as files with the "
"``.tscn`` extension, which stands for \"text scene\". The ``label.tscn`` "
"file from the previous lesson was an example. We call those files \"Packed "
"Scenes\" as they pack information about your scene's content."
msgstr ""
"Ви можете створювати скільки завгодно сцен і зберігати їх як файли з "
"розширенням ``.tscn``, що означає \"текстова сцена\". Прикладом може "
"слугувати файл ``label.tscn`` з попереднього уроку. Ми називаємо ці файли "
"\"запакованими сценами\", оскільки вони містять інформацію про вміст вашої "
"сцени."

msgid ""
"Here's an example of a ball. It's composed of a :ref:`RigidBody2D "
"<class_RigidBody2D>` node as its root named Ball, which allows the ball to "
"fall and bounce on walls, a :ref:`Sprite2D <class_Sprite2D>` node, and a :"
"ref:`CollisionShape2D <class_CollisionShape2D>`."
msgstr ""
"Ось приклад м'яча. Він складається з вузла :ref:`RigidBody2D "
"<клас_RigidBody2D>`, який має корінь Ball, що дозволяє м'ячу падати і "
"відскакувати від стін, вузла :ref:`Sprite2D <клас_Sprite2D>` і вузла :ref:"
"`CollisionShape2D <клас_CollisionShape2D>`."

msgid ""
"Once you saved a scene, it works as a blueprint: you can reproduce it in "
"other scenes as many times as you'd like. Replicating an object from a "
"template like this is called **instancing**."
msgstr ""
"Після збереження сцени вона працює як шаблон: ви можете відтворювати її в "
"інших сценах скільки завгодно разів. Відтворення об’єкта з такого шаблону "
"називається **instancing**."

msgid ""
"As we mentioned in the previous part, instanced scenes behave like a node: "
"the editor hides their content by default. When you instance the Ball, you "
"only see the Ball node. Notice also how each duplicate has a unique name."
msgstr ""
"Як ми згадували в попередній частині, екземпляри сцен поводяться як вузол: "
"редактор за замовчуванням приховує їх вміст. Коли ви створюєте екземпляр "
"Ball, ви бачите лише вузол Ball. Зверніть також увагу на те, що кожен "
"дублікат має унікальну назву."

msgid ""
"Every instance of the Ball scene starts with the same structure and "
"properties as ``ball.tscn``. However, you can modify each independently, "
"such as changing how they bounce, how heavy they are, or any property "
"exposed by the source scene."
msgstr ""
"Кожен екземпляр сцени М'яч починається з тієї самої структури та "
"властивостей, що й ``ball.tscn``. Однак ви можете змінювати кожну з них "
"незалежно, наприклад, змінювати спосіб відскоку, вагу або будь-які "
"властивості, визначені у вихідній сцені."

msgid "In practice"
msgstr "На практиці"

msgid ""
"Let's use instancing in practice to see how it works in Godot. We invite you "
"to download the ball's sample project we prepared for you: "
"`instancing_starter.zip <https://github.com/godotengine/godot-docs-project-"
"starters/releases/download/latest-4.x/instancing_starter.zip>`_."
msgstr ""
"Давайте використаємо інстанцію на практиці, щоб побачити, як вона працює в "
"Godot. Запрошуємо вас завантажити приклад проекту м'яча, який ми підготували "
"для вас: `instancing_starter.zip <https://github.com/godotengine/godot-docs-"
"project-starters/releases/download/latest-4.x/instancing_starter.zip>`_."

msgid ""
"Extract the archive on your computer. To import it, you need the Project "
"Manager. The Project Manager is accessed by opening Godot, or if you already "
"have Godot opened, click on *Project -> Quit to Project List* (:kbd:`Ctrl + "
"Shift + Q`, :kbd:`Ctrl + Option + Cmd + Q` on macOS)"
msgstr ""

msgid ""
"In the Project Manager, click the *Import* button to import the project."
msgstr ""
"У Менеджері проектів натисніть кнопку *Імпортувати*, щоб імпортувати проект."

msgid ""
"In the pop-up that appears, click the browse button and navigate to the "
"folder you extracted."
msgstr ""
"У спливаючому вікні, що з’явиться, натисніть кнопку огляду та перейдіть до "
"теки, яку ви розпакували."

msgid "Double-click the ``project.godot`` file to open it."
msgstr "Двічі клацніть файл ``project.godot``, щоб відкрити його."

msgid "Finally, click the Import & Edit button."
msgstr "Нарешті, натисніть кнопку Імпорт і редагування."

msgid ""
"The project contains two packed scenes: ``main.tscn``, containing walls "
"against which the ball collides, and ``ball.tscn``. The Main scene should "
"open automatically. If you're seeing an empty 3D scene instead of the main "
"scene, click the 2D button at the top of the screen."
msgstr ""
"Проект містить дві упаковані сцени: ``main.tscn``, що містить стіни, з якими "
"стикається м'яч, та ``ball.tscn``. Головна сцена повинна відкриватися "
"автоматично. Якщо ви бачите порожню 3D сцену замість головної, натисніть "
"кнопку 2D у верхній частині екрана."

msgid ""
"Let's add a ball as a child of the Main node. In the Scene dock, select the "
"Main node. Then, click the link icon at the top of the scene dock. This "
"button allows you to add an instance of a scene as a child of the currently "
"selected node."
msgstr ""
"Додамо м'яч як дочірній вузол Main. У панелі «Сцена» виберіть головний "
"вузол. Потім клацніть значок зв'язування у верхній частині панелі сцени. Ця "
"кнопка дозволяє вам додати екземпляр сцени як дочірній для поточного "
"вибраного вузла."

msgid "Double-click the ball scene to instance it."
msgstr "Двічі клацніть сцену з м’ячем, щоб створити її екземпляр."

msgid "The ball appears in the top-left corner of the viewport."
msgstr "М'яч з’явиться у верхньому лівому куті вікна перегляду."

msgid "Click on it and drag it towards the center of the view."
msgstr "Клацніть на ньому та перетягніть його до центру перегляду."

msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS). You should "
"see it fall."
msgstr ""
"Запустіть гру, натиснувши :kbd:`F5` (:kbd:`Cmd + B` на macOS). Ви повинні "
"побачити, як він падає."

msgid ""
"Now, we want to create more instances of the Ball node. With the ball still "
"selected, press :kbd:`Ctrl + D` (:kbd:`Cmd + D` on macOS) to call the "
"duplicate command. Click and drag to move the new ball to a different "
"location."
msgstr ""
"Тепер ми хочемо створити більше екземплярів вузла Ball. Виділивши кулю, "
"натисніть :kbd:`Ctrl + D` (:kbd:`Cmd + D` на macOS), щоб викликати команду "
"дублювання. Клацніть і перетягніть, щоб перемістити нову кулю в інше місце."

msgid "You can repeat this process until you have several in the scene."
msgstr ""
"Ви можете повторювати цей процес, поки у сцені не з’явиться кілька м'ячів."

msgid ""
"Play the game again. You should now see every ball fall independently from "
"one another. This is what instances do. Each is an independent reproduction "
"of a template scene."
msgstr ""
"Запустіть гру ще раз. Тепер ви повинні бачити, як кожен м'яч падає незалежно "
"один від одного. Це те, що роблять екземпляри. Кожен є самостійним "
"відтворенням шаблонної сцени."

msgid "Editing scenes and instances"
msgstr "Редагування сцен і екземплярів"

msgid "There is more to instances. With this feature, you can:"
msgstr "Є ще багато про екземпляри. Ця особливість дозволяє:"

msgid ""
"Change the properties of one ball without affecting the others using the "
"Inspector."
msgstr ""
"Змініть властивості однієї кулі, не впливаючи на інші за допомогою "
"Інспектора."

msgid ""
"Change the default properties of every Ball by opening the ``ball.tscn`` "
"scene and making a change to the Ball node there. Upon saving, all instances "
"of the Ball in the project will see their values update."
msgstr ""
"Змініть властивості за замовчуванням для кожної Кулі, відкривши сцену ``ball."
"tscn`` і зробивши там зміни у вузлі Ball. Після збереження, всі екземпляри "
"Кулі у проекті побачать оновлення своїх значень."

msgid ""
"Changing a property on an instance always overrides values from the "
"corresponding packed scene."
msgstr ""
"Зміна властивості екземпляра завжди перевизначає значення з відповідної "
"упакованої сцени."

msgid ""
"Let's try this. Open ``ball.tscn`` and select the Ball node. In the "
"Inspector on the right, click on the PhysicsMaterial property to expand it."
msgstr ""
"Давайте спробуємо це зробити. Відкрийте файл ``ball.tscn`` і виберіть вузол "
"Ball. В інспекторі праворуч клацніть на властивості PhysicsMaterial, щоб "
"розгорнути її."

msgid ""
"Set its Bounce property to ``0.5`` by clicking on the number field, typing "
"``0.5``, and pressing :kbd:`Enter`."
msgstr ""
"Встановіть його властивість Bounce на ``0.5``, клацнувши на числовому полі, "
"набравши ``0.5`` і натиснувши :kbd:`Enter`."

#, fuzzy
msgid ""
"Play the game by pressing :kbd:`F5` (:kbd:`Cmd + B` on macOS) and notice how "
"all balls now bounce a lot more. As the Ball scene is a template for all "
"instances, modifying it and saving causes all instances to update "
"accordingly."
msgstr ""
"Запустіть гру, натиснувши :kbd:`F5`, і ви помітите, як тепер усі м’ячі "
"відскакують набагато більше. Оскільки сцена Ball є шаблоном для всіх "
"екземплярів, її зміна та збереження призведе до відповідного оновлення всіх "
"екземплярів."

msgid ""
"Let's now adjust an individual instance. Head back to the Main scene by "
"clicking on the corresponding tab above the viewport."
msgstr ""
"Тепер налаштуємо окремий екземпляр. Поверніться до основної сцени, "
"натиснувши відповідну вкладку над вікном перегляду."

msgid ""
"Select one of the instanced Ball nodes and, in the Inspector, set its "
"Gravity Scale value to ``10``."
msgstr ""
"Виберіть один із створених вузлів Ball і в Інспекторі встановіть його "
"значення Gravity Scale на ``10``."

msgid "A grey \"revert\" button appears next to the adjusted property."
msgstr "Поруч зі зміненою властивістю з’являється сіра кнопка «Повернути»."

msgid ""
"This icon indicates you are overriding a value from the source packed scene. "
"Even if you modify the property in the original scene, the value override "
"will be preserved in the instance. Clicking the revert icon will restore the "
"property to the value in the saved scene."
msgstr ""
"Ця піктограма вказує на те, що ви замінюєте значення з вихідної запакованої "
"сцени. Навіть якщо ви зміните властивість у вихідній сцені, перевизначення "
"значення буде збережено в екземплярі. Натискання значка повернення відновить "
"властивість до значення у збереженій сцені."

msgid ""
"Rerun the game and notice how this ball now falls much faster than the "
"others."
msgstr ""
"Запустіть гру знову і зверніть увагу, що цей м’яч тепер падає набагато "
"швидше за інші."

#, fuzzy
msgid ""
"You may notice you are unable to change the values of the "
"``PhysicsMaterial`` of the ball. This is because ``PhysicsMaterial`` is a "
"resource, and needs to be made unique before you can edit it in a scene that "
"is linking to its original scene. To make a resource unique for one "
"instance, right-click on it in the Inspector and click Make Unique in the "
"contextual menu."
msgstr ""
"Якщо ви зміните значення у ``PhysicsMaterial`` одного екземпляра, це вплине "
"на всі інші. Це тому, що ``PhysicsMaterial`` є ресурсом, і ресурси "
"розподіляються між екземплярами. Щоб зробити ресурс унікальним для одного "
"екземпляра, клацніть його правою кнопкою миші в Інспекторі та виберіть у "
"контекстному меню Зробити унікальним."

msgid ""
"Resources are another essential building block of Godot games we will cover "
"in a later lesson."
msgstr ""
"Ресурси є ще одним важливим будівельним блоком ігор Godot, про які ми "
"розповімо в наступному уроці."

msgid "Scene instances as a design language"
msgstr "Екземпляри сцен як мова дизайну"

msgid ""
"Instances and scenes in Godot offer an excellent design language, setting "
"the engine apart from others out there. We designed Godot around this "
"concept from the ground up."
msgstr ""
"Екземпляри та сцени в Godot пропонують чудову мову дизайну, що виділяє "
"двигун серед інших. Ми розробили Godot навколо цієї концепції з нуля."

msgid ""
"We recommend dismissing architectural code patterns when making games with "
"Godot, such as Model-View-Controller (MVC) or Entity-Relationship diagrams. "
"Instead, you can start by imagining the elements players will see in your "
"game and structure your code around them."
msgstr ""
"Ми рекомендуємо відмовитися від шаблонів архітектурного коду під час "
"створення ігор з Godot, наприклад, діаграми модель-вигляд-контролер (MVC) "
"або діаграми сутність-відношення. Замість цього ви можете почати з уявлення "
"елементів, які гравці побачать у вашій грі, і структурувати ваш код навколо "
"них."

msgid "For example, you could break down a shooter game like so:"
msgstr "Наприклад, ви можете розбити гру-шутер так:"

msgid ""
"You can come up with a diagram like this for almost any type of game. Each "
"rectangle represents an entity that's visible in the game from the player's "
"perspective. The arrows tell you which scene owns which."
msgstr ""
"Ви можете створити подібну схему майже для будь-якої гри. Кожен прямокутник "
"представляє об’єкт, який видно в грі з точки зору гравця. Стрілки вказують "
"на зв'язок сцен між собою."

msgid ""
"Once you have a diagram, we recommend creating a scene for each element "
"listed in it to develop your game. You'll use instancing, either by code or "
"directly in the editor, to build your tree of scenes."
msgstr ""
"Після того, як у вас є діаграма, ми рекомендуємо створити сцену для кожного "
"елемента, перерахованого в ній, щоб розвивати вашу гру. Для побудови дерева "
"сцен ви будете використовувати екземпляри, або за допомогою коду, або "
"безпосередньо в редакторі."

msgid ""
"Programmers tend to spend a lot of time designing abstract architectures and "
"trying to fit components into it. Designing based on scenes makes "
"development faster and more straightforward, allowing you to focus on the "
"game logic itself. Because most game components map directly to a scene, "
"using a design based on scene instantiation means you need little other "
"architectural code."
msgstr ""
"Програмісти, як правило, витрачають багато часу на розробку абстрактних "
"архітектур і потім намагаючись вмістити в них компоненти. Проектування на "
"основі сцен робить розробку швидшою та простішою, дозволяючи зосередитися на "
"самій логіці гри. Оскільки більшість ігрових компонентів відображаються "
"безпосередньо на сцені, використання підходу заснованого на екземплярі "
"сцени, означає, що вам знадобиться зовсім небагато іншого архітектурного "
"коду."

msgid ""
"Here's the example of a scene diagram for an open-world game with tons of "
"assets and nested elements:"
msgstr ""
"Ось приклад діаграми сцени для гри з відкритим світом з безліччю ресурсів і "
"вкладених елементів:"

msgid ""
"Imagine we started by creating the room. We could make a couple of different "
"room scenes, with unique arrangements of furniture in them. Later, we could "
"make a house scene that uses multiple room instances for the interior. We "
"would create a citadel out of many instanced houses and a large terrain on "
"which we would place the citadel. Each of these would be a scene instancing "
"one or more sub-scenes."
msgstr ""
"Уявіть, що ми почали зі створення кімнати. Ми могли б зробити кілька різних "
"сцен кімнат з унікальним розташуванням меблів. Пізніше ми могли б створити "
"сцену будинку, яка використовує декілька екземплярів кімнати для інтер’єру. "
"Ми створили б цитадель з багатьох екземплярів будинків і великої місцевості, "
"на якій ми б розмістили цитадель. Кожна з них буде сценою, що містить одну "
"або кілька підсцен."

msgid ""
"Later, we could create scenes representing guards and add them to the "
"citadel. They would be indirectly added to the overall game world."
msgstr ""
"Пізніше ми могли б створити сцени, що представляють охорону, і додати їх до "
"цитаделі. Вони будуть опосередковано додані до загального світу гри."

msgid ""
"With Godot, it's easy to iterate on your game like this, as all you need to "
"do is create and instantiate more scenes. We designed the editor to be "
"accessible to programmers, designers, and artists alike. A typical team "
"development process can involve 2D or 3D artists, level designers, game "
"designers, and animators, all working with the Godot editor."
msgstr ""
"З Godot легко відтворити гру, схожу на цю, адже все, що вам потрібно "
"зробити, це створити сцени та створити більше екземплярів сцен. Крім того, "
"інтерфейс редактора побудований так, щоб ним було зручно користуватися, як "
"програмістам, так і не програмістам. Типовий склад команди розробки може "
"залучати 2D або 3D художників, дизайнерів рівнів, дизайнерів ігор та "
"аніматорів і всі вони можуть працювати з інтерфейсом редактора."

msgid "Summary"
msgstr "Підсумок"

msgid ""
"Instancing, the process of producing an object from a blueprint, has many "
"handy uses. With scenes, it gives you:"
msgstr ""
"Інстанціювання, процес створення об'єкта за шаблоном, має багато корисних "
"застосувань. Зі сценами він дає вам:"

msgid "The ability to divide your game into reusable components."
msgstr "Можливість розділити гру на повторно використовувані компоненти."

msgid "A tool to structure and encapsulate complex systems."
msgstr "Інструмент для структурування та інкапсуляції складних систем."

msgid ""
"A language to think about your game project's structure in a natural way."
msgstr ""
"Можливість продумати структуру вашого ігрового проекту природним чином."

msgid "Translation status"
msgstr "Стан перекладу"
