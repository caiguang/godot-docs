# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-present Juan Linietsky, Ariel Manzur and the Godot community (CC BY 3.0)
# This file is distributed under the same license as the Godot Engine package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Godot Engine 4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-02-27 19:04+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: uk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#, fuzzy
msgid "Compiling for Linux, \\*BSD"
msgstr "Збірка під X11 (Linux, \\*BSD)"

msgid ""
"This page describes how to compile Linux editor and export template binaries "
"from source. If you're looking to export your project to Linux instead, "
"read :ref:`doc_exporting_for_linux`."
msgstr ""

msgid "Requirements"
msgstr "Вимоги"

msgid ""
"For compiling under Linux or other Unix variants, the following is required:"
msgstr ""
"Для того щоб зібрати проєкт під Linux чи який-небудь інший вид Unix системи, "
"вам знадобляться:"

msgid "GCC 7+ or Clang 6+."
msgstr "GCC 7+ або Clang 6+."

msgid "`Python 3.6+ <https://www.python.org/downloads/>`_."
msgstr ""

msgid "`SCons 3.0+ <https://scons.org/pages/download.html>`_ build system."
msgstr ""

#, fuzzy
msgid ""
"If your distribution uses Python 2 by default, or you are using a version of "
"SCons prior to 3.1.2, you will need to change the version of Python that "
"SCons uses by changing the shebang (the first line) of the SCons script file "
"to ``#! /usr/bin/python3``. Use the command ``which scons`` to find the "
"location of the SCons script file."
msgstr ""
"Система SCons 3.0+. Якщо ваша ОС за замовчуванням використовує Python 2, або "
"ви користуєтесь версією SCons старшою 3.1.2, вам потрібно змінити версію "
"Python, яку використовує SCons, замінивши шебанг (перший рядок коду) скрипту "
"SCons на ``#! /usr/bin/python3``. Використайте команду ``which scons`` щоб "
"дізнатись, де знаходиться файл скрипту SCons."

#, fuzzy
msgid "pkg-config (used to detect the development libraries listed below)."
msgstr ""
"pkg-config (потрібен щоб перевіряти наявність залежностей, перерахованих "
"нижче)."

msgid "Development libraries:"
msgstr "Бібліотеки розробки:"

#, fuzzy
msgid "X11, Xcursor, Xinerama, Xi and XRandR."
msgstr "Бібліотеки для розробки: X11, Xcursor, Xinerama, Xi та XRandR."

msgid "MesaGL."
msgstr ""

msgid "ALSA."
msgstr ""

msgid "PulseAudio."
msgstr "Пульс Аудіо."

msgid "*Optional* - libudev (build with ``udev=yes``)."
msgstr "*За бажанням* - libudev (зберіть з параметром ``udev=yes``)."

msgid ""
"To get the Godot source code for compiling, see :ref:`doc_getting_source`."
msgstr ""

msgid ""
"For a general overview of SCons usage for Godot, see :ref:"
"`doc_introduction_to_the_buildsystem`."
msgstr ""

msgid "Distro-specific one-liners"
msgstr "Команди для різних дистрибутивів"

#, fuzzy
msgid "Alpine Linux"
msgstr "**Arch**"

#, fuzzy
msgid "Arch Linux"
msgstr "**Arch**"

#, fuzzy
msgid "Debian/Ubuntu"
msgstr "**Debian** / **Ubuntu**"

#, fuzzy
msgid "Fedora"
msgstr "**Fedora**"

#, fuzzy
msgid "FreeBSD"
msgstr "**FreeBSD**"

#, fuzzy
msgid "Gentoo"
msgstr "**Gentoo**"

#, fuzzy
msgid "Mageia"
msgstr "**Mageia**"

msgid "OpenBSD"
msgstr "Відкритий БСД"

#, fuzzy
msgid "openSUSE"
msgstr "**openSUSE**"

#, fuzzy
msgid "NetBSD"
msgstr "**FreeBSD**"

msgid "For audio support, you can optionally install ``pulseaudio``."
msgstr ""
"Для забезпечення підтримки звуку ви, якщо хочете, можете встановити "
"``pulseaudio``."

msgid "Solus"
msgstr ""

msgid "Compiling"
msgstr "Компілювання"

msgid ""
"Start a terminal, go to the root dir of the engine source code and type:"
msgstr ""
"Відкрийте термінал, перейдіть до кореневої директорії проєкту та введіть:"

msgid ""
"Prior to Godot 4.0, the Linux/\\*BSD target was called ``x11`` instead of "
"``linuxbsd``. If you are looking to compile Godot 3.x, make sure to use the "
"`3.x branch of this documentation <https://docs.godotengine.org/en/3.6/"
"development/compiling/compiling_for_x11.html>`__."
msgstr ""

#, fuzzy
msgid ""
"If all goes well, the resulting binary executable will be placed in the "
"\"bin\" subdirectory. This executable file contains the whole engine and "
"runs without any dependencies. Executing it will bring up the Project "
"Manager."
msgstr ""
"Якщо все пройде успішно, кінцевий файл програми буде знаходитись в теці "
"„bin“. Цей файл містить у собі весь рушій і запускається без всяких "
"залежностей. Після його запуску ви побачите список проєктів."

msgid "If you wish to compile using Clang rather than GCC, use this command:"
msgstr ""
"Якщо ж вам хочеться зібрати проєкт використовуючи Clang а не GCC, то "
"використайте команду:"

msgid ""
"Using Clang appears to be a requirement for OpenBSD, otherwise fonts would "
"not build."
msgstr ""
"На OpenBSD вам доведеться використовувати Clang, інакше ваша програма не "
"побудується."

msgid ""
"If you are compiling Godot for production use, then you can make the final "
"executable smaller and faster by adding the SCons options "
"``target=template_release production=yes``."
msgstr ""

#, fuzzy
msgid ""
"If you are compiling Godot with GCC, you can make the binary even smaller "
"and faster by adding the SCons option ``lto=full``. As link-time "
"optimization is a memory-intensive process, this will require about 7 GB of "
"available RAM while compiling."
msgstr ""
"Якщо ви збираєте Godot з GCC, ви можете зробити вихідний файл навіть меншим "
"та швидшим, додавши до SCons опцію ``use_lto=yes``. Так як оптимізації в "
"процесі збірки — це процес, який потребує багато машинної пам'яті. то вам "
"для компіляції знадобиться близько 7 GB вільної оперативної пам'яті."

msgid ""
"If you want to use separate editor settings for your own Godot builds and "
"official releases, you can enable :ref:`doc_data_paths_self_contained_mode` "
"by creating a file called ``._sc_`` or ``_sc_`` in the ``bin/`` folder."
msgstr ""

#, fuzzy
msgid "Running a headless/server build"
msgstr "Збірка для сервера/безголова збірка"

#, fuzzy
msgid ""
"To run in *headless* mode which provides editor functionality to export "
"projects in an automated manner, use the normal build::"
msgstr ""
"Щоб зібрати *безголову* версію програми, яка дає можливість виробляти "
"проєкти автоматизовано, використайте:"

msgid "And then use the ``--headless`` command line argument::"
msgstr ""

msgid ""
"To compile a debug *server* build which can be used with :ref:`remote "
"debugging tools <doc_command_line_tutorial>`, use::"
msgstr ""
"Щоб зібрати *серверну* версію, яку можна використати зі :ref:`сторонніми "
"інструментами дебагу <doc_command_line_tutorial>`, скористайтесь:"

msgid ""
"To compile a *server* build which is optimized to run dedicated game "
"servers, use::"
msgstr ""
"Щоб зібрати *серверну* версію, оптимізовану для запуску ігрових серверів, "
"скористайтесь:"

msgid "Building export templates"
msgstr "Збірка шаблонів експорту"

msgid ""
"Linux binaries usually won't run on distributions that are older than the "
"distribution they were built on. If you wish to distribute binaries that "
"work on most distributions, you should build them on an old distribution "
"such as Ubuntu 16.04. You can use a virtual machine or a container to set up "
"a suitable build environment."
msgstr ""
"Зазвичай, програми для Linux не запускаються на дистрибутивах, старіших ніж "
"той, на якому вони побудовані. Якщо ви хочете мати змогу розповсюджувати "
"свою збірку серед більшости дистрибутивів, вам варто зібрати програму на "
"старій версії ОС, на зразок Ubuntu 16.04. Ви можете скористатись "
"віртуальними машинами чи контейнерами щоб підготувати стабільне середовище "
"для збірки."

#, fuzzy
msgid ""
"To build Linux or \\*BSD export templates, run the build system with the "
"following parameters:"
msgstr ""
"Щоб зробити шаблон для експорту на X11 (Linux, \\*BSD), запустіть систему "
"побудови з такими параметрами:"

msgid "(32 bits)"
msgstr "(32 біт)"

msgid "(64 bits)"
msgstr "(64 біт)"

msgid ""
"Note that cross-compiling for the opposite bits (64/32) as your host "
"platform is not always straight-forward and might need a chroot environment."
msgstr ""
"Візьміть до уваги: збірка для протилежної платформи (64/32) може бути "
"складним завданням, та потребувати входу в середовище chroot."

#, fuzzy
msgid ""
"To create standard export templates, the resulting files in the ``bin/`` "
"folder must be copied to:"
msgstr ""
"Щоби створити типові шаблони експорту, отримані файли потрібно скопіювати до:"

#, fuzzy
msgid ""
"and named like this (even for \\*BSD which is seen as \"Linux/X11\" by "
"Godot):"
msgstr ""
"і назвати ось так (навіть для \\*BSD, яку Godot сприймає як „Linux X11“):"

msgid ""
"However, if you are writing your custom modules or custom C++ code, you "
"might instead want to configure your binaries as custom export templates "
"here:"
msgstr ""
"А якщо ви пишете власні модулі чи код на C++ то вам, натомість, краще обрати "
"ваші шаблони експорту тут:"

msgid ""
"You don't even need to copy them, you can just reference the resulting files "
"in the ``bin/`` directory of your Godot source folder, so the next time you "
"build, you automatically have the custom templates referenced."
msgstr ""
"Вам навіть не потрібно копіювати їх файли, достатньо просто вказати їх в "
"підтеці ``bin/``з теки, де знаходиться код Godot, щоб наступного разу, при "
"збірці, ваші шаблони будуть додані автоматично."

msgid "Using Clang and LLD for faster development"
msgstr "Використання Clang та LLD для пришвидшення розробки"

msgid ""
"You can also use Clang and LLD to build Godot. This has two upsides compared "
"to the default GCC + GNU ld setup:"
msgstr ""
"Ви можете збудувати Godot з Clang та LLD. Вони мають пару переваг у "
"порівнянні зі стандартною зв'язкою GCC + GNU ld:"

msgid ""
"LLD links Godot significantly faster compared to GNU ld or gold. This leads "
"to faster iteration times."
msgstr ""
"LLD збирає Godot значно швидше у порівнянні з to GNU ld чи gold. Таким чином "
"збирання проходить швидшими ітераціями."

msgid "Clang tends to give more useful error messages compared to GCC."
msgstr "Clang дає корисніші повідомлення про помилки ніж GCC."

msgid ""
"To do so, install Clang and the ``lld`` package from your distribution's "
"package manager then use the following SCons command::"
msgstr ""
"Щоб це зробити, встановіть Clang та пакет ``lld`` з вашого пакетного "
"менеджера та використайте їх в наступній команді:"

msgid ""
"After the build is completed, a new binary with a ``.llvm`` suffix will be "
"created in the ``bin/`` folder."
msgstr ""
"Щойно побудова буде завершена, в теці ``bin/`` буде створений новий бінарний "
"файл із суфіксом ``.llvm``."

msgid ""
"It's still recommended to use GCC for production builds as they can be "
"compiled using link-time optimization, making the resulting binaries smaller "
"and faster."
msgstr ""
"Але ми рекомендуємо використовувати GCC для фінальної збірки, так як він дає "
"змогу її оптимізувати: зробити кінцевий бінарний файл меншим та швидшим."

msgid "If this error occurs::"
msgstr ""

#, fuzzy
msgid "There are two solutions:"
msgstr "Зробити це можна двома способами:"

msgid "In your SCons command, add the parameter ``use_static_cpp=no``."
msgstr ""

msgid ""
"Follow `these instructions <https://github.com/ivmai/"
"libatomic_ops#installation-and-usage>`__ to configure, build, and install "
"``libatomic_ops``. Then, copy ``/usr/lib/libatomic_ops.a`` to ``/usr/lib/"
"libatomic.a``, or create a soft link to ``libatomic_ops`` by command ``ln -"
"s /usr/lib/libatomic_ops.a /usr/lib/libatomic.a``. The soft link can ensure "
"the latest ``libatomic_ops`` will be used without the need to copy it "
"everytime when it is updated."
msgstr ""

#, fuzzy
msgid "Using mold for faster development"
msgstr "Використання Clang та LLD для пришвидшення розробки"

msgid ""
"For even faster linking compared to LLD, you can use `mold <https://github."
"com/rui314/mold>`__. mold can be used with either GCC or Clang."
msgstr ""

msgid ""
"As of January 2023, mold is not readily available in Linux distribution "
"repositories, so you will have to install its binaries manually."
msgstr ""

#, fuzzy
msgid ""
"Download mold binaries from its `releases page <https://github.com/rui314/"
"mold/releases/latest>`__."
msgstr ""
"Якщо хочете взяти участь у написанні документації, сховище її коду "
"розташовано `тут <https://github.com/godotengine/godot-docs>`_."

msgid ""
"Extract the ``.tar.gz`` file, then move the extraced folder to a location "
"such as ``.local/share/mold``."
msgstr ""

msgid ""
"Add ``$HOME/.local/share/mold/bin`` to your user's ``PATH`` environment "
"variable. For example, you can add the following line at the end of your "
"``$HOME/.bash_profile`` file:"
msgstr ""

msgid ""
"Open a new terminal (or run ``source \"$HOME/.bash_profile\"``), then use "
"the following SCons command when compiling Godot::"
msgstr ""

#, fuzzy
msgid "Using system libraries for faster development"
msgstr "Використання Clang та LLD для пришвидшення розробки"

msgid ""
"`Godot bundles the source code of various third-party libraries. <https://"
"github.com/godotengine/godot/tree/master/thirdparty>`__ You can choose to "
"use system versions of third-party libraries instead. This makes the Godot "
"binary faster to link, as third-party libraries are dynamically linked. "
"Therefore, they don't need to be statically linked every time you build the "
"engine (even on small incremental changes)."
msgstr ""

msgid ""
"However, not all Linux distributions have packages for third-party libraries "
"available (or they may not be up-to-date)."
msgstr ""

msgid ""
"Moving to system libraries can reduce linking times by several seconds on "
"slow CPUs, but it requires manual testing depending on your Linux "
"distribution. Also, you may not be able to use system libraries for "
"everything due to bugs in the system library packages (or in the build "
"system, as this feature is less tested)."
msgstr ""

msgid ""
"To compile Godot with system libraries, install these dependencies *on top* "
"of the ones listed in the :ref:`doc_compiling_for_linuxbsd_oneliners`:"
msgstr ""

msgid "**Fedora**"
msgstr "**Fedora**"

msgid ""
"After installing all required packages, use the following command to build "
"Godot:"
msgstr ""

msgid ""
"You can view a list of all built-in libraries that have system alternatives "
"by running ``scons -h``, then looking for options starting with ``builtin_``."
msgstr ""

msgid ""
"When using system libraries, the resulting library is **not** portable "
"across Linux distributions anymore. Do not use this approach for creating "
"binaries you intend to distribute to others, unless you're creating a "
"package for a Linux distribution."
msgstr ""

#, fuzzy
msgid "Using Pyston for faster development"
msgstr "Використання Clang та LLD для пришвидшення розробки"

msgid ""
"You can use `Pyston <https://www.pyston.org/>`__ to run SCons. Pyston is a "
"JIT-enabled implementation of the Python language (which SCons is written "
"in). It is currently only compatible with Linux. Pyston can speed up "
"incremental builds significantly, often by a factor between 1.5× and 2×. "
"Pyston can be combined with Clang and LLD to get even faster builds."
msgstr ""

msgid ""
"Download the `latest portable Pyston release <https://github.com/pyston/"
"pyston/releases/latest>`__."
msgstr ""

msgid ""
"Extract the portable ``.tar.gz`` to a set location, such as ``$HOME/.local/"
"opt/pyston/`` (create folders as needed)."
msgstr ""

msgid ""
"Use ``cd`` to reach the extracted Pyston folder from a terminal, then run "
"``./pyston -m pip install scons`` to install SCons within Pyston."
msgstr ""

msgid ""
"To make SCons via Pyston easier to run, create a symbolic link of its "
"wrapper script to a location in your ``PATH`` environment variable::"
msgstr ""

msgid ""
"Instead of running ``scons <build arguments>``, run ``pyston-scons <build "
"arguments>`` to compile Godot."
msgstr ""

msgid ""
"If you can't run ``pyston-scons`` after creating the symbolic link, make "
"sure ``$HOME/.local/bin/`` is part of your user's ``PATH`` environment "
"variable."
msgstr ""

msgid ""
"Alternatively, you can run ``python -m pip install pyston_lite_autoload`` "
"then run SCons as usual. This will automatically load a subset of Pyston's "
"optimizations in any Python program you run. However, this won't bring as "
"much of a performance improvement compared to installing \"full\" Pyston."
msgstr ""

msgid "Translation status"
msgstr "Стан перекладу"
